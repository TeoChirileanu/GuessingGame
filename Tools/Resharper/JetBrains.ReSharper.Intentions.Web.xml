<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Intentions.Web</name>
    </assembly>
    <members>
        <member name="M:JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.GenerateInterfaceForJsVariable.GenerateInterfaceItemBase.CreateFile(JetBrains.ReSharper.Psi.IPsiSourceFile,JetBrains.ReSharper.Psi.Tree.ITreeNode,System.String)">
            <summary>
            Creates or gets exist file for generating interface 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.GenerateInterfaceForJsVariable.GenerateInterfaceItemBase.DoGenerateInterface(JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeResolveResult,JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.ITsDeclaredTypeUsage,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.ITsStatement,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            If specified type usage not exists or it is not 'any' or 'void' and is external;
            generate interface(not recursive) declaration after anchor; otherwise do nothing
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.GenerateInterfaceForJsVariable.GenerateInterfaceItemBase.IsConstructor(JetBrains.ReSharper.Psi.JavaScript.Tree.IFunctionExpression)">
            <summary>
            If function expression is similar on constructor returns true; otherwise false
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.GenerateInterfaceForJsVariable.TsDeclaredTypeUsageForInterfaceLookupItem">
            <summary>
            Lookup item for Ts declared interface type usage
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Intentions.JavaScript.QuickFixes.TypeScript.GenerateInterfaceForJsVariable.TsFunctionTypeUsageLookupItem">
            <summary>
            Lookup item for Ts function type usage
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IntentionsAspThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(IntentionsAspThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = IntentionsAspThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(IntentionsAspThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;IntentionsAspThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons.MasterPage">
             <summary>
            	<para>
            		<para>MasterPage Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons.MasterPage"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons.MasterPage.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
             SSrr?Lcc)|TT77iJltt}Cx1I3uoj5aSS
             kkrr?Lcc)|TT77iJltt}Cx1I3uoj5akk
             PPrr?Lcc)|TT77iJltt}Cx1I3uoj5aPP
             XX  gggggggggggggggggggggggg^^XX
             44  QQQQQQ  QQQQQQQQQQQQQQQQ^^44
             ww  $$$$$$$$$$$$$$$$$$$$$$$$^^ww
             dd  %%  %%  %%  %%  %%  %%  ^^dd
             GG  DDDDDDDDDDDDDDDDDDDDDDDD^^GG
             ##  AAAAAA  AAAAAAAAAAAAAAAA^^##
             RR  wwwwwwwwwwwwwwwwwwwwwwww^^RR
             DD  PPPPPP  PPPPPPPPPPPPPPPP^^DD
             DD  yyyyyyyyyyyyyyyyyyyyyyyy^^DD
             88    ```````..'----____,,""^^88
             WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IntentionsAspThemedIcons+MasterPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IntentionsAspThemedIcons.MasterPage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IntentionsAspThemedIcons.MasterPage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IntentionsAspThemedIcons.MasterPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons.MasterPage.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons.MasterPage">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons.MasterPage.Load_Color">
            <summary>Loads the image for Themed Icon MasterPage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons.MasterPage.Load_Gray">
            <summary>Loads the image for Themed Icon MasterPage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons.MasterPage.Load_GrayDark">
            <summary>Loads the image for Themed Icon MasterPage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.Resources.IntentionsAspThemedIcons.MasterPage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon MasterPage.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LiveTemplatesCssThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(LiveTemplatesCssThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = LiveTemplatesCssThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(LiveTemplatesCssThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;LiveTemplatesCssThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons.ScopeCss">
             <summary>
            	<para>
            		<para>ScopeCss Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons.ScopeCss"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons.ScopeCss.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                      `+X6c.  `)DDJ.         
                    `rw3__3bJlD6;;6Dl.       
                  `LHo, ```u89!''''!98l.     
                `c#y" `"*V8w/--------/w8t.   
              `)Dk^ .^+E8b/---_rppr_---/b8t. 
             T8U~`'~/Z%b+____?A%%%%A?____+b%t
             oBu_`_!+ANk=___"t800008t"___=kNV
              -a$5_`_/J#0E!,,,^}%%}^,,,!E0k, 
                _VgS,`,+tR$K!"""~~"""!K$k,   
                  _EgE"."""6$Z/""""/Z$E,     
                    _XgU^^UgR6$X\\X$P,       
                      _4gg#^  -a$$h,         
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LiveTemplatesCssThemedIcons+ScopeCss}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(LiveTemplatesCssThemedIcons.ScopeCss))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = LiveTemplatesCssThemedIcons.ScopeCss.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;LiveTemplatesCssThemedIcons.ScopeCss&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons.ScopeCss.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons.ScopeCss">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons.ScopeCss.Load_Color">
            <summary>Loads the image for Themed Icon ScopeCss theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons.ScopeCss.Load_Gray">
            <summary>Loads the image for Themed Icon ScopeCss theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons.ScopeCss.Load_GrayDark">
            <summary>Loads the image for Themed Icon ScopeCss theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.Resources.LiveTemplatesCssThemedIcons.ScopeCss.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ScopeCss.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:QuickFixesCssThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(QuickFixesCssThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = QuickFixesCssThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(QuickFixesCssThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;QuickFixesCssThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons.QuickFixeInfo">
             <summary>
            	<para>
            		<para>QuickFixeInfo Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons.QuickFixeInfo"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons.QuickFixeInfo.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
               9999999999999999999999999999  
               ww************************ww  
               ww++++++++++++++++++++++++ww  
               bb++++++++++    ++++++++++bb  
               ddrrrrrrrrrr    rrrrrrrrrrdd  
               HHrrrrrrrrrrrrrrrrrrrrrrrrHH  
               GGrrrrrrrrrr    rrrrrrrrrrGG  
               AA??????????    ??????????AA  
               OOLLLLLLLLLL    LLLLLLLLLLOO  
               ##cccccccccc    cccccccccc##  
               RRcccccccccc    ccccccccccRR  
               RRccccccccccccccccccccccccRR  
               RR||||||||||||||||||||||||RR  
               DDDDDDDDDDDDDDDDDDDDDDDDDDDD  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:QuickFixesCssThemedIcons+QuickFixeInfo}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(QuickFixesCssThemedIcons.QuickFixeInfo))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = QuickFixesCssThemedIcons.QuickFixeInfo.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;QuickFixesCssThemedIcons.QuickFixeInfo&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons.QuickFixeInfo.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons.QuickFixeInfo">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons.QuickFixeInfo.Load_Color">
            <summary>Loads the image for Themed Icon QuickFixeInfo theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons.QuickFixeInfo.Load_Gray">
            <summary>Loads the image for Themed Icon QuickFixeInfo theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons.QuickFixeInfo.Load_GrayDark">
            <summary>Loads the image for Themed Icon QuickFixeInfo theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.Resources.QuickFixesCssThemedIcons.QuickFixeInfo.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon QuickFixeInfo.</summary>
        </member>
    </members>
</doc>
