<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Feature.Services</name>
    </assembly>
    <members>
        <member name="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="!:JetBrains.UI.ThemedIcons.KoxiqysThemedIconsThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:KoxiqysThemedIconsThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="!:JetBrains.UI.ThemedIcons.KoxiqysThemedIconsThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(KoxiqysThemedIconsThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="!:JetBrains.UI.ThemedIcons.KoxiqysThemedIconsThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="!:JetBrains.UI.ThemedIcons.KoxiqysThemedIconsThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = KoxiqysThemedIconsThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(KoxiqysThemedIconsThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;KoxiqysThemedIconsThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalDisabled">
             <summary>
            	<para>
            		<para>BreakpointConditionalDisabled Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalDisabled"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalDisabled.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                       :~!+css(r!~:          
                    :+fz!~":..:_~!vnr,       
                  ;3}!:``':~++;,'``-!s2=`    
                `}e!.`-rbggggggggd):``;2C.   
                [S~..;%gggg    gggg$+.."ju`  
               !Er--=$QQQQQ    QQQQQQL--=E?  
               Fh^::E$$````````````$$A:::hS  
               u6^::XWW````````````WWm::,6E  
               r9L::r888888....8888887::\9v  
               `P6!__?A####----####RT__;h6.  
                .Pwr"";vhAAAAAAAA6s!""\X9:   
                 `)dec;~~!+c77)+=~~~L2A{.    
                   `!uOyT?+!~~!*?T2de*.      
                      `!|Fe4##waFT=.         
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:KoxiqysThemedIconsThemedIcons+BreakpointConditionalDisabled}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(KoxiqysThemedIconsThemedIcons.BreakpointConditionalDisabled))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = KoxiqysThemedIconsThemedIcons.BreakpointConditionalDisabled.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;KoxiqysThemedIconsThemedIcons.BreakpointConditionalDisabled&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalDisabled.Id">
            <inheritdoc cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalDisabled">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalDisabled.Load_Color">
            <summary>Loads the image for Themed Icon BreakpointConditionalDisabled theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalDisabled.Load_Gray">
            <summary>Loads the image for Themed Icon BreakpointConditionalDisabled theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalDisabled.Load_GrayDark">
            <summary>Loads the image for Themed Icon BreakpointConditionalDisabled theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalDisabled.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BreakpointConditionalDisabled.</summary>
        </member>
        <member name="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalEnabled">
             <summary>
            	<para>
            		<para>BreakpointConditionalEnabled Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalEnabled"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalEnabled.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                       :~!+css(r!~:          
                    :+fs;":.  .:_;7nr,       
                  ;3l;.     ``     `;s2=`    
                `}j;````.--------.````~2C.   
                [S^``.-----QQQQ-----.``,ju`  
               !Er''-::::::$$$$::::::-''!E?  
               Fh^--:::000000000000:::--:hS  
               u6~:::,,888888888888,,,::_6E  
               r9)"""______DDDD______"""+97  
               `P4\~~^"""""####"""""^~~!U6.  
                .Pwc;;;~~~~~~~~~~~~;;;r69:   
                 `)dV7\!!!;;;;;;;!!=TeA{.    
                   `!uOksTcr==+cTsSAe*.      
                      `!|Fe4##waFT=.         
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LuxabuxThemedIconsThemedIcons+BreakpointConditionalEnabled}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(LuxabuxThemedIconsThemedIcons.BreakpointConditionalEnabled))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = LuxabuxThemedIconsThemedIcons.BreakpointConditionalEnabled.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;LuxabuxThemedIconsThemedIcons.BreakpointConditionalEnabled&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalEnabled.Id">
            <inheritdoc cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalEnabled">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalEnabled.Load_Color">
            <summary>Loads the image for Themed Icon BreakpointConditionalEnabled theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalEnabled.Load_Gray">
            <summary>Loads the image for Themed Icon BreakpointConditionalEnabled theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalEnabled.Load_GrayDark">
            <summary>Loads the image for Themed Icon BreakpointConditionalEnabled theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointConditionalEnabled.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BreakpointConditionalEnabled.</summary>
        </member>
        <member name="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDisabled">
             <summary>
            	<para>
            		<para>BreakpointDisabled Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDisabled"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDisabled.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                       :~!+css(r!~:          
                    :+fs;":.  .:_;7nr,       
                  ;3l;.  `-_;;"-`  `;s2=`    
                `}j;```=PQQQQQQQQ6r.``~2C.   
                [S^``~D$$$$$$$$$$$$M!``,ju`  
               !Er''!B$$$$$$$$$$$$$$$?''!E?  
               Fh^--ENNNNNNNNNNNNNNNNd--:hS  
               u6~::6WWWWWWWWWWWWWWWWm::_6E  
               r9)""c8888888888888888s""+97  
               `P4\~~T#DDDDDDDDDDDDDi~~!U6.  
                .Pwc;;\Fw########bC+;;r69:   
                 `)dV7\!!r)J[[J|r!!=TeA{.    
                   `!uOksTcr==+cTsSAe*.      
                      `!|Fe4##waFT=.         
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HycesuzThemedIconsThemedIcons+BreakpointDisabled}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HycesuzThemedIconsThemedIcons.BreakpointDisabled))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HycesuzThemedIconsThemedIcons.BreakpointDisabled.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HycesuzThemedIconsThemedIcons.BreakpointDisabled&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDisabled.Id">
            <inheritdoc cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDisabled">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDisabled.Load_Color">
            <summary>Loads the image for Themed Icon BreakpointDisabled theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDisabled.Load_Gray">
            <summary>Loads the image for Themed Icon BreakpointDisabled theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDisabled.Load_GrayDark">
            <summary>Loads the image for Themed Icon BreakpointDisabled theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDisabled.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BreakpointDisabled.</summary>
        </member>
        <member name="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointEnabled">
             <summary>
            	<para>
            		<para>BreakpointEnabled Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointEnabled"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointEnabled.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                       :~!+css(r!~:          
                    :+fs;":.  .:_;7nr,       
                  ;3l;.     ``     `;s2=`    
                `}j;````.--------.````~2C.   
                [S^``.--------------.``,ju`  
               !Er''-::::::::::::::::-''!E?  
               Fh^--::::::::::::::::::--:hS  
               u6~:::,,,,,,,,,,,,,,,,,::_6E  
               r9)"""________________"""+97  
               `P4\~~^""""""""""""""^~~!U6.  
                .Pwc;;;~~~~~~~~~~~~;;;r69:   
                 `)dV7\!!!;;;;;;;!!=TeA{.    
                   `!uOksTcr==+cTsSAe*.      
                      `!|Fe4##waFT=.         
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FapyjyqThemedIconsThemedIcons+BreakpointEnabled}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FapyjyqThemedIconsThemedIcons.BreakpointEnabled))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FapyjyqThemedIconsThemedIcons.BreakpointEnabled.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FapyjyqThemedIconsThemedIcons.BreakpointEnabled&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointEnabled.Id">
            <inheritdoc cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointEnabled">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointEnabled.Load_Color">
            <summary>Loads the image for Themed Icon BreakpointEnabled theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointEnabled.Load_Gray">
            <summary>Loads the image for Themed Icon BreakpointEnabled theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointEnabled.Load_GrayDark">
            <summary>Loads the image for Themed Icon BreakpointEnabled theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointEnabled.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BreakpointEnabled.</summary>
        </member>
        <member name="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalDisabled">
             <summary>
            	<para>
            		<para>BreakpointTraceConditionalDisabled Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalDisabled"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalDisabled.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                          `;C3=`             
                        `!37,,7u*`           
                      `!uJ_````_J2+`         
                    `!2i^``"UU"``^ij+`       
                  `=j}~..^PggggP^..~}y+`     
                `=yF~--^kgg    ggk^--~Far`   
              `\V1;--~VQQQQ    QQQQV~--;1kr` 
             *kf;::~S$$````````````$$S~::;fE?
             TXi~::+wWW````````````WWw+::~iXs
              -T4}~::+68888....88886+::~}4z: 
                -7b];,,+UDD----DDU+,,;]b}:   
                  -vbC;""+kmmmmk+"";CbF:     
                    -Jd3!^^raar^^!3d]:       
                      -sOu=~~~~=uOC:         
                        -lRo\\oR3:           
                          -{##u:             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WybikanThemedIconsThemedIcons+BreakpointTraceConditionalDisabled}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WybikanThemedIconsThemedIcons.BreakpointTraceConditionalDisabled))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WybikanThemedIconsThemedIcons.BreakpointTraceConditionalDisabled.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WybikanThemedIconsThemedIcons.BreakpointTraceConditionalDisabled&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalDisabled.Id">
            <inheritdoc cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalDisabled">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalDisabled.Load_Color">
            <summary>Loads the image for Themed Icon BreakpointTraceConditionalDisabled theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalDisabled.Load_Gray">
            <summary>Loads the image for Themed Icon BreakpointTraceConditionalDisabled theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalDisabled.Load_GrayDark">
            <summary>Loads the image for Themed Icon BreakpointTraceConditionalDisabled theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalDisabled.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BreakpointTraceConditionalDisabled.</summary>
        </member>
        <member name="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalEnabled">
             <summary>
            	<para>
            		<para>BreakpointTraceConditionalEnabled Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalEnabled"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalEnabled.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                          `;Cn/`             
                        `!3T--Tu*`           
                      `!2J:    :J2+`         
                    `=2s,  ````  ,sj+`       
                  `=e}"```.----.```"}y+`     
                `/SF~...---QQQQ---...~FVr`   
              `\V1;----::::$$$$::::----;1Er` 
             +En;::::::BBBBBBBBBBBB::::::;nP?
             T6}~:::,,,888888888888,,,:::~}6s
              -79[;"""_____DDDD_____""";[9z: 
                -7bf!^^^"""####"""^^^!fb{:   
                  -Jpu\;;~~~~~~~~;;\upF:     
                    -Jd2+;;;~~;;;+2dt:       
                      -iOer!!!!reOC:         
                        -lRVccVR3:           
                          -{DDu:             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:GiraqahThemedIconsThemedIcons+BreakpointTraceConditionalEnabled}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(GiraqahThemedIconsThemedIcons.BreakpointTraceConditionalEnabled))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = GiraqahThemedIconsThemedIcons.BreakpointTraceConditionalEnabled.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;GiraqahThemedIconsThemedIcons.BreakpointTraceConditionalEnabled&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalEnabled.Id">
            <inheritdoc cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalEnabled">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalEnabled.Load_Color">
            <summary>Loads the image for Themed Icon BreakpointTraceConditionalEnabled theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalEnabled.Load_Gray">
            <summary>Loads the image for Themed Icon BreakpointTraceConditionalEnabled theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalEnabled.Load_GrayDark">
            <summary>Loads the image for Themed Icon BreakpointTraceConditionalEnabled theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceConditionalEnabled.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BreakpointTraceConditionalEnabled.</summary>
        </member>
        <member name="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceDisabled">
             <summary>
            	<para>
            		<para>BreakpointTraceDisabled Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceDisabled"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceDisabled.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                          `;}F!`             
                        `;F)--)t=`           
                      `;1T:    :TI=`         
                    `!f7:  :kk:  :7u\`       
                  `!uv,``:agggga:``,v2*`     
                `!2s"``,eQQQQQQQQe,``"s5+`   
              `=5l^``_j$$$$$$$$$$$$j_``^le+` 
             =e{~.."2NNNNNNNNNNNNNNNN2"..~{ar
             )E7_--!X8888888888888888X!--_7Ev
              -|hv"--!ZDDDDDDDDDDDDZ!--"vhJ: 
                -T6s^::!kRRRRRRRRk!::^s6s:   
                  -T9l~::!edddde!::~l9z:     
                    -7bF;::=oo=::;Fb{:       
                      -JH1;,,,,;1H[:         
                        -sA3;;3A1:           
                          -immf:             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ZowynogThemedIconsThemedIcons+BreakpointTraceDisabled}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ZowynogThemedIconsThemedIcons.BreakpointTraceDisabled))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ZowynogThemedIconsThemedIcons.BreakpointTraceDisabled.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ZowynogThemedIconsThemedIcons.BreakpointTraceDisabled&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceDisabled.Id">
            <inheritdoc cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceDisabled">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceDisabled.Load_Color">
            <summary>Loads the image for Themed Icon BreakpointTraceDisabled theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceDisabled.Load_Gray">
            <summary>Loads the image for Themed Icon BreakpointTraceDisabled theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceDisabled.Load_GrayDark">
            <summary>Loads the image for Themed Icon BreakpointTraceDisabled theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceDisabled.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BreakpointTraceDisabled.</summary>
        </member>
        <member name="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceEnabled">
             <summary>
            	<para>
            		<para>BreakpointTraceEnabled Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceEnabled"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceEnabled.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                          `;Cn/`             
                        `!3T--Tu*`           
                      `!2J:    :J2+`         
                    `=2s,  ````  ,sj+`       
                  `=e}"```.----.```"}y+`     
                `/SF~...----------...~FVr`   
              `\V1;----::::::::::::----;1Er` 
             +En;::::::::::::::::::::::::;nP?
             T6}~:::,,,,,,,,,,,,,,,,,,:::~}6s
              -79[;"""______________""";[9z: 
                -7bf!^^^""""""""""^^^!fb{:   
                  -Jpu\;;~~~~~~~~;;\upF:     
                    -Jd2+;;;~~;;;+2dt:       
                      -iOer!!!!reOC:         
                        -lRVccVR3:           
                          -{DDu:             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:MeruzezThemedIconsThemedIcons+BreakpointTraceEnabled}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(MeruzezThemedIconsThemedIcons.BreakpointTraceEnabled))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = MeruzezThemedIconsThemedIcons.BreakpointTraceEnabled.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;MeruzezThemedIconsThemedIcons.BreakpointTraceEnabled&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceEnabled.Id">
            <inheritdoc cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceEnabled">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceEnabled.Load_Color">
            <summary>Loads the image for Themed Icon BreakpointTraceEnabled theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceEnabled.Load_Gray">
            <summary>Loads the image for Themed Icon BreakpointTraceEnabled theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceEnabled.Load_GrayDark">
            <summary>Loads the image for Themed Icon BreakpointTraceEnabled theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointTraceEnabled.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BreakpointTraceEnabled.</summary>
        </member>
        <member name="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDeleted">
             <summary>
            	<para>
            		<para>BreakpointDeleted Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDeleted"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDeleted.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                       :;/?7ttvL/;,          
                    :re1!~:-``':^!lyc"       
                  ;eI!'     ``     `;[V+`    
                `IK!`  `..'''''''.``  ~Vo.   
                uU^```--------------```:Ee`  
               =4r``.::::::::::::::::.``!4)  
               u8XD8w+:::::=u%ggg:::::..-bh  
               RQF~;kQh~\28%27XQp,,,,:--:p6  
               2$A\::?8$Wj+!h$b+""""":::=di  
               `H8$dc^~r^/U$br^^^^^^_::~wb.  
                -RMWk=;;;k0R!~~~~~^"__/bd:   
              `|DDC+!LwD1=|m8[~~^^^~ce#C.    
             /8bs*\LX88d#8ecu8Ov?Ty#k+.      
             U8ir)kDE,`!Tk#8X168d7\.         
             `[#DD2^       -v#DDD            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:QufaqisThemedIconsThemedIcons+BreakpointDeleted}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(QufaqisThemedIconsThemedIcons.BreakpointDeleted))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = QufaqisThemedIconsThemedIcons.BreakpointDeleted.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;QufaqisThemedIconsThemedIcons.BreakpointDeleted&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDeleted.Id">
            <inheritdoc cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDeleted">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDeleted.Load_Color">
            <summary>Loads the image for Themed Icon BreakpointDeleted theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDeleted.Load_Gray">
            <summary>Loads the image for Themed Icon BreakpointDeleted theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDeleted.Load_GrayDark">
            <summary>Loads the image for Themed Icon BreakpointDeleted theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.BreakpointDeleted.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BreakpointDeleted.</summary>
        </member>
        <member name="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStackActiveFrame">
             <summary>
            	<para>
            		<para>CallStackActiveFrame Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStackActiveFrame"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStackActiveFrame.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
            
            
               222222      22Y/'
               uu  uu      uu’\2|,
               SS  uS      SS  `=YZ;`
               ja``:zEaaaaaaa`````:7aT_
               (a=``````````````````'/EY=
               'aj_```````````````````.=IaL
                ‘EP;‘..................^sVs
                 `!oPs;"_‘’'‘’'‘’'‘’_*EP\-
                    ’+|Ya4444'‘’'’~|92=
                           GG___+j4z_
                           bb~|hV*`
                           XXX2~
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:SeqepycThemedIconsThemedIcons+CallStackActiveFrame}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(SeqepycThemedIconsThemedIcons.CallStackActiveFrame))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = SeqepycThemedIconsThemedIcons.CallStackActiveFrame.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;SeqepycThemedIconsThemedIcons.CallStackActiveFrame&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStackActiveFrame.Id">
            <inheritdoc cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStackActiveFrame">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStackActiveFrame.Load_Color">
            <summary>Loads the image for Themed Icon CallStackActiveFrame theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStackActiveFrame.Load_Gray">
            <summary>Loads the image for Themed Icon CallStackActiveFrame theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStackActiveFrame.Load_GrayDark">
            <summary>Loads the image for Themed Icon CallStackActiveFrame theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStackActiveFrame.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CallStackActiveFrame.</summary>
        </member>
        <member name="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStack">
             <summary>
            	<para>
            		<para>CallStack Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStack"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStack.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
               XXXXXXXXXXXXXXXXXXXX          
               RR                RR          
               ##  ____________  ##XXXX      
               00  ____________  00::RR      
               MM  ''''''''''''  MM__##XXXX  
               $$``------------``$$__00::RR  
               QQ````````````````QQ''MM__##  
               gggggggggggggggggggg..$$__00  
                   QQ````````````````QQ''MM  
                   gggggggggggggggggggg..$$  
                       QQ````````````````QQ  
                       gggggggggggggggggggg  
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:GoqomiwThemedIconsThemedIcons+CallStack}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(GoqomiwThemedIconsThemedIcons.CallStack))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = GoqomiwThemedIconsThemedIcons.CallStack.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;GoqomiwThemedIconsThemedIcons.CallStack&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStack.Id">
            <inheritdoc cref="T:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStack">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStack.Load_Color">
            <summary>Loads the image for Themed Icon CallStack theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStack.Load_Gray">
            <summary>Loads the image for Themed Icon CallStack theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStack.Load_GrayDark">
            <summary>Loads the image for Themed Icon CallStack theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons.CallStack.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CallStack.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.IHighlightingsCleanupItem.IsAvailable(JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProfile)">
            <summary>
            Check if this cleanup item is available according to profile
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.IHighlightingsCleanupItem.IsReanalysisRequired">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value that determines whether file analysis results should be dropped when <see cref="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.IHighlightingsCleanupItem.Execute"/> is called. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.IHighlightingsCleanupItem.IsValid">
            <summary>
            Check if corresponding tree elements are valid
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.IHighlightingsCleanupItem.Execute">
            <summary>
            Proceed with cleanup
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanup.IsAvailable(JetBrains.ReSharper.Psi.IPsiSourceFile,JetBrains.DocumentModel.DocumentRange)">
            <summary>
            Precise check of code clenup execution availability for <see cref="!:range"/> in <see cref="!:sourceFile"/>
            </summary>
            <param name="sourceFile">File being cleaned up</param>
            <param name="range">Range beain cleaned up, Invalid in case of whole file</param>
            <returns>True, if available</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanup.IsSuitableFile(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Roughly checks whether code cleanup may be executed over <see cref="!:projectFile"/>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupModuleAttribute.ModulesBefore">
            <summary>
            psiModules which should precede this
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupModuleAttribute.ModulesAfter">
            <summary>
            psiModules which should follow this
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProfile.GetSettingCopy``1(JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupOptionDescriptor{``0})">
            <summary>
            In opposite to <see cref="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProfile.GetSetting(JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupOptionDescriptor)"/> each time returns new instance of the <typeparamref name="T"/> value.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.LanguageType">
            <summary>
            Get the language this module can operate
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.Descriptors">
            <summary>
            Get the collection of option descriptors
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.IsAvailableOnSelection">
            <summary>
            Check if this module is available on selection, or on the whole file
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.SetDefaultSetting(JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProfile,JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanup.DefaultProfileType)">
            <summary>
            Get default setting for given profile type
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.IsAvailable(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Check if this module can handle given project file
            </summary>
            <param name="sourceFile"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.Process(JetBrains.ReSharper.Psi.IPsiSourceFile,JetBrains.DocumentModel.IRangeMarker,JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProfile,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Process clean-up on file. if <paramref name="rangeMarker"/>
            is <see cref="F:JetBrains.DocumentModel.DocumentRange.InvalidRange"/>, then process the whole file
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.DeclaredElementLookupItem">
            <summary>
            Declared element code completion context item
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.DeclaredElementLookupItem`2.CustomCaretOffset">
            <summary>
            Where to move caret after completion. Leave offset invalid to use default behavior.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.DeclaredElementLookupItem`2.Suffix">
            <summary>
            Suffix to playback. Is set only after completion.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItem">
            <summary>
            Code completion result item which simply completes some text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItemBase">
            <summary>
            Class for implementing advanced lookup items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItemBase.Image">
            <summary>
            Gets item image
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItemBase.DisplayTypeName">
            <summary>
            Name of the type
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItemBase.Shrink">
            <summary>
            Shrinks the name of the item
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItemBase.Unshrink">
            <summary>
            Cancels shrink of the name
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItemBase.Accept(JetBrains.TextControl.ITextControl,JetBrains.DocumentModel.DocumentRange,JetBrains.ReSharper.Feature.Services.Lookup.LookupItemInsertType,JetBrains.ReSharper.Feature.Services.Lookup.Suffix,JetBrains.ProjectModel.ISolution,System.Boolean)">
            <summary>
            Completes the item at the specified range.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TypeLookupItem">
            <summary>
            Lookup item for type
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TypeNameCodeCompletionLookupItem">
            <summary>
            Code completion result item for type name completion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.IDescriptionProvidingLookupItem">
            <summary>
            Interface for providing descriptions from lookup lists or other places
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem">
            <summary>
            Represents a lookup item
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.Placement">
            <summary>
            Determines how the item should be placed in code completion list.
            <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupItemPlacement"/>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.AcceptIfOnlyMatched(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupItemAcceptanceContext)">
            <summary>
            Gets flag indicating whether this item should be automatically completed if it is the only in a list
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.Match(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.PrefixMatcher,JetBrains.TextControl.ITextControl)">
            <summary>
            Returns value indicating whether the item matches a given prefix
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.Accept(JetBrains.TextControl.ITextControl,JetBrains.DocumentModel.DocumentRange,JetBrains.ReSharper.Feature.Services.Lookup.LookupItemInsertType,JetBrains.ReSharper.Feature.Services.Lookup.Suffix,JetBrains.ProjectModel.ISolution,System.Boolean)">
            <summary>
            Accepts the item at the specified range.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.Image">
            <summary>
            Gets lookup item image
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.DisplayName">
            <summary>
            Gets lookup item display name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.DisplayTypeName">
            <summary>
            Gets type display name 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.GetVisualReplaceRange(JetBrains.DocumentModel.DocumentRange)">
            <summary>
            Gets visual replace range
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.CanShrink">
            <summary>
            Determines whether the item can decrease its width
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.Shrink">
            <summary>
            Shrinks lookup item presentation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.Unshrink">
            <summary>
            Restores unshrinked lookup item presentation
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.IsDynamic">
            <summary>
            Indicates whether this item is dynamic and needs to be re-calculated on typing
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.IgnoreSoftOnSpace">
            <summary>
            Indicates whether this lookup item does not require soft lookup on space
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.IParameterInfoCandidatesProvider">
            <summary>
            Interface for providing parameter info contexts from lookup lists or other places
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupItemRelevance">
            <summary>
              Indicates lookup item relevance. First 16 bits and last 16 bits are reserved for general relevance properties,
            while 32 bit in the middle are reserved for language-specific relevance properties
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemBehavior.AcceptIfOnlyMatched(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupItemAcceptanceContext)">
            <summary>
            Gets flag indicating whether this item should be automatically completed if it is the only in a list
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemBehavior.Accept(JetBrains.TextControl.ITextControl,JetBrains.DocumentModel.DocumentRange,JetBrains.ReSharper.Feature.Services.Lookup.LookupItemInsertType,JetBrains.ReSharper.Feature.Services.Lookup.Suffix,JetBrains.ProjectModel.ISolution,System.Boolean)">
            <summary>
            Accepts the item at the specified range.
            nameRange is a part of a corresponding document range, not a tree!
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemInfo.IsDynamic">
            <summary>
            Indicates whether this item is dynamic and needs to be re-calculated on typing
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemMatcher.Match(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.PrefixMatcher,JetBrains.TextControl.ITextControl)">
            <summary>
            Returns value indicating whether the item matches a given prefix
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemMatcher.IgnoreSoftOnSpace">
            <summary>
            Indicates whether this lookup item does not require soft lookup on space
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemMatcher.TextToMatch">
            <summary>
            Open API. The string that is used to match the item.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.Image">
            <summary>The icon of the lookup list item</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.DisplayName">
            <summary>Lookup list item text</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.DisplayTypeName">
            <summary>Text displayed on the right side of lookup list</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.GetVisualReplaceRange">
            <summary>Document range that is highlighted when item is hard selected in lookup list</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.CanShrink">
            <summary>Determines whether the item can decrease its width</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.Shrink">
            <summary>Shrinks lookup item presentation</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.Unshrink">
            <summary>Restores unshrinked lookup item presentation</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.IAggregateCompletionListFilter">
            <summary>
              Marker interface to distinguish aggregate filters
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Match.MatchingResult.AdjustedScore">
            <summary>
            Usually to equals to <code>0 - (int)</code> <see cref="T:JetBrains.Text.MatcherScore"/> with some adjustements
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.ReplaceRange">
            <summary>Range that is replaced when replace completion is applied</summary>
            <remarks>Should not be used to search for nodes in lookup items accept,
            since it's not guaranteed to contain any valid or complete language construct</remarks>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.InsertRange">
            <summary>Range that is replaced when insert completion is applied</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.CustomPrefixRule">
            <summary>
            By default code completion lookup prefix text is computed simply by taking document's text at <see cref="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.InsertRange"/>.
            This works well except for languages that have identifier "mangling" ("verbatim" identifiers) - for example, '@if' in C#
            or '[property]' in VB.NET are valid identifiers. This property can be used to provide custom de-mangling rule that will
            be applied to prefix text before filtering lookup items.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.WithInsertRange(JetBrains.DocumentModel.DocumentRange)">
            <summary>
            Creates the copy of this lookup ranges with modified <see cref="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.InsertRange"/> value
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.WithReplaceRange(JetBrains.DocumentModel.DocumentRange)">
            <summary>
            Creates the copy of this lookup ranges with modified <see cref="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.ReplaceRange"/> value
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.WithCustomPrefixRule(JetBrains.ReSharper.Feature.Services.CodeCompletion.PrefixTextRule)">
            <summary>
            Creates the copy of this lookup ranges with provided <see cref="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.CustomPrefixRule"/>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.SpecificCodeCompletionContext.Language">
            Language for item provider for this context.
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.AsyncLookupParameterInfoHandler">
            <summary>
            Parameter info handler for lookup lists
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.IListItemPainter`1">
            <summary>
            Interface for painters used in conjunction with ListForm
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.CurrentItemBounds">
            <summary>
            Gets bounds of the current item, in client coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.Bounds">
            <summary>
            Gets bounds of the window
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.ShowBefore">
            <summary>
            Event which is raised immediately before the lookup window is shown
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.ShowAfter">
            <summary>
            Event which is raised immediately after the lookup window is shown
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.WindowClose">
            <summary>
            Event which is raised before the lookup window closes
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.WindowHidden">
            <summary>
            Event which is raised before the lookup window is hidden
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.Scrolled">
            <summary>
            Event which is raised when lookup window is scrolled
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.WindowResized">
            <summary>
            Event which is raised when lookup window is resized
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LazyLookupItemPainter">
            <summary>
            Represents lazy item painter, which doesn't measure, shrink ALL items, 
            but do it for visible only. Side effect of this painter is MaxItemWidth occurs 
            to be determined during user operations, so it's required to track current 
            MaxItemWidth provided by this painter to accomadate realted UI.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupBase.myItemsByLocation">
            <summary>The complete list of lookup items sorted by name</summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupBase.ItemCompleted">
            <summary>Raised when an item is completed</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemAnchoringRect">
            <summary>
            Tracks dynamically the currently selected item bounds within the given lookup window, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupBase)">
            <summary>
            Creates the instance.
            </summary>
            <param name="lifetime"></param>
            <param name="lookup">Lookup window whose selection to track.</param>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemAnchoringRect.Lookup">
            <summary>
            The owning lookup window.
            May be <c>Null</c> if already disposed.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemAnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchoring rectangle as it gets dirty.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter">
            <summary>
            Paints code completion items
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter.myItems">
            <summary>
            List of items
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter.myLeftAlign">
            <summary>
            The flag indicating whether to align types to the left
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter.myMaxNameWidth">
            <summary>
            Maximum left size width
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter.myRenderParams">
            <summary>
            The lookup item text rendering aspect.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter.LeftAlign">
            <summary>
            Gets or sets the left align flag
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter.RenderParams">
            <summary>
            Gets the rendering aspect for the lookup list items.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter.ShrinkLookupListItemNameToWidth(JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem,System.Int32,System.Drawing.Graphics)">
            <summary>
            Shrinks name text to the given width.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem.myImage">
            <summary>The image</summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem.myNameText">
            <summary>The rich presentation of name</summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem.myTypeText">
            <summary>Rich presentation of the type</summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem.myItem">
            <summary>The associated context item</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem.CancelShrink">
            <summary>
              Cancels all shrinks
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem.Shrink">
            <summary>
              Shrinks the name a bit.
            </summary>
            <returns>Whether there was any shrinking. The <see cref="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem.RichText" /> width must decrease if <c>True</c>.</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager">
            <summary>
            Tracks statistics of choosing members in completion.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.ItemStatistics.#ctor(JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityIntList)">
            <summary>
            API for settings upgrade...
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityIntList.myPriorities">
            <summary>
            Maps items to their priorities
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityIntList.#ctor(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            API for setttings upgrade...
            </summary>
            <param name="priorities"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityIntList.IncreasePriority(System.Int32)">
            <summary>
            Increases priority of the specified item by 1
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.LanguageSpecificIntellisenseManager.GetIntellisenseEnabled(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Returns value of language specific 'enable' setting when global intellesense flag is set to per-technology value. 
            </summary>
            <param name="boundSettingsStore"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.LanguageSpecificIntellisenseManager.GetAutoppopupEnabled(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Checks:
            1. Global intellisense enable property
            2. Language specific intellisense enable property
            3. Global autopopup enable property
            </summary>
            <param name="contextBoundSettingsStore"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.AutocompletionBehaviour">
            <summary>
            Enumerates possible auto-insert mode forced by context
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings">
            <summary>
            Maintains code completion options for 6.0 version
            This settings class is obsolete. Use <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseSettingsKey"/> settings tree.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoPopupAfterDot">
            <summary>
            Use technology specific settings rooted at <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoPopupAfterNew">
            <summary>
            Use technology specific settings rooted at <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoPopupOnIdentifier">
            <summary>
            Use technology specific settings rooted at <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoCompleteBasicCompletion">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoCompleteClassNameCompletion">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoCompleteSmartCompletion">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoPopupDelay">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.MiddleMatchingCompletion">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/> for general usage
            For use in code completion get it from: <seealso cref="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CodeCompletionContext.IdentifierMatchingStyle"/>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Impl.CodeCompletionContextProviderBase.CalculateDefaultRanges(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CodeCompletionContext)">
            <summary>
            Calculates ranges analysing letters and '_' to the left and to the right of the caret.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.AutomaticCodeCompletionStrategyEx.MatchText(JetBrains.ReSharper.Feature.Services.CodeCompletion.IAutomaticCodeCompletionStrategy,JetBrains.TextControl.ITextControl,System.Int32,System.Func{System.String,System.Boolean},System.Boolean)">
            <summary>
            Matches text to the left of the caret.
            Length of string passed to <paramref name="matcher"/> is guaranted to be <paramref name="length"/>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionType">
            <summary>
            Defines possible code completion types
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionUtil.IterateStaticMembers(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CodeCompletionContext,JetBrains.ReSharper.Psi.IDeclaredType,JetBrains.ReSharper.Psi.ITypeElement,JetBrains.ReSharper.Psi.Resolve.ISubstitution,JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Collections.Generic.IList{JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType},System.Func{JetBrains.ReSharper.Psi.ITypeMember,System.Boolean})">
            <summary>
            Enumerate static members in given type element, which type is given,
            and which are visible from given source point
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.NamesCorellationUtil">
            <summary>
            Completion policy for smart completion. Takes into account name corellation, etc.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingSourceAttribute">
            <summary>
            Marks classes which emit highlightings.
            </summary>
            <remarks>
            The attribute is used by context action "Annotate highlighting types" available on element problem analyzers.
            </remarks>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ConfigurableSeverityLanguagesAttribute.ConfigurableSeverityId">
            <summary>
            ID of configurable severity definition
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ConfigurableSeverityLanguagesAttribute.Languages">
            <summary>
            Languages for which this highlighting is
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IdeaAttributes.IdeaHighlightingAttributeIds">
            <summary>
            Contains base IDEA highlighter attributes IDs (or TextAttributesKeys in the IDEA's terms) with additional 'IDEA_' prefix.
            Use these keys as a fallback if there's no suitable fallback in ReSharper or highlighters belong to a language supported both in R# and IJ,
            so there's no need to have different colors and settings for them.
            Otherwise just use ReSharper AttributeId as a fallback.
            this will allow you to use IDEA's color scheme system and your highlighters will be colored even though a color scheme
            (e.g. downloaded from color-themes.com) doesn't specify colors for your highlighter specifically.
            For Language-specific IDEA attributes see Idea*original_name*AttributeIds.cs
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.IdeaAttributes.IdeaHighlightingAttributeIds.IDEA_PREFIX">
            <summary>
            Prefix to indicate that a text attribute belongs to IDEA
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IConditionalElementProblemAnalyzer">
            <summary>
            Indicates conditionally enabled problem analyzer.
            For example, this interface allows turning off computationally/memory expensive analyzers in under-caret highlightings provider.
            You can compute something from <see cref="T:JetBrains.ReSharper.Psi.Tree.IFile"/> parameter or check for <see cref="P:JetBrains.ReSharper.Feature.Services.Daemon.ElementProblemAnalyzerData.RunKind"/> value.
            </summary>
            <remarks>
            Special treatment of slow analyzers is needed to avoid performance degradation because
            of executing them twice -- by daemon error stage and under-caret highlightings provider.
            </remarks>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ILiveCustomConfigurableSeverityItemProvider.ConfigurableSeverityItems">
            <summary>
            A map from ID to pair of language and the item. Language can be null.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingOverlapResolver.Compare(JetBrains.ReSharper.Feature.Services.Daemon.HighlightingOverlapResolver.Highlighting,JetBrains.ReSharper.Feature.Services.Daemon.HighlightingOverlapResolver.Highlighting)">
            <summary>Compare highlightings</summary>
            <returns>0 if both should be present. -1 if <paramref name="i"/> should be removed, +1 if <paramref name="j"/> should be removed</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingOverlapResolver.ResolveOverlappedPreviousHighlightings(System.Collections.Generic.IReadOnlyCollection{JetBrains.ReSharper.Feature.Services.Daemon.HighlightingInfo},System.Boolean,JetBrains.DocumentModel.DocumentRange,JetBrains.ReSharper.Feature.Services.Daemon.HighlightingOverlapResolver.Layer,JetBrains.Application.Settings.IContextBoundSettingsStore,System.Func{System.Boolean})">
            <summary>
            Resolve overlapping highlighters. Receives new highlighters in given range
            (either full document, if <paramref name="fullRehighlight"/> is <c>true</c>,
            and returns infos to be added and infos to be deleted.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.OptionPages.CodeInspectionPage">
            <summary>
            Root options page for the global per-language options.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState">
            <summary>
            Normal state flow is the following:
            INVALIDATED->IN_PROGRESS_LOCAL->UP_TO_DATE->IN_PROGRESS_GLOBAL->UP_TO_DATE
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.HIDDEN">
            <summary>
            Daemon doesn't need error stripe for given document.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.UNSUPPORTED">
            <summary>
            Daemon needs error stripe, but doesn't support error state
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.DISABLED">
            <summary>
            Daemon is switched off for given document
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.INVALIDATED">
            <summary>
            Daemon state is not valid for this document (i.e. something changed since last analysis)
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.IN_PROGRESS_LOCAL_FAST">
            <summary>
            Daemon analysis is currently running local stages
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.IN_PROGRESS_LOCAL_SLOW">
            <summary>
            Daemon analysis is currently running local long-running stages
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.IN_PROGRESS_GLOBAL">
            <summary>
            Daemon analysis is currently running global SWA stage
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.UP_TO_DATE">
            <summary>
            Daemon state is up-to-date for given document
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.DefaultDaemon.State(JetBrains.DocumentModel.IDocument)">
            <summary>
            Get the daemon state for the given document
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DefaultDaemon.DaemonStateChanged2">
            <summary>
            Raised when DaemonState of any document is changed
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.ICompilerWarningProcessor">
            <summary>
            Allows change the severity of compiler-specific highlighting according to project settings (such as "warning level" or "treat warnings as errors").
            Applied when adding highlightings to <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.FilteringHighlightingConsumer"/> implementation of <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingConsumer"/> consumer interface
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.ICompilerWarningProcessor.PreProcess(System.Collections.Generic.IReadOnlyCollection{System.String},JetBrains.ReSharper.Psi.Tree.IFile)">
            <summary>
            Language-dependent preprocessor of highlighting with specified compiler ID.
            Return (null,null) in out parameters to use default severity anf attribute.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.ICompilerWarningProcessor.ProcessCompilerWarning(JetBrains.ReSharper.Psi.Tree.IFile,JetBrains.ReSharper.Feature.Services.Daemon.HighlightingInfo,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Language-dependent processing of highlighting with specified compiler ID.
            Returns a highlighting with required overrides e.g. lifted to errors based on compiler settings or null if the highlighting should be suppressed
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IInheritanceMarkOnGutter.OnClick(JetBrains.UI.Icons.IconId)">
            <summary>
            Triggers when the gutter icon gets clicked.
            Passes the icon that should be painted in the popup menu caption in case there's more than one alternative.
            </summary>
            <param name="iconId"></param>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonProcessBase.LastRunTimestamp">
            <summary>
            Aggregated timestamp of <see cref="T:JetBrains.ReSharper.Psi.IPsiSourceFile"/> for which daemon was completed
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingSettingsManager.HasNecessarySeverity(JetBrains.ReSharper.Feature.Services.Daemon.Severity,JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting,JetBrains.ReSharper.Psi.IPsiSourceFile,JetBrains.ProjectModel.ISolution,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Check if any of the given highlighting list has severity equals or higher than <paramref name="severity"/>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IgnoreWarningsRegionsInfo">
            <summary>Info about regions where to ignore warnings or errors</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageAttribute">
            <summary>
            Marks the class as a daemon stage for automatic registration
            The marked clas should have default constructor and should implement 
            <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStage"/> interface
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageAttribute.InternalMode">
            <summary>
            If set to <c>true</c>, then daemon stage will be run only in internal mode
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageAttribute.GlobalAnalysisStage">
            <summary>
            If set to <c>true</c>, then daemon stage will be run after analysing the whole solution
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageAttribute.LongRunningStage">
            <summary>
            If set to <c>true</c>, then daemon stage will be run after non-longrunning stages
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageAttribute.StagesBefore">
            <summary>
            Stages which should precede this
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageAttribute.StagesAfter">
            <summary>
            Stages which should follow this
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.Highlightings">
            <summary>Highlightings to be added to the editor</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.FullyRehighlighted">
            <summary>
            Indicates that the whole file was rehighlighted.
            If file was incrementally rehighlighted, then the range should be returned in <see cref="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.RehighlightedRange"/>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.RehighlightedRange">
            <summary>
            Range in the document for which the highlighting was recalculated. 
            All old highlightings that are inside this range will be removed 
            from the editor and replaced with the returned ones.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.Layer">
            <summary>
            Highlighting key modifier, so one stage could produce highlgihtings for different layers. Usually shouldn't be used
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.#ctor(System.Collections.Generic.IReadOnlyCollection{JetBrains.ReSharper.Feature.Services.Daemon.HighlightingInfo})">
            <summary>Set highlightings for the whole documents</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.#ctor(System.Collections.Generic.IReadOnlyCollection{JetBrains.ReSharper.Feature.Services.Daemon.HighlightingInfo},System.Int32)">
            <summary>Set highlightings for the whole documents</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.#ctor(System.Collections.Generic.IReadOnlyCollection{JetBrains.ReSharper.Feature.Services.Daemon.HighlightingInfo},JetBrains.DocumentModel.DocumentRange)">
            <summary>Set highlightings for the specific text range</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.DaemonUtil.GetHighlightingRange(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Translates tree node range into document. Returns valid range if there if treerange *covers* single document range, 
            and this is the difference from <see cref="M:JetBrains.ReSharper.Psi.Tree.TreeNodeExtensions.GetDocumentRange(JetBrains.ReSharper.Psi.Tree.ITreeNode)"/>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.ErrorStripeRequest">
            <summary>
            Defines the requirements for each stage
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.ErrorStripeRequest.NONE">
            <summary>
            The stage doesn't require error stripe at all
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.ErrorStripeRequest.STRIPE">
            <summary>
            Stage requires error stripe, but can't produce warnings/errors
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.ErrorStripeRequest.ERRORS">
            <summary>
            Stage can produce warnings/errors
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.ErrorStripeRequest.STRIPE_AND_ERRORS">
            <summary>
            The stage requires error stripe and can produce warnings/errors
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingInfo">
            <summary>
            Highlighting information which should be returned form stage <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcess"/>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemon.ForceReHighlight(JetBrains.DocumentModel.IDocument)">
            <summary>
            Force async rehighlighting process for given document
            </summary>
            <returns><c>false</c> if daemon wasn't started</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemon.Invalidate">
            <summary>
            Force invalidate all visible daemon results.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemon.State(JetBrains.DocumentModel.IDocument)">
            <summary>
            Get the daemon state for the given document
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemon.DaemonStateChanged2">
            <summary>
            Raised when DaemonState of any document is changed
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess">
            <summary>
            Represents analysis for one source file. Consists of several <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcess"/> - one for each <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStage"/>.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.VisibleRange">
            <summary>
            Area of document that must be analyzed first (before invisible parts) to provide highlighting results to user faster.
            For <see cref="!:VisibleDocumentDaemonProcess"/> it is current <see cref="P:JetBrains.TextControl.ITextControlScrolling.ViewportRange"/> of code editor.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.InterruptFlag">
            <summary>
            Signals that current daemon process (and relevant daemon stage process) must be interrupted. Process (and stage process) must verify this flag periodically
            and throw <see cref="!:OperationCanceledException"/> if it is true.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.CustomData">
            <summary>
            This property is used to pass custom specific data to daemon stages (such as exclude some analysis in test cases).
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.FullRehighlightingRequired">
            <summary>
            Can be used by stage process to understand do we need to start/continue analysis.
            Have no default implementation. For visible documents based on <see cref="!:DaemonImpl.DaemonTimestamp"/>
            and sometimes previous <see cref="!:Daemon.Invalidate"/> call.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.IsRangeInvalidated(JetBrains.DocumentModel.DocumentRange)">
            <summary>
            Can be used by stage process to understand do we need to start/continue analysis.
            Have no default implementation. For visible documents based on <see cref="!:DaemonImpl.Invalidate"/>
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.GetStageProcess``1">
            <summary>
            Get one of stage processes with given exact matched type
            </summary>
            <typeparam name="TStageProcess"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.GetStageProcesses``1">
            <summary>
            Get all stage processes with given exact matched type
            </summary>
            <typeparam name="TStageProcess"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.GetCompletedStageProcesses">
            <summary>
            Get already completed (during this process) stage processed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.CreateFibers">
            <summary>
            Create fibers for multi-process thread execution
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStage">
            <summary>
            Represents a "stage" in code analysis process.
            Each stage should have a key that allows stages to refer to each other.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStage.CreateProcess(JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess,JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.ReSharper.Feature.Services.Daemon.DaemonProcessKind)">
            <summary>
            Creates a code analysis process corresponding to this stage for analysing a file.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcess">
            <summary>
            Represents a code analysis process corresponding to one stage when analysing one file
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcess.Execute(System.Action{JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult})">
            <summary>
            Executes the process. The process should check for <see cref="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.InterruptFlag"/> periodically
            (with intervals less than 100 ms) and throw <see cref="T:System.OperationCanceledException"/> if it is true.
            Failing to do so may cause the program to prevent user from typing while analysing the code.
            Stage results should be passed to <param name="committer"/>.
            If DaemonStageResult is <c>null</c>, it means that no highlightings available
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcess.DaemonProcess">
            <summary>Whole daemon process.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcessWithPsiFile">
            <summary>
            Represents a daemon stage that works upon a built PSI file
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcessWithPsiFile.File">
            <summary>
            PSI file the stage is executed upon
            Can be null for particular stages
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting">
            <summary>
            Base interface for all highlightings.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.ToolTip">
            <summary>
            Message for this highlighting to show in tooltip and in status bar
            (if <see cref="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.ShowToolTipInStatusBar"/> is <c>true</c>).
            To override the default mechanism of tooltip, mark the implementation class with
            <see cref="T:JetBrains.ReSharper.Daemon.DaemonTooltipProviderAttribute"/> attribute, and then this property will not be called.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.ErrorStripeToolTip">
            <summary>
            Message for this highlighting to show in tooltip and in status bar
            (if <see cref="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.ShowToolTipInStatusBar"/> is <c>true</c>).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.IsValid">
            <summary>Returns true if data (PSI, text ranges) associated with highlighting is valid.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.CalculateRange">
            <summary>Calculates the range of highlighting.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.ICustomAttributeIdHighlighting">
            <summary>
            Identifies that highlighting attribute ID is computed at runtime.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ICustomAttributeIdHighlighting.AttributeId">
            <summary>Attribute of this highlighting in the markup model.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.ICustomSeverityHighlighting">
            <summary>
            Identifies that highlighting computes its severity in runtime. Can be used together with
            <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.StaticSeverityHighlightingAttribute"/> with <value>Severity.INVALID_SEVERITY</value>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ICustomSeverityHighlighting.Severity">
            <summary>Highlighting severity.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.ICustomConfigurableSeverityIdHighlighting">
            <summary>
            Identifies that highlighting severity ID is calculated at runtime.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ICustomConfigurableSeverityIdHighlighting.ConfigurableSeverityId">
            <summary>Configurable severity id of this highlighting.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.ICustomStyleHighlighting">
            <summary>
            Identifies that highlighting computes it's style at runtime.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ICustomStyleHighlighting.Attributes">
            <summary>Attribute of this highlighting in the markup model.</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ICustomStyleHighlighting.AttributeId">
            <summary>Attribute ID of this highlighting in the markup model.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingWithNavigationOffset">
            <summary>
            Identifies that highlighting has offset patch for navigation via solution
            error/issues windows or navigate to next/previous erros actions.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingWithNavigationOffset.NavigationOffset">
            <summary>
            Specifies the offset from the highlighting range to set the cursor to
            when navigating to this highlighting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingTestBehaviour">
            <summary>
            Controls the default behavior of highlighting in daemon tests.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingTestBehaviour.IsSuppressed">
            <summary>Controls of this highlighting is suppressed from test output or not.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingWithSecondaryRanges">
            <summary>
            Identifies that highlighting contains secondary ranges to highlight.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingWithSecondaryRanges.CalculateSecondaryRanges">
            <summary>
            Calculates ranges for secondary highlightings.
            Secondary highlightings are shown only in the editor but not on ErrorStripe or in SWEA results.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.ILanguageSpecificDaemonBehavior">
            <summary>
            Language-specific implementation which defines some daemon behavour aspects
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.ILanguageSpecificDaemonBehavior.InitialErrorStripe(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Get the error stripe visibility before analysis starts.
            Should not commit PSI!
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ILanguageSpecificDaemonBehavior.CanShowErrorBox">
            <summary>
            Check if this language can show error box
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.OverlapResolveKind">
            <summary>
            Controls how individual highlightings will be shown if overlaps
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ConfigurableSeverityHighlightingAttribute.ConfigurableSeverityId">
            <summary>
            ID of configurable severity definition
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingExtensions.GetConfigurableSeverityId(JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting,JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase)">
            <summary>
            Returns ConfigurableSeverityId for highlighting if it supports ICustomConfigurableSeverityIdHighlighting or
            has ConfigurableSeverityHighlightingAttribute, or null otherwise
            If you already have attribute for this highlighting's class, you can pass it to the method to optimize performance.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.AttributeId">
            <summary>Attribute of this highlighting in the markup model</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.ErrorStripeColorHighlighterAttributeId">
            <summary>
            If this highlighter, when applied to a document, is to be shown on the error stripe,
            defines the ID of another <see cref="T:JetBrains.TextControl.DocumentMarkup.RegisterHighlighterAttribute"/> whose foreground color
            gives the error stripe mark color. Will be used only if Severity == INFO.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.OverlapResolve">
            <summary>Get the ovelap resolving policy for this highlighting</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.OverloadResolvePriority">
            <summary>
            Get the ovelap resolving priority for this highlighting
            (to resolve 2 highlightings with the same range and resolve policy)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.ShowToolTipInStatusBar">
            <summary>
            Identifies if the tooltip message should be shown in the status bar
            when the cursor is over the highlighting
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.Languages">
            <summary>
            Languages for which this highlighting is
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.RegisterConfigurableSeverityAttribute">
            <summary>
            Register new configurable severity definition
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.RegisterConfigurableSeverityAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,JetBrains.ReSharper.Feature.Services.Daemon.Severity)">
            <summary>
            Register new configurable severity definition.
            </summary>
            <param name="ID">Unique ID of severity definition. Key to match with implementation</param>
            <param name="CompoundItemName">optional value, can join few items under the same header under group (items are matched by compoundItemName equality)</param>
            <param name="Group">Group ID of the item. See <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds"/> for common groups</param>
            <param name="Title">title</param>
            <param name="Description">description</param>
            <param name="DefaultSeverity"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.Severity">
            <summary>
            the role of each highlighting
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Comment.IBlockCommentActionProvider.GetBlockComment(JetBrains.ReSharper.Psi.Parsing.CachingLexer)">
            <summary>
            Identifies block comment range, even if it is not a single token.
            Lexer pos will be saved and resored by the caller
            </summary>
            <param name="lexer"></param>
            <returns>Invalid range if lexer is not positioned in block comment</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Comment.IBlockCommentActionProvider.NestedStartBlockCommentMarker">
            <summary>
            string used to replace nested block comments to make the code syntactically correct while commenting
            and restore comments while uncommenting
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.DebuggerVs.IBreakpointsSynchronizer.BreakpointsChanged">
            <summary>
            Raise every time we reicive breakpoints changes event from visual studio.
            This signal is guarded.
            
            Be aware, that All breakpoints collection synchronize breakpoinst only when fixed timespan is over
            <see cref="P:JetBrains.ReSharper.Feature.Services.DebuggerVs.IBreakpointsSynchronizer.SynchronizationGroupintEvent"/>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.DebuggerVs.IBreakpointsSynchronizer.SynchronizationGroupintEvent">
            <summary>
            Grouping event for breakpoint synchronization
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.DebuggerVs.IBreakpointsSynchronizer.All">
            <summary>
            Deffered live list of all breakpoints.
            Each IVsBreakpointWrapper have cached values for all provided field thus it can be used thread safe and fast 
            (does not required to use COM calls to query visual studio)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.DebuggerVs.IBreakpointsSynchronizer.GetValidFullBreakpointByTag(System.String,System.Boolean)">
            <summary>
            Return actual version of all parameters (including ranges and actual file and function names)
            
            Required main thread to execute
            </summary>
            <param name="id"></param>
            <param name="cacheValues"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.DebuggerVs.IBreakpointsSynchronizer.HasBreakpoints(JetBrains.Util.FileSystemPath)">
            <summary>
            Thread safe method to quickly check if specified location contains any breakpoints. 
            
            Be aware, that synchronization of breakpoints is deffered and you will not found your breakpoint in
            <see cref="P:JetBrains.ReSharper.Feature.Services.DebuggerVs.IBreakpointsSynchronizer.All"/> collection right after creation.
            
            You should subscribe to <see cref="P:JetBrains.ReSharper.Feature.Services.DebuggerVs.IBreakpointsSynchronizer.SynchronizationGroupintEvent"/> if you want actual result.
             </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.DebuggerVs.IVsBreakpointDescriptor.IsValid">
            <summary>
            Setter only works for invalidating
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.DebuggerVs.IVsBreakpointDescriptor.DocCoords">
            <summary>
            Return cached DocumentCoords.
            Don't forget to check <see cref="P:JetBrains.ReSharper.Feature.Services.DebuggerVs.IVsBreakpointDescriptor.IsValid"/> before relying on it
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Debugger.DebuggerAssemblyInfo.Location">
            <summary>
            Location of module. May be empty for dynamic/in-memory modules
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Debugger.IDebuggedProcessInfoManager.Processes">
            <summary>
            Session id -> info
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ExternalSource.IVsDebuggerSettings.IsAvailable">
            <remarks>true in VS</remarks>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ExternalSource.IVsDebuggerSettings.SymbolCacheFolder">
            <remarks>null if symbol cache folder is not specified or if IsAvailable is false</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ExternalSource.IExternalSourcesProvider.IsApplicable(JetBrains.ReSharper.Feature.Services.Navigation.CompiledElementNavigationInfo,System.Boolean)">
            <remarks>Only for navigation</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ExternalSource.IExternalSourcesProvider.NavigateToSources(JetBrains.ReSharper.Psi.ICompiledElement,JetBrains.Application.Progress.ITaskExecutor)">
            <summary>
            Tries to get source(s) for specified compiled element
            </summary>
            <returns>
            source file(s) related to specified compiled element,
            empty array if none (i.e. not applicable to this provider),
            null if the navigation was handled by provider
            </returns>
            <exception cref="!:OperationCanceledException">User cancelled the action</exception>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ExternalSource.IExternalSourcesProvider.DoNotUseOtherProviders(JetBrains.Util.FileSystemPath)">
            <summary>
            true, if we definitely know that debug data for this file
            can be obtained only by this provider
            (this method should be fast and without locks)
            </summary>
            
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.GeneratorWorkflowBase.Generate(System.String,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Generates code and commits transaction (for non-advanced scenario)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder.IsAvaliable(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext)">
            <summary>Checks if this builder will produce any output in the specified context</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder.HasProcessableElements(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElement})">
            <summary>Tells if builder will produce any output elements</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder.Process(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>Runs on context and modifies PSI</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext">
            <summary>
            Context in which generation occures
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Kind">
            <summary>Gets context kind, like constructor, property, delegating members, etc</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Language">
            <summary>Language in which generation should occur</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.PresentationLanguage">
            <summary>
            Language in which generated items should be presented, may be different
            from <see cref="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Language"/> (codebehind language, for example)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Root">
            <summary>Root of the operation, usually ITypeDeclaration</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Anchor">
            <summary>Anchor of the operation, place where to put elements</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.ProvidedElements">
            <summary>Elements provided as possible sources for generation (shown on first page)</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.InputElements">
            <summary>Elements selected by user as source of generation</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.OutputElements">
            <summary>Elements built by builder</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Options">
            <summary>Generation options</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElementProvider">
            <summary>Provides elements for generation</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElementProvider.Populate(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext)">
            <summary>Collects elements for builder</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.ID">
            <summary>Option identity</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Title">
            <summary>Title text</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Kind">
            <summary>UI presention kind</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Persist">
            <summary>Indicates if value should be saved across generate sessions</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Value">
            <summary>Value for this option</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.OverridesGlobalOption">
            <summary>Global option value does not propagate to this option</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.HasDependentOptions">
            <summary>If this property is true, options are refreshed on change</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.GetPossibleValues">
            <summary>Gets possible values for given output element in the given context</summary>
            <returns>List of possible values for combobox</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.IsValidValue(System.String)">
            <summary>Gets possible values for given output element in the given context</summary>
            <returns>List of possible values for combobox</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOptionFromSettings.LoadOption(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>Loads persistent option value.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOptionFromSettings.SaveOption(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>Saves persistent option value.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOptionsProvider">
            <summary>
            Provides options for user
            </summary>
            <remarks>
            Global options are displayed on first page and applies to every element (or is default value)
            Element options are specific settings for each elements, available on Advanced page
            </remarks>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.InspectThis.InspectGroupWorkflow.Order">
            <summary>
            Sorted by ascdending
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.Scoped.BulbActions.DecorativeScopedBulbAction">
            <summary>
            Represents a bulb action that runs intentions at specified scope.
            Wraps objects that implement <see cref="T:JetBrains.ReSharper.Feature.Services.Intentions.Scoped.IScopedAction"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.Scoped.ContextActions.ScopedContextActionBase`1.ScopedContextActionTreeProcessor">
            <summary>
            Default scoped context action tree processor.
            Applies provided CA recursively to each privided node if nessesary.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Engine.OffsetBasedProgressReporter">
            <summary>
            Wraps <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> and reports progress based on text offset.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Intentions.Scoped.QuickFixes.SameTypeQuickFixingStrategy.IncludeAnalyzersWithoutHighlightingTypesDefined">
            <summary>
            Gets or sets boolean value that determines whether to include <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.ElementProblemAnalyzer`1"/> without specified list of related highlighting types
            (the <see cref="P:JetBrains.ReSharper.Feature.Services.Daemon.ElementProblemAnalyzerAttribute.ElementTypes"/> is empty).
            Default value is true.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.Scoped.QuickFixes.ScopedQuickFixTreeProcessor">
            <summary>
            Represents Daemon free engine that runs Element Problem Analyzers and applies Quick Fixes at provided node.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Actions.IManualScopedAction">
            <summary>
            Scoped intention which uses it's own way to perform on provided scope. Doesn't depend on any common scope traversing mechanism.
            The mose advanced way of doing scoped intentions.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Actions.IIndependentScopedAction">
            <summary>
            Scoped action which uses it's own way to perform on provided scope. Doesn't depend on any common scope traversing mechaninsm.
            Duplicates <see cref="T:JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Actions.IManualScopedAction"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.Scoped.IScopedAction">
            <summary>
            Implementation of this interface by <see cref="T:JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFix"/> or some
            particular <see cref="T:JetBrains.ReSharper.Feature.Services.Bulbs.IBulbAction"/> created by any IQuickFix makes
            this fix/action "bulk", allowing it's batch application in some scope.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.CustomHighlightingActionProviderAttribute">
            <summary>
            Class should be marked by <see cref="T:JetBrains.ReSharper.Feature.Services.Intentions.CustomHighlightingActionProviderAttribute"/> attribute and should implement
            <see cref="T:JetBrains.ReSharper.Feature.Services.Intentions.ICustomHighlightingActionProvider"/> interface to be able to provide custom actions for highlighting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.ICustomHighlightingActionProvider">
            <summary>
            Class should be marked by <see cref="T:JetBrains.ReSharper.Feature.Services.Intentions.CustomHighlightingActionProviderAttribute"/> attribute and should implement
            <see cref="T:JetBrains.ReSharper.Feature.Services.Intentions.ICustomHighlightingActionProvider"/> interface to be able to provide custom actions for highlighting
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.CreateNewFileTarget.GetTargetDeclaration">
            <summary>
            Returns target declaration. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.CreateNewFileTarget.GetTargetDeclarationFile">
            <summary>
            Returns target declaration file
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.IntentionLanguageSpecific.ToExtensionMethod(JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration)">
            <summary>
            Makes method extension method.
            For C#: add this to first parameters
            For VB: add ExtensionAttribute to method declaration
            
            No any checks (ex. class and method are static) are performed
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.UpdateArgumentsDelegate">
            <summary>
            Provides new arguments for existing attribute
            </summary>
            <param name="instance">existing attribute  info</param>
            <returns>desired attribute arguments or null to ignore</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession.GetVariableResult(System.String)">
            <summary>Gets variable result by its name</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession.IsFinished">
            <summary>
            Returns value indicating whether the template result is finished
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.MutliDocumentNameExpression">
            <summary>
            Name expression. Updates not only declaration name but source reference.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.Hotspot">
            <summary>
            Represents a hot spot in live template expansion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotContext">
            <summary>
            Implements the IExpressionContext interface
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotContext.HotspotSession">
            <summary>
            Gets the template result
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionController">
            <summary>
            Template result context based on template field infos
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionController.Finalize(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext,JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.TerminationType)">
            <summary>
            Finalizes the template
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionExecutor">
            <summary>
            Controller for the insert live template action
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUi">
            <summary>
            Represents a live template session
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext">
            <summary>
            Expression evaluation context
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression">
            <summary>
            A variable evaluation expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Evaluates quick result for expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.HandleExpansion(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Execute custom action on expanding this expression
            </summary>
            <returns><c>true</c> if all neccessary actions have been taken or <c>false</c> to proceed with normal <see cref="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)" /> procedure</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.Serialize">
            <summary>
            Serializes the expression
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotService">
            <summary>
            Language-specific hotspot service
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext">
            <summary>Context where a template can be executed</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext.Solution">
            <summary>Gets the project a template is executed in</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext.StartOffset">
            <summary>Gets the position in editor a template is executed at</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.LiveTemplateHotspotSessionController">
            <summary>
            Template result context based on template
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.LiveTemplateHotspotSessionController.Finalize(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext,JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.TerminationType)">
            <summary>
            Finalizes the template
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.LiveTemplateHotspotSessionController.Init(System.String,JetBrains.TextControl.ITextControl,JetBrains.DocumentModel.DocumentOffset@,JetBrains.DocumentModel.DocumentOffset,JetBrains.ProjectModel.ISolution,System.String,System.Collections.Generic.List{JetBrains.Util.Pair{JetBrains.DocumentModel.DocumentRange,System.Collections.Generic.IList{JetBrains.ReSharper.Psi.IDeclaredElement}}})">
            <summary>
            Initializes within a context
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesManager.CreateFileFromTemplate(System.String,JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.ProjectFolderWithLocation[],JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.Template,System.Action{JetBrains.ProjectModel.IProjectFile},JetBrains.DocumentManagers.Transactions.IFileCreationContext,System.Action{JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession})">
            <summary>
            Creates file with specified name in target folder using file template.
            </summary>
            <param name="fileNameNoExtension">If name is null or empty, dialog to create name is shown</param>
            <param name="targetFolder"></param>
            <param name="template"></param>
            <param name="setFileProperties"></param>
            <param name="init"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroDefinition">
            <summary>
            Represents macro function definition that can be used by Live Template's.
            Implementation of this interface should be marked with <see cref="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroDefinitionAttribute"/> attribute
            to be automatically recognized by ReSharper.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroDefinition.Parameters">
            <summary>Gets array of parameter descriptions</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroDefinition.GetPlaceholder(JetBrains.DocumentModel.IDocument,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroParameterValue})">
            <summary>
            <para>
            Placeholder value is inserted into the text on the very initial step of template expansion
            and is needed for proper template text reformatting when real values cannot be calculated yet.
            </para>
            <para>
            More precisely, the following steps are performed:
            <list type="bullet">
              <item><description>placeholder values for all template fields are inserted into the text</description></item>
              <item><description>the resulting text is reformatted</description></item>
              <item><description><see cref="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)"/> is used to evaluate and insert values for all fields.</description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation">
            <summary>
            Represents macro function implementation
            Implementation of this interface should be marked with <see cref="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroImplementationAttribute"/> attribute
            to be automatically recognized by ReSharper.
            Instances of the macro implementation components are created per-session.
            The macro parameters, hotspot session and any required components can be injected into component's contructor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.HandleExpansion(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>Execute custom action on expanding this macro.</summary>
            <returns><c>true</c> if all neccessary actions have been taken or <c>false</c> to proceed with normal <see cref="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)" /> procedure</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>Evaluates list of lookup items to show.</summary>
            <returns>List of lookup items to show in order of preference.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Evaluates "quick result" for this macro.
            Unlike the result returned by <see cref="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)"/> method, 
            quick result is re-evaluated on each typing and so its implementation should be very quick.
            If the macro cannot provide any result that can be evaluated very quickly, it should return null.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroParameterValue">
            <summary>
            A parameter of live template macro
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroParameterValue.GetText(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Gets parameter text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ConstantMacroParameter">
            <summary>
            A string constant expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ConstantMacroParameter.GetText(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Gets parameter text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroParser">
            <summary>
            Parses live template macros 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.VariableMacroParameter">
            <summary>
            Expression which is evaluated to a variable value
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.VariableMacroParameter.GetText(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Gets parameter text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContext">
            <summary>
            Context where a template can be executed
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.TemplateAcceptanceContext">
            <summary>
            Represents neccessary context for accepting different kind of templates
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesManager.CreateHotspotSessionFromTemplate(JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.Template,JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl,System.Action{JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession},System.Nullable{JetBrains.DocumentModel.DocumentOffset})">
            <summary>Executes template with inserting text</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesManager.CreateHotspotSessionFromTemplate(System.String,JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.Template,JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl,System.Action{JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession},System.Nullable{JetBrains.DocumentModel.DocumentOffset})">
            <summary>Executes template with inserting text</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesManager.GetPrefix(JetBrains.DocumentModel.IDocument,System.Int32)">
            <summary>Generic template prefix (not context specific)</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.PredefinedStorage">
            <summary>
            Gets storage of predefined templates
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.UserStorage">
            <summary>
            Gets storage of user templates
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.TemplateStorages">
            <summary>
            Gets all registered template storages
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.UidUsed(System.Guid)">
            <summary>
            Checks if the specified uid is already used for a template of the family
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.UserStorage">
            <summary>
            Storage for user-level templates
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.IFileTemplatesSupport.Name">
            <summary>
            Gets name
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.QuickLists.QuickList">
            <summary>
            Quick list implementation
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.Template.Text">
            <summary>
            Gets the template text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateKind">
            <summary>
            Enumerates possible kinds of templates
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateTokenType">
            <summary>
            Describes tokens which are specific for templates
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateUtil">
            <summary>
            Contains utility methods for template execution
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.HeadlessLookupWindowManager.IsExternalDocumentChangeAllowed">
            <summary>
              If this flag is set, any document change doesn't cancel code completion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager">
            <summary>
            Maintains layouters per text controls.
            // TODO: when we got text control components, make layouters text control components, and drop this component altogether.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.myMapTextControlToLayouters">
            <summary>
            Demand-created, destroyed when the text control is closed.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.TextControls">
            <summary>
            Gets the collection of text controls out of which you can get a layouter for the specific text control.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.GetForTextControl(JetBrains.TextControl.ITextControl)">
            <summary>
            Gets the collection of text controls, from which you should select the one you want the layouters for.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.LayoutersForTextControls">
            <summary>
            Implements the <see cref="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.TextControls"/> property.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.LayoutersForTextControls.Item(JetBrains.TextControl.ITextControl)">
            <summary>
            Gets an object that will create the layouters for the given text control.
            Note: do not store the instance you get, because it may expire. You should get a new instance thru this indexer each time you need it.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.ContextTracker">
            <summary>
            Tracks keyboard commands and maintains prefix
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ContextTracker.ContextChanged">
            <summary>Event is raised when the tracker changes</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor">
            <summary>
            Interface for creating custom list items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor.RichText">
            <summary>
            The presentation rich text
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor.Tag">
            <summary>
            The custom tag
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor.Image">
            <summary>
            The image
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.ILookup">
            <summary>
            Interface for creating lookup windows
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.Solution">
            <summary>Solution the window is executed within</summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.BeforeShownItemsUpdated">
            <summary>Event is raised before items list is shown</summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.CurrentItemChanged">
            <summary>Event which is raised when the current item changes</summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.ItemCompleted">
            <summary>Raised when an item is completed</summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.Closed">
            <summary>Raised when the window is closed</summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.Typing">
            <summary>Raised when typing happens</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters">
            <summary>
            A class that implements the coupled layouters for the lookup window and parameter info tooltip.
            Create a new layouter through the <see cref="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.TextControls"/> property.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.OptionParameterInfoBelow">
            <summary>
            Whether the default parameter info disposition is above or below the line.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.ActiveLayouter.AnchoringRect">
            <summary>
            Anchoring rectangles for the coupled layouters.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.ActiveLayouter.StickyDisposition">
            <summary>
            Stores the sticky dispositions for layouting each of the entities.
            This makes sure that if the parameter info has been switched up after completion was shown wouldn't jump back down after completion is closed.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.ActiveLayouter.Layouter">
            <summary>
            The coupled layouters controlled by this instance.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.TextControl">
            <summary>
            Gets the text controls instance for which the layouters can be created.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.TextControl.ITextControl,JetBrains.ProjectModel.ISolution,JetBrains.Application.Settings.ISettingsStore)">
            <summary>
            Creates an instance, registers it in the list.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateLookupLayouter(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.PopupLayout.IAnchoringRect)">
            <summary>
            Creates a layouter for the lookup window.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateLookupTooltipLayouter(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.PopupLayout.IAnchoringRect)">
            <summary>
            Creates a layouter for the lookup-list-based parameter info window.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateParameterInfoLayouter(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.PopupLayout.IAnchoringRect)">
            <summary>
            Creates a layouter for the text-editor-based parameter info window.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.GetAvailDispositions(JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.LayouterIds)">
            <summary>
            Gets the dispositions that can be used for running each of the layouters.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateLayouter(JetBrains.DataFlow.Lifetime,JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.LayouterIds,JetBrains.Application.UI.PopupLayout.IAnchoringRect,System.Boolean)">
            <summary>
            Creates any of the layouters.
            </summary>
            <param name="lifetime"></param>
            <param name="id">Which layouter to create.</param>
            <param name="anchor">Anchor for the layouter.</param>
            <param name="bAllowNonStrictRecursion">With Option Strict OFF, sometimes the disposal of an already-used layouter causes the whole instance to dispose. In this case, make a recursive call over a new instance. This param prevents from infinite recursion.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.DirtyHackLookupAndParameterInfoDispositions">
            <summary>
            Dirty Hack for the Parameter Info and Lookup tooltips.
            Initially, ParamInfo is displayed below the line, which occupies the space of the lookup window. As lookup shows, move param-info up.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.UpdateLayout">
            <summary>
            Recalculates the layout.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.LayouterIds">
            <summary>
            IDs for the layouters and anchors.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupHighlightingTracker">
            <summary>Tracks replacement highlighting</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupUtil">
            <summary>
            Contains utility methods for lookup management
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.Suffix.Playback(JetBrains.TextControl.ITextControl)">
            <summary>
            Emulates typing of the suffix in given text control
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.VariableComparer">
            <summary>
            Comparer which prefers local variables to fields and properties. 
            Note that for preference policy the "0" return value doesn't
            mean that items are equal - it means that the comparer can say nothing about the items.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Naming.UI.CustomNamingOptionsPageBase2.AddBaseLanguageElementKinds(System.Collections.Generic.IList{JetBrains.ReSharper.Psi.Naming.Elements.IElementKind},JetBrains.ReSharper.Psi.Naming.Elements.INamedElementsManager)">
            <summary>
              Adds additional element kinds in setting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Naming.NamingImplZone">
            <summary>
            Active implementation of naming
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SectionGroupingProvider.mySection">
            <summary>
            Reuse TreeSectionWithId to make grouping more consistent -- return same section object for same section ID
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SearchDescriptor.GetDescriptorFactory">
            <summary>
            this method is necessary to restore descriptor from the history list
            </summary>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoControllerNavigationFilter.ItemsPassFilter">
            <summary>
            A filter that specifies which items should be let into the output list.
            NOTE: in most cases, you should use <see cref="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoTypeController.RestrictItemsPassFilter(System.Func{JetBrains.ReSharper.Psi.IDeclaredElement,System.Boolean})"/>, so that to avoid interfering with the internal filtering.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoControllerNavigationFilter.RestrictItemsPassFilterForOccurrence(System.Func{JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence,System.Boolean})">
            <summary>
            ANDs the given condition with the existing <see cref="F:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoControllerNavigationFilter.ItemsPassFilter"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoSearchController.ExecuteItem(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem,JetBrains.DataFlow.ISignal{System.Boolean})">
            <summary>
            Called when an item is to be executed.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoTypeController">
            <summary>
            Controls the <see cref="T:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel"/> for various <see cref="T:JetBrains.ReSharper.Psi.IDeclaredElement"/>-based items.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoTypeController.CreateGotoTypeController(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.Application.Threading.IShellLocks,JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext)">
            <summary>
            Controller of the <see cref="T:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel"/> for types (classes, structs, etc).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoTypeController.CreateGotoTypeModel(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.Application.Threading.IShellLocks,JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext)">
            <summary>
            <see cref="T:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel"/> for types (classes, structs, etc).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoEverythingController.CreateGotoEverythingController(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.Application.Threading.IShellLocks,JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel,JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext)">
            <summary>
            Controller of the <see cref="T:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel"/> for types (classes, structs, etc).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoNamespaceController.CreateGotoNamespaceController(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.Application.Threading.IShellLocks,JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext)">
            <summary>
            Controller of the <see cref="T:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel"/> for namespaces.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoItemsProviderBase`3.ConsumePresentableItems(JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoItemsProviderModel,System.Int32,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoItemsConsumer)">
            <summary>
            Gets top scored items which match the input string. Uses <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IOccurrenceNavigationProvider"/>s for obtaining matched occurrences.
            Uses <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ChainedProviders.IChainedSearchProvider"/> to perform combo search (if enabled) 
            </summary>
            <param name="itemsModel">goto search provider model</param>
            <param name="itemsCount">number of top scored items to present. -1 means no limit</param>
            <param name="itemsConsumer"> consume pairs to be presented in a jetpopup menu or dropped in a tool window</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoItemsProviderBase`3.GetOccurrencesOutOfMatchingInfos(System.Func{JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence,System.Boolean},System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.FullNavigationItemData},System.Func{System.Boolean},JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoContext)">
            <summary>
            Get occurrences out of primary providers. Used for common(non-chained) search.
            </summary>
            <param name="filter">Whether occurrence is accepted</param>
            <param name="count">-1 means no limit</param>
            <param name="isSearchingInLibs"></param>
            <param name="pairsToDescribe"></param>
            <param name="checkCancelled"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoItemsProviderBase`3.LibrariesFlagAutoSwitch">
            <summary>
            Gets or sets whether when a solution-only search fails a solution-and-libraries search is performed automatically.
            <c>True</c> by default.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoTypeItemsProvider">
            <summary>
            Base items provider for <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoTypeController"/>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoTypeItemsProvider.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,System.String,System.Boolean)">
            <summary>
            Inits the instance.
            </summary>
            <param name="lifetime"></param>
            <param name="solution">Base ctor param.</param>
            <param name="sDeclaredElementKindDisplayName"><c>"namespace"</c> or <c>"type"</c> or whatever human-readable declared element kind string.</param>
            <param name="enableMulticore"> </param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.ChainedScopesUtil.CalculateChainedScore(System.Collections.Generic.List{System.String},JetBrains.Application.UI.Utils.MatchingInfo)">
            <summary> Calculate score for MatchingInfo </summary>
             <remarks> 
             W(x) = C0*x0 + C1*x1 + ... + Ci*xi, where C0 > C1 > ... > Ci
             Words.Count should correspond with matchingInfo references depth
             </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.ChainedScopesUtil.CompareMatchingInfo(System.Int32,System.Int32,JetBrains.Application.UI.Utils.MatchingInfo,JetBrains.Application.UI.Utils.MatchingInfo,JetBrains.Application.Threading.SeldomInterruptCheckerWithCheckTime)">
            <summary>
            Compare two MatchingInfos by score, identifier and distance to identifier 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.ChainedScopesUtil.WordWeight(System.Int32)">
            <summary>
            Word's weight function
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoContext">
            <summary>
            Container for provider-specific data
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoContext.State">
            <summary>
            Use state data holder for controller settings or context.
            This field is preserved when <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.ItemsGottenDirty"/> fired, but not all <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoContext"/> itself
            
            Never use this for caches and any heavy objects.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoMerger.MergeOccurrences(JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.PresentableGotoItem,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.PresentableGotoItem,System.Collections.Generic.IEnumerable{System.Func{JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.PresentableGotoItem,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.PresentableGotoItem,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.PresentableGotoItem}})">
            <returns>Item to be removed</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoMerger.GetInstantAndCommonItemsMergeRules">
            <summary>
            the func's returned item will be removed
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoMerger.GetAllItemsMergeRules">
            <summary>
            the func's returned item will be removed
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.LexemReader">
            <summary>
            for sake of simplicity
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.INavigationProviderFilter.ProvideCompletion">
            <summary>
            provide items for completion
            </summary>
            <returns>null if no completion required</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.INavigationFilterCompletionItem.Complete">
            <summary>
            return completed string
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.ISupportNavigationProviderFilter">
            <summary>
            Just marker interface for marking goto providers supported navigation filters
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ChainedProviders.IChainedSearchProvider.GetNextChainedScopes(JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoContext,JetBrains.Text.IIdentifierMatcher,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.INavigationScope,System.Func{System.Boolean})">
            <summary>
            Provides next step chained scopes
            </summary>
            <param name="gotoContext"></param>
            <param name="matcher"></param>
            <param name="containingScope"></param>
            <param name="checkForInterrupt"> </param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IChainedOccurrencesProvider.FindOccurrences(JetBrains.Text.IdentifierMatcher,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.INavigationScope,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,System.Func{System.Boolean})">
            <summary>
            Implement this method if your provider can work as a secondary provider in a chained search.
            PERFORMANCE SENSITIVE!
            </summary>
            <param name="matcher"></param>
            <param name="scope"></param>
            <param name="includeLibraries"></param>
            <param name="checkCancelled"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoProviderWithPriority.ItemsPriorityFunc">
            <summary>
            The lower is result int -> the higher is the priority
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.INavigationScope">
            <summary>
            Thread-safe scope to be used by providers
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IOccurrenceNavigationProvider.FindMatchingInfos(JetBrains.Text.IIdentifierMatcher,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.INavigationScope,JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoContext,System.Func{System.Boolean})">
            <summary>
            Finds matched items and returns a corresponding list of matchingInfos.
            Controller (or some other entity that will use this provider) receives these items, scores them, sorts 
            and than invoke GetOccurrences for the top scored of them.
            </summary>
            <param name="matcher">matcher to use</param>
            <param name="scope">defines a scope to search in</param>
            <param name="gotoContext"></param>
            <param name="checkForInterrupt"> </param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IOccurrenceNavigationProvider.GetOccurrencesByMatchingInfo(JetBrains.Application.UI.Utils.MatchingInfo,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.INavigationScope,JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoContext,System.Func{System.Boolean})">
            <summar> Gets occurrences by given matchingInfo </summar>
            <param name="navigationInfo"></param>
            <param name="scope"></param>
            <param name="gotoContext"></param>
            <param name="checkForInterrupt"> </param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag">
            <summary>
            Defines whether the libraries should be included or not when searching for items.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Requests.FilterBySubstitutionSearchResultsConsumer.ContainsOpenType(JetBrains.ReSharper.Psi.IDeclaredType,JetBrains.ReSharper.Psi.IDeclaredType)">
            <summary>
            Return value indicating the specific type occurs in this open declared type.
            If this type contains value type (for example for List`T &amp; T it returns true)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Requests.IAsyncSearchResult">
            <summary>
            Represents async result as collection of IOccurrence
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Requests.IAsyncSearchResult.View(JetBrains.DataFlow.Lifetime,System.Action{JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence})">
            <summary>
            Live collection of results. 
            </summary>
            <param name="lifetime"></param>
            <param name="onAdd"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Requests.IAsyncSearchRequest">
            <summary>
            Represents an async search request, that can be run without blocking UI and user typing
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchRequest.TraceResults(System.String,System.Collections.Generic.ICollection{JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence},System.Collections.Generic.ICollection{JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence})">
            <summary>
            Ultra slow, use only for tracing purposes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.LegacyFindResultsView">
            <summary>
            Temprorary.
            Exist only for support case with async search request with sync search results.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.RequestContextSearchBase`2">
            <summary>
            Base context search engine based on SearchRequest
            </summary>
            <typeparam name="TSearchRequest">Request taken from the context search to be used by descriptor</typeparam>
            <typeparam name="TElement">Type of elemens, that context search operates</typeparam>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.MultipleRequestContextSearchBase`2">
            <summary>
            Base context search engine for multiple elements
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.MultipleRequestContextSearchBase`2.Promote(System.Collections.Generic.ICollection{`1})">
            <summary>
            Promote (change to some another) element before transferring to SearchRequest
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.RequestContextSearchCandidateType.Default">
            <summary>
            Candidates can be executed singly or together
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.RequestContextSearchCandidateType.MutuallyExclusive">
            <summary>
            Candidates are mutually exclusive, so there is no way to execute their together
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.RequestContextSearchCandidateType.ForceMultipleExecution">
            <summary>
            Candidates executes together
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.RequestContextSearchProvider`3">
            <summary>
            Base provider that works on context searches which are based on SearchRequest.  
            </summary>
            <typeparam name="TContextSearch">Language dependent part of feature</typeparam>
            <typeparam name="TSearchDescriptor">Descriptor to present the results</typeparam>
            <typeparam name="TSearchRequest">Request taken from the context search to be used by descriptor</typeparam>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.SearchRequestExecuter">
            <summary>
            Engine for execute search requests via ISearchResultPresenter
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigation.Title">
            <summary>
            Text will be shown in the context navigation menu ('Navigate from here...')
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigation.ActionId">
            <summary>
            Id associated with a specific action.
            null if there is no shortcut (action) for this provider
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigation.Execution">
            <summary>
            an action(if there is one) to be invoked later
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IDeclarationSearch.GetDeclarationSearchRequest(JetBrains.ReSharper.Psi.IDeclaredElement,System.Func{System.Boolean})">
            <summary>
            Gets a searchDeclarationRequest to be executed.
            </summary>
            <returns>Search request to be executed (mostly in the Features layer). Null means that declarations search is incorrect for the indicated declared element</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ISpecialElementFinder.GetSearchTarget(JetBrains.ReSharper.Psi.Tree.IFile,JetBrains.DocumentModel.DocumentRange,JetBrains.DocumentModel.DocumentOffset)">
            <summary>Get special finder's search targets</summary>
            <param name="file"></param>
            <param name="range">Range in document (selection or caret only). Can be invalid if invoked on project item</param>
            <param name="caretOffset">Caret position. Can be invalid if invoked on project item</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.SearchRequestExecuterBase">
            <summary>
            Engine for execute search requests
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.INavigationFilter">
            <summary>
            stateful
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.INavigationFilter.FilterOut(System.Collections.Generic.ICollection{JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence},JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence)">
            <returns>true it occurrence should be removed, false - if passed</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ProjectReferencesSelection">
            <summary>
            Either referenced nuget package or assembly reference
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeKind.ExtensionMethodsRedundantImport">
            <summary>
            weak usage. If the corresponding namespace import will be removed, 
            removing find result's referenced psiModules won't break compilation.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeKind.RedundantNamespaceImport">
            <summary>
            weak usage. <see cref="M:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeService.GetRedundantImportsToRemove``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IModule},JetBrains.ProjectModel.IProject,System.Collections.Generic.IEqualityComparer{JetBrains.ProjectModel.IModule})"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeKind.DirectUsage">
            <summary>
            strong, direct usage.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeKind.RelatedUsage">
            <summary>
            strong, compiler related usage. Removing corresponding referenced psiModules will break compilation.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeKind.ExtensionMethodStrongCall">
            <summary>
            strong, compiler related usage concerned with calling extension methods and importing namespaces. 
            Removing corresponding referenced psiModules will break compilation.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeSearcher.GetRelatedElements(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Psi.Resolve.IReference)">
            <summary>
            Gets related type elements associated with a given declared element. 
            'Related' are those type elements which psiModules should be referenced as well as the module of <paramref name="declaredElement"/>.
            </summary>
            <param name="declaredElement"></param>
            <param name="reference">some rules need a reference to get invocation context</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeService.RemoveSelectedReferences(JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ProjectReferencesSelection,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Removes selected projectToModule references under the transaction with progress indicator. 
            Assuming that the list does not contain implicitly referenced psiModules.
            </summary>
            <param name="selection"></param>
            <param name="progressIndicator"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeService.RemoveRedundantUsages(System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.Resolve.IReference},JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Removes selected references with an indicated progress indicator. Needs to be executed under transaction.
            </summary>
            <param name="references"></param>
            <param name="progress"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeUtil.GetForwardedAssemblyReferences(System.Collections.Generic.ICollection{JetBrains.ReSharper.Psi.Modules.IPsiModule},JetBrains.ProjectModel.IProject)">
            <summary>
            Gets additional project references caused by forwarding.
            </summary>
            <param name="targetPsiModules"></param>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.SkippedTypes.IsSkippedType(JetBrains.Metadata.Reader.API.IClrTypeName)">
            <summary>
            Returns if the target clrTypeName should be skipped for ReferencedCodeSearcher
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.AssemblyAttributeNavigationData">
            <summary>
            Data class containing navigation info required to navigate to an attribute for assembly
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.DeclaredElementNavigationService.Navigate(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.Application.UI.PopupLayout.PopupWindowContextSource,System.Boolean,System.Nullable{JetBrains.ReSharper.Feature.Services.Occurrences.OccurrencePresentationOptions},JetBrains.IDE.TabOptions)">
            <summary>
            Navigates to declared element using providers applicable for the given declared element.
            </summary>
            <param name="declaredElement"></param>
            <param name="windowContext"></param>
            <param name="transferFocus"></param>
            <param name="options">presentation options to be used when displaying disambig</param>
            <param name="tabOptions"> </param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.DefaultDeclaredElementNavigator">
            <summary>
            Provides declared element's navigation using context searches
            <c>JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextSearches.IDeclarationSearch</c>.
            Context Searches are language specific feature part components, mostly working on finder
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.INavigationFilterFactory">
            <summary>
            should be marked with SolutionFeaturePart attribute
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.INavigationFilterFactory.IsApplicable(JetBrains.ReSharper.Feature.Services.Navigation.CallingFeatureContext)">
            <summary>
            should be called for filtering
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.ExposingApiesTypeUtil.IsImplicitlyConvertibleTypes(JetBrains.ReSharper.Psi.IType,JetBrains.ReSharper.Psi.IType,JetBrains.ReSharper.Psi.ITypeConversionRule)">
            <summary>
            Test implicitly convertation from targetType to sourceType
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.IExposingApiEntry.DeclaredElement">
            <summary>
            Declared Element provides an API
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.IExposingApiEntry.Type">
            <summary>
            Target type
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.IExposingApiParameterEntry.ParameterIndex">
            <summary>
            Parameter number in parameter list
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.IDeclaredElementNavigator">
            <summary>
            Extends declared element navigation using applicable components
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.INavigationPoint.Navigate(JetBrains.ReSharper.Feature.Services.Navigation.NavigationOptions)">
            <summary>
            Performs navigation
            </summary>
            <param name="options">Navigation options</param>
            <returns>True if succeeded</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.INavigationPoint.GetPresentationImage">
            <summary>
            Icon of the navigation point
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.INavigationPoint.GetPresentationText">
            <summary>
            Text of the navigation point
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.INavigationPoint.GetSecondaryPresentationText">
            <summary>
            Shortcut text of the navigation point in JetPopuMenu. May be <see cref="P:JetBrains.UI.RichText.RichText.Empty"/>
            Will be set to RichText which will be set to JetPopupMenu item's ShortcutText property
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.IRelatedFilesProvider.GetRelatedFiles(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Get all related files to specified file.
            </summary>
            <param name="projectFile"></param>
            <returns>Enumeration of tuples of related project file, it's relation type to requested file, and parent file.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.RelatedFileOccurence.AnchorFile">
            <summary>
            File for which releated file is calculated
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.RelatedFileOccurence.RelatedFile">
            <summary>
            Related file to navigate to. Nulls will be filtered out
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.RelatedFileOccurence.RelatedFileTargetFrameworkId">
            <summary>
            <see cref="T:JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId"/> to be navigated to. Null if does not matter
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.RelatedFileOccurence.RelationKind">
            <summary>
            Relation kind (occurences will be groupped and sorted by it). NullOrEmpty will be the first
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.Navigate(JetBrains.ProjectModel.IProjectModelElement,JetBrains.Application.UI.PopupLayout.PopupWindowContextSource,System.Boolean)">
            <summary>
            Navigates to the project item using all applicable providers
            </summary>
            <param name="projectModelElement"></param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.NavigateToSolutionExplorer(JetBrains.ProjectModel.IProjectItem,JetBrains.Application.UI.PopupLayout.PopupWindowContextSource,System.Boolean)">
            <summary>
            Navigates to solution explorer using given project item
            </summary>
            <param name="projectItem"> </param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.NavigateToExternalSources(JetBrains.ReSharper.Psi.ICompiledElement,JetBrains.Application.UI.PopupLayout.PopupWindowContextSource,System.Boolean)">
            <param name="compiledElement"> navigates to a compiled element. To navigate inside compiled members bodies use an overload with compiledElementNavigationInfo data class</param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.NavigateToExternalSources(JetBrains.ReSharper.Feature.Services.Navigation.CompiledElementNavigationInfo,JetBrains.Application.UI.PopupLayout.PopupWindowContextSource,System.Boolean)">
            <param name="compiledElementNavigationInfo"> data class with CompiledElement (scope) to search in and a target to be searched in this scope</param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.NavigateToVsObjectBrowser(JetBrains.ReSharper.Psi.ICompiledElement,JetBrains.Application.UI.PopupLayout.PopupWindowContextSource,System.Boolean)">
            <param name="compiledElement"> </param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.Navigate(JetBrains.ReSharper.Feature.Services.Navigation.AssemblyAttributeNavigationData,JetBrains.Application.UI.PopupLayout.PopupWindowContextSource,System.Boolean)">
            <param name="assemblyAttributeNavigationData"> </param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.Navigate(JetBrains.ProjectModel.ProjectFileTextRange,JetBrains.Application.UI.PopupLayout.PopupWindowContextSource,System.Boolean,JetBrains.IDE.TabOptions)">
            <param name="projectFileTextRange"> </param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <param name="tabOptions"></param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.NavigationProviders.ISolutionExplorerNavigationProvider">
            <summary>
            These providers should be queried only if we want intentionally navigate to solution explorer.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ProjectFileNavigationPoint">
            <summary>
            Project file's navigation point without cursor positioning
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.TextNavigationPoint">
            <summary>
            Project file's navigation point with cursor positioning
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.IHighlightUsagesService.ProcessRawResults(System.Collections.Generic.ICollection{JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence})">
            <summary>
            return true to terminate futher processing
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManager.Init_Autohide(JetBrains.DataFlow.Lifetime,JetBrains.DocumentManagers.DocumentManager,JetBrains.Application.UI.Actions.ActionManager.IActionManager,JetBrains.TextControl.ITextControlManager)">
            <summary>
            Hides on user actions, or automatically by hiding policy on the custom request.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManager.Init_ResultLists(JetBrains.DataFlow.Lifetime,JetBrains.IDE.ResultList.ResultListManager,JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Interaction with the IDE-global result list which controls the back-forward navigation.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManager.CustomHighlightingManagerForTextControl">
            <summary>
            Accessor for methods which are in context of a text control.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManager.CustomHighlightingManagerForTextControl.GetNextHighlighterFromCaret(System.Windows.Documents.LogicalDirection)">
            <summary>
            Scans from caret in the given direction. Yields <c>Null</c> when either text control has no active requests, or we're already on or beyond the last highlighter in the given direction.
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingRequest.TextControl">
            <summary>
            NOTE: formally, the custom highlighting currently applies to a document, because we ain't got a layer for highlighters on text control level. The highlighters will show up in all text controls of this document.
            Historically, API binds to just one text control.
            So we'd also only track the single text control for now. 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.IOccurrenceInformationProvider">
            <summary>
            should be SolutionFeaturePart component
            OccurrenceInformationManager does not support smart inheritance filtering for this interface!
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.OccurrenceExtensions.GetMergeContext(JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence)">
            <summary>
            warning: if you want to process it in batch better to inject <see cref="T:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.OccurrenceInformationManager"/>
            </summary>
            <param name="occurrence"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.OccurrenceExtensions.TryGetProject(JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence)">
            <summary>
            firstly ignores all envoys logic, trying to be as fast as possible
            if it didn't work out, uses envoys then
            </summary>
            <param name="occurrence"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceAsyncBridge.myEmptySignal">
            <summary>
            This is fired whenever occurrence queue is emptied. Note that new items can still be added during signal firing.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Occurrences.DeclaredElementOccurrence">
            <remarks>
            DO NOT implement GetHashCode and Equals here, because an hashcode for this occurrence can changes
            Use <see cref="T:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceEqualityComparer"/>
            </remarks>>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Occurrences.DeclaredElementOccurrence.IsValid">
            <summary>
            very slow
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceKindClassificatioAxis.HidePolicy">
            <summary>
            HidePolicy used for define IsVisible for occurrence from difference axis.
            Each occurrence kind can have single axis.
            Each occurrence can have multiple occurrence kind from different axis.
            It is possible to occurrence to have more than 1 kind on axis, but it's not recommended.
            
            We have the following info:
              -  the list of enabled OccurrenceKinds in filter
              -  the list of occurrence kind in list
            
            HidePolicy override rule for define visibility as follow:
              - If occurrence has any enabled kind from Exclude axis -> false
              - If occurrence has any enabled kind from Include axis -> true
              - In any other case it is just combine enabled occurrence kind via OR
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceKindClassificatioAxis.Priority">
            <summary>
            Priority only used for order in filters menu.
            If you don't want to include classification axis into menu provide -1 for priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceKind.Other">
            <summary>Default occurrence kind</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrenceProvider.MakeOccurrence(JetBrains.ReSharper.Psi.Search.FindResult)">
            <summary>
            Makes occurrence from find result. Return null if find result is incompatible with provider
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceEqualityComparer">
            <summary>
            EqualityComparer for IOccurrences
            DO NOT use this comparer for long-live collections, because an hashcode for some IOccurrence can changes
            Therefore logic for calculate hashcode and equality store here, separate from RangeOccurrence, ReferenceOccurrence and DeclaredElementOccurrence
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceKindManager.GetOccurrenceKinds(JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence)">
            <summary>
            gets kinds for a specific occurrence
            </summary>
            <param name="occurrence"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceKindManager.GetAllOccurrenceKinds">
            <summary>
            gets the set of all possible kinds from all providers
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrencePopupMenu.ShowMenuFromTextControl(JetBrains.Application.DataContext.IDataContext,System.Collections.Generic.ICollection{JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence},System.Func{JetBrains.ReSharper.Feature.Services.Tree.IOccurrenceBrowserDescriptor},JetBrains.ReSharper.Feature.Services.Occurrences.OccurrencePresentationOptions,System.Boolean,System.String,System.Func{JetBrains.Util.Pair{System.Collections.Generic.ICollection{JetBrains.ReSharper.Psi.ITypeElement},JetBrains.ReSharper.Feature.Services.Diagrams.TypeDependenciesOptions}})">
            <summary>
            shows a context popup menu filled with menu items. Each menu item presents corresponding occurrence.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrencePresentationManager.MergePresentationOptions(JetBrains.ReSharper.Feature.Services.Occurrences.OccurrencePresentationOptions,JetBrains.ReSharper.Feature.Services.Occurrences.OccurrencePresentationOptions)">
            <summary>
            Merges two specific occurrence and feature options into single one. 
            If any of feature option field is not default - use this feature's option field.
            </summary>
            <param name="occurrenceSpecificOptions">occurrence's options (might be initialized while constructing an occurrence)</param>
            <param name="featureOptions">presentation options provided by feature</param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurrences.TextDisplayStyle.ChainedPME">
            <summary>
            Display containing Project Model Element
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurrences.TextDisplayStyle.ChainedCME">
            <summary>
            Display containing Code Model Element
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurrences.GlobalLocationStyle.Icon">
            <summary>
            Like default but without any text in ShortcutText
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurrences.ContextStyle.SeveralProjectsWarning">
            <summary>
            Used to indicate occurrences which have several navigation points
            in same range from different contexts. 
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurrences.ContextStyle.Secondary">
            <summary>
            Secondary occurrences presented as "less important" than default occurrences. 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Occurrences.StringInCompiledElementOccurrence">
            <summary>
            todo: This type should not inherited from CompiledElementOccurrence
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Occurrences.RangeOccurrence">
            <remarks>
            DO NOT implement GetHashCode and Equals here, because an hashcode for this occurrence can changes
            Use <see cref="T:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceEqualityComparer"/>
            </remarks>>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Occurrences.ReferenceOccurrence">
            <remarks>
            DO NOT implement GetHashCode and Equals here, because an hashcode for this occurrence can changes
            Use <see cref="T:JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceEqualityComparer"/>
            </remarks>>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStyleAvailabilityChecker">
            <summary>
            It's temp solution. In Rider some component try to acces to protocol. FakeSolutionProvider should provide mock of protocol for fake solution.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.CodeFormatterPreview.FixupSettingsForPreview(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Modify code style settings for the preview
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStylePage">
            <summary>
            Rerpesents a base view model for formatter and code style setting pages.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.OptionPages.CodeEditing.XmlDocPage">
            <summary>
            Root options page for the XML Doc language options.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.OptionPages.CodeEditing.CodeEditingPage">
            <summary>
            Root options page for the global per-language options.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.Delay">
            <summary>
            Handling of arrows while popu is shown
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.mySolution">
            <summary>
            The solution in which we are
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.myTextControl">
            <summary>
            The editor to use
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.myContext">
            <summary>
            The current context
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.myAlarm">
            <summary>
            The alarm to use
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.myLBoundRangeMarker">
            <summary>
            Marker to the left bound
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.myIsShownOnTop">
            <summary>
            True if parameter info is shown on top
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.Context">
            <summary>Gets the context</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.TextControl">
            <summary>Gets the editor</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.CanCreateContextFast(JetBrains.ProjectModel.ISolution,JetBrains.DocumentModel.IDocument,JetBrains.ReSharper.Psi.ILanguageManager)">
            <summary>
            Quick check whether parameter info have chance to pop up in current context.
            Needed to fallback to Visual Studio's one.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.InvocableControl">
            <summary>
            Once a control, nowadays it's only a renderer for a single signature from the <see cref="!:ParameterInfoControl"/> form.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoHandlerFactory">
            <summary>
            A factory for instantiating parameter info handlers
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoHandlerFactory.IsAvailableFast(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Quick check whether parameter info have chance to pop up in current context.
            Needed to fallback to Visual Studio's one
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoAction">
            <summary>
            Action for showing parameter info in method calls (IDEA's Ctrl+P feature).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings">
            <summary>
            This settings class is obsolete. Use <see cref="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.Settings.ParameterInfoSettingsKey"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.ShowOneCandidate">
            <summary>
            Gets or sets flag indicating whether show one candidatein the popup or all.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.DelegatesAsLambdas">
            <summary>
            Gets or sets flag indicating whether show one candidatein the popup or all.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.UseArrowsForSignatureNavigation">
            <summary>
            Gets or sets flag indicating whether use arrows instead of Control+P in parameter info popup.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.AutopopupOn">
            <summary>
            Gets or sets flag indicating whether automatic parameter info popup is enabled.
            </summary> 
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.AutopopupDelay">
            <summary>
            Gets or sets delay to automatically show parameter info popup in.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.Argument">
            <summary>Argument under cursor</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.NamedArguments">
            <summary>
            Each array element contains argument name (if argument is named) or null or empty otherwise.
            Length of the array equals to number of arguments or 0.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.DefaultCandidate">
            <summary>Candidate, that is resolved, -1 otherwise</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.Candidates">
            <summary>Candidates available</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.Range">
            <summary>Invocation range. EndOffset == -1 if no right bound specified</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.IsIntellisenseEnabled(JetBrains.ProjectModel.ISolution,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Quick check whether intellisense is enabled by settings. Necessary to fallback to Visual Studio intellisense if desabled.
            </summary>
            <param name="solution">Current solution</param>
            <param name="settingsStore">Settings store bound to current context</param>
            <returns>True if enabled</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.CreateContext(JetBrains.ProjectModel.ISolution,JetBrains.DocumentModel.DocumentOffset,JetBrains.DocumentModel.DocumentOffset,System.Char,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Creates parameter info context.
            </summary>
            <param name="solution">Current solution</param>
            <param name="caretOffset">Caret position in the document</param>
            <param name="expectedLParenthOffset">Expected position of closing parenthesis if any. Used to close parameter info if caret moved out of arguments range</param>
            <param name="invocationChar">Character that triggered parameter info</param>
            <param name="settingsStore">Settings store bound to current context</param>
            <returns>Parameter info context or null if cannot create</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.Language">
            <summary>
            Language for which the factory is applicable. Used for quick check of availability
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.ShouldPopup(JetBrains.DocumentModel.DocumentOffset,System.Char,JetBrains.ProjectModel.ISolution,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Checks whether parameter info should pop up when specific character is typed in the document
            </summary>
            <param name="caretOffset">Caret position in the document</param>
            <param name="c">Character typed</param>
            <param name="solution">Current solution</param>
            <param name="settingsStore">Settings store bound to current context</param>
            <returns>True if should pop up</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.ImportantChars">
            <summary>
            Characters that may trigger automatic popup of parameter info provided by the factory
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider">
            <summary>
            Interface for creating parameter info handlers for different contexts
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.Context">
            <summary>
            Gets the current context provided by the handler.
            </summary>
            <value>
            The current context or <c>null</c> if the context is not available and session
            is finished.
            </value>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.HideFlags">
            <summary>
            Gets flags indicating when to close the window
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.CreatePopupWindowContext(JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates a popup window context.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextBase.Argument">
            <summary>
            Gets number of parameter we're standing at
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextBase.Range">
            <summary>
            Gets the left parenthesis offset
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextBase.FilterOut(System.Int32)">
            <summary>
            Filters out an invocation
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoPopupController">
            <summary>
            Interface for component which controls automatic parameter info popup
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.TypeArgumentCandidate.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Presentation.DeclaredElementMenuItemFormatter">
            <summary>
            Formats a declared element into a menu item descriptor, suitable for the GotoByName-style lists.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Presentation.DeclaredElementMenuItemFormatter.Format(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor,JetBrains.ReSharper.Feature.Services.Occurrences.OccurrencePresentationOptions,System.Boolean)">
            <summary>
            Formats a declared element into a menu item descriptor, suitable for the GotoByName-style lists.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Presentation.DeclaredElementMenuItemFormatter.Format(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Psi.Resolve.ISubstitution,JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor,JetBrains.ReSharper.Feature.Services.Occurrences.OccurrencePresentationOptions,System.Boolean,JetBrains.ReSharper.Psi.DeclaredElementPresenterMarking@)">
            <summary>
            Formats a declared element into a menu item descriptor, suitable for the GotoByName-style lists.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.IUsagesProvider">
            <summary>
            Provides usages
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameOptionsModel.ChangeTextOccurrences">
            
             For text renaming BOTH search and change options should be set
             
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.AtomicRenameBase.CreateRenamesConfirmationPage(JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IRenameWorkflow,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Page may contain custom options for the given rename.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IAtomicRenameFactory">
            <summary>
            Creates AtomicRenameBase implementations. Each implementation responsible for renaming single <see cref="T:JetBrains.ReSharper.Psi.IDeclaredElement"/>
            Implementations use applicability principle and should be marked by <see cref="T:JetBrains.Application.ShellFeaturePartAttribute"/>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IFileRenameProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IRenameSuspiciousNamesService">
            <summary>
            Implementation may provide extra names for renamed <see cref="T:JetBrains.ReSharper.Psi.IDeclaredElement"/> that will be used to 
            analyse possible changes in code semantic after rename.
            
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IRenameSuspiciousNamesService.GetPossibleReferenceNames(JetBrains.ReSharper.Psi.IDeclaredElement,System.String)">
            <summary>
            Returns names of entities that should be checked after rename
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameHelperBase.IsCheckResolvedTo(JetBrains.ReSharper.Psi.Resolve.IReference,JetBrains.ReSharper.Psi.IDeclaredElement)">
            <summary>
              Checks if  <paramref name="newReference" />
              after rename is bound onto <paramref name="newDeclaredElement" />
            </summary>
            <param name="newReference"></param>
            <param name="newDeclaredElement"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenamePartAttribute">
            <summary>
            Extension attribute for rename refactoring
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameRefactoringService.RenameFromContext(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Execute rename with provided atomic renames...
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameRefactoringService.CreateWorkflow(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            creates rename workflow that is available on the provided data
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.InlineWorkflowProvider">
            <summary>
            'Inline' refactoring workflow provider.
            Usage:
            <code>
            [InlineWorkflowProvider]
            internal class CustomInlineProvider : IInlineWorkflowProvider
            {
              public RefactoringWorkflow CreateWorkflow(ISolution solution)
              {
                return new CustomInlineWorkflow(solution);
              }
            }
            </code>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.MoveWorkflowProvider">
            <summary>
            'Move' refactoring workflow provider.
            Usage:
            <code>
            [RefactoringWorkflowProvider]
            internal class CustomMoveProvider : IMoveWorkflowProvider
            {
              public RefactoringWorkflow CreateWorkflow(ISolution solution)
              {
                return new CustomMoveWorkflow(solution);
              }
            }
            </code>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.RenameWorkflowProvider">
            <summary>
            'Rename' refactoring workflow provider.
            Usage:
            <code>
            [RefactoringWorkflowProvider]
            internal class CustomRenameProvider : IRenameWorkflowProvider
            {
              public RefactoringWorkflow CreateWorkflow(ISolution solution)
              {
                return new CustomRenameWorkflow(solution);
              }
            }
            </code>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.SafeDeleteWorkflowProvider">
            <summary>
            'SafeDelete' refactoring workflow provider.
            Usage:
            <code>
            [RefactoringWorkflowProvider]
            internal class CustomSafeDeleteProvider : ISafeDeleteWorkflowProvider
            {
              public RefactoringWorkflow CreateWorkflow(ISolution solution)
              {
                return new CustomSafeDeleteWorkflow(solution);
              }
            }
            </code>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.ConflictSearchResult">
            <summary>
            Result of conflict searching
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.ConflictSearchResult.PerformedRefactoring">
            <summary>
            Gets flag indicating whether the refactoring was performed during conflict evaluation
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.ConflictSeverity">
            <summary>
            Defines possible conflict severity
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.ConflictWithDeclaredElement">
            <summary>
            Conflict for case when a created declared element conflicts with another one
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.IConflict">
            <summary>
            Represents a conflict
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.IConflict.IsValid">
            <summary>
            Gets flag indicating whether data related to the conflict is valid
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.IConflict.Description">
            <summary>
            Gets conflict description
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.IConflict.Severity">
            <summary>
            Gets conflict severity
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.IConflictSearcher">
            <summary>
            Interface for creating conflict searchers
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IConflictSearcher.SearchConflicts(JetBrains.Application.Progress.IProgressIndicator,System.Boolean)">
            <summary>
            </summary>
            <param name="progressIndicator"></param>
            <param name="canPerformRefactoring">Determines if refactoring can perform refactoring during conflict search...</param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringDataConstants.DeclaredElementWithoutSelection">
            <summary>
            Declared Element for refactorings that are not supposed to run on selection. This rule handles case when name of an element is selected.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.FunctionWrapper`1">
            <summary>
            Wraps action with exception handlers. 
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringEvents.RefactoringFinished">
            <summary>
            finished either with commit or with cancel
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.CachingLanguageSpecificImpl`1">
            <summary>
            Simple wrapper on language specific container that caches that caches component instances.
            Lifetime of this instance should be limited by refactoring
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPageWithView.View">
            <summary>Gets the page view that is inserted into the refactoring view.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage">
            <summary>Represents custom UI page of refactoring workflow.</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.ContinueEnabled">
            <summary>
            Gets flag indicating whether the Continue button is enabled.
            This is ANDed with parent statuses, that include {not running workflow execution} and {validation passes}.
            This means that you don't have to check the validator. If it's the only thing you can think of — just return <c>True</c>.
            </summary>   
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Description">
            <summary>Gets page description.</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Title">
            <summary>Gets page title.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Initialize(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Initializes page. Called before each show of the page which is caused by "Continue" button.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.RefreshContents(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Refreshes internal page pointers. Returns <c>false</c> if refresh
            is unsuccessfull and refactoring should be canceled.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflow">
            <summary>
              Represents a refactoring workflow
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflow.PreExecute(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>Change documents before PSI transaction...</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflow.Execute(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>Change documents under PSI transaction...</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflow.PostExecute(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>Change documents after PSI transaction...</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflow.SuccessfulFinish(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>Set caret or perform navigation after document transaction...</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflow.UnsuccessfulFinish(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>Restore state in the case of failure..</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflowProvider">
            <summary>
            Provides yet another refactoring for the given action (Ex: 'Move to outer scope' adds functionality to the Move action. )
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.IWorkflowExec">
            <summary>
            Grouping interface for language specific helper of refactoring workflow.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.Nodes.StackTraceNode.RangeOfArea">
            <summary>
            Range of element that contains current node (for example, full name of method contains name of type)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceSession.SetText(System.String,System.Int32)">
            <summary>
            Replaces text of Stack Trace Window with <see cref="!:text"/>.
            Text from <see cref="!:endIndexOfAreaToParse"/> to the end will not be parsed
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceSession.SetText(System.String,System.String)">
            <summary>
            Replaces text of Stack Trace Window with text consisting of two parts:
            <see cref="!:parsedPart"/> and <see cref="!:skippedPart"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceSession.AppendPlainText(System.String)">
            <summary>
            Append <see cref="!:text"/> to the Stack Trace Window. It will not be parsed.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StackTraces.DeclaredElementsSerializer.SerializeDeclaredElement(JetBrains.ReSharper.Psi.IClrDeclaredElement)">
            <summary>The format is: declared element's psi module persistent id  + '/' + XMLDocId</summary>
            <param name="element"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StackTraces.DeclaredElementsSerializer.DeserializeDeclaredElement(JetBrains.ProjectModel.ISolution,System.String)">
            <param name="solution"></param>
            <param name="part">The format is: declared element's psi module persistent id  + '/' + XMLDocId</param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.StackTraces.ExceptionVisualizerInstaller">
            <summary>
            Makes the <c>ExceptionVisualizer</c> DLL class deploy to Visual Studio on install.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StackTraces.ExceptionVisualizerInstaller.JetBrains#Application#Install#IStaticInstaller#InstallStatic(JetBrains.Application.Install.Installer)">
            <summary>
            Called once on the object during the registration process.
            </summary>
            <param name="installer">The installer object that provides the installation data.</param>
            <returns>The list of the Registry entries to write, or <c>Null</c> if none.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceManager.Open(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TodoItems.ITodoPatternStorage.UpdateHash">
            <summary>
            Recalculates hash and returns true if it has not changed
            </summary>
            <returns>true if has not changed</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TodoItems.ITodoContentsProvider.GetTokenContentsRange(System.String,JetBrains.Util.TextRange,JetBrains.ReSharper.Psi.Parsing.TokenNodeType)">
            <summary>
            Used by todo manager to extract contents from tokens, e.g. remove slashes from comments. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TodoItems.TodoPatternStorage.UpdateHash">
            <summary>
            Recalculates hash and returns true if it has not changed
            </summary>
            <returns>true if has not changed</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.GroupingManagement.GroupingManager.GetGroupings``1(JetBrains.IDE.TreeBrowser.TreeModelBrowserDescriptorBase)">
            <summary>
            Collects a collection of providers of a specified type and aggregates all grouping from them
            </summary>
            <typeparam name="TItem">the type of items from descriptor</typeparam>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.FilterOccurrencesMenuAction.Execute(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            nb: this method will be only executed then IActionEvaluator will execute.
            For example, via shortcuts
            
            Mouse events should be handled by view itself.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncRegroupingController`1.RegroipingAsyncState.Idle">
            <summary>
            There are no regroiping activity operations running. 
            If needed, one could be started right away, and switch to <see cref="F:JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncRegroupingController`1.RegroipingAsyncState.Running"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncRegroupingController`1.RegroipingAsyncState.WaitForAllDocumentCommited">
            <summary>
            An async operation is currently running. When it completes, we'd go <see cref="F:JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncRegroupingController`1.RegroipingAsyncState.Idle"/>.
            If the groping change before the operation completes, we set the <see cref="F:JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncRegroupingController`1.RegroipingAsyncState.Cancelling"/> state (so that FIsCancelled starts returning <c>True</c> for the async operation), and wait for the state to become <see cref="F:JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncRegroupingController`1.RegroipingAsyncState.Idle"/> before running a new operation.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncRegroupingController`1.RegroipingAsyncState.Running">
            <summary>
            An async operation is currently running. When it completes, we'd go <see cref="F:JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncRegroupingController`1.RegroipingAsyncState.Idle"/>.
            If the groping change before the operation completes, we set the <see cref="F:JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncRegroupingController`1.RegroipingAsyncState.Cancelling"/> state (so that FIsCancelled starts returning <c>True</c> for the async operation), and wait for the state to become <see cref="F:JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncRegroupingController`1.RegroipingAsyncState.Idle"/> before running a new operation.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncRegroupingController`1.RegroipingAsyncState.Cancelling">
            <summary>
            The async operation were running when the model state was invalidated. This state holds until the async operation terminates, after which a new one is spawned automatically.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncRegroupingController`1.RegroipingAsyncState.Disposed">
            <summary>
            When the user dismisses descriptor, the pending async operation should be cancelled. This is the terminal state.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncRegroupingController`1.mySynchronizedLifetime">
            <summary>
            prevent provided lifetime termination when async operations is still in progress.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.CodePreview.ICodePanelPreviewControl.Show(JetBrains.Util.TextRange,JetBrains.ProjectModel.IProjectFile,System.Collections.Generic.IList{JetBrains.DocumentModel.DocumentRange})">
            <summary>
            Displays text range in a project file with all necessary features.
            </summary>
            <param name="documentTextRange">Text range to display.</param>
            <param name="projectFile">Project file with given text range</param>
            <param name="highlightedRanges">Additional ranges that should be displayed</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.CodePreview.ICodePanelPreviewControl.Show(JetBrains.ReSharper.Psi.IDeclaredElementEnvoy,System.Collections.Generic.IList{JetBrains.DocumentModel.DocumentRange})">
            <summary>
            Displays IDeclaredElementEnvoy except namespaces with all necessary features.
            </summary>
            <param name="declaredElement">IDeclaredElementEnvoy to display.</param>
            <param name="highlightedRanges">Additional ranges to highlight.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.CodePreview.ICodePanelPreviewControl.Show(JetBrains.ReSharper.Psi.IDeclaredElement,System.Collections.Generic.IList{JetBrains.DocumentModel.DocumentRange})">
            <summary>
            Displays IDeclaredElement except namespaces with all necessary features.
            </summary>
            <param name="declaredElement">IDeclaredElement to display.</param>
            <param name="highlightedRanges">Additional ranges to highlight.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.CodePreview.ICodePanelPreviewControl.Show(JetBrains.ProjectModel.IProjectFile,System.Collections.Generic.IList{JetBrains.DocumentModel.DocumentRange})">
            <summary>
            Displays file except namespaces with all necessary features.
            </summary>
            <param name="projectFile">File to display.</param>
            <param name="highlightedRanges">Additional ranges that should be displayed</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.CodePreview.ICodePanelPreviewControl.ShowDefaultMessage">
            <summary>
            Displays default message about code panel.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.SectionsManagement.IOccurrenceSectionProvider.GetTreeSections(JetBrains.ReSharper.Feature.Services.Tree.IOccurrenceBrowserDescriptor)">
            <summary>
            Update descriptor's sections (sorting, titling, adding new sections) and return them.
            </summary>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Tree.OccurrenceDescriptorConstants.OccurrenceUnloadThreshold">
            <summary>
            Constant to determine minimal occurrence count in descriptor if it should be unloaded
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Tree.IAsyncOccurrenceBrowserDescriptor.IsBusy">
            <summary>
            Should we show busy indication (for ex., progressbar)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Tree.IAsyncOccurrenceBrowserDescriptor.Progress">
            <summary>
            Current progress (from 0 to 100),
            Null means intermediate busy indication state
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.OccurrenceBrowserDescriptor.SetResults(System.Collections.Generic.ICollection{JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence},JetBrains.Application.Progress.IProgressIndicator,System.Boolean)">
            <summary>
            Sets occurrences to model.
            </summary>
            <param name="items"></param>
            <param name="indicator"></param>
            <param name="mergeKinds">use merging for different occurrence kinds</param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ActionsMenu.IOverridingWorkflowProvider">
            <summary>
            Overrides refactoring action (Ex: Inline rename overrides basic rename for local variables)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ActionsMenu.IOverridingWorkflowProvider.HideOtherActions(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Returns if all other refactorings should be hidden in this context...
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ActionsMenu.IWorkflow`1.ActionId">
            <summary>
            Id of an action that does the same as workflow. Used to present shortcut string and track activity
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ActionsMenu.IWorkflow`1.ShortActionId">
            <summary>
            Id of short action that overrides VS command. Used for presentation purposes only
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ActiveText.FileProtocolHandler">
            <summary>
            Special handling of local file links
            Treat hash as windows explorer verb
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbActionHandlesSuppression">
            <summary>
            A bulb action that has custom suppression implementation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.BulbActionBase.ExecuteBeforeProgressAndTransaction(JetBrains.ProjectModel.ISolution)">
            <summary>Called to prepare QuickFix or ContextAction execution.</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.BulbActionBase.Text">
            <summary>
            Popup menu item text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.BulbActionBase.ExecuteBeforePsiTransaction(JetBrains.ProjectModel.ISolution,JetBrains.DocumentManagers.Transactions.IProjectModelTransactionCookie,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Called to prepare QuickFix or ContextAction execution.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.BulbActionBase.ExecutePsiTransaction(JetBrains.ProjectModel.ISolution,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Executes QuickFix or ContextAction. Returns post-execute method.
            </summary>
            <returns>
            Action to execute after document and PSI transaction finish.
            Use to open TextControls, navigate caret, etc.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.BulbActionBase.ExecuteAfterPsiTransaction(JetBrains.ProjectModel.ISolution,JetBrains.DocumentManagers.Transactions.IProjectModelTransactionCookie,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>Executes after PSI transaction under Project/Document transaction</summary>
            <returns>Action to execute after document and PSI transaction finish. Use to open TextControls, navigate caret, etc.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.IBulbAction.Text">
            <summary>The text rendered directly on the bulb item.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.IBulbAction.Execute(JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl)">
            <summary>Invoked when the user executes this bulb item.</summary>
            <param name="solution">The currently open solution.</param>
            <param name="textControl">The text control that is currently open</param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction">
            <summary>
            A bulb action that appears in popup window. It <strong>never</strong> appears in a bulb menu.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction.PopupKey">
            <summary>This key used for popup suppressing if user pressed 'Esc' key</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction.PopupAnchorings">
            <summary>Uses <see cref="P:JetBrains.UI.Anchoring2D.AnchorTopOrBottom"/> by default.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction.CreateBulbActions">
            <summary>The bulb actions that this popup supports.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction.IsAvailable(JetBrains.Util.IUserDataHolder)">
            <summary>
            Check if this action is available at the constructed context.
            Actions could store precalculated info in <paramref name="cache"/> to share it between different actions
            </summary>
            <returns>true if this bulb action is available, false otherwise.</returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.DebuggerFacade.DebugSessionDescriptor.RuntimeArgs">
            <summary>
            Arguments passed to runtime dotnet.exe or mono.exe
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.DebuggerFacade.DebugSessionDescriptor.IsExecuteAsIs">
            <summary>
            Run <see cref="F:JetBrains.ReSharper.Feature.Services.DebuggerFacade.DebugSessionDescriptor.ExecutablePath"/>, <see cref="F:JetBrains.ReSharper.Feature.Services.DebuggerFacade.DebugSessionDescriptor.CommandLineArgs"/> without modifications, assuming runtime and runtime params are already in there.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.resources.IconsForIconThemeSelectionSamplePsiServices">
            <summary>
            Generic PSI-Services theme-sample icons.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.OnSolutionCloseNotifier.SolutionIsAboutToClose">
            <summary>
            Maybe fired without locks.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.StructuralSearch.OrPatternMatcher">
            <summary>
            different from <see cref="T:JetBrains.ReSharper.Feature.Services.StructuralSearch.OrMatcher"/> that it could match pattern with placeholder using MatchingContext.CheckAllVariants
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.StructuralSearch.Settings.RecentSearchSettings">
            <summary>
            Index is a timestamp in format yyyyMMddHHmmssffff
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.StructuralSearch.IElementMatcher.Words">
            <summary>
            For WordIndex lookup. Only words specific for this element, not for children or siblings.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.AssociativeMatcherUtil.Match(System.Collections.Generic.IList{JetBrains.ReSharper.Psi.Tree.ITreeNode},JetBrains.ReSharper.Feature.Services.StructuralSearch.IMatchingContext,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Feature.Services.StructuralSearch.IElementMatcher},JetBrains.Util.Graphs.BipartiteGraph{JetBrains.ReSharper.Feature.Services.StructuralSearch.IElementMatcher,JetBrains.ReSharper.Psi.Tree.ITreeNode}@,System.Collections.Generic.List{JetBrains.ReSharper.Psi.Tree.ITreeNode}@)">
            <summary>
            
            </summary>
            <remarks>
            <paramref name="operands"/> is truncated, only unmatched operands are left
            </remarks>
            <param name="operands"></param>
            <param name="context"></param>
            <param name="matchers"></param>
            <param name="graph"></param>
            <param name="matchedOperands"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.AssociativeMatcherUtil.MatchExpression(System.Collections.Generic.IList{JetBrains.ReSharper.Psi.Tree.ITreeNode},System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Feature.Services.StructuralSearch.IElementMatcher},JetBrains.ReSharper.Feature.Services.StructuralSearch.IMatchingContext,System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Collections.Generic.ICollection{JetBrains.ReSharper.Psi.Tree.ITreeNode}})">
            <summary>
            Returns matched operands, <value>null</value> if not matched
            </summary>
            <param name="operands"></param>
            <param name="matchers"></param>
            <param name="context"></param>
            <param name="getOperands"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.IStructuralSearchPatternValidator.Validate(JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralSearchPattern)">
            <summary>
            Returns null if pattern is correct
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.MatchingContext.CreateFromParentContext(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Feature.Services.StructuralSearch.IMatchingContext)">
            <summary>
            Creates matching context using parent context variant as initial variant.
            It is used only into js2ts transformations.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SequenceMatchingContext`1.CreateFromParentContext(System.Collections.Generic.IEnumerable{`0},JetBrains.ReSharper.Feature.Services.StructuralSearch.IMatchingContext)">
            <summary>
            Creates sequence matching context using parent context variant as initial variant.
            It is used only into js2ts transformations
            </summary>   
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.StructuralSearchPatternValidator.Validate(JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralSearchPattern)">
            <summary>
            Returns null if pattern is correct
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.StructuralSearch.IMetaPlaceholder">
            <summary>
            Marker interface
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralMatcher.Words">
            <summary>
            ALL these words MUST be in matched snippet
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralMatcher.GetExtendedWords(JetBrains.ProjectModel.ISolution)">
            <summary>
            Words that MAY or MAY NOT be in matched snippet, but AT LEAST ONE word from this list MUST be there.
            MUST NOT include Words (because this constaint applies after).
            When empty enumerable is returned, constraint is not applied.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.StructuralSearch.SequenceMatcher`1.DeepAnalysis">
            <summary>
            Deep analysis tries all cases of possible sequence matching
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchPatternParams.IgnoreEmptyStatements">
            <summary>
            Ignore empty statements.
            Useful when matching statement placeholders in C#: "$stmt$;" pattern matches even if there's no empty statement at the end.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchPatternParams.TreatPostfixAndPrefixOperatorEquivalent">
            <summary>
            Only if they are not used in expressions
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchPatternParams.MatchAllMembersWithoutModifiers">
            <summary>
            If this option is set pattern "$type$ $method$($args$) $stmt$" will match all methods no matter
            which modifiers they have (private/public, static, etc.)
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchPatternParams.MatchAllSymbolsWithoutAttributes">
            <summary>
            If this option is set and there's no attributes on a symbol in a given pattern then respective symbol will be matched
            no matter if there are attributes in code or not.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchPatternParams.MatchMethodParameterWithThisRefOut">
            <summary>
            If there's no ref or out or this modifier in pattern, pattern will match bare parameters as well as parameters with ref or out or this modifier.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchPatternParams.TypePlaceholderMatchesVoid">
            <summary>
            When Type placeholder is used as a return value of a method allows or disallows match void.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Options.HostAutoFormatSettings">
            <summary>
            Host (e.g. VS) autoformat (e.g. Pretty Listing) settings
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.Render.IXmlDocHeaderPresenter.Present(System.Text.StringBuilder,JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Psi.Modules.IPsiModule,JetBrains.ReSharper.Feature.Services.QuickDoc.Render.CrefManager)">
            <summary>
            Presents the declared element as a header for HTML quick doc
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocControl">
            <summary>
            Displays QuickDoc
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocControl.myBrowser">
            <summary>
            The Web browser control than renders the content.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocControl.DocumentText">
            <summary>
            Text displaying in control. Can be used for hacks
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocControl.GetPrefferedWidth">
            <summary>
            Performs layout calculations to eliminate scrolling.
            </summary>
            <returns>Width of control without line breaks and horizontal scrolling</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocControl.GetPrefferedHeight(System.Int32)">
            <summary>
            Performs layout calculations to eliminate scrolling
            </summary>
            <param name="desiredWidth">Desired control width</param>
            <returns>Height of control without vertical scrolling</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocController">
            <summary>
            Controller for QuickDocControl. Performs navigation, tracks history. It <b>MUST</b> be explicitly disposed. 
            Control can be disposed instead of controller.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocController.#ctor(JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Psi.PsiLanguageType,JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocControllerManager)">
            <summary>
            Creates controller
            </summary>
            <param name="solution">Solution</param>
            <param name="language">Default language to render</param>
            <param name="quickDocManager"></param>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocController.ContentUpdated">
            <summary>
            Raised when control content is updated
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocController.KeyPressed">
            <summary>
            Raised when key is pressed. Currenly only Escape passed.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocController.DefaultLanguage">
            <summary>
            Default language for view
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocController.OpenInEditor">
            <summary>
            Opens current item in VS editor
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocController.UpdateContent">
            <summary>
            Updates the entry of control
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.QuickDoc.IQuickDocPresenter">
            <summary>
            Quick doc is documented.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.Items.HighlightingCleanupItemQuickFixBase">
            <summary>
            QuickFixes derived from the class participate in <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.HighlightingCleanupItemAttribute"/> code cleanup module.
            All ancestors of the class must be marked with <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.HighlightingCleanupModule`1"/>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFix">
            <summary>
            Represents a quick-fix. Quick-fixes are bulb actions that appear in response to
            highlighted errors or suggestions (see <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting"/>), and typically
            serve to correct the highlighted problem.
            </summary>
            <remarks>>If your quick-fix consists of just a single bulb items, you can inherit from
            <c>BulbActionBase</c> in addition to implementing this interface.</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFix.IsAvailable(JetBrains.Util.IUserDataHolder)">
            <summary>
            Check if this action is available at the constructed context.
            Actions could store precalculated info in <paramref name="cache"/> to share it between different actions
            </summary>
            <returns>true if this bulb action is available, false otherwise.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFixes.CreateCustomWarningActions(JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting,JetBrains.ProjectModel.ISolution,JetBrains.DocumentModel.DocumentRange)">
            <summary>Get actions which could disable given specific highlighting</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.QuickFixes.QuickFixAttribute">
            <summary>
            Indicates that the class, marked with this attribute, is a quick-fix.
            It will be automatically registered for all the highlighting types, for which it has public constructors.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Text.ITrigramIndex.IsAcceptableFromCaches(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Indicates whether provided file could be passed to current index from common caches infrastructure.
            </summary>
            <param name="sourceFile">A source file to check.</param>
            <returns>true if provided source file could be passed to index from common caches infrastructure; otherwise, false.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Text.ITrigramIndex.IsAcceptable(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Indicates whether provided file could be passed to current index manually or from caches infrastructure.
            </summary>
            <param name="sourceFile">A source file to check.</param>
            <returns>true if provided source file could be passed to index manually or from common caches infrastructure; otherwise, false.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Text.ITrigramIndex.GetFilesContainingAnyQuery(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Get a collection of source files that contain text that mathces to at least one search query of provided list.
            </summary>
            <param name="queries">The collection of text fragments to search.</param>
            <param name="ensureIsWord">Indicates whether to considered a successful match only if matched text is a separate word.</param>
            <returns>The collection of <see cref="T:JetBrains.ReSharper.Psi.IPsiSourceFile"/> items that satisfies at least one of the search queries.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Text.ITrigramIndex.GetFilesContainingQueries(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Get a collection of source files that contain text that mathces to all provided search queries.
            </summary>
            <param name="queries">The collection of text fragments to search.</param>
            <param name="ensureIsWord">Indicates whether to considered a successful match only if matched text is a separate word.</param>
            <returns>The collection of <see cref="T:JetBrains.ReSharper.Psi.IPsiSourceFile"/> items that satisfies the search queries.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Text.ITrigramIndex.GetFilesContainingQuery(System.String,System.Boolean)">
            <summary>
            Get a collection of source files that contain text that mathces to rovided search queriy.
            </summary>
            <param name="query">A text fragments to search.</param>
            <param name="ensureIsWord">Indicates whether to considered a successful match only if matched text is a separate word.</param>
            <returns>The collection of <see cref="T:JetBrains.ReSharper.Psi.IPsiSourceFile"/> items that satisfies the search queriy.</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Text.Trigrams.TrigramToken">
            <summary>
            Trigram Token is an <see cref="T:System.Int32"/> value that identifies a set of three characters with following format:  
            [31] - indicates whether 31 bit hash is used (otherwise, 16 bit)  
            [31 - 0] - the result of the hash function (normal version) if [31] bit is set
            [15 - 0] - the result of the hash function (short version)  if [31] bit is not set
            
            a, b, c - trigram characters
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Text.Trigrams.TrigramToken._hash">
            <summary>
            The <see cref="T:System.Int32"/> value hash code of the related characters.
            </summary>   
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Text.Trigrams.TrigramToken.#ctor(System.Char,System.Char,System.Char)">
            <summary>
            Creates a new instance of the <see cref="T:JetBrains.ReSharper.Feature.Services.Text.Trigrams.TrigramToken"/> structure with three characters.
            </summary>
            <param name="a">The first character.</param>
            <param name="b">The second character.</param>
            <param name="c">The third character.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Text.Trigrams.TrigramToken.#ctor(System.Char,System.Char,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:JetBrains.ReSharper.Feature.Services.Text.Trigrams.TrigramToken"/> structure representing word marker.
            </summary>
            <param name="a">The first character.</param>
            <param name="b">The second character.</param>
            <param name="c">The third character int value.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Text.Trigrams.TrigramToken.Equals(JetBrains.ReSharper.Feature.Services.Text.Trigrams.TrigramToken)">
            <summary>
            Indicates whether the current trigram token is equal to another trigram token.
            </summary>
            <param name="other">A <see cref="T:JetBrains.ReSharper.Feature.Services.Text.Trigrams.TrigramToken"/> to compare with this structure.</param>
            <returns>
            true if the current trigram token is equal to the <paramref name="other" /> token; otherwise, false.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Text.Trigrams.TrigramToken.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Text.Trigrams.TrigramToken.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.TypingAssist.IActionContext.ActionId">
            <summary>Gets the character that were typed.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.TypingAssist.SkippingTypingAssist">
            <summary>
            This typing assist skips (overtypes) string that is set in the document data by code completion or other typing assist.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TypingAssist.TypingAssistBase.IsTypingAssistAvailable(JetBrains.TextControl.ITextControl)">
            <summary>
            Is typing assist available in the current state of the TextControl
            </summary>
            <param name="textControl"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TypingAssist.TypingAssistBase.DoActionAndConvertIndentToVirtual(JetBrains.TextControl.ITextControl,JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter,System.Func{System.Int32})">
            <summary>
            Return -2 from doAction to indicate failed transaction
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TypingAssist.TypingAssistForCLikeLanguage`1.GetValidSplitOffset(System.String,JetBrains.ReSharper.Psi.Parsing.TokenNodeType,System.Int32)">
            <param name="str">String literal, including opening and ending double-quotes</param>
            <param name="offset">Current offset in literal</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TypingAssist.BracketMatcher.FindMatchingBracket(JetBrains.ReSharper.Psi.Parsing.CachingLexer,System.Int32@)">
            <summary>
            Try to find the corresponding matching bracket for the given
            </summary>
            <param name="cachingLexer">Caching lexer positioned at the source bracket</param>
            <param name="pos">position of paired bracket (or -1 if none)</param>
            <returns>true if matching bracket was found. If returns false, the pos may contain position of incorrect bracket</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.FontInfo">
            <summary>
            Font information
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.FormattedText">
            <summary>
            Text markup
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.FormattedText.Lines">
            <summary>
            Gets array of lines to paint
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText">
            <summary>
            Represents an active text
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText.ColorScheme">
            <summary>
            Gets or sets color scheme
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText.Content">
            <summary>
            Gets or sets content
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText.Paint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText.CalculateHeight(System.Drawing.Graphics,System.Int32)">
            <summary>
            Gets text full height
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText.DefaultFont">
            <summary>
            Gets or sets default font for text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText.NotifyMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Notify active text about mouse move
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText.GetAnchor(System.Drawing.Point)">
            <summary>
            Gets currently hovered anchor
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.Impl.TextMarkup">
            <summary>
            Summary description for MarkupModel.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.TextLine">
            <summary>
            Line of text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.TextPart">
            <summary>
            Part of text line with common text attributes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.AsyncTreeBrowser.TreeAsyncModel">
            <summary>
            Describes model which is built on demand
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings">
            <summary>
            Specifies the configuration for the <see cref="!:CompletionPickerEdit"/> control.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.CompletionModel">
            <summary>
            Gets or sets the flat model that works for completing the text you type into the control.
            Can be set only once.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.ExpandPickerItem">
            <summary>
            When the tree picker is building its model, supplies the items for the next level.
            Fill the <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.Out"/> list with the children of <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.In"/>, who must not be <c>Null</c>.
            When <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.In"/> is <c>Null</c>, root items are requested. 
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.IsSelectingAllTextOnCompletion">
            <summary>
            When user executes a completion list item or a picker tree item and its text is planted into the editbox (replacing any existing selection), determines whether the whole contents of the edit box is selected.
            The default is <c>True</c>, which helps with correcting any mistaken selection. <c>False</c> is recommended when you implement sequential completion.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.PickerItemPresenter">
            <summary>
            Gets or sets the presenter for the picker (drop-down tree) items.
            This value can only be set once.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.TranslateCompletionItem">
            <summary>
            When a completion list item is executed, its text is inserted into the edit box.
            In case the text should be modified before insertion (eg FQN instead of a short name), this event should be sinked.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.TranslatePickerItem">
            <summary>
            When a picker tree item is executed, its text is inserted into the edit box.
            In case the text should be modified before insertion (eg FQN instead of a short name), this event should be sinked.
            Setting the <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.Out"/> to <c>Null</c> prevents the item from being picked (eg for group nodes that are only present to hold the child elements).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser">
            <summary>
            Base class for <see cref="T:JetBrains.ReSharper.Psi.IDeclaredElement"/>-based choosers.
            Those are used for setting up the <see cref="!:CompletionPickerEdit"/>s.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.CompletionItemsPassFilter">
            <summary>
            Gets or sets the filter that narrows down the completion items (in the completion menu).
            Can be assigned only once.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.Language">
            <summary>
            The language this instance is working in.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.Libraries">
            <summary>
            Defines whether the libraries should be included or not when searching for items.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.PickerItemsPassFilter">
            <summary>
            Gets or sets the filter that narrows down the picker items (in the drop-down picker tree).
            This is usually a superset of the <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.CompletionItemsPassFilter"/> items, as it has to include the nodes that contain the useful items. Items under the excluded nodes are excluded automatically.
            Can be assigned only once.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.Settings">
            <summary>
            Gets the settings applicable to the <see cref="!:CompletionPickerEdit"/>.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.Solution">
            <summary>
            Gets the solution we're browsing.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.GetFqName(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Psi.PsiLanguageType)">
            <summary>
            Rip FQ Name from a declared element, in the specified language, suitable for use by the picker owner.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.GetDeclarationsCache">
            <summary>
            Gets the declarations cache for the current models (on solution, either libs or no-libs).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.GetItems(JetBrains.ReSharper.Psi.IDeclaredElement)">
            <summary>
            Retrieves nested items visible to solution for specified element
            </summary>
            <param name="element"><c>Null</c> for the root.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.GetNestedItems(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Psi.Caches.ISymbolScope)">
            <summary>
            Expands the level of the tree picker.
            </summary>
            <param name="element"><c>Null</c> for the root.</param>
            <param name="cache">Declarations cache</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.InitCompletion(System.Func{JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ICompletionGotoController})">
            <summary>
            Inits the plain completion support.
            </summary>
            <param name="FCreateCompletionController"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.InitPicker">
            <summary>
            Inits the tree drop-down support.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.TypeChooser">
            <summary>
            Customizes the <see cref="!:CompletionPickerEdit"/> for choosing types.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.TypeChooser.CreateSettings(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.ReSharper.Psi.PsiLanguageType,JetBrains.Application.Threading.IShellLocks,JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext)">
            <summary>
            Creates settings for supplying into the <see cref="!:CompletionPickerEdit"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.TypeChooser.TryGetTypeElement(System.String)">
            <summary>
            Tries to look up a declared element for its FQ Name in the current <see cref="P:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.Language"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.TypeChooser.CreateCompletionController(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.Application.Threading.IShellLocks,JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext)">
            <summary>
            Creates the chooser-specific completion controller.
            </summary>
            <param name="lifetime"></param>
            <param name="solution"></param>
            <param name="librariesFlag"></param>
            <param name="locks"></param>
            <param name="mainWindowPopupWindowContext"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.FileChooser">
            <summary>
            Base class for <see cref="T:JetBrains.ReSharper.Psi.IDeclaredElement"/>-based choosers.
            Those are used for setting up the <see cref="!:CompletionPickerEdit"/>s.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.FileChooser.CompletionItemsPassFilter">
            <summary>
            Gets or sets the filter that narrows down the completion items (in the completion menu).
            Can be assigned only once.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.FileChooser.PickerItemsPassFilter">
            <summary>
            Gets or sets the filter that narrows down the picker items (in the drop-down picker tree).
            This is usually a superset of the <see cref="F:JetBrains.ReSharper.Feature.Services.UI.FileChooser.CompletionItemsPassFilter"/> items, as it has to include the nodes that contain the useful items. Items under the excluded nodes are excluded automatically.
            Can be assigned only once.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.FileChooser.Settings">
            <summary>
            Gets the settings applicable to the <see cref="!:CompletionPickerEdit"/>.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.FileChooser.Solution">
            <summary>
            Gets the solution we're browsing.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.FileChooser.InitPicker">
            <summary>
            Inits the tree drop-down support.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.FileChooser.CreateCompletionController(JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates the chooser-specific completion controller.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.FileChooser.InitCompletion(JetBrains.DataFlow.Lifetime,JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Inits the plain completion support.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.NamespaceChooser">
            <summary>
            Customizes the <see cref="!:CompletionPickerEdit"/> for choosing namespaces.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.NamespaceChooser.CreateSettings(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ProjectModel.IProject,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.ReSharper.Psi.PsiLanguageType,JetBrains.Application.Threading.IShellLocks,JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext)">
            <summary>
            Creates settings for supplying into the <see cref="!:CompletionPickerEdit"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.NamespaceChooser.TryGetNamespace(System.String)">
            <summary>
            Tries to look up a declared element for its FQ Name in the current <see cref="P:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.Language"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.NamespaceChooser.CreateCompletionController(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.Application.Threading.IShellLocks,JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext)">
            <summary>
            Creates the chooser-specific completion controller.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionInfo">
            <summary>Info about loaded context action</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionInfo.DataProviderType">
            <summary>Type of CA constructor parameter</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute">
            <summary>
            Indicates that the class, marked with this attribute, is a context action.
            See <see cref="T:JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction"/> for more information.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute.Group">
            <summary>The context action group (e.g., "C#", "VB", etc.) to which the context action belongs.</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute.Name">
            <summary>The name of this context action.</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute.Description">
            <summary>Textual description of what the context action does.</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute.Priority">
            <summary>A number indicating the priority of the action. Affects the position of the action in the pop-up menu.</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute.Disabled">
            <summary>Determines whether the action is disabled by default.</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute.AllowedInNonUserFiles">
            <summary>Determines whether the action is allowed in non-user files.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction">
            <summary>
            Represents a context action. Context actions are bulb actions that appear depending on
            the location currently being edited. Context actions must be decorated with the
            <see cref="T:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute"/>, and their constructor should take a parameter of
            a type derived from <see cref="T:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataProvider"/>.
            </summary>
            <remarks>>If your context action consists of just a single bulb items, you can inherit from
            <c>BulbActionBase</c> in addition to implementing this interface.</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction.IsAvailable(JetBrains.Util.IUserDataHolder)">
            <summary>
            Check if this action is available at the constructed context.
            Actions could store precalculated info in <paramref name="cache"/> to share it between different actions
            </summary>
            <returns>true if this bulb action is available, false otherwise.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataProvider.TreeOffset">
            <summary>Caret offset in PSI tree</summary>
            <remarks>
            Can be <see cref="F:JetBrains.ReSharper.Psi.TreeOffset.InvalidOffset"/> in the case if caret is out of PSI tree,
            but somewhere in document range.
            </remarks>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataProvider.SelectedTreeRange">
            <summary>
            Selection range in PSI tree, preffered thing to check actions availability at some range.
            Returns zero-width range at caret offset in PSI tree if there is no selection in editor.
            Invalid range if caret/selection is out of PSI tree, but in document range (like over '///' in XML docs).
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataProvider.DocumentCaret">
            <summary>Caret offset in text document. Should never return invalid offset</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataProvider.DocumentSelection">
            <summary>
            Selection range in text document.
            Returns zero-width range at caret offset if there is no selection in editor.
            Should never return invalid range
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataProvider.GetSelectedElement``1(System.Boolean,System.Boolean)">
            <summary>
            Returns element under caret
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="checkDocumentRange">If documentRange should be checked for validness</param>
            <param name="ignoreSpaces">If spaces should be ignored</param>
            <returns>Element under caret</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Descriptions.DeclaredElementDescriptionPresenter">
            <summary>
            DeclaredElementDescriptionPresenter can fetch descriptions and obsolete flags for declared elements from various sources: XML docs, CLR attributes, external documentation.
            To add a new source of information, implement IDeclaredElementDescriptionProvider in a solution-level component.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Descriptions.IDeclaredElementDescriptionProvider.GetElementDescription(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Feature.Services.Descriptions.DeclaredElementDescriptionStyle,JetBrains.ReSharper.Psi.PsiLanguageType,JetBrains.ReSharper.Psi.Modules.IPsiModule)">
            <summary>
            This method should return description according to the style but excluding obsolete description,
            or null if there is no description for a given element.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Gestures.IDragDropExecutor">
            <summary>
            supposed to be SolutionFeaturePart component
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Gestures.IDragDropExecutor.PresentableName">
            <summary>
            The presentable name in case multiple executors are available on the same targerts
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Gestures.IDragDropExecutor.Parameters">
            <summary>
            the format of the parameters which can be given to Execute
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Gestures.IDragDropExecutor.Execute(System.Object,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            synchronously executes the drag n drop gesture
            </summary>
            <param name="droppedItem"></param>
            <param name="dropDestination"></param>
            <param name="parameters"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Psi.UnresolvedDeclaredType">
            <summary>
            Represents an unresolved type name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Psi.UnresolvedDeclaredType.Candidates">
            <summary>
            Gets collection of possible resolution candidates
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Psi.UnresolvedDeclaredType.Resolution">
            <summary>
            Gets or sets resolution for this unresolved type
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.SelectEmbracingConstructUtil.TryFindRangeSeparatedByEmptyLines``1(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean},System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean},System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean},System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean})">
            <summary>
            Try to find a group of statements separated by blank lines
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.DotSelection`1.GetParentInternal(JetBrains.ReSharper.Psi.Tree.ITokenNode)">
            <summary>
            Implements special processing of some tokens
            </summary>
            <param name="tokenNode"></param>
            <returns>null, if no special processing required</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.ISelectedTreeRange">
            <summary>
            If an ISelectedRange in implemented on a PSI it should imlement this interface in order to be used in combined features 
            i.e. ASP extend selection
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.GetTargetPlatform(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile)">
            <example>"x86", "x64", "msil"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.GetPlatformShortName(JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <example>".Net Framework v4.0 Client"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.PresentNameAndVersion(JetBrains.Metadata.Utils.AssemblyNameInfo)">
            <example>"Assembly, 1.2.3.4"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.PresentNameAndVersion(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile)">
            <example>"Assembly, 1.2.3.4"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.PresentVersionAndPlatform(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile)">
            <example>"1.2.3.4, x86, .Net Framework v4.5"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.PresentNameVersionPlatform(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile)">
            <example>"Assembly, 1.2.3.4, x86, .Net Framework v4.5"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.PresentVersionPlatformGac(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile,JetBrains.Application.platforms.IPlatformManager)">
            <example>"2.0.0.0, x86, .Net Framework v2.0, GAC"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.PresentNameVersionPlatformGac(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile,JetBrains.Application.platforms.IPlatformManager)">
            <example>"System.Web, 2.0.0.0, x86, .Net Framework v2.0, GAC"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.PresentVersionPlatformGacConfiguration(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile,JetBrains.Application.platforms.IPlatformManager)">
            <example>"1.0.0.0, x86, .Net Framework v4.0, Debug"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.PresentConfiguration(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile)">
            <summary>
            Present compilation configuration
            ("", "Debug" or "Release")
            (based on assembly folder name)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.CachingFinder.#ctor(JetBrains.ReSharper.Psi.IPsiServices,JetBrains.ReSharper.Psi.Search.ISearchDomain)">
            <summary>
            Create CachingFinderInstance
            </summary>
            <param name="psiServices"></param>
            <param name="domain">Each search request will be intersected with this search domain</param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.IDeclaredElementInstanceToDataMap`2">
            <summary>
            IDeclaredElementInstance to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.DeclaredElementInstancePointerMap`2">
            <summary>
            IDeclaredElementInstance to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.IDeclaredElementToDataMap`1">
            <summary>
            IDeclaredElement to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.ElementPointerMap`1">
            <summary>
            IDeclaredElement to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.ElementEnvoyMap`1">
            <summary>
            IDeclaredElement to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.PsiDataRules.DeclaredElementsFromDocument(JetBrains.Application.DataContext.IDataContext,JetBrains.ReSharper.Feature.Services.Util.SourceFilesMask)">
            <summary>
            See <see cref="T:JetBrains.Application.DataContext.DataRule`1"/> ctor for tuple semantic comments.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.TextControlToPsi.SelectReference(JetBrains.DocumentModel.DocumentOffset,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.Resolve.IReference})">
            <summary>
            Selects a reference from DIFFERENT psi files that user is most likely to bear in mind
            </summary>
            <remarks>Generally, we prefer references to the right of the position</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.TextControlToPsi.SelectReference(JetBrains.ReSharper.Psi.Tree.IFile,JetBrains.DocumentModel.DocumentOffset,System.Collections.Generic.IReadOnlyList{JetBrains.ReSharper.Psi.Resolve.IReference})">
            <summary>
            Selects a reference from the same psi file that user is most likely to bear in mind
            </summary>
            <remarks>Generally, we prefer references to the right of the position</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetRelatedDeclarations(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default: yield break
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetRelatedAndFilterHidden(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default: yield return declaration
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsHidden(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default returns 'false' for type declarations in files without IPsiSourceFile/IProjectFile
            (like .g.cs generated files in various XAML projects).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsCodeBehindClass(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsUserTextDeclaration(JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            Works on auto-generated type members. By default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.CanContainSeveralClasses(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.CanImplementInterfaces(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.CanHaveConstructors(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.SuperClassCanBeChanged(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.SuperClassNameMustBeFull(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetNamespaceForElementsMovedToExternalScope(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - typeElement.GetContainingElement&lt;INamespaceDeclaration&gt;(false);
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetFolderForElementsMovedToExternalScope(JetBrains.ProjectModel.IProjectFile,System.String,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - projectFile.Location.Directory
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetPrettyName(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration,System.Boolean)">
            <summary>
            Default - element.DeclaredName
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsOperationPossibleOnUnmappedRange(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetDocumentRangeForPartiallyUnmappedNode(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - InvalidRange
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsOperationPossibleOnUnmappedRange(JetBrains.ReSharper.Psi.ITreeRange)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.CanDeclarationBeOverloaded(JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetMvcViewWithModelBaseTypes">
            <summary>
            Default - empty
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.IImplicitReference">
            <summary>
            Implicit references, which target determined by context (not always in this file), not owner itself
            Also, <see cref="M:JetBrains.ReSharper.Psi.Resolve.IReference.BindTo(JetBrains.ReSharper.Psi.IDeclaredElement)" /> has no effect on this reference
            </summary>
            <remarks>Such reference will be always selected in <see cref="M:JetBrains.ReSharper.Feature.Services.Util.CandidatesUtil.SelectGoodReferences(System.Collections.Generic.ICollection{JetBrains.ReSharper.Psi.Resolve.IReference})" /></remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.ImageUtil.AdjustBrightness(System.Drawing.Image,System.Int32)">
            <summary>
            changes the brightness of an image.
            </summary>
            <param name="image">input image</param>
            <param name="value">brightness value, should be between -255 and 255</param>
            <returns>output image</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.ReferenceSorter">
            <summary>
            Sorts references for transforming them in correct order
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.CodeInsightUtil">
            <summary>
            Contains utility methods for code insight features
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ValueTracking.Engine.ValueTrackingNodesRepository">
            <summary>
            Map of IElements to value tracking nodes
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ValueTracking.Nodes.IPreExpandedNode.InitNode(JetBrains.Application.Progress.SubProgressIndicator)">
            <summary>
            Init data of pre-expanded node (usually calculates set of elements to search)
            May be called several times (when user cancells action)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bookmarks.BookmarksHelper">
            <summary>
            Helper methods for bookmarks.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bookmarks.BookmarksHelper.GetBookmarkCoordsOffset(JetBrains.DocumentModel.IDocument,JetBrains.DocumentModel.DocumentCoords)">
            <summary>
            Returns offset of bookmark in specified document, corrected by real document content structure.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.IoC.IoCType.Custom">
            <summary>
            obtained from annotation attributes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.MatchingBrace.ISimpleMatchingBraceProvider">
            <summary>
            Provides token-level information about matching braces
            </summary>
            <remarks>
            <see cref="T:System.Collections.Generic.IComparer`1"/> must be implemented according to the following rules:
            <list type="bullet">
              <item><description>It is defined on brace pairs, result for open and close brace of the same pair is the same</description></item>
              <item><description>If one brace pair is "greater" than another that means that balance of "lesser" brace pair outside of "greater" brace pair doesn't count inside the "greater" brace pair</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.src.Explanatory.CodeInspectionWikiResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.src.Explanatory.CodeInspectionWikiResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.src.Explanatory.CodeInspectionWikiResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.src.Explanatory.CodeInspectionWikiResources.CodeInspectionWiki">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;CodeInspectionWiki&gt;
              &lt;Item Id=&quot;ForControlVariableIsNeverModified&quot; Url=&quot;http://confluence.jetbrains.net/display/ReSharper/&apos;for&apos;+loop+control+variable+is+never+modified&quot;/&gt;
              &lt;Item Id=&quot;ValueParameterNotUsed&quot; Url=&quot;http://confluence.jetbrains.net/display/ReSharper/%27value%27+parameter+is+not+used&quot;/&gt;
              &lt;Item Id=&quot;AccessToStaticMemberViaDerivedType&quot; Url=&quot;http://confluence.jetbrains.net/display/ReSharper/Access+to+a+static+member+of+a+type+via+a+derived+type&quot;/&gt;
              &lt;Item [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconSettings">
            <summary>
            Settings for the <see cref="T:JetBrains.Application.Icons.IThemedIconManager"/> and Themed Icons subsystem.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect">
            <summary>
            Standard PSI icon theme aspect values.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsIdea">
            <summary>
            JetBrains IDEA lookalike icon set, for better migration.
            Manual only.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsVs08">
            <summary>
            VS8-friendly icon set. Mostly the same as Visual Studio Classic, but with more than 16 colors.
            In use with VS 8-9-10.
            Autoselected with VS 8-9-10.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsVs11Color">
            <summary>
            VS11-friendly metro-style color-painted icon set. Based on VS11 own icons, but with added color.
            Autoselected in non-VS environments.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsVs11Gray">
            <summary>
            VS11-friendly metro-style mostly-gray icon set. Best mimics VS11 own icons in light theme.
            Autoselected with VS 11 with light background.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsVs11GrayDark">
            <summary>
            VS11-friendly metro-style mostly-gray icon set. Best mimics VS11 own icons dark theme.
            Autoselected with VS 11 with dark background.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback">
            <summary>
            The aspect itself (as in outer class), plus lower-priority aspect entries for fallback options specific for the theme.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsIdea_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsVs08_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsVs11Color_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsVs11GrayDark_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsVs11Gray_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.Demote(JetBrains.Application.UI.Icons.IconThemeAspect,System.Int32)">
            <summary>
            Slightly demotes an aspect in priority to implement fallback in case of missing theme image.
            </summary>
            <param name="aspect"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.Automatic">
            <summary>
            <para>This is the default. A theme is selected based on the current environment.</para>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsVs08">
            <summary>
            VS8-friendly icon set. Mostly the same as Visual Studio Classic, but with more than 16 colors.
            In use with VS 8-9-10.
            Autoselected with VS 8-9-10.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsIdea">
            <summary>
            JetBrains IDEA lookalike icon set, for better migration.
            Manual only.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsVs11Gray">
            <summary>
            VS11-friendly metro-style mostly-gray icon set. Best mimics VS11 own icons in light theme.
            Autoselected with VS 11 with light background.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsVs11Color">
            <summary>
            VS11-friendly metro-style color-painted icon set. Based on VS11 own icons, but with added color.
            Autoselected in non-VS environments.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsVs11GrayDark">
            <summary>
            VS11-friendly metro-style mostly-gray icon set. Best mimics VS11 own icons dark theme.
            Autoselected with VS 11 with dark background.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSettingsLoader">
            <summary>
            Loads and publishes as the theme aspect the psi symbol icon theme settings.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Filtering.FilteringPrefixMatcher">
            <summary>
            A preofix matcher that features an additional freehand filter not based on the regex.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Filtering.FilteringPrefixMatcher.Matcher">
            <summary>
            Gets the underlying matcher.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory">
            <summary>
            Performs validation of <see cref="T:JetBrains.DataFlow.IProperty`1"/> in the aspect of valid language names, and such.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory.CreateNewNameValidator(JetBrains.DataFlow.IProperty{System.String},JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer{JetBrains.ReSharper.Psi.IDeclaredElement},System.String)">
            <summary>
            Checks whether the string property value is a valid new name for an identifier.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory.CreateNewNameValidator(JetBrains.DataFlow.IProperty{System.String},JetBrains.ReSharper.Psi.IDeclaredElement,System.String)">
            <summary>
            Checks whether the string property value is a valid new name for an identifier.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory.CreateNewNameValidator(JetBrains.DataFlow.IProperty{System.String},JetBrains.ReSharper.Psi.PsiLanguageType,System.String)">
            <summary>
            Checks whether the string property value is a valid new name for an identifier.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:StructuralSearchServicesThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(StructuralSearchServicesThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = StructuralSearchServicesThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(StructuralSearchServicesThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;StructuralSearchServicesThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons.EditPattern">
             <summary>
            	<para>
            		<para>EditPattern Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons.EditPattern"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons.EditPattern.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                  `*1oL.     
                                `+U3""aRJ.   
                              `~Jia},..=6WC' 
                            `=lc::ctXe=__+#QJ
                          `=t(,` ``,(F9X**bgk
                        `={T"`  `````"TIRgH" 
                      `;x7^`  `......_LIL_   
                    `!3i^.  `......:cuc-     
                  `!ul~.  `------,)j)-       
                `!jt='  .------"Ta|-         
              `/aF=-` .------^7ST-           
             /ykki^________^ik7-             
             KK!IKKl~____~lKs-               
             UU::/uUUt==tUl-                 
             66,,,,/2666t_                   
             wwwwwwwww}_                     
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:StructuralSearchServicesThemedIcons+EditPattern}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(StructuralSearchServicesThemedIcons.EditPattern))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = StructuralSearchServicesThemedIcons.EditPattern.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;StructuralSearchServicesThemedIcons.EditPattern&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons.EditPattern.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons.EditPattern">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons.EditPattern.Load_Color">
            <summary>Loads the image for Themed Icon EditPattern theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons.EditPattern.Load_Gray">
            <summary>Loads the image for Themed Icon EditPattern theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons.EditPattern.Load_GrayDark">
            <summary>Loads the image for Themed Icon EditPattern theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons.EditPattern.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon EditPattern.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:SkipItemsDialogThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(SkipItemsDialogThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = SkipItemsDialogThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(SkipItemsDialogThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;SkipItemsDialogThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsAddMask">
             <summary>
            	<para>
            		<para>SkipItemsAddMask Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsAddMask"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsAddMask.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                  r!,.              `_;r     
                 _atrFos/=":--_"=/Tu1L7a"    
                 !V~   -"=/r||?\="-`  _Vr    
                 JE-                  `Eu    
                 oU`  rDgg%    9ggD)   UU    
                 }6-  Z@@R_    'w@@D  `6a    
                 /w/                  ~wc    
                 `wX`                `SH-    
                 JJJJJJJJRuL~~ruAo   xOr     
                 tt````tt!6g@@gA\  `iRt      
             {{{{{{....{{{{{{     ~wRL       
             11------------11 -^+XD|`        
             uu____________uu8wuT/`          
             oooooo::::oooooo                
                 aa""""aa                    
                 SSSSSSSS                    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:SkipItemsDialogThemedIcons+SkipItemsAddMask}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(SkipItemsDialogThemedIcons.SkipItemsAddMask))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = SkipItemsDialogThemedIcons.SkipItemsAddMask.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;SkipItemsDialogThemedIcons.SkipItemsAddMask&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsAddMask.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsAddMask">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsAddMask.Load_Color">
            <summary>Loads the image for Themed Icon SkipItemsAddMask theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsAddMask.Load_Gray">
            <summary>Loads the image for Themed Icon SkipItemsAddMask theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsAddMask.Load_GrayDark">
            <summary>Loads the image for Themed Icon SkipItemsAddMask theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsAddMask.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SkipItemsAddMask.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsEditMask">
             <summary>
            	<para>
            		<para>SkipItemsEditMask Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsEditMask"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsEditMask.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                  `*1oL.     
                                `+h3""aRi.   
                              `~Jsa},..=6WC' 
                            `=lc::ctX5=__+#QJ
                          `=t),` ``,)F9X*+bgk
                        `={T"`  `````"TIRgH" 
                      `;]7^`  `......_?IL_   
                    `!Ii^.  `......:cuc-     
                  `!ul~.  `------,)o)-       
                `!jt='  .------"Ta|-         
              `/aF=-  .------^7ST-           
             /ykki^________^ik7-             
             KK!IKKl~____~lKs-               
             UU::/uUUt==tUl-                 
             66,,,,/2666t_                   
             wwwwwwwww}_                     
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:SkipItemsDialogThemedIcons+SkipItemsEditMask}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(SkipItemsDialogThemedIcons.SkipItemsEditMask))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = SkipItemsDialogThemedIcons.SkipItemsEditMask.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;SkipItemsDialogThemedIcons.SkipItemsEditMask&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsEditMask.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsEditMask">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsEditMask.Load_Color">
            <summary>Loads the image for Themed Icon SkipItemsEditMask theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsEditMask.Load_Gray">
            <summary>Loads the image for Themed Icon SkipItemsEditMask theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsEditMask.Load_GrayDark">
            <summary>Loads the image for Themed Icon SkipItemsEditMask theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsEditMask.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SkipItemsEditMask.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsRemoveMask">
             <summary>
            	<para>
            		<para>SkipItemsRemoveMask Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsRemoveMask"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsRemoveMask.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                  `;)JJc~`          .+Shhhh  
                 :V{,--~ee_       "JET_ /kl  
                 Jk.    `7k*   `!u5\. _I2~   
                 ;SL``````!at"cSl~``.)SL`    
                  "1u/.````:1jr:``.;uF_      
                    ~C1!-'''--''',lj!        
                      =ox!-----_rol.         
                    `=CF+"______~l3=         
                  `!]l/"""""/r~"""r17-       
                -+17/^^^^^!iFT[c=^^=s1;      
              -?F|!~~~~~=)C\` -+CT/~~r{T-    
             ^}T!======rtL-     `=l7+=!T}!   
             |l/=====+iT:          "TJr!+JT_ 
             ~l)+!/+Tz~              _rJc*)l!
              '~+cc*"`                 '!iiii
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:SkipItemsDialogThemedIcons+SkipItemsRemoveMask}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(SkipItemsDialogThemedIcons.SkipItemsRemoveMask))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = SkipItemsDialogThemedIcons.SkipItemsRemoveMask.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;SkipItemsDialogThemedIcons.SkipItemsRemoveMask&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsRemoveMask.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsRemoveMask">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsRemoveMask.Load_Color">
            <summary>Loads the image for Themed Icon SkipItemsRemoveMask theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsRemoveMask.Load_Gray">
            <summary>Loads the image for Themed Icon SkipItemsRemoveMask theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsRemoveMask.Load_GrayDark">
            <summary>Loads the image for Themed Icon SkipItemsRemoveMask theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons.SkipItemsRemoveMask.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SkipItemsRemoveMask.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LocalHistoryThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(LocalHistoryThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = LocalHistoryThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(LocalHistoryThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;LocalHistoryThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.Diff">
             <summary>
            	<para>
            		<para>Diff Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.Diff"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.Diff.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
               XXXXXXXXXXXX                  
               66..........  @@              
               99''''''''''      HHHHHHHHHHHH
               ww----        @@  __________AA
               bb----            __________##
               qq----        @@        ____RR
               GG____                  ,,,,DD
               OO____        @@        ,,,,DD
               RR____                  """"88
               RR,,,,        @@        """"88
               DD,,,,                  """"%%
               DD""""""""""  @@        ^^^^MM
               DD""""""""""            ^^^^00
               888888888888  @@  ~~~~~~~~~~$$
                                 ~~~~~~~~~~$$
                             @@  QQQQQQQQQQQQ
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LocalHistoryThemedIcons+Diff}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(LocalHistoryThemedIcons.Diff))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = LocalHistoryThemedIcons.Diff.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;LocalHistoryThemedIcons.Diff&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.Diff.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.Diff">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.Diff.Load_Color">
            <summary>Loads the image for Themed Icon Diff theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.Diff.Load_Gray">
            <summary>Loads the image for Themed Icon Diff theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.Diff.Load_GrayDark">
            <summary>Loads the image for Themed Icon Diff theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.Diff.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Diff.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.DiffVS">
             <summary>
            	<para>
            		<para>DiffVS Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.DiffVS"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.DiffVS.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
               XXXXXXXXXXXX                  
               66..........  @@              
               99''''''''''      HHHHHHHHHHHH
               ww----        @@  __________AA
               bb----            __________##
               qq----        @@        ____RR
               GG____                  ,,,,DD
               OO____        @@        ,,,,DD
               RR____   -cwwt!-        """"88
             .=DD#I+".+XRu+!)IbRo      """"88
             88l+r3RD8XT==/[===88      """"%%
             NN!FVT/Tr!+[ONN!!!NN      ^^^^MM
             $$+aAIr)r+sEW$$+++$$      ^^^^00
             ggI|TS8gQbFLc[HLLLgg~~~~~~~~~~$$
             "7mggG?'^aQQw{so98g%~~~~~~~~~~$$
                       `/Hgg8@@' QQQQQQQQQQQQ
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LocalHistoryThemedIcons+DiffVS}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(LocalHistoryThemedIcons.DiffVS))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = LocalHistoryThemedIcons.DiffVS.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;LocalHistoryThemedIcons.DiffVS&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.DiffVS.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.DiffVS">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.DiffVS.Load_Color">
            <summary>Loads the image for Themed Icon DiffVS theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.DiffVS.Load_Gray">
            <summary>Loads the image for Themed Icon DiffVS theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.DiffVS.Load_GrayDark">
            <summary>Loads the image for Themed Icon DiffVS theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons.DiffVS.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DiffVS.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CodeCompletionThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(CodeCompletionThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = CodeCompletionThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(CodeCompletionThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;CodeCompletionThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons.Abbreviation">
             <summary>
            	<para>
            		<para>Abbreviation Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons.Abbreviation"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons.Abbreviation.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                               :+************
                             ,\;.          LL
               rrrrrrrrrrrrrr!'            rr
               TT``````````````````````````TT
               zz``````````````````````````zz
               ii--??????????????????????--ii
               11..7777777777777777777777..11
               II''iiiiiiiiiiiiiiiiiiiiii''II
               55''}}}}}}}}}}}}}}}}}}}}}}''55
               jj__5555555555555555555555__jj
               yy::EEEEEEEEEEEEEEEEEEEEEE::yy
               PP,,PPPPPPPPPPPPPPPPPPPPPP,,PP
               99~~~~~~~~~~~~~~~~~~~~~~~~~~99
               GGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CodeCompletionThemedIcons+Abbreviation}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CodeCompletionThemedIcons.Abbreviation))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CodeCompletionThemedIcons.Abbreviation.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CodeCompletionThemedIcons.Abbreviation&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons.Abbreviation.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons.Abbreviation">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons.Abbreviation.Load_Color">
            <summary>Loads the image for Themed Icon Abbreviation theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons.Abbreviation.Load_Gray">
            <summary>Loads the image for Themed Icon Abbreviation theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons.Abbreviation.Load_GrayDark">
            <summary>Loads the image for Themed Icon Abbreviation theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons.Abbreviation.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Abbreviation.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = FeaturesEnvironmentOptionsThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(FeaturesEnvironmentOptionsThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.BracesLayout">
             <summary>
            	<para>
            		<para>BracesLayout Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.BracesLayout"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.BracesLayout.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                     ._~=!!                  
                   `=!_` //                  
                  _+=`  ~++                  
                 'r;   "r-     !!;~_'        
                 ~r-   !r`     // `_!=.      
               cccc` .=cc      ++=`  ~+"     
               ||````||||       .r=   ~r_    
               TTTT.`_+TT        rr   .r!    
                 \J_```cJ`       cc=. `cccc  
                 _lr```*l_       ||||````||  
                  !{r-.-T{{      TT+_``TTTT  
                   ,ll=_.11      J7```-JL    
                     ^rtuuu     .lL```/l^    
                               {{z_../{+     
                               11._~7t"      
                               uuuCr~`       
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+BracesLayout}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.BracesLayout))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.BracesLayout.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.BracesLayout&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.BracesLayout.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.BracesLayout">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.BracesLayout.Load_Color">
            <summary>Loads the image for Themed Icon BracesLayout theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.BracesLayout.Load_Gray">
            <summary>Loads the image for Themed Icon BracesLayout theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.BracesLayout.Load_GrayDark">
            <summary>Loads the image for Themed Icon BracesLayout theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.BracesLayout.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BracesLayout.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeInspections">
             <summary>
            	<para>
            		<para>CodeInspections Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeInspections"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeInspections.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                     9999999999999999        
                     RRttttttttttttRR        
                    `88            88        
                  `JBDJ!!!!!!!!!!!!$$        
                     bb```..'-----_bb        
                     1b,``..'-----"bV        
                     "bu-`..'----,Ib=        
                      _kZ|^_'-_~|ZX"         
                   _rtoX9bbdbbdbbw6o}c,      
                 `I9l*!=======~'  -!/762.    
                 lGT!!!!!!!!!^` `=!!!!rG2    
                 RRrrrrrrrr+-  "rrrrrrrRR    
                 DD(((((((!` .r((((((((DD    
                 %%lllll7,  =llllllllll%%    
                 $$1111L` -v11111111111$$    
                 QQQQQQQQQQQQQQQQQQQQQQQQ    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+CodeInspections}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.CodeInspections))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.CodeInspections.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.CodeInspections&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeInspections.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeInspections">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeInspections.Load_Color">
            <summary>Loads the image for Themed Icon CodeInspections theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeInspections.Load_Gray">
            <summary>Loads the image for Themed Icon CodeInspections theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeInspections.Load_GrayDark">
            <summary>Loads the image for Themed Icon CodeInspections theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeInspections.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CodeInspections.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeStyle">
             <summary>
            	<para>
            		<para>CodeStyle Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeStyle"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeStyle.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
               XXXXXXXXXXXXXXXXXXXXXX        
               66``...'---___:,,""^66        
               44``...'---___:,,""^44        
               wwwwwwwwwwwwwwwwwwwwww        
                   bb       ```bb            
                   pp       ```pp            
               GGGGGGGGGGGGGGGGGGGGGGGGGGGG  
               OO   `````````OO--__,"^~~=OO  
               RR   `````````RR--__,"^~~=RR  
               RRRRRRRRRRRRRRRRRRRRRRRRRRRR  
                     DD--__:,"^~~==!!DD      
                     DD--__:,"^~~==!!DD      
                     DDDDDDDDDDDDDDDDDD      
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+CodeStyle}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.CodeStyle))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.CodeStyle.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.CodeStyle&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeStyle.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeStyle">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeStyle.Load_Color">
            <summary>Loads the image for Themed Icon CodeStyle theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeStyle.Load_Gray">
            <summary>Loads the image for Themed Icon CodeStyle theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeStyle.Load_GrayDark">
            <summary>Loads the image for Themed Icon CodeStyle theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeStyle.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CodeStyle.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.FormattingStyle">
             <summary>
            	<para>
            		<para>FormattingStyle Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.FormattingStyle"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.FormattingStyle.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
               SSSSS+`     666666666666666666
               lZ!.~5S^    ww          ````ww
                fw/'-)w['  dddddddddddddddddd
                `GG---!GH  OO          ````OO
                tRs-_cmX,  RRRRRRRRRRRRRRRRRR
               F8t_;4Dr    DD          ````DD
               %%%%%S-     888888888888888888
                                             
             666666666666666666      !aSSSS  
             ww          ````ww    ,oS;.!Zl  
             dddddddddddddddddd  `iwz_'/wf   
             OO          ````OO  bGr---GG`   
             RRRRRRRRRRRRRRRRRR  -yRT_-sRt   
             DD          ````DD    /Rd/_t8F  
             888888888888888888     `I%%%%%  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+FormattingStyle}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.FormattingStyle))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.FormattingStyle.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.FormattingStyle&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.FormattingStyle.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.FormattingStyle">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.FormattingStyle.Load_Color">
            <summary>Loads the image for Themed Icon FormattingStyle theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.FormattingStyle.Load_Gray">
            <summary>Loads the image for Themed Icon FormattingStyle theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.FormattingStyle.Load_GrayDark">
            <summary>Loads the image for Themed Icon FormattingStyle theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.FormattingStyle.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FormattingStyle.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GeneratedCode">
             <summary>
            	<para>
            		<para>GeneratedCode Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GeneratedCode"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GeneratedCode.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                 llllll                      
               llll  llll                    
             llllr-  -rllll6666666666666666  
             ll          ll--___:,,""^^~~44  
             llll/.  ./llll--___:,,""^^~~ww  
               llll  llllllllbbbbbbbbbbbbbb  
                 llllllll  llll_:,,""^^~~pp  
                 llllll      ll_:,,""^^~~GG  
               llll  llll  llllOOOOOOOOOOOO  
               ll      llllll___:,,""^^~~RR  
               llll  llll----___:,,""^^~~RR  
                 llllllDDDDDDDDDDDDDDDDDDDD  
                             DD_:,,""^^~~DD  
                             DD_:,,""^^~~DD  
                             88888888888888  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+GeneratedCode}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.GeneratedCode))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.GeneratedCode.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.GeneratedCode&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GeneratedCode.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GeneratedCode">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GeneratedCode.Load_Color">
            <summary>Loads the image for Themed Icon GeneratedCode theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GeneratedCode.Load_Gray">
            <summary>Loads the image for Themed Icon GeneratedCode theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GeneratedCode.Load_GrayDark">
            <summary>Loads the image for Themed Icon GeneratedCode theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GeneratedCode.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon GeneratedCode.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis">
             <summary>
            	<para>
            		<para>GlobalAnalysis Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                     Iuoj5aSkkEZX69bb        
                     Iu*/!;=~~"":__bb        
                       oj!;    ":69          
                       oj!;    ":69          
                       oj!;    ":69          
                    `=7jlLr/;=!/+JEo/'       
                   =uIc!;==~__^"",,\o9L      
                  +ul\!=__=_  -"--__:|wC     
                 ~3l//!!;==~~~^"",,___LbL    
                 T3r//`  ~~    ,"   ___bX    
                 73r//`  ~~    :"   ___b6    
                 =37//!!;==~~~^"",,___+bT    
                  cu7/!~--=_  ."-.___+42`    
                   +o}+!;==~--""",,~l9l`     
                    -/xIT+/;~~~=!)5Ec:       
                       -/L7Ikko}Tr,          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+GlobalAnalysis}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis.Load_Color">
            <summary>Loads the image for Themed Icon GlobalAnalysis theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis.Load_Gray">
            <summary>Loads the image for Themed Icon GlobalAnalysis theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis.Load_GrayDark">
            <summary>Loads the image for Themed Icon GlobalAnalysis theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon GlobalAnalysis.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Highlighting">
             <summary>
            	<para>
            		<para>Highlighting Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Highlighting"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Highlighting.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
             ++++++++++++       `LGhc~_``_=*+
             ++        ++     `LGX|=:``_=*++*
             ++        ++   `LGXT!"``_=*++*//
             ++        ++ `LG6i*^``_=*++*//!!
             ++        ++ tR89|/^,=*++*//!!;=
             ++        ++cRD8D#5r!!\*//!!;===
             ++        +xRDDJ:rhk}+;;!!;===~~
             ++        lRR#7:rkao1{)!~~==~~"_
             ++       -ORpT:+ao1{l7|c\~^^",=o
             ++     `+4h9|:+o1{l7|cr+/!=^!2Do
             ++   `/Pf__tao1{l7|cr+/!!c[6Do_ 
             ++ `/Pf_    _cl7|cr++TI6Dk|~.   
             +r/Pf_        -/+Lo9bC/_`       
             FXf_          .)XT~.            
             u6).        .)6l_               
              'T6666666666l_                 
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+Highlighting}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.Highlighting))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.Highlighting.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.Highlighting&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Highlighting.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Highlighting">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Highlighting.Load_Color">
            <summary>Loads the image for Themed Icon Highlighting theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Highlighting.Load_Gray">
            <summary>Loads the image for Themed Icon Highlighting theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Highlighting.Load_GrayDark">
            <summary>Loads the image for Themed Icon Highlighting theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Highlighting.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Highlighting.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.NamingConvention">
             <summary>
            	<para>
            		<para>NamingConvention Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.NamingConvention"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.NamingConvention.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                   `VUUUUU^                  
                   {U,  `Sk.                 
                  +U+ `- _U[   `"+JtotT\_    
                 ,U}  |}  /Ur "UV~_.`'_+E{`  
                `VV` "UU!  tU, JUTjUUk= ,UT  
                {U, `Fuuu. `SV`!Ukt\=~:  UE  
               +U+          _UEU+`.rluu  UU  
              ,U}  ~UUUUUU+  /UU  lUUU|  UU  
             `VV` `VV`   [U_  tU\``,,-~` oU` 
             {UUUUUU^    .EUUUUUUEuuSUUUUUU" 
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+NamingConvention}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.NamingConvention))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.NamingConvention.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.NamingConvention&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.NamingConvention.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.NamingConvention">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.NamingConvention.Load_Color">
            <summary>Loads the image for Themed Icon NamingConvention theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.NamingConvention.Load_Gray">
            <summary>Loads the image for Themed Icon NamingConvention theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.NamingConvention.Load_GrayDark">
            <summary>Loads the image for Themed Icon NamingConvention theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.NamingConvention.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon NamingConvention.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Persistence">
             <summary>
            	<para>
            		<para>Persistence Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Persistence"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Persistence.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                 IIIIIIIIIIIIIIIIIIIIII1/`   
                 uu~~~~~~      tttt  ~~*tu/` 
                 22~~~~~~``````tttt``~~~~+{o*
                 aa~~~~~~``````tttt``~~~~~~aa
                 VV~~~~~~````````````~~~~~~VV
                 EE======............======EE
                 UU========================UU
                 66========================66
                 ww====                ====ww
                 O8D888      ApbXr`    ====dd
               `cD6/_88      Ap`~1Er`  ====AA
             `c#4r"!a888DDDR#Apl:.~}a+`====##
             GRF~~~~~~~~~DD........./5u====DD
             -}DkL!7b888DDDR#Apo=',TSEADDDDDD
               -FDZT+88      Ap'"iK7-        
                 -]8888      Apb4l-          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+Persistence}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.Persistence))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.Persistence.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.Persistence&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Persistence.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Persistence">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Persistence.Load_Color">
            <summary>Loads the image for Themed Icon Persistence theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Persistence.Load_Gray">
            <summary>Loads the image for Themed Icon Persistence theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Persistence.Load_GrayDark">
            <summary>Loads the image for Themed Icon Persistence theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Persistence.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Persistence.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Quickfixes">
             <summary>
            	<para>
            		<para>Quickfixes Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Quickfixes"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Quickfixes.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                         .-_,"",_-.          
                      .,="-.````.-"="'       
                     ";_`           -;~`     
                   `;!.              `=!`    
                   ^+_  ````````````  -+=    
                   \r` ``````````````  rr    
                   =c- `...\L__L\...` .c!    
                   `Tr` `.''+oo+'''`  +T-    
                    .)|_  `--oo--`  -LT-     
                      ^tT  --oo--  |t=`      
                       ]]          ]]        
                       DD`'_^=+cluk6X        
                       OD.'_^=+cluk6h        
                       cDr'_^=+cluU6|        
                        TDo+==+Tuh9T`        
                         -rk4AGher-          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+Quickfixes}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.Quickfixes))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.Quickfixes.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.Quickfixes&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Quickfixes.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Quickfixes">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Quickfixes.Load_Color">
            <summary>Loads the image for Themed Icon Quickfixes theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Quickfixes.Load_Gray">
            <summary>Loads the image for Themed Icon Quickfixes theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Quickfixes.Load_GrayDark">
            <summary>Loads the image for Themed Icon Quickfixes theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Quickfixes.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Quickfixes.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.StringFormat">
             <summary>
            	<para>
            		<para>StringFormat Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.StringFormat"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.StringFormat.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                   _=LiFFFFFFFFFFFFJc=_      
                 -|};_.xxxxxxxxxxxx._=lT-    
                =3T'`.c33]=-``'~}33)-`.L3/   
               _o7```+oor `/7|/` !oo)```Lo^  
               r2"```J2| `322"`}' r2u```_2z  
             aaaa_._caa, raa) -a7 -aac_..aaaa
             SS....SSSS` 1Sj``CSS  SSSS....SS
             EEEE_'~FEE,`|E~`+EEC`-EEF~''EEEE
               7Z~---uZ7`-y'_ZZZ"`?Zk---,Z3  
               ^X}---zXXL`_ijZx,`/XX1---TX!  
                c4l_-"y44S!_.`_=j44k~-_T4l   
                 ~kk+"-bbbbbbbbbbbb-"+yX=    
                   ;JhHHHHHHHHHHHHHH6l/`     
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+StringFormat}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.StringFormat))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.StringFormat.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.StringFormat&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.StringFormat.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.StringFormat">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.StringFormat.Load_Color">
            <summary>Loads the image for Themed Icon StringFormat theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.StringFormat.Load_Gray">
            <summary>Loads the image for Themed Icon StringFormat theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.StringFormat.Load_GrayDark">
            <summary>Loads the image for Themed Icon StringFormat theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.StringFormat.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon StringFormat.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout">
             <summary>
            	<para>
            		<para>TypeMembersLayout Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                     uuuuuuuuuuuuuu3/`       
                     oo------------~Jo\`     
                     22--------------~lo+`   
                     aa----````````----~t5+` 
                     yy----        ------=}a+
                    _OD4l!_            ----VV
                .;CRmVlJaGDe+-         ----kk
             ^T4DX{r;;;;;;+tZDG}=      ----EE
             88~_;/=^^^^^^~/!:^88      ----hh
             88++;_`";=~;"`-=!~88      ----XX
             %%+/!;!!~-.~++!=~"%%      ----66
             MM+/!;==~^Lr+/!=~"MM----------ww
             NNL/!;==~^Lr+/!=~=NN__________bb
             +y8Dk7!=~^Lr++T5R$N8dddddddddddd
                ,Tb$GI+JaG0Gz"`              
                   `;]8%u!.                  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+TypeMembersLayout}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout.Load_Color">
            <summary>Loads the image for Themed Icon TypeMembersLayout theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout.Load_Gray">
            <summary>Loads the image for Themed Icon TypeMembersLayout theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout.Load_GrayDark">
            <summary>Loads the image for Themed Icon TypeMembersLayout theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon TypeMembersLayout.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.UsingDirectives">
             <summary>
            	<para>
            		<para>UsingDirectives Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.UsingDirectives"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.UsingDirectives.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                          -c1      nc_       
                         "EJ-      'cZ=      
                        `7Z-`````````ZI``    
                      `-(ZZ``````````ZZ(-`   
                     ``ZZ``````````````ZZ``  
                     ``^CZZ``````````ZZC^``  
                       ``}Z?oor-````.Zo``    
                  `!eyy`-iyl""laL...?Z+.`    
                `\V{^EE/V{^``_|El..Z];.`     
               +P1~..XX1~..,zX{^''''.``      
               ww----o=--"lwt_               
               HH______~FHHHHHH              
               ##::::::::::=I#I              
               DD"""""""";oDo_               
               888888888885_                 
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+UsingDirectives}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.UsingDirectives))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.UsingDirectives.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.UsingDirectives&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.UsingDirectives.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.UsingDirectives">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.UsingDirectives.Load_Color">
            <summary>Loads the image for Themed Icon UsingDirectives theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.UsingDirectives.Load_Gray">
            <summary>Loads the image for Themed Icon UsingDirectives theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.UsingDirectives.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsingDirectives theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.UsingDirectives.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsingDirectives.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis">
             <summary>
            	<para>
            		<para>ValueAnalysis Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                         -!?7CCCCCCCCCC7L!_  
                       `)C~.`          ``^}T`
                       ru_ ',~~~~~~~~~~"- .uT
             XXXXXXXXXX22``""""""""""""""``22
             66`...'---yy``______________``yy
             99`...'---VV..--------------..VV
             wwwwwwwwwwUE"................_EI
             dd`...'---~kS!_---```'------;aa-
             HH`...'----:rC99--`'-=x9999V{=` 
             AAAAAAAAAAAAAAbb___=nw).        
             ##`...'----___GGGGGH|.          
             RR`...'----___RR                
             DDDDDDDDDDDDDDDDDDDDDDDD        
             DD`...'----___:,,""^~~DD        
             DD`...'----___:,,""^~~DD        
             888888888888888888888888        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+ValueAnalysis}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis.Load_Color">
            <summary>Loads the image for Themed Icon ValueAnalysis theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis.Load_Gray">
            <summary>Loads the image for Themed Icon ValueAnalysis theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis.Load_GrayDark">
            <summary>Loads the image for Themed Icon ValueAnalysis theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ValueAnalysis.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = FeaturesEnvironmentThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(FeaturesEnvironmentThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.AddFile">
             <summary>
            	<para>
            		<para>AddFile Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.AddFile"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.AddFile.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                 nnnnnnnnnnnnnn3/`           
                 oo------------~iu\`         
                 22--------------~lo+`       
                 55----````````----~le+`     
                 yy----        ------=ta+    
                 VV----            ----VV    
                 kk----            ----kk    
                 EE----            ----EE    
                 llllllll          ----ZZ    
                 }}````}}          ----XX    
             CCCCCC''''CCCCCC      ----66    
             II------------II__________99    
             oo____________oo__________bb    
             eeeeee,,,,eeeeeedddddddddddd    
                 yy^^^^yy                    
                 kkkkkkkk                    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+AddFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.AddFile))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentThemedIcons.AddFile.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.AddFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.AddFile.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.AddFile">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.AddFile.Load_Color">
            <summary>Loads the image for Themed Icon AddFile theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.AddFile.Load_Gray">
            <summary>Loads the image for Themed Icon AddFile theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.AddFile.Load_GrayDark">
            <summary>Loads the image for Themed Icon AddFile theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.AddFile.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon AddFile.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.CacheNotifierGlyph">
             <summary>
            	<para>
            		<para>CacheNotifierGlyph Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.CacheNotifierGlyph"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.CacheNotifierGlyph.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                         `_=?)7Cx1u}lir^'    
                      `;Jtr="_-'---_"=?tXwT- 
                     _l?_    ``````...'--;jO!
                     Tt`     ``````...'---_Rm
                     lt*.    ``````...'--"}RR
                     lt}CT!"-.`````'_"!)5GORR
                     lt_c[I3oo5aVkEZX6wbHE!RR
                     lt*.`"!|C5aVkEZk1T+^"}RR
                     lt}CT!"-.`````'_"!)5GORR
                 `)RDDD_c[I3oHb9XEEZX6wbHE!RR
               `cRU!-DD*.`"!|Hb`"Fkkk1T+^"}RL
             `LAX+:=eDDDDDRRAHb7_`"l5|+)5Gu" 
             HRt~~~~~~~~~DR`````````!o3!,`   
             -tRVr;TwDDDDDRRAHb3~`_)ac-      
               -{DE)*DD      Hb._TkT-        
                 -CDDDD      Hb9Xi-          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+CacheNotifierGlyph}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.CacheNotifierGlyph))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentThemedIcons.CacheNotifierGlyph.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.CacheNotifierGlyph&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.CacheNotifierGlyph.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.CacheNotifierGlyph">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.CacheNotifierGlyph.Load_Color">
            <summary>Loads the image for Themed Icon CacheNotifierGlyph theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.CacheNotifierGlyph.Load_Gray">
            <summary>Loads the image for Themed Icon CacheNotifierGlyph theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.CacheNotifierGlyph.Load_GrayDark">
            <summary>Loads the image for Themed Icon CacheNotifierGlyph theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.CacheNotifierGlyph.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CacheNotifierGlyph.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.MoveLiveTemplate">
             <summary>
            	<para>
            		<para>MoveLiveTemplate Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.MoveLiveTemplate"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.MoveLiveTemplate.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                         VVVVVVVVPc-         
                         :IP*`   _[Vr-       
                           :YV\`   :YK?-     
               44444444444444449L-```"5k?-   
               GG``````````````````````~24T  
               bb``````````````````````_lb[  
               HHHHHHHHHHHHHHHHHC:---:CHI_   
                           'ldf,...,fdY_     
                         '1RY"'''"YR5_       
                         RRRRRRRRRZ_         
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+MoveLiveTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.MoveLiveTemplate))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentThemedIcons.MoveLiveTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.MoveLiveTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.MoveLiveTemplate.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.MoveLiveTemplate">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.MoveLiveTemplate.Load_Color">
            <summary>Loads the image for Themed Icon MoveLiveTemplate theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.MoveLiveTemplate.Load_Gray">
            <summary>Loads the image for Themed Icon MoveLiveTemplate theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.MoveLiveTemplate.Load_GrayDark">
            <summary>Loads the image for Themed Icon MoveLiveTemplate theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.MoveLiveTemplate.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon MoveLiveTemplate.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.NAEnvironment">
             <summary>
            	<para>
            		<para>NAEnvironment Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.NAEnvironment"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.NAEnvironment.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
             ################################
             RR  /RRRRR  RRRRRE -RRR_  .RRRRR
             DD   ^RDDD  DDDDD: kDDV ,; }DDDD
             88  o`_#88  8888I =888" kd`-8888
             %%``%6''w%``%%%8-`O%%X`"%%!`u%%%
             MM``MMD_.S``MMMT`)MMM=``````,MMM
             $$``$$$W=```$$D.-W$$H`,$$$$~`V$$
             $$``$$$$$r``$$+`o$$$!`k$$$$9`"$$
             QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+NAEnvironment}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.NAEnvironment))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentThemedIcons.NAEnvironment.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.NAEnvironment&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.NAEnvironment.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.NAEnvironment">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.NAEnvironment.Load_Color">
            <summary>Loads the image for Themed Icon NAEnvironment theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.NAEnvironment.Load_Gray">
            <summary>Loads the image for Themed Icon NAEnvironment theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.NAEnvironment.Load_GrayDark">
            <summary>Loads the image for Themed Icon NAEnvironment theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.NAEnvironment.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon NAEnvironment.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.Tip">
             <summary>
            	<para>
            		<para>Tip Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.Tip"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.Tip.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                        `.'----'.`           
                     `-,-.``  ``.-:-`        
                    _"-            ."_       
                  `"^`     _)T"     `"^`     
                  :=-      }ooo      .="     
                  =!` `````roo|`````  !!     
                  ~*- `````-uo_````` '*=     
                  `r\` `````_,````` `!r'     
                   .?r` ```'\+-``` `*c-      
                    `?)- ``-c)_`` .Lc.       
                     `rJ_ `....` -7L`        
                      `[[6666XXXU{J`         
                       DDrc7t11ok4X          
                       2D~,/T1oV64o          
                       -4Dkc/+lS9S-          
                        `=1XOGPC=`           
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+Tip}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.Tip))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentThemedIcons.Tip.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.Tip&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.Tip.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.Tip">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.Tip.Load_Color">
            <summary>Loads the image for Themed Icon Tip theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.Tip.Load_Gray">
            <summary>Loads the image for Themed Icon Tip theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.Tip.Load_GrayDark">
            <summary>Loads the image for Themed Icon Tip theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.Tip.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Tip.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.TypeLayoutAlt">
             <summary>
            	<para>
            		<para>TypeLayoutAlt Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.TypeLayoutAlt"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.TypeLayoutAlt.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
               bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
               OO--------------------------OO
               DD__________________________DD
               88,,,,,,,,,,,,,,,,,,,,,,,,,,88
               NNNNNNNN888888  888888NNNNNNNN
                       WW^^^^^^^^^^WW        
                       00;;;;;;;;;;00        
                       $$++++++++++$$        
                       ######  ######        
                       ##""""""""""##        
                       ##~~~~~~~~~~##        
                       ##!!!!!!!!!!##        
                       ##++++++++++##        
                       ##############        
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+TypeLayoutAlt}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.TypeLayoutAlt))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesEnvironmentThemedIcons.TypeLayoutAlt.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.TypeLayoutAlt&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.TypeLayoutAlt.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.TypeLayoutAlt">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.TypeLayoutAlt.Load_Color">
            <summary>Loads the image for Themed Icon TypeLayoutAlt theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.TypeLayoutAlt.Load_Gray">
            <summary>Loads the image for Themed Icon TypeLayoutAlt theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.TypeLayoutAlt.Load_GrayDark">
            <summary>Loads the image for Themed Icon TypeLayoutAlt theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.TypeLayoutAlt.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon TypeLayoutAlt.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiServicesThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(PsiServicesThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Collapse">
             <summary>
            	<para>
            		<para>Collapse Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Collapse"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Collapse.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                   $$$$$$$$$$$$$$$$$$$$      
                   $$                $$      
                   $$                $$      
                   $$                $$      
                   $$  $$$$$$$$$$$$  $$      
                   $$  $$$$$$$$$$$$  $$      
                   $$                $$      
                   $$                $$      
                   $$                $$      
                   $$$$$$$$$$$$$$$$$$$$      
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Collapse}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Collapse))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiServicesThemedIcons.Collapse.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Collapse&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Collapse.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Collapse">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Collapse.Load_Color">
            <summary>Loads the image for Themed Icon Collapse theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Collapse.Load_Gray">
            <summary>Loads the image for Themed Icon Collapse theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Collapse.Load_GrayDark">
            <summary>Loads the image for Themed Icon Collapse theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Collapse.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Collapse.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Empty">
             <summary>
            	<para>
            		<para>Empty Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Empty"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Empty.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Empty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Empty))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiServicesThemedIcons.Empty.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Empty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Empty.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Empty">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Empty.Load_Color">
            <summary>Loads the image for Themed Icon Empty theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Empty.Load_Gray">
            <summary>Loads the image for Themed Icon Empty theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Empty.Load_GrayDark">
            <summary>Loads the image for Themed Icon Empty theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Empty.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Empty.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasImplementations">
             <summary>
            	<para>
            		<para>HasImplementations Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasImplementations"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasImplementations.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                 dddddddd    -/)luuuuuul|*_  
                 HH""""HH  `Tn=.`      ``~Il`
                 GG____GG  La_   uuuuuu   .aJ
             !-  AA----AA  E6``````aa``````SS
             OOwlOO....OOlwOO``````kk``````kk
             mm_/tw````wt/_mm``````UU``````KK
             I#l-````````-l#A"...999999...-Xu
              _3RJ-    -JR3~5k!-''''''''-;SS-
                _uRi..iRu_  `~tSwwwwwwwwkC=` 
                  _uRRu_                     
                    __                       
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HasImplementations}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HasImplementations))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiServicesThemedIcons.HasImplementations.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HasImplementations&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasImplementations.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasImplementations">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasImplementations.Load_Color">
            <summary>Loads the image for Themed Icon HasImplementations theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasImplementations.Load_Gray">
            <summary>Loads the image for Themed Icon HasImplementations theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasImplementations.Load_GrayDark">
            <summary>Loads the image for Themed Icon HasImplementations theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasImplementations.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon HasImplementations.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasOverrides">
             <summary>
            	<para>
            		<para>HasOverrides Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasOverrides"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasOverrides.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                 HHHHHHHH    -+TCyyyyyyC7r_  
                 AA^^^^AA  `ly!.`      `.=aC.
                 OO,,,,OO  |h,   ^lVVl=   -hF
             !-  ##____##  wd````UU!~UU````99
             RRbtRR----RRtbRR````bb-`bb````bb
             RR,+Fb....bF+,RR....RRr;RR....AA
             nR}_````````_}RR~---TR88R}---,RP
              _uRt-````-tRu=wGr,_________+bd_
                _oDl--lDo_  `;2H88888888AS/` 
                  _oDDo_                     
                    __                       
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HasOverrides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HasOverrides))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiServicesThemedIcons.HasOverrides.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HasOverrides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasOverrides.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasOverrides">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasOverrides.Load_Color">
            <summary>Loads the image for Themed Icon HasOverrides theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasOverrides.Load_Gray">
            <summary>Loads the image for Themed Icon HasOverrides theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasOverrides.Load_GrayDark">
            <summary>Loads the image for Themed Icon HasOverrides theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasOverrides.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon HasOverrides.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Hides">
             <summary>
            	<para>
            		<para>Hides Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Hides"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Hides.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                    ''                       
                  '1$$1'                     
                'CBb;;bBC'   ,7awDDDDDDwSl^  
              '}Ww!''''!wW}_E84oIttttttIuX89'
             t84!--------!4NMkx~-rxxxxr-~x5M6
             88,/l6____6l/,$$uu3/`-cc-`/3uu$$
             DDDEDD____DDED$$5555j"  "j5555$$
             c"` DD,,,,DD `QQVVV7-`rr`-7VVVQQ
                 RR""""RR  9gbE!`?EEEE?`!E6gD
                 AA^^^^AA  -%gDwXXXXXXXX6RgB,
                 dddddddd   `+b$gggggggg$OL` 
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Hides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Hides))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiServicesThemedIcons.Hides.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Hides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Hides.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Hides">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Hides.Load_Color">
            <summary>Loads the image for Themed Icon Hides theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Hides.Load_Gray">
            <summary>Loads the image for Themed Icon Hides theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Hides.Load_GrayDark">
            <summary>Loads the image for Themed Icon Hides theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Hides.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Hides.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HidesAndImplements">
             <summary>
            	<para>
            		<para>HidesAndImplements Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HidesAndImplements"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HidesAndImplements.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                             _+zIkkkkkkIJr_  
                           `tV+,_......__/S1.
                           |h=---kkkkkk---"hC
                    ''     66------hh------66
                  '1$$1'   99______44______99
                'CBb;;bBC' bb______bb______bb
              '}Ww!''''!wW}jd;,,,AAAAAA,,,~dy
             t84!--------!48DRT~""""""""^)#6_
             88,/l6____6l/,8884oIttttttIuX8b'
             DDDEDD____DDEDDDkx~-rxxxxr-~x5M6
             c"` DD,,,,DD `N%uu3/`-cc-`/3uu$$
                 RR""""RR  $$5555j"  "j5555$$
                 AA^^^^AA  QQVVV7-`rr`-7VVVQQ
                 dddddddd  9gbE!`?EEEE?`!E6gD
                           -%gDwXXXXXXXX6RgB,
                            `+b$gggggggg$OL` 
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HidesAndImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HidesAndImplements))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiServicesThemedIcons.HidesAndImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HidesAndImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HidesAndImplements.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HidesAndImplements">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HidesAndImplements.Load_Color">
            <summary>Loads the image for Themed Icon HidesAndImplements theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HidesAndImplements.Load_Gray">
            <summary>Loads the image for Themed Icon HidesAndImplements theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HidesAndImplements.Load_GrayDark">
            <summary>Loads the image for Themed Icon HidesAndImplements theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HidesAndImplements.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon HidesAndImplements.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Implements">
             <summary>
            	<para>
            		<para>Implements Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Implements"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Implements.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                    ''                       
                  'FNNF'                     
                .t%P""P%t.   -/)luuuuuul|*_  
              .l8k"    "k8l_Tn=.`      ``~Il`
             JDV^        ^VDO_   uuuuuu   .aJ
             DD.~cS````Sc~.DD``````aa``````SS
             RRRaRR````RRaRRR``````kk``````kk
             r"` GG....GG `wb``````UU``````KK
                 bb----bb  JX"...999999...-Xu
                 44----44  '5k!-''''''''-;SS-
                 XXXXXXXX   `~tSwwwwwwwwkC=` 
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Implements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Implements))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiServicesThemedIcons.Implements.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Implements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Implements.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Implements">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Implements.Load_Color">
            <summary>Loads the image for Themed Icon Implements theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Implements.Load_Gray">
            <summary>Loads the image for Themed Icon Implements theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Implements.Load_GrayDark">
            <summary>Loads the image for Themed Icon Implements theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Implements.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Implements.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Overrides">
             <summary>
            	<para>
            		<para>Overrides Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Overrides"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Overrides.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                    ''                       
                  'C00C'                     
                .}%X^^X%}.   -+TCyyyyyyC7r_  
              .l8P~````~P8l_ly!.`      `.=aC.
             lDE~````````~E8R,   ^lVVl=   -hF
             DD-=|k````k|=-DD````UU!~UU````99
             RRRSRR....RRSRRR````bb-`bb````bb
             ?"` OO----OO `RR....RRr;RR....AA
                 HH----HH  3R~---TR88R}---,RP
                 ww____ww  -wGr,_________+bd_
                 66666666   `;2H88888888AS/` 
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Overrides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Overrides))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiServicesThemedIcons.Overrides.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Overrides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Overrides.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Overrides">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Overrides.Load_Color">
            <summary>Loads the image for Themed Icon Overrides theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Overrides.Load_Gray">
            <summary>Loads the image for Themed Icon Overrides theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Overrides.Load_GrayDark">
            <summary>Loads the image for Themed Icon Overrides theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Overrides.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Overrides.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements">
             <summary>
            	<para>
            		<para>OverridesAndImplements Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                             -/|}222222}T+_  
                           `7o!-`      `.=ut.
                    ''     cS,```222222```-Sl
                  'C00C'   kk``````SS``````kk
                .}%X^^X%}. KK``````EE``````KK
              .l8P~````~P8lwX......XX......XX
             lDE~````````~E8D^---bbbbbb---_6o
             DD-=|k````k|=-DDV!_--------_;yk-
             RRRSRR....RRSRRRy!.`      `.=a1.
             ?"` OO----OO `1H,   ^lVVl=   -hF
                 HH----HH  99````UU!~UU````99
                 ww____ww  bb````bb-`bb````bb
                 66666666  AA....RRr;RR....AA
                           3R~---TR88R}---,RP
                           -wGr,_________+bd_
                            `;2H88888888AS/` 
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+OverridesAndImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.OverridesAndImplements))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiServicesThemedIcons.OverridesAndImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.OverridesAndImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements.Load_Color">
            <summary>Loads the image for Themed Icon OverridesAndImplements theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements.Load_Gray">
            <summary>Loads the image for Themed Icon OverridesAndImplements theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements.Load_GrayDark">
            <summary>Loads the image for Themed Icon OverridesAndImplements theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon OverridesAndImplements.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.QuasiImplements">
             <summary>
            	<para>
            		<para>QuasiImplements Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.QuasiImplements"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.QuasiImplements.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                 GGGGGGGG                    
                 AA    AA    -\|}222222}T+_  
                 AAAAAAAA  `7o!-.      .'=ut.
                 OO````OO  cS,```222222```-Sl
                 ########  kk``````SS``````kk
             !-  RR....RR  Xb``````EE``````PP
             RRbtRR----RRtbRR......66......XX
             RR~?Id____dI?~RR^---bbbbbb---_6o
             uRu=::::::::=uRGE\_--------_!kk-
              _uDo;"""";oDu_`~}kbbbbbbbbEx;` 
                _oD5//5Do_                   
                  _oDDo_                     
                    __                       
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+QuasiImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.QuasiImplements))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiServicesThemedIcons.QuasiImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.QuasiImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.QuasiImplements.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.QuasiImplements">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.QuasiImplements.Load_Color">
            <summary>Loads the image for Themed Icon QuasiImplements theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.QuasiImplements.Load_Gray">
            <summary>Loads the image for Themed Icon QuasiImplements theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.QuasiImplements.Load_GrayDark">
            <summary>Loads the image for Themed Icon QuasiImplements theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.QuasiImplements.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon QuasiImplements.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Switch">
             <summary>
            	<para>
            		<para>Switch Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Switch"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Switch.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                             %MNB$$$1'       
                             uMa"..!#Qu-     
               4wbdGO#RRDDD88%MNBV"../Dgo-   
               4w..GO..RD............../Dg2  
               4w..GO..RD..............^6gd  
               4wbdGO#RRDDD88%MNBH!..^hgb"   
                    `?bHpbbw9%Mb!.."EQ9"     
                  `LGS~``_lw9%MNB$$$X"       
                `cAV=``_tbbw96XXUZEkkVSya52  
               c#k=.```````````` ZE  VS  52  
               FD1,.```````````` ZE  VS  52  
                -}Rx,``~5bbw96XXUZEkkVSya52  
                  -t#F_``~o4c                
                    -lAHpbbw9                
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Switch}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Switch))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiServicesThemedIcons.Switch.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Switch&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Switch.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Switch">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Switch.Load_Color">
            <summary>Loads the image for Themed Icon Switch theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Switch.Load_Gray">
            <summary>Loads the image for Themed Icon Switch theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Switch.Load_GrayDark">
            <summary>Loads the image for Themed Icon Switch theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Switch.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Switch.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = DfaThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(DfaThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;DfaThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaCollection">
             <summary>
            	<para>
            		<para>DfaCollection Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaCollection"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaCollection.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
             HHHHHHHHHHHHHHHHHHHH            
             AA                AA            
             RR``............``RR            
             DD..--bbbbbbbbbbbbbbbbbbbb      
             DD--__AA                AA      
             88::""RR..____________..RR      
             MM^^^^DD__~~tttttttttttttttttttt
             BBBBBBDD~~!!]]                ]]
                   88!!LL33``............``33
                   WWLLLLjj``------------``jj
                   BBBBBByy''____________''yy
                         kk--,,,,,,,,,,,,--kk
                         XX::::::::::::::::XX
                         99999999999999999999
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaCollection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaCollection))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = DfaThemedIcons.DfaCollection.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaCollection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaCollection.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaCollection">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaCollection.Load_Color">
            <summary>Loads the image for Themed Icon DfaCollection theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaCollection.Load_Gray">
            <summary>Loads the image for Themed Icon DfaCollection theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaCollection.Load_GrayDark">
            <summary>Loads the image for Themed Icon DfaCollection theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaCollection.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DfaCollection.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaFrom">
             <summary>
            	<para>
            		<para>DfaFrom Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaFrom"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaFrom.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                 DDDDDDDDDDDDDi.             
                 RR          ,5R7.           
                 ##            "oAT.         
                 HH```````~yHHHHHHHd|.       
                 bb````"````~5U/`            
                 66````61^````=oE!`          
                 JUT_..UUP]~....=uS!`        
                  -7kT,kk`rkF~''''=I5;`      
                    -TVVV  `+y{~----;1o;`    
                      -|a    `+et=---_\au"   
                        -      `*ul=,rul,    
                                 `/3uJ,      
                                   `_        
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaFrom}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaFrom))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = DfaThemedIcons.DfaFrom.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaFrom&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaFrom.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaFrom">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaFrom.Load_Color">
            <summary>Loads the image for Themed Icon DfaFrom theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaFrom.Load_Gray">
            <summary>Loads the image for Themed Icon DfaFrom theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaFrom.Load_GrayDark">
            <summary>Loads the image for Themed Icon DfaFrom theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaFrom.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DfaFrom.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaLambda">
             <summary>
            	<para>
            		<para>DfaLambda Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaLambda"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaLambda.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
               fffffTL;_   dddddddddddddd    
               CC```-"/}T- OO          OO    
               xx``````.cx"DD``tttttttttttttt
               111xT!.``.|188--xx          xx
                   -Fl'``'l%%""oo``''''''``oo
                    _I7.``-0000yy''______''yy
                     cu~```,37 EE__________EE
                    !o/`````~oL66666666666666
                   !o\...-.../o/             
                  !o*...=o,...co~            
                 !e+...=eeu_..'se_           
                !a+...=aT_o]-..-]u-          
               !a+...;aT  ,al'..-coaaaa      
              !y+...;yT    ~ys-......yy      
             /S+...;S7      ,3o!,-...SS      
             VVVVVVVz         ^cuVVVVVV      
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaLambda}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaLambda))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = DfaThemedIcons.DfaLambda.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaLambda&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaLambda.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaLambda">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaLambda.Load_Color">
            <summary>Loads the image for Themed Icon DfaLambda theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaLambda.Load_Gray">
            <summary>Loads the image for Themed Icon DfaLambda theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaLambda.Load_GrayDark">
            <summary>Loads the image for Themed Icon DfaLambda theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaLambda.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DfaLambda.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaTo">
             <summary>
            	<para>
            		<para>DfaTo Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaTo"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaTo.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                     -`                      
                   -7b6r`                    
                 .)b3=/V4r`      .           
                :9b|----!V9r`    b).         
                 .)b2='''-!S9r`  bbb).       
                   .)bo~....;Swr`bb~ob).     
                     .)bo~```.=ywbb``~ob)    
                       .)bo^````=ab````bb    
                         .)bu"````~````bb    
                    -7bbbbbbbbI"       bb    
                      -7bT-            bb    
                        -7wT'          ww    
                          -T9999999999999    
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaTo}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaTo))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = DfaThemedIcons.DfaTo.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaTo&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaTo.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaTo">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaTo.Load_Color">
            <summary>Loads the image for Themed Icon DfaTo theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaTo.Load_Gray">
            <summary>Loads the image for Themed Icon DfaTo theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaTo.Load_GrayDark">
            <summary>Loads the image for Themed Icon DfaTo theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaTo.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DfaTo.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = ServicesThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(ServicesThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;ServicesThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.AnalyzeThis">
             <summary>
            	<para>
            		<para>AnalyzeThis Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.AnalyzeThis"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.AnalyzeThis.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                     oj5aayVkkEPZUX64        
                     oj_____----''.64        
                       5a__    -'UX          
                       5a__    -'UX          
                       5a__    -'UX          
                      r5L_-    .'?Xt         
                     rjL_-      `'?6}        
                    ro?_-  .----''.?4{       
                   +oL:_  ._----''..?9F      
                  +uL,_  .__----''...rwC     
                 +3L,_  `___----''...`rbx    
                 c3+,- `____----''...`!bx    
                  cu+,:_____----''...!wC     
                   cooj5aayVkkEPZUX649F      
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+AnalyzeThis}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.AnalyzeThis))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.AnalyzeThis.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.AnalyzeThis&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.AnalyzeThis.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.AnalyzeThis">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.AnalyzeThis.Load_Color">
            <summary>Loads the image for Themed Icon AnalyzeThis theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.AnalyzeThis.Load_Gray">
            <summary>Loads the image for Themed Icon AnalyzeThis theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.AnalyzeThis.Load_GrayDark">
            <summary>Loads the image for Themed Icon AnalyzeThis theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.AnalyzeThis.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon AnalyzeThis.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Base">
             <summary>
            	<para>
            		<para>Base Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Base"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Base.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                   ;;;;;;;;;;;;;;;;;;;;      
                   ++                ++      
                   ||''''''''''''''''||      
                   tttttttttttttttttttt      
                         77````77            
                   iir~- ii````ii -~rii      
                   ll_!Tlll....lllT!_ll      
                   tt---,/T----T/,---tt      
                   {{r"------------"r{{      
                   _)CCL^________^LCC)_      
                     _)xx)~,,,,~)xx)_        
                       _T33T==T33T_          
                         _TuuuuT_            
                           _77_              
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Base}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Base))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.Base.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Base&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Base.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Base">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Base.Load_Color">
            <summary>Loads the image for Themed Icon Base theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Base.Load_Gray">
            <summary>Loads the image for Themed Icon Base theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Base.Load_GrayDark">
            <summary>Loads the image for Themed Icon Base theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Base.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Base.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage">
             <summary>
            	<para>
            		<para>FileStorage Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                               yyyyyyyyyyyyyy
                 {{{{{{{{{{{{{{UU  DD  DD  UU
                 [[____________bbbbbbbbbbbbbb
                 II____________RR  EE  EE  RR
                 oo::::        88888888888888
                 55,,,,  ^~=!/+rc  ,,,,55    
                 SS""""        yyyyyyyyyyyyyy
                 kk""""  ^~=!  UU  DD  DD  UU
                 ZZ^^^^        bbbbbbbbbbbbbb
                 66~~~~        RR  EE  EE  RR
                 ww~~~~        88888888888888
                 bb====            ====bb    
                 GG====================GG    
                 RR;;;;;;;;;;;;;;;;;;;;RR    
                 DDDDDDDDDDDDDDDDDDDDDDDD    
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+FileStorage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.FileStorage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.FileStorage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.FileStorage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage.Load_Color">
            <summary>Loads the image for Themed Icon FileStorage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage.Load_Gray">
            <summary>Loads the image for Themed Icon FileStorage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage.Load_GrayDark">
            <summary>Loads the image for Themed Icon FileStorage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FileStorage.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate">
             <summary>
            	<para>
            		<para>FileTemplate Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                 aaaaaaaaaaaaaaaaaa?.        
                 yy  gg  gg  gg  gQHyL.      
                 kkggggggggggggggggg$Hkc'    
                 EE  QQQQQQQQQQ  QQ  Q0HE)'  
                 XX$$$$$$$$$$$$$$$$$$$$$%XX  
                 66  MMMMMMMMMM  MM  MM  66  
                 ww8888888888888888888888ww  
                 bb  DDDDDDDDDDDDDDDDDD  bb  
                 GGRRRRRRRRRRRRRRRRRRRRRRGG  
                 ##  HHHHHHHHHHHHHHHHHH  ##  
                 RRwwwwwwwwwwwwwwwwwwwwwwRR  
                 DD  XXXXXXXXXXXXXXXXXX  DD  
                 DDkkkkkkkkkkkkkkkkkkkkkkDD  
                 88  yy  yy  yy  yy  yy  88  
                 WWWWWWWWWWWWWWWWWWWWWWWWWW  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+FileTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.FileTemplate))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.FileTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.FileTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate.Load_Color">
            <summary>Loads the image for Themed Icon FileTemplate theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate.Load_Gray">
            <summary>Loads the image for Themed Icon FileTemplate theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate.Load_GrayDark">
            <summary>Loads the image for Themed Icon FileTemplate theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FileTemplate.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FindResultsToolWindow">
             <summary>
            	<para>
            		<para>FindResultsToolWindow Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FindResultsToolWindow"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FindResultsToolWindow.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
             666666666666666666              
             ww~~^",,___--'..ww              
             bb~~^",,___--'..bb              
             pppppppppppppppppp              
             AA~~^",,___-AA    -!+|ttTr!-    
             ##~~^",,___-##  =1ur"_--_"+Iu!  
             RRRRRRRRRRRRRR`7E+.-"===="-.!k}`
             DD~~^",,__DD  /Xr-_"_````_"_-!Xc
             DD~~^",,__DD  jw"--'`     '--_wX
             888888888888  ?Hr_. `````` `_!Hl
                          `/HGr_-`    `-_/bX-
                        `=}7=aDX7=~,,~=|kR}` 
                      `=}7=:~rV8RVp88GE1;`   
                     =}7=:~raDe:             
                     ral!raDe:               
                      '7ADe:                 
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+FindResultsToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.FindResultsToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.FindResultsToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.FindResultsToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FindResultsToolWindow.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FindResultsToolWindow">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FindResultsToolWindow.Load_Color">
            <summary>Loads the image for Themed Icon FindResultsToolWindow theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FindResultsToolWindow.Load_Gray">
            <summary>Loads the image for Themed Icon FindResultsToolWindow theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FindResultsToolWindow.Load_GrayDark">
            <summary>Loads the image for Themed Icon FindResultsToolWindow theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FindResultsToolWindow.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FindResultsToolWindow.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Hierarchy">
             <summary>
            	<para>
            		<para>Hierarchy Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Hierarchy"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Hierarchy.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                          `~LTTc=.           
                         ,C|^_-"Lx~          
                         T1_.  .'1{          
                         ^Ic_.._rI!          
                          'nn..nn_           
                       uuuuuu''uuuuuu        
                       oo``````````oo        
                       oo``````````oo        
                       ee..........ee        
                       aa..........aa        
                      `aa''''''''''aa`       
                  .;7[S{=^TSSSSSST^={S[J/'   
                 ^SC!^"_/VI-    .FV+_"^!lV;  
                 Ck^_` _:ka      Ck^_` _:ka  
                 !kl=,,=Tk+      !kl=,,=Tk+  
                  _?oEEe),        _?oEEe),   
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Hierarchy}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Hierarchy))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.Hierarchy.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Hierarchy&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Hierarchy.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Hierarchy">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Hierarchy.Load_Color">
            <summary>Loads the image for Themed Icon Hierarchy theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Hierarchy.Load_Gray">
            <summary>Loads the image for Themed Icon Hierarchy theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Hierarchy.Load_GrayDark">
            <summary>Loads the image for Themed Icon Hierarchy theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Hierarchy.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Hierarchy.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.InspectionToolWindow">
             <summary>
            	<para>
            		<para>InspectionToolWindow Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.InspectionToolWindow"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.InspectionToolWindow.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                     9999999999999999        
                     RRFFFFFFFFFFFFRR        
                    `88            88        
                  `JBRz!!!!!!!!!!!!$$        
                     bb```..'-----_bb        
                     1b,``..'-----"bV        
                     "bu-`..'----,Ib=        
                      _kZ|^_'-_~|ZX"         
                   _rtoX9bbdbbdbbw6o}c,      
                 `I9l*!=======~'  -!/762.    
                 lGT!!!!!!!!!^` `=!!!!rG2    
                 RRrrrrrrrr+-  "rrrrrrrRR    
                 DD(((((((!` .r((((((((DD    
                 %%lllll7,  =llllllllll%%    
                 $$1111L` -v11111111111$$    
                 QQQQQQQQQQQQQQQQQQQQQQQQ    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+InspectionToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.InspectionToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.InspectionToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.InspectionToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.InspectionToolWindow.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.InspectionToolWindow">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.InspectionToolWindow.Load_Color">
            <summary>Loads the image for Themed Icon InspectionToolWindow theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.InspectionToolWindow.Load_Gray">
            <summary>Loads the image for Themed Icon InspectionToolWindow theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.InspectionToolWindow.Load_GrayDark">
            <summary>Loads the image for Themed Icon InspectionToolWindow theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.InspectionToolWindow.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon InspectionToolWindow.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate">
             <summary>
            	<para>
            		<para>LiveTemplate Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
               aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
               yy  gg  gg  gg  gg  gg  gg  yy
               kkggggggggggggggggggggggggggkk
               EE  QQQQQQ  QQQQQQQQQQQQQQ  EE
               XX$$$$$$$$$$$$$$$$$$$$$$$$$$XX
               66  MM  MM  MM  MM  MM  MM  66
               ww88888888888888888888888888ww
               bb  DDDDDD  DDDDDDDDDDDDDD  bb
               GGRRRRRRRRRRRRRRRRRRRRRRRRRRGG
               ##  HHHHHH  HHHHHHHHHHHHHH  ##
               RRwwwwwwwwwwwwwwwwwwwwwwwwwwRR
               DD  XXXXXX  XXXXXXXXXXXXXX  DD
               88kkkkkkkkkkkkkkkkkkkkkkkkkk88
               88  yy  yy  yy  yy  yy  yy  88
               WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+LiveTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.LiveTemplate))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.LiveTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.LiveTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate.Load_Color">
            <summary>Loads the image for Themed Icon LiveTemplate theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate.Load_Gray">
            <summary>Loads the image for Themed Icon LiveTemplate theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate.Load_GrayDark">
            <summary>Loads the image for Themed Icon LiveTemplate theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon LiveTemplate.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates">
             <summary>
            	<para>
            		<para>PersonalSolutionTemplates Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                   aaaaaaaaaaaaaaaaaaaaaaaaaa
                   SS  %%  %%  %%  %%  %%  SS
                   EE8888888888888888888888EE
                 `~bbyyGA=`DD  DD  DD  DD  UU
                !b5*,--_!ubORRRRRRRRRRRRRRR66
               /b|........+bGOOOOOOOOOOOO  ww
               5b,''''''''-bbppppppppppppppbb
               +b?--------/bdwwwwwwwwwwww  AA
                Lb1/,__,!}bb666666666666666RR
              ;Co9bbbbbbbbwXXXZZZZZZZZZZZ  DD
             zb{*==_    _==\JbwkkkkkkkkkkkkDD
             ##/////;.`;/////##aa  aa  aa  88
             DDLLLLLLLLLLLLLLDDWWWWWWWWWWWWWW
             %%ssssssssssssss%%              
             BB]]]]]]]]]]]]]]BB              
             QQQQQQQQQQQQQQQQQQ              
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+PersonalSolutionTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.PersonalSolutionTemplates))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.PersonalSolutionTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.PersonalSolutionTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates.Load_Color">
            <summary>Loads the image for Themed Icon PersonalSolutionTemplates theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates.Load_Gray">
            <summary>Loads the image for Themed Icon PersonalSolutionTemplates theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates.Load_GrayDark">
            <summary>Loads the image for Themed Icon PersonalSolutionTemplates theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon PersonalSolutionTemplates.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PointForExceptionsFromTracker">
             <summary>
            	<para>
            		<para>PointForExceptionsFromTracker Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PointForExceptionsFromTracker"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PointForExceptionsFromTracker.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                       `,~;+LL+!~"`          
                    `^rz!_-.```-_;7c^`       
                   ~l)_  ``....``  _?t;      
                  /{/```.....,JEZt^``={r     
                 ^]/`````````XDDDDR```=];    
                 TI-`````````^uOR5=````I{    
                 zu-```````````````````u1    
                 =o/``              ``~o+    
                  Ta!.`            `.=2l`    
                   ryT_.``      ``._cy|`     
                    -+o1+^,-''-:^+15r_       
                       _+)luEEot|+:          
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+PointForExceptionsFromTracker}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.PointForExceptionsFromTracker))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.PointForExceptionsFromTracker.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.PointForExceptionsFromTracker&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PointForExceptionsFromTracker.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PointForExceptionsFromTracker">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PointForExceptionsFromTracker.Load_Color">
            <summary>Loads the image for Themed Icon PointForExceptionsFromTracker theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PointForExceptionsFromTracker.Load_Gray">
            <summary>Loads the image for Themed Icon PointForExceptionsFromTracker theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PointForExceptionsFromTracker.Load_GrayDark">
            <summary>Loads the image for Themed Icon PointForExceptionsFromTracker theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PointForExceptionsFromTracker.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon PointForExceptionsFromTracker.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates">
             <summary>
            	<para>
            		<para>PredefinedTemplates Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                      -"=/rT}}Tr/="-         
                   :rnxJ)r/=^^=!+?7ouc"      
                 =Iu!- ,___::,,,,,,"!T2o!    
               -}5!`    ,::,,,,,,,,,"""+eI_  
              -5a="-     ,,,,,,,,,""""""~3V, 
             `ak=___,"-   --``._"""""""""~2k.
             +E*:""":,,"  :"""", `^"""""""+ET
             aaaaaaaaaaaaaaaaaa"^ ."""""""^PV
             kk  %%  %%  %%  kk""  `      `Uk
             UUDDDDDDDDDDDDDDUU^` ^""^^",_~Xt
             44  RR  RR  RR  44.   _^,,,,^y6-
             bbppppppppppppppbb",    `,^^a9= 
             OO  44  444444  OO"",     "aX~  
             RREEEEEEEEEEEEEERR",,, `~3wT`   
             DD  yy  yy  yy  DD!+)lCbj\`     
             %%%%%%%%%%%%%%%%%%ot|\~`        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+PredefinedTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.PredefinedTemplates))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.PredefinedTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.PredefinedTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates.Load_Color">
            <summary>Loads the image for Themed Icon PredefinedTemplates theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates.Load_Gray">
            <summary>Loads the image for Themed Icon PredefinedTemplates theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates.Load_GrayDark">
            <summary>Loads the image for Themed Icon PredefinedTemplates theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon PredefinedTemplates.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Recursion2">
             <summary>
            	<para>
            		<para>Recursion2 Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Recursion2"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Recursion2.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
               tttttttttttttttttttttt        
               11                  11        
               uu               `rwHHHH1     
               aa`````````````.Lbu: =GI      
               kk...........-)do"  ;OOkJ+-   
               XX----------=Hm+``````-_~lHj_ 
               99-----------~I#}_``c#PSr._VO~
               HH_____________=uRF,.|RRRy.,RE
               RR"""""""""""""""!oRRRRRRR--RR
               DD~~~~~~~~~~~~~~~~~~DD  RR--RR
               %%%%%%%%RR__RR%%%%%%%%  RR__RR
                       5D!,VD\`       =Dw,=DX
                       "R6=~xGDDDDDDDD#u==ED;
                        _wOur;~~~~~~~~;+xGG" 
                          ,7kbDDDDDDDDbkl^   
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Recursion2}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Recursion2))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.Recursion2.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Recursion2&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Recursion2.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Recursion2">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Recursion2.Load_Color">
            <summary>Loads the image for Themed Icon Recursion2 theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Recursion2.Load_Gray">
            <summary>Loads the image for Themed Icon Recursion2 theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Recursion2.Load_GrayDark">
            <summary>Loads the image for Themed Icon Recursion2 theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Recursion2.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Recursion2.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.RecursionInFeatures">
             <summary>
            	<para>
            		<para>RecursionInFeatures Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.RecursionInFeatures"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.RecursionInFeatures.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                     zzzzzzzzzzzzzzzzzzzzzz  
                     tt                  tt  
                  IGGGGp(.               CC  
                   3O; "jGT-`````````````33  
                -\ik##!``^5A7-```````````22  
              -oG1;,-``````rRO!..........SS  
             :H6"'raXR|..,FRo~'''''''''''EE  
             IR;-1RRRT-"1R5=-------------66  
             RR--RRRRRRRy;_______________bb  
             DD__DD  AA__________________AA  
             DD,,DD  RRRRRRRRDD,,DDRRRRRRRR  
             aD\"ED*`       =Db"=D6          
             "D9!=IODDDDDDDDRo;=PD;          
              _b#o?!========!rIAO^           
                ,7kdDDDDDDDDdkl^             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+RecursionInFeatures}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.RecursionInFeatures))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.RecursionInFeatures.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.RecursionInFeatures&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.RecursionInFeatures.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.RecursionInFeatures">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.RecursionInFeatures.Load_Color">
            <summary>Loads the image for Themed Icon RecursionInFeatures theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.RecursionInFeatures.Load_Gray">
            <summary>Loads the image for Themed Icon RecursionInFeatures theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.RecursionInFeatures.Load_GrayDark">
            <summary>Loads the image for Themed Icon RecursionInFeatures theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.RecursionInFeatures.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RecursionInFeatures.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ReSharperServices16x16">
             <summary>
            	<para>
            		<para>ReSharperServices16x16 Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ReSharperServices16x16"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ReSharperServices16x16.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                  tEEEEEEEEEEEEEEEE{         
                 _kkkEEEEEEEEEEEEEkk         
                 $$$$$$$$$$$$$$$$$$$$$$$$    
                _$$     `-LN$$G _$w _$$$$    
                7$$  S$8P` c$`       =$$$``  
               _u$$  =rr^ 'R$$. %$` %$$$$~^"-
               |I$$  =r_ -%$r   ``   $$$$=~~'
              -C]$$  S$$+ .6$; I$= I$$$$$==~ 
              L}{$$$$$$$$$$$$$$$$$$$$$$$$!;- 
             -llt$$$$$$$$$$$$$$$$$$$$$$$$/!  
             ~\*+$$$$$$$$$$$$$$$$$$$$$$$$+_  
                 $$          $$$$$$$$$$$$c   
                 $$$$$$$$$$$$$$$$$$$$$$$$~   
                 $$$$$$$$$$$$$$$$$$$$$$$$`   
                       /Cx1Iuoj5aSVkkEEk;    
                      `lt}F]1Iuoj5ayVkko`    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+ReSharperServices16x16}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.ReSharperServices16x16))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.ReSharperServices16x16.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.ReSharperServices16x16&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ReSharperServices16x16.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ReSharperServices16x16">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ReSharperServices16x16.Load_Color">
            <summary>Loads the image for Themed Icon ReSharperServices16x16 theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ReSharperServices16x16.Load_Gray">
            <summary>Loads the image for Themed Icon ReSharperServices16x16 theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ReSharperServices16x16.Load_GrayDark">
            <summary>Loads the image for Themed Icon ReSharperServices16x16 theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ReSharperServices16x16.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ReSharperServices16x16.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal">
             <summary>
            	<para>
            		<para>ScopeGlobal Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                      -"=\L7xxic+;"-         
                   ,L5V}T?+/;;/+?|tSa("      
                 =2k{r=~~~~~~~~~~~~=+tVy/    
               -IET====~,~=_``-~=,~====ckj_  
              _Ek/===^. _=_    -=^ ."===!aU, 
             `K6/===,  `=^      "=-  _===!E6'
             ?bJ;;;;;;;;;;;;;;;;;;;;;;;;;;)bl
             epr!!!`   =!`       !!    !!!/p4
             kGr!!!`   =!`       !!    !!!/Gb
             7#l!!!!!!!!!!!!!!!!!!!!!!!!!!|#u
             'OH+//!:  -/~      "/_  _!//*wR_
              ~Rbr///=. ~/_    -/!``~///+XD! 
               ^G#}+***!^\\_``_/*~;****7HR=  
                `7DRaT++++++++++++++(oO8}`   
                  `+E%DV1lTL++LTl[aR%6?`     
                     `=LloX#MMR65}L;`        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+ScopeGlobal}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.ScopeGlobal))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.ScopeGlobal.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.ScopeGlobal&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal.Load_Color">
            <summary>Loads the image for Themed Icon ScopeGlobal theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal.Load_Gray">
            <summary>Loads the image for Themed Icon ScopeGlobal theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal.Load_GrayDark">
            <summary>Loads the image for Themed Icon ScopeGlobal theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ScopeGlobal.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollDown">
             <summary>
            	<para>
            		<para>ScrollDown Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollDown"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollDown.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                ``````````````````````````   
                `rD$$$$$$$$$$$$$$$$$$$$%)`   
                  `rD$$$$$$$$$$$$$$$$%)`     
                    `rD$$$$$$$$$$$$%)`       
                      `rD$$$$$$$$%)`         
                        `rD$$$$%)`           
                          `rD%)`             
                            ``               
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+ScrollDown}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.ScrollDown))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.ScrollDown.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.ScrollDown&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollDown.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollDown">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollDown.Load_Color">
            <summary>Loads the image for Themed Icon ScrollDown theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollDown.Load_Gray">
            <summary>Loads the image for Themed Icon ScrollDown theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollDown.Load_GrayDark">
            <summary>Loads the image for Themed Icon ScrollDown theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollDown.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ScrollDown.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollUp">
             <summary>
            	<para>
            		<para>ScrollUp Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollUp"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollUp.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                                             
                           =dR!              
                         =d$$$$R!            
                       =d$$$$$$$$R!          
                     =d$$$$$$$$$$$$R!        
                   =d$$$$$$$$$$$$$$$$R!      
                 =d$$$$$$$$$$$$$$$$$$$$R!    
                `________________________.   
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+ScrollUp}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.ScrollUp))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.ScrollUp.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.ScrollUp&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollUp.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollUp">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollUp.Load_Color">
            <summary>Loads the image for Themed Icon ScrollUp theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollUp.Load_Gray">
            <summary>Loads the image for Themed Icon ScrollUp theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollUp.Load_GrayDark">
            <summary>Loads the image for Themed Icon ScrollUp theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollUp.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ScrollUp.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates">
             <summary>
            	<para>
            		<para>SharedSolutionTemplates Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                   aaaaaaaaaaaaaaaaaaaaaaaaaa
                   SS  %%  %%  %%  %%  %%  SS
                   EE8888888888888888888888EE
                   UU  DD  DD  DD  DD  DD  UU
                .*1bbHORRRRRRRRRRRRRRRRRRRR66
               =bo;__=]bAOOOOOOOOOOOOOOOO  ww
               5b,''''-bbppppppppppppppppppbb
               /b]=__~Jbbbdddbdbwwwwwwwww  AA
              ;[kbdbbbbbdo;__=]bw6666666666RR
             lG1r:    _Xb,''''-bbZZZZZZZZ  DD
             DDLLL+'.*Lub]=__~Jb9kkkkkkkkkkDD
             MMttttttt2E6bdbbbb9X! aa  aa  88
             QQQQQQQQDG1r:    _rtG#WWWWWWWWWW
                     DDLLL+'.*LLLDD          
                     MMttttttttttMM          
                     QQQQQQQQQQQQQQ          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+SharedSolutionTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.SharedSolutionTemplates))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.SharedSolutionTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.SharedSolutionTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates.Load_Color">
            <summary>Loads the image for Themed Icon SharedSolutionTemplates theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates.Load_Gray">
            <summary>Loads the image for Themed Icon SharedSolutionTemplates theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates.Load_GrayDark">
            <summary>Loads the image for Themed Icon SharedSolutionTemplates theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SharedSolutionTemplates.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.StackTraceExplorerToolWindow">
             <summary>
            	<para>
            		<para>StackTraceExplorerToolWindow Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.StackTraceExplorerToolWindow"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.StackTraceExplorerToolWindow.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
             HHHHHHHHHHHHHHHHHHHHHHHH        
             RR````````````````````RR        
             DD''''''''''''''''''''DD        
             WW--------------------WW        
             $$::::::::::::::::=?|JkkTr!-    
             QQQQQQQQQQQQQQQQ8Uur"_--_"+Iu!  
               RR----------_lE+.-"===="-.!k}`
               $$$$$$$$$$$$DXr-_"_````_"_-!Xc
                 RR--------aw"--'`     '--_wX
                 $$$$$$$$$$8Hr_. `````` `_!Hl
                   RR-----_rHGr_-`    `-_/bX-
                   $$$$$N417=aDX7=~,,~=|kR}` 
                      `=}7=:~rV8RVp88GE1;`   
                     =}7=:~raDe:             
                     ral!raDe:               
                      '7ADe:                 
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+StackTraceExplorerToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.StackTraceExplorerToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.StackTraceExplorerToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.StackTraceExplorerToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.StackTraceExplorerToolWindow.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.StackTraceExplorerToolWindow">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.StackTraceExplorerToolWindow.Load_Color">
            <summary>Loads the image for Themed Icon StackTraceExplorerToolWindow theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.StackTraceExplorerToolWindow.Load_Gray">
            <summary>Loads the image for Themed Icon StackTraceExplorerToolWindow theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.StackTraceExplorerToolWindow.Load_GrayDark">
            <summary>Loads the image for Themed Icon StackTraceExplorerToolWindow theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.StackTraceExplorerToolWindow.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon StackTraceExplorerToolWindow.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Subtypes">
             <summary>
            	<para>
            		<para>Subtypes Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Subtypes"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Subtypes.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                       FFFFFFFFFFFFFF        
                       [[``````````[[        
                       11``````````11        
                       33``````````33        
                       uu..........uu        
                      `oo..........oo`       
                  `=Tt2i"-L222222L-"i2tT!'   
                 ^5l=_-.=a]-    .ta!.-_~Ta=  
                 }y,-  --yo      }y,-  --yo  
                 ;Vi~__~|V+      ;Vi~__~|V+  
                  _rokkjc,        _rokkjc,   
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Subtypes}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Subtypes))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.Subtypes.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Subtypes&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Subtypes.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Subtypes">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Subtypes.Load_Color">
            <summary>Loads the image for Themed Icon Subtypes theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Subtypes.Load_Gray">
            <summary>Loads the image for Themed Icon Subtypes theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Subtypes.Load_GrayDark">
            <summary>Loads the image for Themed Icon Subtypes theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Subtypes.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Subtypes.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Supertypes">
             <summary>
            	<para>
            		<para>Supertypes Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Supertypes"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Supertypes.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                  `~LTTc=.        `~LTTc=.   
                 "[T^_-"Lx~      "[T^_-"Lx~  
                 T1_.  .-1{      T1_.  .-1{  
                 =u)^_--!ul`    `Tu/---"ru/  
                  -+{uu)"=luuuuuul=")uuFr_   
                      .oo``````````oo_       
                       55``````````55        
                       aa``````````aa        
                       SS..........SS        
                       kk..........kk        
                       EEEEEEEEEEEEEE        
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Supertypes}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Supertypes))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.Supertypes.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Supertypes&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Supertypes.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Supertypes">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Supertypes.Load_Color">
            <summary>Loads the image for Themed Icon Supertypes theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Supertypes.Load_Gray">
            <summary>Loads the image for Themed Icon Supertypes theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Supertypes.Load_GrayDark">
            <summary>Loads the image for Themed Icon Supertypes theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Supertypes.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Supertypes.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate">
             <summary>
            	<para>
            		<para>SurroundTemplate Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                  `jOOOOOOOOOOOOOOOOOOOO5-   
                 -69_!################+-Pp,  
                "Hk-`}RaaaaaaaaaaaaaaRa`.o#= 
               `Hd'``URkk  %%  %%  kkRR```UR'
               LD+```XDUUDDDDDDDDDDUUDD```=Dl
               oD:```#D99  RR  RR  99DD.``'D4
               bD-```DDbbbbbbbbbbbbbbDD-```DD
               V8_```D8OO  66  66  OO88'``.8G
               T8/```b8DDEEEEEEEEEEDD88```~8I
               .8O.``b888  aa  aa  8888```X8_
                *%V'`a%%%%%%%%%%%%%%%%w`.n%| 
                 =8b_?MMMMMMMMMMMMMMMMl-h%*  
                  _RNNNNNNNNNNNNNNNNNNNNR"   
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+SurroundTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.SurroundTemplate))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.SurroundTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.SurroundTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate.Load_Color">
            <summary>Loads the image for Themed Icon SurroundTemplate theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate.Load_Gray">
            <summary>Loads the image for Themed Icon SurroundTemplate theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate.Load_GrayDark">
            <summary>Loads the image for Themed Icon SurroundTemplate theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SurroundTemplate.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncCaretToView">
             <summary>
            	<para>
            		<para>SyncCaretToView Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncCaretToView"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncCaretToView.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                     666666666666666666666666
                     ww~~~~~~~~~~~~~~~~~~~~ww
                     bb====================bb
                     pp;;                ;;pp
                     AA!!           ``   !!AA
             UUUUol?^pwoVUUUU     `;tt;` //##
             UU  `:;xo!:.  UU   `!F),,)F!r/RR
             UUUUUU    UUUUUU `!IT,````,Tnl#D
                 UU    UUrrrr}oz"````````"z2X
                 UU    UU8888yy'^+l....l+^'yy
                 UU    UU    kkkkkk....kkkkkk
                 UU    UU  hhhhhhhh....hh    
                 UU    UU  44'''''''',J4t    
             UUUUUU    UUUUbbbbbbbbbbb{_     
             UU   '"cT^'   UU                
             2UUUU2J!;7oUUUUU                
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+SyncCaretToView}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.SyncCaretToView))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.SyncCaretToView.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.SyncCaretToView&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncCaretToView.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncCaretToView">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncCaretToView.Load_Color">
            <summary>Loads the image for Themed Icon SyncCaretToView theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncCaretToView.Load_Gray">
            <summary>Loads the image for Themed Icon SyncCaretToView theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncCaretToView.Load_GrayDark">
            <summary>Loads the image for Themed Icon SyncCaretToView theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncCaretToView.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SyncCaretToView.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncViewToCaret">
             <summary>
            	<para>
            		<para>SyncViewToCaret Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncViewToCaret"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncViewToCaret.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                   ttttl;`                   
                   CC~`,)f!` UUUUol?^"rJoUUUU
              `;[IIIII~``,T1/PU  `:;xo!:.  UU
             !37"``````````"7oaZUUU    UUUUUU
             aa............_ca|- UU    UU    
             kk..kkkkk+.._Tk7-   UU    UU    
             ZZ..ZZZZr.,7ZX666666UU    UU    
             44''4444444o+~~~~~~~UU    UU    
             bbbbbb==============UU    UU    
             pp;;            UUUUUU    UUUUUU
             GG!!            UU   '"cT^'   UU
             ##//            oUUUUV4b;7oUUUUU
             RR//                //RR        
             DD++                ++DD        
             DDrrrrrrrrrrrrrrrrrrrrDD        
             888888888888888888888888        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+SyncViewToCaret}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.SyncViewToCaret))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.SyncViewToCaret.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.SyncViewToCaret&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncViewToCaret.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncViewToCaret">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncViewToCaret.Load_Color">
            <summary>Loads the image for Themed Icon SyncViewToCaret theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncViewToCaret.Load_Gray">
            <summary>Loads the image for Themed Icon SyncViewToCaret theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncViewToCaret.Load_GrayDark">
            <summary>Loads the image for Themed Icon SyncViewToCaret theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SyncViewToCaret.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SyncViewToCaret.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.TypeHierarchyToolWindow">
             <summary>
            	<para>
            		<para>TypeHierarchyToolWindow Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.TypeHierarchyToolWindow"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.TypeHierarchyToolWindow.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                          `~LTTc=.           
                         ,C|^_-"Lx~          
                         T1_.  .'1{          
                         ^Ic_.._rI!          
                          'nn..nn_           
                       uuuuuu''uuuuuu        
                       oo``````````oo        
                       oo``````````oo        
                       ee..........ee        
                       aa..........aa        
                      `aa''''''''''aa`       
                  .;7[S{=^TSSSSSST^={S[J/'   
                 ^SC!^"_/VI-    .FV+_"^!lV;  
                 Ck^_` _:ka      Ck^_` _:ka  
                 !kl=,,=Tk+      !kl=,,=Tk+  
                  _?oEEe),        _?oEEe),   
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+TypeHierarchyToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.TypeHierarchyToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesThemedIcons.TypeHierarchyToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesThemedIcons.TypeHierarchyToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.TypeHierarchyToolWindow.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.TypeHierarchyToolWindow">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.TypeHierarchyToolWindow.Load_Color">
            <summary>Loads the image for Themed Icon TypeHierarchyToolWindow theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.TypeHierarchyToolWindow.Load_Gray">
            <summary>Loads the image for Themed Icon TypeHierarchyToolWindow theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.TypeHierarchyToolWindow.Load_GrayDark">
            <summary>Loads the image for Themed Icon TypeHierarchyToolWindow theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.TypeHierarchyToolWindow.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon TypeHierarchyToolWindow.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = BulbThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(BulbThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;BulbThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.BulbFrame">
             <summary>
            	<para>
            		<para>BulbFrame Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.BulbFrame"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.BulbFrame.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+BulbFrame}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.BulbFrame))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = BulbThemedIcons.BulbFrame.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;BulbThemedIcons.BulbFrame&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.BulbFrame.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.BulbFrame">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.BulbFrame.Load_Color">
            <summary>Loads the image for Themed Icon BulbFrame theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.BulbFrame.Load_Gray">
            <summary>Loads the image for Themed Icon BulbFrame theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.BulbFrame.Load_GrayDark">
            <summary>Loads the image for Themed Icon BulbFrame theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.BulbFrame.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BulbFrame.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextAction">
             <summary>
            	<para>
            		<para>ContextAction Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextAction"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextAction.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                       ~TV6RR$$$$$$          
                    `i883/_--`  ^$R          
                  `i0b!..``^|ub$R[.          
                `i0b!..```7$8r-              
               ^0$T..```   _V$['             
             $$$$$$```     -3$K,             
             $$..```     -3$%$H/`            
             5$j_`   $$33$8[+*FDDT.          
              -5$u-  $$KRQgETL+!Tw%3:        
                -5$$$$$  `tg$o|L+!ry8X;      
                           -4gD{|L+!!CD#L`   
                             ~Mgbi|L+!=|b8}- 
                               cgQE7|L+!=+9%)
                                `ogMu7|L+!+B8
                                  _RgD37}KM8"
                                    ;Ggggd/  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+ContextAction}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.ContextAction))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = BulbThemedIcons.ContextAction.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;BulbThemedIcons.ContextAction&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextAction.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextAction">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextAction.Load_Color">
            <summary>Loads the image for Themed Icon ContextAction theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextAction.Load_Gray">
            <summary>Loads the image for Themed Icon ContextAction theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextAction.Load_GrayDark">
            <summary>Loads the image for Themed Icon ContextAction theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextAction.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ContextAction.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextActionVS">
             <summary>
            	<para>
            		<para>ContextActionVS Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextActionVS"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextActionVS.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                         `=2hH#$NNNNN        
                       _S$Xl=:_` -*NH        
                     _aNP~.-`"5p%RaT`        
                   _aNP~.-``.eN#~            
                 55HNNa_``    ,%NY           
             WWWWWQT**=` `  `|%NH,           
             a%u_+0M=`  *$j|%MjTVMG!         
              ?WO^~O$a  }NDNg#1T\\28#T`      
               "0B*:y$gQQg$$$$$wsT\+FdBI'    
                aNZ__TWDGNv_rNBgQa|T\!?VMP^  
               SNj_+V";8NF_?$R`.9gBZ|T\!*]8X_
              SNe:*%N8;"T:?ND`   "0gRf|T\!+%R
             SQE:*%0=N%;:TND`      rgg4Csu8NL
             QQQQQB'aQS,*N#`        `fMggdC' 
                   agy,\NB'                  
                   gggggB'                   
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LosacuhThemedIconsThemedIcons+ContextActionVS}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(LosacuhThemedIconsThemedIcons.ContextActionVS))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = LosacuhThemedIconsThemedIcons.ContextActionVS.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;LosacuhThemedIconsThemedIcons.ContextActionVS&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextActionVS.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextActionVS">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextActionVS.Load_Color">
            <summary>Loads the image for Themed Icon ContextActionVS theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextActionVS.Load_Gray">
            <summary>Loads the image for Themed Icon ContextActionVS theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextActionVS.Load_GrayDark">
            <summary>Loads the image for Themed Icon ContextActionVS theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextActionVS.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ContextActionVS.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.DisableBulb">
             <summary>
            	<para>
            		<para>DisableBulb Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.DisableBulb"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.DisableBulb.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                        `,=/rTT?*;"`         
                      ,rCr"_.``.-"+CL"       
                    `r1~` `--__--` `"]l=+}wRR
                   `t{- `________~rTuGGy}?;RR
                   re~ `---_~?tZRGalr="""""DD
                   ]a``~L14Db57+~"""""^*TowD6
                 `"kDG8wjT/~"""""~rJSH8Db/_` 
               uR8wIT!""""""=?FkDDX7=_}E_    
               MM""""""!cI48D8R;_   _nV,     
               00"!7odWNDL^. 66    o6+`      
               $$$#or^`ww          ww        
                       [[`'_^=+cluk[[        
                       [u.'_^=+clukuu        
                       !a!'_^=+cluVar        
                        +El!~=+|xVE)`        
                         -/uk44ku+-          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+DisableBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.DisableBulb))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = BulbThemedIcons.DisableBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;BulbThemedIcons.DisableBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.DisableBulb.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.DisableBulb">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.DisableBulb.Load_Color">
            <summary>Loads the image for Themed Icon DisableBulb theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.DisableBulb.Load_Gray">
            <summary>Loads the image for Themed Icon DisableBulb theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.DisableBulb.Load_GrayDark">
            <summary>Loads the image for Themed Icon DisableBulb theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.DisableBulb.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DisableBulb.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.GhostBulb">
             <summary>
            	<para>
            		<para>GhostBulb Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.GhostBulb"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.GhostBulb.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+GhostBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.GhostBulb))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = BulbThemedIcons.GhostBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;BulbThemedIcons.GhostBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.GhostBulb.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.GhostBulb">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.GhostBulb.Load_Color">
            <summary>Loads the image for Themed Icon GhostBulb theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.GhostBulb.Load_Gray">
            <summary>Loads the image for Themed Icon GhostBulb theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.GhostBulb.Load_GrayDark">
            <summary>Loads the image for Themed Icon GhostBulb theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.GhostBulb.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon GhostBulb.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.OptionsVS">
             <summary>
            	<para>
            		<para>OptionsVS Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.OptionsVS"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.OptionsVS.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                     =*T1uuCJ\~`             
                     UY~,''`_^rai~           
                     ;aY,       ^an'         
               `aSS5" `;yY"      -5a'        
               ?P^`;S5" -jP7`     _P}        
             MMMMMb'`;E5aY"`       PP        
             yMY'=88^``;~`````````_Pi        
              ?MA:_AMz````````````;aI_       
               "08;'n%V.-G%%%%%````'cy1_     
                a%[''cM8p%7'*%#``````'LSF_   
               j$Y'=a_^#$J'*WWy!.``````'cEv_ 
              E$5';M$#=_L'\$R-~I5+'------_TE;
             EN5';M8=$%='L$R`   ^I5+'....._E1
             NNNNN0'SNZ_;$m`      ~[Y+_'_+Y['
                   SQu_!$0'         "LCnnT"  
                   QQQQQ0'                   
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LosacuhThemedIconsThemedIcons+OptionsVS}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(LosacuhThemedIconsThemedIcons.OptionsVS))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = LosacuhThemedIconsThemedIcons.OptionsVS.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;LosacuhThemedIconsThemedIcons.OptionsVS&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.OptionsVS.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.OptionsVS">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.OptionsVS.Load_Color">
            <summary>Loads the image for Themed Icon OptionsVS theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.OptionsVS.Load_Gray">
            <summary>Loads the image for Themed Icon OptionsVS theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.OptionsVS.Load_GrayDark">
            <summary>Loads the image for Themed Icon OptionsVS theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.OptionsVS.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon OptionsVS.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulb">
             <summary>
            	<para>
            		<para>RedBulb Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulb"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulb.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                         -,^=!!=^"-`         
                      -=r=_-.```-_=r=_       
                     =r"` `..''..`  _r!`     
                   `+r' `__________. `+r`    
                   =|, .""""""""""""- -|/    
                   LT` "~~~~~~~~~~~~~  TT    
                   /i_ _!!!ukrrku!!!" .ir    
                   .lT` "*++5885+++^  Ll-    
                    '7J: `,rr88rr,` _Tl-     
                      ~xl  ))88))  7x=`      
                       uu          uu        
                       DD`'_^=+cluk6X        
                       OD.'_^=+cluk6h        
                       cDr'_^=+cluU6|        
                        TDo+==+Tuh9T`        
                         -rk4AGher-          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+RedBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.RedBulb))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = BulbThemedIcons.RedBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;BulbThemedIcons.RedBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulb.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulb">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulb.Load_Color">
            <summary>Loads the image for Themed Icon RedBulb theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulb.Load_Gray">
            <summary>Loads the image for Themed Icon RedBulb theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulb.Load_GrayDark">
            <summary>Loads the image for Themed Icon RedBulb theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulb.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RedBulb.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulbVS">
             <summary>
            	<para>
            		<para>RedBulbVS Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulbVS"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulbVS.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                             '"^=++=^"'`     
                          ';c;:'````._^L!_   
                        `;?~` `-.''.-`  :r+- 
                        r?' -__________. -rT`
                       =|: '~~++~~~~++~~_ _|*
             WWWWWG-   LF` ^;;v#VLLV8C;;=  F7
             a%u_+08"  +C_ :***rk00Gr***~ `Cr
              ?WO^~OWT `iv` ~rrrr00rrrr=  TC'
               "0B*:y$a`_8$$$$$L?PP?L^. _lf_ 
                aNZ__TWDGNv_rNR        CE=   
               SNj_+V";8NF_?$#__~;\T1uVG4    
              SNe:*%N8;"T:?Ng_'_~;\T1uVGk    
             SQE:*%0=N$!:TNMBr'_~;\T1ukGz    
             QQQQQB'aQS,*N#.|#EL=;\|ukws`    
                   agy,\NB'  'cP4RqkaL_      
                   gggggB'                   
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LosacuhThemedIconsThemedIcons+RedBulbVS}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(LosacuhThemedIconsThemedIcons.RedBulbVS))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = LosacuhThemedIconsThemedIcons.RedBulbVS.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;LosacuhThemedIconsThemedIcons.RedBulbVS&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulbVS.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulbVS">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulbVS.Load_Color">
            <summary>Loads the image for Themed Icon RedBulbVS theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulbVS.Load_Gray">
            <summary>Loads the image for Themed Icon RedBulbVS theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulbVS.Load_GrayDark">
            <summary>Loads the image for Themed Icon RedBulbVS theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulbVS.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RedBulbVS.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulb">
             <summary>
            	<para>
            		<para>YellowBulb Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulb"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulb.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                         ``````````          
                      `.``        ``.`       
                     -.`     ``     `.'`     
                   `--`  ``````````   --`    
                   _,.  ````````````` `,_    
                   ^~  ``````````````  ~~    
                   ";. ````/L__L/```` `;~    
                   `\!  ````\oo\````  =*-    
                    .++-  `..oo..`  '*r-     
                      ^TL  ..oo..  rT~`      
                       }}          }}        
                       DD`'_^=+cluk6X        
                       OD.'_^=+cluk6h        
                       cDr'_^=+cluU6|        
                        TDo+==+Tuh9T`        
                         -rk4AGher-          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+YellowBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.YellowBulb))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = BulbThemedIcons.YellowBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;BulbThemedIcons.YellowBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulb.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulb">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulb.Load_Color">
            <summary>Loads the image for Themed Icon YellowBulb theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulb.Load_Gray">
            <summary>Loads the image for Themed Icon YellowBulb theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulb.Load_GrayDark">
            <summary>Loads the image for Themed Icon YellowBulb theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulb.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon YellowBulb.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulbVS">
             <summary>
            	<para>
            		<para>YellowBulbVS Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulbVS"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulbVS.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                             -__:"":__-      
                          ."="'-`````':=~'   
                        `~;_`   ````    _;^` 
                        !!-  ``````````  `;+`
                       ~L_  ``__````__``` 'L=
             WWWWWG-   !?` ```^Z?__?n=```  ?L
             a%u_+08"  =J' `---'TSS|'---` `J*
              ?WO^~OWT `TT` `----SS----`  L|.
               "0B*:y$a`'8$$$$$--++--`  _(v_ 
                aNZ__TWDGNv_rNR        iZ^   
               SNj_+V";8NF_?$#__~;\T1uVG4    
              SNe:*%N8;"T:?Ng_'_~;\T1uVGk    
             SQE:*%0=N$!:TNMBr'_~;\T1ukGz    
             QQQQQB'aQS,*N#.|#EL=;\|ukws`    
                   agy,\NB'  'cP4RqkaL_      
                   gggggB'                   
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LosacuhThemedIconsThemedIcons+YellowBulbVS}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(LosacuhThemedIconsThemedIcons.YellowBulbVS))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = LosacuhThemedIconsThemedIcons.YellowBulbVS.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;LosacuhThemedIconsThemedIcons.YellowBulbVS&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulbVS.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulbVS">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulbVS.Load_Color">
            <summary>Loads the image for Themed Icon YellowBulbVS theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulbVS.Load_Gray">
            <summary>Loads the image for Themed Icon YellowBulbVS theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulbVS.Load_GrayDark">
            <summary>Loads the image for Themed Icon YellowBulbVS theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulbVS.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon YellowBulbVS.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:DaemonThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(DaemonThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = DaemonThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(DaemonThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;DaemonThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons.Recursion">
             <summary>
            	<para>
            		<para>Recursion Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons.Recursion"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons.Recursion.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                     zzzzzzzzzzzzzzzzzzzzzz  
                     tt                  tt  
                  IGGGGp(.               CC  
                   3O; "jGT-`````````````33  
                -\ik##!``^5A7-```````````22  
              -oG1;,-``````rRO!..........SS  
             :H6"'raXR|..,FRo~'''''''''''EE  
             IR;-1RRRT-"1R5=-------------66  
             RR--RRRRRRRy;_______________bb  
             DD__DD  AA__________________AA  
             DD,,DD  RRRRRRRRDD,,DDRRRRRRRR  
             aD\"ED*`       =Db"=D6          
             "D9!=IODDDDDDDDRo;=PD;          
              _b#o?!========!rIAO^           
                ,7kdDDDDDDDDdkl^             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:DaemonThemedIcons+Recursion}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(DaemonThemedIcons.Recursion))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = DaemonThemedIcons.Recursion.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;DaemonThemedIcons.Recursion&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons.Recursion.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons.Recursion">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons.Recursion.Load_Color">
            <summary>Loads the image for Themed Icon Recursion theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons.Recursion.Load_Gray">
            <summary>Loads the image for Themed Icon Recursion theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons.Recursion.Load_GrayDark">
            <summary>Loads the image for Themed Icon Recursion theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons.Recursion.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Recursion.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = CommonFeaturesOptionsThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(CommonFeaturesOptionsThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.BuildScripts">
             <summary>
            	<para>
            		<para>BuildScripts Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.BuildScripts"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.BuildScripts.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                         }}____}}            
                   .     FF____FF     .      
                   11lr="11----11"=rl11      
                   33_~!?71----17?!~_33      
                   coT=-..........'~|oT      
             uuuuuuuuoeor,``````:+ueoouuuuuuu
             22  888888R4S1!--!FS6R888888  22
             SS  DDDDDDDDRqUVVZbRDDDDDDDD  SS
             kk``OO````OOOO````OOOO````OO``kk
             UU``bb````bbbb````bbbb````bb``UU
             44..XXXXXXXXXXXXXXXXXXXXXXXX..44
             bb--kkkkkk````kkkk````kkkkkk--bb
             AA--aaaaaa....aaaa....aaaaaa--AA
             RR__oooooooooooooooooooooooo__RR
             DD""""""""""""""""""""""""""""DD
             88888888888888888888888888888888
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+BuildScripts}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.BuildScripts))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonFeaturesOptionsThemedIcons.BuildScripts.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.BuildScripts&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.BuildScripts.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.BuildScripts">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.BuildScripts.Load_Color">
            <summary>Loads the image for Themed Icon BuildScripts theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.BuildScripts.Load_Gray">
            <summary>Loads the image for Themed Icon BuildScripts theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.BuildScripts.Load_GrayDark">
            <summary>Loads the image for Themed Icon BuildScripts theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.BuildScripts.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BuildScripts.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CodeStyleSharing">
             <summary>
            	<para>
            		<para>CodeStyleSharing Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CodeStyleSharing"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CodeStyleSharing.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
             666666666666666666666666        
             44...'----___:,,""^^~~44        
             ww...'----___:,,""^^~~ww        
             bbbbbbbbbbbbbbbbbbbbbbbb        
             pp   `````````pp                
             GG   ```````"|dbwwwwwwwwwwax|,  
             OOOOOOOOOOOGb1|L++++++++++LcCwa.
             RR````````lGl?????????/_``-!?TG2
             RR````````##))))))))))`     ))##
             DDDDDDDDDDRR77r:.`-"_-_.  '!77RR
             DD-_,"^~=;DDll`     illlllllllDD
             DD-_,"^~=;DD[[r-  `__:~_..:?[[DD
             888888888888ooooooooo1`     oo88
                       a8Uyyyyyyyyy)-` -ryk8b
                       -G8phEEEEEEEEEEEEPd8R_
                        `!SRBBBBBBBBBBBBDK+` 
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+CodeStyleSharing}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.CodeStyleSharing))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonFeaturesOptionsThemedIcons.CodeStyleSharing.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.CodeStyleSharing&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CodeStyleSharing.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CodeStyleSharing">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CodeStyleSharing.Load_Color">
            <summary>Loads the image for Themed Icon CodeStyleSharing theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CodeStyleSharing.Load_Gray">
            <summary>Loads the image for Themed Icon CodeStyleSharing theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CodeStyleSharing.Load_GrayDark">
            <summary>Loads the image for Themed Icon CodeStyleSharing theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CodeStyleSharing.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CodeStyleSharing.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CsharpOptionPage">
             <summary>
            	<para>
            		<para>CsharpOptionPage Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CsharpOptionPage"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CsharpOptionPage.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}fCxInuo2aSS
                 kkrr?Lc)|TT7zJlt}fCxInuo2akk
                 ZZrr?Lc)|TT7zJlt}fCxInuo2aZZ
                 66                      "^66
                 ww  ````````````````````"^ww
                 bb  ````````````````````"^bb
                 GG  ''''''''''''''''''''"^GG
              `!1R###############--------"^RR
             _Ek!_```dddd``dd``dddd______"^DD
             }4,`^54444``````````44"""""""^DD
             KK..1KKKKKKK..KK..KKKK___:,""^88
             lS,';5SSSS''''''''''SS%%%%%%%%%%
             _It=_---oooo--oo--oooo          
              `!71IIIIIIIIIIIIIII            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+CsharpOptionPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.CsharpOptionPage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonFeaturesOptionsThemedIcons.CsharpOptionPage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.CsharpOptionPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CsharpOptionPage.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CsharpOptionPage">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CsharpOptionPage.Load_Color">
            <summary>Loads the image for Themed Icon CsharpOptionPage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CsharpOptionPage.Load_Gray">
            <summary>Loads the image for Themed Icon CsharpOptionPage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CsharpOptionPage.Load_GrayDark">
            <summary>Loads the image for Themed Icon CsharpOptionPage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CsharpOptionPage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CsharpOptionPage.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Inc">
             <summary>
            	<para>
            		<para>Inc Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Inc"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Inc.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                   aaaaaaaaaaaauuuuuuuu3/`   
                   SS--SS''SS''jj------~lo+` 
                   kkkkkkkkkkkkaa--    --~ta+
                   ZZ--ZZ      VV--      --VV
               uuuuuuuuuuuuuu3/kE--      --EE
               oo------------~Joa,-      --XX
               ee--------------~ljL,-------99
               aa----      ------~takbbbbbbbb
               SS----      --------SS  OO''OO
               kk----          ----kk  RRRRRR
               EE----          ----EE  DD--DD
               hh----          ----hhDDDDDDDD
               XX----          ----XX--88--88
               44------------------44%%%%%%%%
               ww------------------ww        
               bbbbbbbbbbbbbbbbbbbbbb        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+Inc}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.Inc))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonFeaturesOptionsThemedIcons.Inc.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.Inc&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Inc.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Inc">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Inc.Load_Color">
            <summary>Loads the image for Themed Icon Inc theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Inc.Load_Gray">
            <summary>Loads the image for Themed Icon Inc theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Inc.Load_GrayDark">
            <summary>Loads the image for Themed Icon Inc theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Inc.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Inc.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.LanguagesCommon">
             <summary>
            	<para>
            		<para>LanguagesCommon Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.LanguagesCommon"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.LanguagesCommon.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                    -=!+LL+!=-               
                 `=zc"-````."rJ!.            
               `:J|.          .rt^``         
             ``"1?`             +1=`         
             `.zu_``````````~=!!*\/\!-       
             .'{5-```````,!+/^_-_r+',/J!.    
             `-/V|......=+/-....~r=   `\t^`` 
              -_rkT_''';r;'...'=r!`     +1=``
               '_;uUT!"/r_--,=+/~```````.u1..
                `-:~)I5/rr+/!;_`````````-5o'.
                   `-_,rV)..............rV?-`
                      -_rkJ_''''''''''-TEc_- 
                       '_;uUt/"_--_"!Jhu/_-  
                        `-:~)I5EwwPaI)~,-`   
                           `-__,^^,__-`      
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+LanguagesCommon}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.LanguagesCommon))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonFeaturesOptionsThemedIcons.LanguagesCommon.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.LanguagesCommon&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.LanguagesCommon.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.LanguagesCommon">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.LanguagesCommon.Load_Color">
            <summary>Loads the image for Themed Icon LanguagesCommon theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.LanguagesCommon.Load_Gray">
            <summary>Loads the image for Themed Icon LanguagesCommon theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.LanguagesCommon.Load_GrayDark">
            <summary>Loads the image for Themed Icon LanguagesCommon theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.LanguagesCommon.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon LanguagesCommon.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Master">
             <summary>
            	<para>
            		<para>Master Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Master"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Master.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
             SSrr?Lcc)|TT77iJltt}Cx1I3uoj5aSS
             kkrr?Lcc)|TT77iJltt}Cx1I3uoj5akk
             PPrr?Lcc)|TT77iJltt}Cx1I3uoj5aPP
             XX  gggggggggggggggggggggggg^^XX
             44  QQQQQQ  QQQQQQQQQQQQQQQQ^^44
             ww  $$$$$$$$$$$$$$$$$$$$$$$$^^ww
             dd  %%  %%  %%  %%  %%  %%  ^^dd
             GG  DDDDDDDDDDDDDDDDDDDDDDDD^^GG
             ##  AAAAAA  AAAAAAAAAAAAAAAA^^##
             RR  wwwwwwwwwwwwwwwwwwwwwwww^^RR
             DD  PPPPPP  PPPPPPPPPPPPPPPP^^DD
             DD  yyyyyyyyyyyyyyyyyyyyyyyy^^DD
             88    ```````..'----____,,""^^88
             WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+Master}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.Master))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonFeaturesOptionsThemedIcons.Master.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.Master&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Master.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Master">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Master.Load_Color">
            <summary>Loads the image for Themed Icon Master theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Master.Load_Gray">
            <summary>Loads the image for Themed Icon Master theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Master.Load_GrayDark">
            <summary>Loads the image for Themed Icon Master theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Master.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Master.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Vbnet">
             <summary>
            	<para>
            		<para>Vbnet Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Vbnet"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Vbnet.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}fCxInuo2aSS
                 kkrr?Lc)|TT7zJlt}fCxInuo2akk
                 ZZrr?Lc)|TT7zJlt}fCxInuo2aZZ
                 66                      "^66
                 ww  ````````````````````"^ww
                 bb  ````````````````````"^bb
                 GG  ''''''''''''''''''''"^GG
             $$$$$$$$$$$$$$$$8GE|"-------"^RR
             PB..BBBB..BB...._,rDD=______"^DD
             :%!'u%%k'~%%''%%%k'{%T"""""""^DD
              5O__OR,_b88------:98)___:,""^88
              _RI-/r-lRRR--RRRA),RD%%%%%%%%%%
               uO;__^OOOO______~tO7          
               ^dddddddddddddddE7~           
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+Vbnet}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.Vbnet))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonFeaturesOptionsThemedIcons.Vbnet.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.Vbnet&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Vbnet.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Vbnet">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Vbnet.Load_Color">
            <summary>Loads the image for Themed Icon Vbnet theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Vbnet.Load_Gray">
            <summary>Loads the image for Themed Icon Vbnet theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Vbnet.Load_GrayDark">
            <summary>Loads the image for Themed Icon Vbnet theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Vbnet.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Vbnet.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Xaml">
             <summary>
            	<para>
            		<para>Xaml Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Xaml"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Xaml.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 IIIIIIIIIIIIIII/`           
                 uu''''''''''''^7u/`         
                 oo''''''''''''''~iu*`       
                 ee''''        ''''~lj*`     
                 aa----        ------~l5+    
                 yy----            ----yy    
                 VV----            ----VV    
                 kk----            ----kk    
             ggggggggggggggggggg3.`uggggggg  
             gg..gg..ggR!....gg..QQ..gg..gg  
             QQL.QQ./QQ..QQ..QQ......QQ..QQ  
             QQQQ--QQQQ--QQ--QQ--;~--QQ--QQ  
             $$--$$--$$------$$--bZ--$$--$$$$
             $$__$$__$$__$$__$$__$$__$$____$$
             NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+Xaml}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.Xaml))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonFeaturesOptionsThemedIcons.Xaml.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.Xaml&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Xaml.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Xaml">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Xaml.Load_Color">
            <summary>Loads the image for Themed Icon Xaml theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Xaml.Load_Gray">
            <summary>Loads the image for Themed Icon Xaml theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Xaml.Load_GrayDark">
            <summary>Loads the image for Themed Icon Xaml theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Xaml.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Xaml.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = ServicesNavigationThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(ServicesNavigationThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.Kind">
             <summary>
            	<para>
            		<para>Kind Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.Kind"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.Kind.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                           cDDl              
                         .5#)?AE-            
                        "6U=--~Eb=           
                       rb{_-__--JbT          
                     `x6/`.----.`;Uo'        
                    ,Vo_``.'''''``-uE~       
               dddddddddddddddO+{ePhwOS-     
               AA           .RHu;_.._=]HS-   
               RR``........"Gw".-____-.:X#^  
               DD..--------yD+_"~~~~~~^_=Dk  
               DD--________6Dr~!//////!~!Dw  
               88::""""""""r8Or/+????+/+b8!  
               WW^^^^^^^^^^^r08X{T??|tK8D~   
               BBBBBBBBBBBBBB$$twDBBDwx~     
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+Kind}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.Kind))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.Kind.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.Kind&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.Kind.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.Kind">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.Kind.Load_Color">
            <summary>Loads the image for Themed Icon Kind theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.Kind.Load_Gray">
            <summary>Loads the image for Themed Icon Kind theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.Kind.Load_GrayDark">
            <summary>Loads the image for Themed Icon Kind theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.Kind.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Kind.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageArrayCreation">
             <summary>
            	<para>
            		<para>UsageArrayCreation Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageArrayCreation"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageArrayCreation.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_-`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1U_ .-------------------  UU  
               66  ''''llllll''llllll''  66  
               99  ''llll  llllll  llll  99  
               bb  ..ll      ll      ll  bb  
               pp  ..llll  llllll  llll  pp  
               AA``....llllll..llllll..``AA  
               RR````llll  llllll  llll``RR  
               DD````ll      ll      ll``DD  
               DD````llll  llllll  llll``DD  
               88``````llllll``llllll````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageArrayCreation}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageArrayCreation))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageArrayCreation.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageArrayCreation&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageArrayCreation.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageArrayCreation">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageArrayCreation.Load_Color">
            <summary>Loads the image for Themed Icon UsageArrayCreation theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageArrayCreation.Load_Gray">
            <summary>Loads the image for Themed Icon UsageArrayCreation theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageArrayCreation.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageArrayCreation theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageArrayCreation.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageArrayCreation.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageAttribute">
             <summary>
            	<para>
            		<para>UsageAttribute Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageAttribute"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageAttribute.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .-````````````````--  hh  
               66  ''``%%%%````%%%%``''  66  
               99  ..``DD````````DD``..  99  
               bb  ..``RR``....``RR``..  bb  
               dd  ..  dd  ....  dd  ..  dd  
               AA``..  66  ....  66  ..``AA  
               RR````  KK        KK  ````RR  
               DD````  yyyy    yyyy  ````DD  
               DD````                ````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageAttribute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageAttribute))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageAttribute.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageAttribute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageAttribute.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageAttribute">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageAttribute.Load_Color">
            <summary>Loads the image for Themed Icon UsageAttribute theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageAttribute.Load_Gray">
            <summary>Loads the image for Themed Icon UsageAttribute theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageAttribute.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageAttribute theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageAttribute.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageAttribute.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageBase">
             <summary>
            	<para>
            		<para>UsageBase Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageBase"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageBase.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------.```'-------  EE  
               1h_ .----.``_+r,``.-----  hh  
               66  ''.```~i1111l=.``.''  66  
               99  ..``+ujjjjjjjjor``..  99  
               bb  ..``Var_VVVV_r5V``..  bb  
               dd  ..  ~`  hhhh  `^  ..  dd  
               AA``..  ``  wwww      ..``AA  
               RR````````  FOOO=     ````RR  
               DD`````````  /FHDDDD  ````DD  
               DD```````````         ````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageBase}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageBase))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageBase.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageBase&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageBase.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageBase">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageBase.Load_Color">
            <summary>Loads the image for Themed Icon UsageBase theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageBase.Load_Gray">
            <summary>Loads the image for Themed Icon UsageBase theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageBase.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageBase theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageBase.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageBase.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCatchClause">
             <summary>
            	<para>
            		<para>UsageCatchClause Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCatchClause"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCatchClause.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--.````.'-----  kk  
               "E7` .----.`_T77T,`.----  EE  
               1h_ .-----``yc``!b``----  hh  
               66  ''''''``_}z7F^``''''  66  
               99  ........``ww```.....  99  
               bb  ..   `..  XX  ..`     bb  
               dd  ..  c- `  EE  ` -c    dd  
               AA``..  yy?'  yy  '?yy  ``AA  
               RR````  jj    jj    jj  ``RR  
               DD````  LI~` ,II~` ,Is  ``DD  
               DD````` `=JCCT=~|CCl!` ```DD  
               88```````            `````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageCatchClause}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageCatchClause))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageCatchClause.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageCatchClause&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCatchClause.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCatchClause">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCatchClause.Load_Color">
            <summary>Loads the image for Themed Icon UsageCatchClause theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCatchClause.Load_Gray">
            <summary>Loads the image for Themed Icon UsageCatchClause theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCatchClause.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageCatchClause theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCatchClause.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageCatchClause.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCompilerRelated">
             <summary>
            	<para>
            		<para>UsageCompilerRelated Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCompilerRelated"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCompilerRelated.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--``````------  kk  
               "E7` .------``{{``------  EE  
               1h_ .---``````uu``````--  hh  
               66  ''''  c-  SS  -c  ''  66  
               99  ....  ]XT-XX-TX]  ..  99  
               bb  ....`` "oppppo" ``..  bb  
               dd  ......`` "SS"  `....  dd  
               AA``..                  ``AA  
               RR````  11  11  11  11  ``RR  
               DD````                  ``DD  
               DD``````  ll  ll  ll  ````DD  
               88``````              ````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageCompilerRelated}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageCompilerRelated))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageCompilerRelated.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageCompilerRelated&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCompilerRelated.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCompilerRelated">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCompilerRelated.Load_Color">
            <summary>Loads the image for Themed Icon UsageCompilerRelated theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCompilerRelated.Load_Gray">
            <summary>Loads the image for Themed Icon UsageCompilerRelated theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCompilerRelated.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageCompilerRelated theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageCompilerRelated.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageCompilerRelated.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstantDeclaration">
             <summary>
            	<para>
            		<para>UsageConstantDeclaration Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstantDeclaration"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstantDeclaration.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .-------------------  hh  
               66  ''````````````````''  66  
               99  ..``888888888888``..  99  
               bb  ..``++++++++++++``..  bb  
               dd  ..                ..  dd  
               AA``..  ;;;;;;;;;;;;  ..``AA  
               RR````  SSSSSSSSSSSS  ````RR  
               DD````                ````DD  
               DD````````````````````````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageConstantDeclaration}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageConstantDeclaration))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageConstantDeclaration.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageConstantDeclaration&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstantDeclaration.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstantDeclaration">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstantDeclaration.Load_Color">
            <summary>Loads the image for Themed Icon UsageConstantDeclaration theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstantDeclaration.Load_Gray">
            <summary>Loads the image for Themed Icon UsageConstantDeclaration theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstantDeclaration.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageConstantDeclaration theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstantDeclaration.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageConstantDeclaration.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstraint">
             <summary>
            	<para>
            		<para>UsageConstraint Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstraint"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstraint.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_-`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1U_ .------~r)txlt+-----  UU  
               66  ''''''!)+-  -7Vx''''  66  
               99  ''''''?)  tx  VP''''  99  
               bb  ......?)  tx  VP....  bb  
               pp  ....kkkkkkkkkkkkkk..  pp  
               AA``....XX"_--_"=/rTXX..``AA  
               RR``````bb"_--gg=/rTbb````RR  
               DD``````OO"_--gg=/rTOO````DD  
               DD``````DD"_--_"=/rTDD````DD  
               88``````88888888888888````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageConstraint}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageConstraint))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageConstraint.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageConstraint&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstraint.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstraint">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstraint.Load_Color">
            <summary>Loads the image for Themed Icon UsageConstraint theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstraint.Load_Gray">
            <summary>Loads the image for Themed Icon UsageConstraint theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstraint.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageConstraint theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConstraint.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageConstraint.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConversionType">
             <summary>
            	<para>
            		<para>UsageConversionType Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConversionType"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConversionType.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- `..'--------------  kk  
               "E7` -+=:7yyyyyyyyyyyy--  EE  
               1h_ .-_L7,'.........kk--  hh  
               66  ''1"^tr-''''''''PP''  66  
               99  ..66--/1='------66..  99  
               bb  ..ww__!_(t,-____ww..  bb  
               dd  ..HH__H5"^1L--__HH..  dd  
               AA``..##,,RRRl-/5;._##..``AA  
               RR````DD""8888R+-7I:~X````RR  
               DD````DD~~~~~~~~"'"5)-````DD  
               DD````888888888888t-+E;```DD  
               88```````````````````-+```88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageConversionType}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageConversionType))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageConversionType.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageConversionType&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConversionType.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConversionType">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConversionType.Load_Color">
            <summary>Loads the image for Themed Icon UsageConversionType theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConversionType.Load_Gray">
            <summary>Loads the image for Themed Icon UsageConversionType theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConversionType.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageConversionType theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageConversionType.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageConversionType.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDefault">
             <summary>
            	<para>
            		<para>UsageDefault Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDefault"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDefault.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .----.``````.------  EE  
               1h_ .--'``-/|}Fsc"``'---  hh  
               66  '''``?k?-``'/kF.`.''  66  
               99  ..``/XT`````-rX)``..  99  
               bb  ..` Iw= `"Th+_wE `..  bb  
               dd  ..` 5G:;9[=` :G9  ..  dd  
               AA``..` cRT-`    rRt `..``AA  
               RR````` `EDr`   !DE` `````RR  
               DD`````` `!Vbww6u=  ``````DD  
               DD````````        ````````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageDefault}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageDefault))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageDefault.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageDefault&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDefault.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDefault">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDefault.Load_Color">
            <summary>Loads the image for Themed Icon UsageDefault theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDefault.Load_Gray">
            <summary>Loads the image for Themed Icon UsageDefault theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDefault.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageDefault theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDefault.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageDefault.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDocumentation">
             <summary>
            	<para>
            		<para>UsageDocumentation Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDocumentation"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDocumentation.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .-````````````````--  hh  
               66  ''``@@@@@@@@@@@@``''  66  
               99  ..````````````````..  99  
               bb  ..``@@@@@@@@@@@@``..  bb  
               dd  ..                ..  dd  
               AA``..  @@@@@@@@@@@@  ..``AA  
               RR````                ````RR  
               DD````  @@@@@@  ``````````DD  
               DD````          ``````````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageDocumentation}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageDocumentation))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageDocumentation.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageDocumentation&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDocumentation.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDocumentation">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDocumentation.Load_Color">
            <summary>Loads the image for Themed Icon UsageDocumentation theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDocumentation.Load_Gray">
            <summary>Loads the image for Themed Icon UsageDocumentation theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDocumentation.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageDocumentation theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageDocumentation.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageDocumentation.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageEventDeclaration">
             <summary>
            	<para>
            		<para>UsageEventDeclaration Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageEventDeclaration"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageEventDeclaration.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--|jjjjjjjjjjj  kk  
               "E7` .-----cu+......_LuT  EE  
               1h_ .-----L1/....._r1|"-  hh  
               66  ''''-rF!...._rFc"'''  66  
               99  ...'rt!```_+ttttttt.  99  
               bb  ...+J=```````````JJ.  bb  
               dd  ..\7=``````````-/7r.  dd  
               AA``..TTTTTTT~```-!T+_..``AA  
               RR````````!)~``';)\_``````RR  
               DD```````;L^`.=L!_````````DD  
               DD``````=r".=r!-``````````DD  
               88``````++++;-````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageEventDeclaration}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageEventDeclaration))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageEventDeclaration.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageEventDeclaration&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageEventDeclaration.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageEventDeclaration">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageEventDeclaration.Load_Color">
            <summary>Loads the image for Themed Icon UsageEventDeclaration theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageEventDeclaration.Load_Gray">
            <summary>Loads the image for Themed Icon UsageEventDeclaration theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageEventDeclaration.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageEventDeclaration theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageEventDeclaration.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageEventDeclaration.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageExtendedType">
             <summary>
            	<para>
            		<para>UsageExtendedType Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageExtendedType"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageExtendedType.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1U_ .---            ----  UU  
               66  ''''  ++++++++  ''''  66  
               99  ''''  **----**  ''''  99  
               bb  ....  \\""""\\  ....  bb  
               pp  ....  \\\\\\\\  ....  pp  
               AA``.``  `!)`  `?r`  ``.``AA  
               RR``` .*JS3- `` .]Sl+- ```RR  
               DD``  {kkkko    lkkkk5  ``DD  
               DD``` _TySi"  ` _TySi"  ``DD  
               88````      ````      ````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageExtendedType}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageExtendedType))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageExtendedType.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageExtendedType&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageExtendedType.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageExtendedType">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageExtendedType.Load_Color">
            <summary>Loads the image for Themed Icon UsageExtendedType theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageExtendedType.Load_Gray">
            <summary>Loads the image for Themed Icon UsageExtendedType theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageExtendedType.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageExtendedType theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageExtendedType.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageExtendedType.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageFieldTypeDeclaration">
             <summary>
            	<para>
            		<para>UsageFieldTypeDeclaration Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageFieldTypeDeclaration"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageFieldTypeDeclaration.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .-------!sEXt!-----  EE  
               1h_ .----,+Ib5+__rEw{!--  hh  
               66  '-~)EG1!'-/xx;`_?XGx  66  
               99  {HHJ~`"TwDDDDDD};/DD  99  
               bb  88==tM$$$$$$6Cr;!/88  bb  
               dd  00"~=|a8$XJ=~==;!/00  dd  
               AA``$$"~=!/+_,"^~==roO$b``AA  
               RR``wgA}/!/+_,"~LV%$k+-```RR  
               DD```-cdgDj)^T4QWu=.``````DD  
               DD``````-cGggR7"``````````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageFieldTypeDeclaration}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageFieldTypeDeclaration))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageFieldTypeDeclaration.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageFieldTypeDeclaration&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageFieldTypeDeclaration.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageFieldTypeDeclaration">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageFieldTypeDeclaration.Load_Color">
            <summary>Loads the image for Themed Icon UsageFieldTypeDeclaration theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageFieldTypeDeclaration.Load_Gray">
            <summary>Loads the image for Themed Icon UsageFieldTypeDeclaration theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageFieldTypeDeclaration.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageFieldTypeDeclaration theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageFieldTypeDeclaration.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageFieldTypeDeclaration.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInstanceCreation">
             <summary>
            	<para>
            		<para>UsageInstanceCreation Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInstanceCreation"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInstanceCreation.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_-`                yy  
                ,2F- ``.'----=+77r=----  kk  
               "E7` .----llllll-'llllll  EE  
               1U_ .-----ll `ll_-ll` ll  UU  
               66  ''''''llll_'-''-llll  66  
               99  ''''''7l--.'  '`--l7  99  
               bb  ......llll-`--`.llll  bb  
               pp  ......ll `ll_-ll` ll  pp  
               AA``......llllll.`llllll``AA  
               RR```````````.=?JlL;.`````RR  
               DD````````````````````````DD  
               DD````````````````````````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageInstanceCreation}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageInstanceCreation))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageInstanceCreation.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageInstanceCreation&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInstanceCreation.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInstanceCreation">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInstanceCreation.Load_Color">
            <summary>Loads the image for Themed Icon UsageInstanceCreation theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInstanceCreation.Load_Gray">
            <summary>Loads the image for Themed Icon UsageInstanceCreation theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInstanceCreation.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageInstanceCreation theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInstanceCreation.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageInstanceCreation.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInterface">
             <summary>
            	<para>
            		<para>UsageInterface Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInterface"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInterface.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--``````'-----  kk  
               "E7` .----. ';?L!- `----  EE  
               1h_ .-----` LJJJJT  ----  hh  
               66  ''''''` -rJJL_ `''''  66  
               99  '''''''.  JJ  `'''''  99  
               bb  .......`  JJ  `.....  bb  
               dd  .....` .=7uu7!' `...  dd  
               AA``....` ~PXS(ceXX! `..``AA  
               RR``````` obb^''_bb6  ````RR  
               DD````````+RR9tlZRR|``````DD  
               DD`````````"lG88#[~```````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageInterface}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageInterface))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageInterface.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageInterface&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInterface.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInterface">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInterface.Load_Color">
            <summary>Loads the image for Themed Icon UsageInterface theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInterface.Load_Gray">
            <summary>Loads the image for Themed Icon UsageInterface theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInterface.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageInterface theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInterface.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageInterface.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInUsings">
             <summary>
            	<para>
            		<para>UsageInUsings Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInUsings"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInUsings.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` ```````````````----  EE  
               1U_ ``############``````  UU  
               66  ``wwwwwwwwwwww``HH    66  
               99  ``````EEEE``````44    99  
               bb  ....  5555  EEEEEE    bb  
               pp  ....  1111  yy        pp  
               AA``....  llll  oo  ....``AA  
               RR``````  TTTT  xx  ``````RR  
               DD``````        tt  ``````DD  
               DD````````  zzzzzz  ``````DD  
               88````````          ``````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageInUsings}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageInUsings))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageInUsings.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageInUsings&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInUsings.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInUsings">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInUsings.Load_Color">
            <summary>Loads the image for Themed Icon UsageInUsings theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInUsings.Load_Gray">
            <summary>Loads the image for Themed Icon UsageInUsings theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInUsings.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageInUsings theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInUsings.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageInUsings.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInvocation">
             <summary>
            	<para>
            		<para>UsageInvocation Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInvocation"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInvocation.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .---   `.-----------  hh  
               66  ''''  7~` `.''''''''  66  
               99  ''''  oouc"` `.'''''  99  
               bb  ....  11111F+_  `...  bb  
               pp  ....  }}}}}}}}l,  ..  pp  
               AA``....  iiiiiir"` ``..``AA  
               RR``````  TTTr"`  ````````RR  
               DD``````  +"`  ```````````DD  
               DD``````    ``````````````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageInvocation}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageInvocation))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageInvocation.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageInvocation&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInvocation.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInvocation">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInvocation.Load_Color">
            <summary>Loads the image for Themed Icon UsageInvocation theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInvocation.Load_Gray">
            <summary>Loads the image for Themed Icon UsageInvocation theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInvocation.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageInvocation theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInvocation.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageInvocation.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageLocalVariableDeclaration">
             <summary>
            	<para>
            		<para>UsageLocalVariableDeclaration Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageLocalVariableDeclaration"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageLocalVariableDeclaration.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .---:!LTJJTL/,-----  EE  
               1h_ .--_7xL"-..-,rxl"---  hh  
               66  ''"Il-``-~~-``-zu~''  66  
               99  ..Ta"``cwwwwt``_a{..  99  
               bb  ..1V:..|aaaat..-V5..  bb  
               dd  ..=EC---";;"---7E+..  dd  
               AA``...;Uj"------_xX+...``AA  
               RR``````"XE~____^a4=``````RR  
               DD```````_kw/,,;XX"```````DD  
               DD````````-jAcrdk_````````DD  
               88`````````.{RR2.`````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageLocalVariableDeclaration}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageLocalVariableDeclaration))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageLocalVariableDeclaration.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageLocalVariableDeclaration&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageLocalVariableDeclaration.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageLocalVariableDeclaration">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageLocalVariableDeclaration.Load_Color">
            <summary>Loads the image for Themed Icon UsageLocalVariableDeclaration theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageLocalVariableDeclaration.Load_Gray">
            <summary>Loads the image for Themed Icon UsageLocalVariableDeclaration theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageLocalVariableDeclaration.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageLocalVariableDeclaration theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageLocalVariableDeclaration.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageLocalVariableDeclaration.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethod">
             <summary>
            	<para>
            		<para>UsageMethod Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethod"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethod.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .-----=zX4l!-------  EE  
               1h_ .--,LaDOVlJaGDk)"---  hh  
               66  /xHDX{r======+tPDmu+  66  
               99  88~_;/~^^^^^^~/!:^88  99  
               bb  88++;_`"=~~;"`-=!^88  bb  
               dd  %%*/!;!!~'.~++!=~"%%  dd  
               AA``WW*/!;==~^?r+/!=~"WW``AA  
               RR``NNL/!;==~^?r+/!=~=NN``RR  
               DD``LK%Dk7!=~^?r++TeRM6(``DD  
               DD````.~JGBHI+i5HNRt=.````DD  
               88````````-/u8W5+-````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageMethod}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageMethod))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageMethod.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageMethod&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethod.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethod">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethod.Load_Color">
            <summary>Loads the image for Themed Icon UsageMethod theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethod.Load_Gray">
            <summary>Loads the image for Themed Icon UsageMethod theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethod.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageMethod theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethod.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageMethod.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethodParameterDeclaration">
             <summary>
            	<para>
            		<para>UsageMethodParameterDeclaration Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethodParameterDeclaration"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethodParameterDeclaration.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .---.````--````.----  hh  
               66  ''``'+(``''``r+-``.'  66  
               99  ``'76_```  ```-kf-``  99  
               bb  `-DE````-rr-````I8,`  bb  
               dd   50- `-cSSSSc-` .0b   dd  
               AA`  VW- `"I6666I"` `WG  `AA  
               RR`  _Dl  ``~aa~``  L8^  `RR  
               DD``` -}C` `````` `7u_ ```DD  
               DD````  -++  ``  !+-  ````DD  
               88```````    ``     ``````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageMethodParameterDeclaration}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageMethodParameterDeclaration))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageMethodParameterDeclaration.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageMethodParameterDeclaration&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethodParameterDeclaration.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethodParameterDeclaration">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethodParameterDeclaration.Load_Color">
            <summary>Loads the image for Themed Icon UsageMethodParameterDeclaration theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethodParameterDeclaration.Load_Gray">
            <summary>Loads the image for Themed Icon UsageMethodParameterDeclaration theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethodParameterDeclaration.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageMethodParameterDeclaration theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageMethodParameterDeclaration.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageMethodParameterDeclaration.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageNestedClassAccess">
             <summary>
            	<para>
            		<para>UsageNestedClassAccess Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageNestedClassAccess"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageNestedClassAccess.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .-------------------  hh  
               66  ''888888888888888888  66  
               99  ..DD              DD  99  
               bb  ..DD``::::::::::``DD  bb  
               dd  ..RR``""RRRRRRRR``RR  dd  
               AA``..RR--~~44....44--RR``AA  
               RR````OO__;;yy....yy__OO``RR  
               DD````GG,,//xxxxxxxx,,GG``DD  
               DD````dd^^^^^^^^^^^^^^dd``DD  
               88````bbbbbbbbbbbbbbbbbb``88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageNestedClassAccess}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageNestedClassAccess))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageNestedClassAccess.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageNestedClassAccess&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageNestedClassAccess.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageNestedClassAccess">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageNestedClassAccess.Load_Color">
            <summary>Loads the image for Themed Icon UsageNestedClassAccess theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageNestedClassAccess.Load_Gray">
            <summary>Loads the image for Themed Icon UsageNestedClassAccess theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageNestedClassAccess.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageNestedClassAccess theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageNestedClassAccess.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageNestedClassAccess.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageOther">
             <summary>
            	<para>
            		<para>UsageOther Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageOther"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageOther.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .-------------------  hh  
               66  ''''''''''''''''''''  66  
               99  ....................  99  
               bb  ....................  bb  
               dd  ....................  dd  
               AA``....................``AA  
               RR````````````````````````RR  
               DD````````````````````````DD  
               DD````````````````````````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageOther}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageOther))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageOther.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageOther&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageOther.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageOther">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageOther.Load_Color">
            <summary>Loads the image for Themed Icon UsageOther theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageOther.Load_Gray">
            <summary>Loads the image for Themed Icon UsageOther theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageOther.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageOther theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageOther.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageOther.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePatternChecking">
             <summary>
            	<para>
            		<para>UsagePatternChecking Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePatternChecking"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePatternChecking.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .----aaaa----aaaa--  EE  
               1h_ .-----VVVV----VVVV--  hh  
               66  ''KKKK''''KKKK''''''  66  
               99  ..XXXX....XXXX......  99  
               bb  ......wwww....wwww..  bb  
               dd  ......HHHH....HHHH..  dd  
               AA``..####....####......``AA  
               RR````DDDD````DDDD````````RR  
               DD````````8888````8888````DD  
               DD````````%%%%````%%%%````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsagePatternChecking}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsagePatternChecking))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsagePatternChecking.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsagePatternChecking&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePatternChecking.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePatternChecking">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePatternChecking.Load_Color">
            <summary>Loads the image for Themed Icon UsagePatternChecking theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePatternChecking.Load_Gray">
            <summary>Loads the image for Themed Icon UsagePatternChecking theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePatternChecking.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsagePatternChecking theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePatternChecking.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsagePatternChecking.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePropertyTypeDeclaration">
             <summary>
            	<para>
            		<para>UsagePropertyTypeDeclaration Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePropertyTypeDeclaration"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePropertyTypeDeclaration.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .-    ``````````````  hh  
               66  ''  h6bq``D8%N$Qgg``  66  
               99  ..    ``````````````  99  
               bb  ..  h6bq``D8%N$Qgg``  bb  
               dd  ..    ``````````````  dd  
               AA``..  h6bq``D8%N$Qgg````AA  
               RR````    ````````````````RR  
               DD````  h6bq``D8%N$Qgg````DD  
               DD````    ````````````````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsagePropertyTypeDeclaration}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsagePropertyTypeDeclaration))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsagePropertyTypeDeclaration.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsagePropertyTypeDeclaration&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePropertyTypeDeclaration.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePropertyTypeDeclaration">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePropertyTypeDeclaration.Load_Color">
            <summary>Loads the image for Themed Icon UsagePropertyTypeDeclaration theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePropertyTypeDeclaration.Load_Gray">
            <summary>Loads the image for Themed Icon UsagePropertyTypeDeclaration theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePropertyTypeDeclaration.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsagePropertyTypeDeclaration theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsagePropertyTypeDeclaration.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsagePropertyTypeDeclaration.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageRead">
             <summary>
            	<para>
            		<para>UsageRead Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageRead"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageRead.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .-------------------  hh  
               66  ''''''''''''''CC}r:'  66  
               99  ..............33_r3T_ 99  
               bb  ........55555555..-+utXb  
               dd  ........VV-----------!Ik/`
               AA``........PP------------_rPE
               RR``````````44:::::::::::!I9T_
               DD``````````dddddddd""^cEX#R  
               DD````````````````##;tHP!`DD  
               88````````````````DDD5~```88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageRead}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageRead))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageRead.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageRead&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageRead.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageRead">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageRead.Load_Color">
            <summary>Loads the image for Themed Icon UsageRead theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageRead.Load_Gray">
            <summary>Loads the image for Themed Icon UsageRead theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageRead.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageRead theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageRead.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageRead.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReadWrite">
             <summary>
            	<para>
            		<para>UsageReadWrite Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReadWrite"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReadWrite.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .-------------------  hh  
               66  ''''''':Twdb''96KT,'  66  
               99  .....~FG1;db..96,TEl: 99  
               bb  ..-/abJ~__dbbw96..-+5{Xw  
               dd  -LUX|^,,,,,,,--------![e!`
               AA``wbt^"""""""bbw9-------_+uI
               RR``:Jwkc=~~~~~~~::::::::!l2r-
               DD````-rU6J!==dbbw96""^ruu6#  
               DD```````;5dIrdb``96;7VI=`DD  
               88`````````"tHdb``96Xl"```88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageReadWrite}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageReadWrite))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageReadWrite.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageReadWrite&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReadWrite.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReadWrite">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReadWrite.Load_Color">
            <summary>Loads the image for Themed Icon UsageReadWrite theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReadWrite.Load_Gray">
            <summary>Loads the image for Themed Icon UsageReadWrite theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReadWrite.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageReadWrite theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReadWrite.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageReadWrite.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReturnType">
             <summary>
            	<para>
            		<para>UsageReturnType Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReturnType"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReturnType.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------.``````.'---  EE  
               1h_ .----'``"7599yl~``.-  hh  
               66  ''''.`-kDc_--_rD6-`.  66  
               99  ....``I%~``````_%U``  99  
               bb  ``````00````````00``  bb  
               dd    u_  $$  _u    $$    dd  
               AA``  bQo-QQ-oQb        ``AA  
               RR```  ~pggggp~  `````````RR  
               DD`````  ~AA~  ```````````DD  
               DD```````    `````````````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageReturnType}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageReturnType))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageReturnType.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageReturnType&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReturnType.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReturnType">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReturnType.Load_Color">
            <summary>Loads the image for Themed Icon UsageReturnType theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReturnType.Load_Gray">
            <summary>Loads the image for Themed Icon UsageReturnType theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReturnType.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageReturnType theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageReturnType.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageReturnType.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageStaticClassMemberAccess">
             <summary>
            	<para>
            		<para>UsageStaticClassMemberAccess Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageStaticClassMemberAccess"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageStaticClassMemberAccess.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .-------------------  hh  
               66  '''''''-~+r=-'''''''  66  
               99  .....-=r/--/?;-.....  99  
               bb  ...-=c+_````_+)!-...  bb  
               dd  ..;Tr,````````,rT!..  dd  
               AA``..+l+_''''''''_+lr..``AA  
               RR`````_r{r,----,r{L:`````RR  
               DD```````_?Ic""cI):```````DD  
               DD`````````-cooT:`````````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageStaticClassMemberAccess}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageStaticClassMemberAccess))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageStaticClassMemberAccess.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageStaticClassMemberAccess&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageStaticClassMemberAccess.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageStaticClassMemberAccess">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageStaticClassMemberAccess.Load_Color">
            <summary>Loads the image for Themed Icon UsageStaticClassMemberAccess theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageStaticClassMemberAccess.Load_Gray">
            <summary>Loads the image for Themed Icon UsageStaticClassMemberAccess theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageStaticClassMemberAccess.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageStaticClassMemberAccess theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageStaticClassMemberAccess.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageStaticClassMemberAccess.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageString">
             <summary>
            	<para>
            		<para>UsageString Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageString"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageString.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .-------------------  hh  
               66  ''''''''''''''''''''  66  
               99  ...``````..``````...  99  
               bb  ..``!EZr````!EZr``..  bb  
               dd  ..` ERRi `` rRRO  ..  dd  
               AA``..` 7b, ```` -b1  ..``AA  
               RR````` 'o=  ``` "o- `````RR  
               DD``````  _` `` `:  ``````DD  
               DD````````````````````````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageString}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageString))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageString.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageString&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageString.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageString">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageString.Load_Color">
            <summary>Loads the image for Themed Icon UsageString theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageString.Load_Gray">
            <summary>Loads the image for Themed Icon UsageString theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageString.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageString theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageString.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageString.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTest">
             <summary>
            	<para>
            		<para>UsageTest Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTest"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTest.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .---.````````.-----  EE  
               1U_ .-'` .!T}oS1s*-``.--  UU  
               66  '` .JyJ!^_=!r14o- `'  66  
               99  ` -u1^____====/yX" `  99  
               bb    ?u;,,,,,/////?hC    bb  
               pp    c[;^^^^^rrrrrck1    pp  
               AA``` -lT;====TTTTTuy^ ```AA  
               RR```` 'cTL*!!ttFIoI_ ````RR  
               DD`````  '~+?|utT\_  `````DD  
               DD````````        ````````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageTest}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageTest))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageTest.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageTest&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTest.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTest">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTest.Load_Color">
            <summary>Loads the image for Themed Icon UsageTest theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTest.Load_Gray">
            <summary>Loads the image for Themed Icon UsageTest theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTest.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageTest theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTest.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageTest.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTupleComponent">
             <summary>
            	<para>
            		<para>UsageTupleComponent Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTupleComponent"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTupleComponent.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1U_ .-------------------  UU  
               66  ``````````````````.'  66  
               99  )JJ)+_`'}oz^`-T}c,``  99  
               bb  llllllc.`7bba-`cVVC'  bb  
               pp  ccccccc* 'XXXI 'uuu7  pp  
               AA``+++++++! `kkkI `}}}|  AA  
               RR``=======` /551_ =TTc-  RR  
               DD``"^^"_' `+lc^``=+!_`  `DD  
               DD``                  ````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageTupleComponent}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageTupleComponent))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageTupleComponent.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageTupleComponent&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTupleComponent.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTupleComponent">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTupleComponent.Load_Color">
            <summary>Loads the image for Themed Icon UsageTupleComponent theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTupleComponent.Load_Gray">
            <summary>Loads the image for Themed Icon UsageTupleComponent theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTupleComponent.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageTupleComponent theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTupleComponent.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageTupleComponent.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeArgument">
             <summary>
            	<para>
            		<para>UsageTypeArgument Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeArgument"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeArgument.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .-------------------  hh  
               66  ''''.``````````.''''  66  
               99  ...``"hE````T#r``...  99  
               bb  .``-xh=``..``-}X=``.  bb  
               dd  ` ~bl` `....`  ~dl`   dd  
               AA```` _1l_ ``.` `+S!` ```AA  
               RR`````  "1?`   ~3*` `````RR  
               DD```````          ```````DD  
               DD````````````````````````DD  
               88````````````````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageTypeArgument}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageTypeArgument))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageTypeArgument.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageTypeArgument&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeArgument.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeArgument">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeArgument.Load_Color">
            <summary>Loads the image for Themed Icon UsageTypeArgument theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeArgument.Load_Gray">
            <summary>Loads the image for Themed Icon UsageTypeArgument theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeArgument.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageTypeArgument theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeArgument.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageTypeArgument.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeConversions">
             <summary>
            	<para>
            		<para>UsageTypeConversions Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeConversions"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeConversions.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .---'.``````.'-----  EE  
               1h_ .--.``^T1EEu7^``.---  hh  
               66  ''.``/X)_''-/Xa-`.''  66  
               99  ...``````````-X1````  99  
               bb  .```/+````"IVVVVVVo~  bb  
               dd  ``~2kk5=`  `;ojjo/`   dd  
               AA``-xwwwwwwo_   .?c' ````AA  
               RR``    uD_          `````RR  
               DD````` -GR;`  .!Xr  `````DD  
               DD`````` `;kDQQDE\  ``````DD  
               88````````        ````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageTypeConversions}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageTypeConversions))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageTypeConversions.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageTypeConversions&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeConversions.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeConversions">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeConversions.Load_Color">
            <summary>Loads the image for Themed Icon UsageTypeConversions theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeConversions.Load_Gray">
            <summary>Loads the image for Themed Icon UsageTypeConversions theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeConversions.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageTypeConversions theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeConversions.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageTypeConversions.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeOf">
             <summary>
            	<para>
            		<para>UsageTypeOf Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeOf"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeOf.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .-------------------  hh  
               66  '''''_/c7{{7c/,'''''  66  
               99  ..._laT~_--_~)aF,...  99  
               bb  .."Su:.,~===,'_Ck~..  bb  
               dd  ..l6=-________-"6u..  dd  
               AA``..Ib~-````````-"bS..``AA  
               RR```'|Gy"_`    `_"oA!````RR  
               DD``;}7rHqC/~,,~!tbd~`````DD  
               DR=t7=,~r68DHDDHEt~```````DD  
               k[7=,~raR5"```````````````88  
               E5J!raR5"`````````````````88  
               %8mAR8W%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageTypeOf}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageTypeOf))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageTypeOf.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageTypeOf&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeOf.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeOf">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeOf.Load_Color">
            <summary>Loads the image for Themed Icon UsageTypeOf theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeOf.Load_Gray">
            <summary>Loads the image for Themed Icon UsageTypeOf theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeOf.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageTypeOf theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTypeOf.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageTypeOf.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageUnitTestOverlay">
             <summary>
            	<para>
            		<para>UsageUnitTestOverlay Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageUnitTestOverlay"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageUnitTestOverlay.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                `_~=!|r/~.                   
              `;r='`  `-/t|.                 
             .cr. ```--.`-71_                
             !7:`....""""-,o7                
             rl"--___!!!!"=a{                
             _C7",,""LLr/*IV^                
              -t1|!=~)TJIky:                 
                -+lIa6y1c,                   
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageUnitTestOverlay}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageUnitTestOverlay))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageUnitTestOverlay.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageUnitTestOverlay&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageUnitTestOverlay.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageUnitTestOverlay">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageUnitTestOverlay.Load_Color">
            <summary>Loads the image for Themed Icon UsageUnitTestOverlay theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageUnitTestOverlay.Load_Gray">
            <summary>Loads the image for Themed Icon UsageUnitTestOverlay theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageUnitTestOverlay.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageUnitTestOverlay theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageUnitTestOverlay.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageUnitTestOverlay.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageVBHandles">
             <summary>
            	<para>
            		<para>UsageVBHandles Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageVBHandles"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageVBHandles.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--|jjjjjjjjjjj  kk  
               "E7` .-----cu+......_LuT  EE  
               1h_ .-----L1/....._r1|"-  hh  
               66  ''''-rF!...._rFc"'''  66  
               99  ...'rt!```_+ttttttt.  99  
               bb  ...+J=```````````JJ.  bb  
               dd  ..\7=``````````-/7r.  dd  
               AA``..TTTTTTT~```-!T+_..``AA  
               RR````````!)~``';)\_``````RR  
               DD```````;L^`.=L!_````````DD  
               DD``````=r".=r!-``````````DD  
               88``````++++;-````````````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageVBHandles}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageVBHandles))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageVBHandles.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageVBHandles&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageVBHandles.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageVBHandles">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageVBHandles.Load_Color">
            <summary>Loads the image for Themed Icon UsageVBHandles theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageVBHandles.Load_Gray">
            <summary>Loads the image for Themed Icon UsageVBHandles theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageVBHandles.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageVBHandles theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageVBHandles.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageVBHandles.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageWrite">
             <summary>
            	<para>
            		<para>UsageWrite Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageWrite"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageWrite.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+jt=_'`                yy  
                ,2F- ``.'--------------  kk  
               "E7` .------------------  EE  
               1h_ .-------------------  hh  
               66  ''''''''''''',T6ww''  66  
               99  ...........~1Hn!HH..  99  
               bb  ........-\kG}~__########  
               dd  ......-)bd7~,,,,,,,,,,DD  
               AA``......DDI^""""""""""""DD  
               RR````````,18bT=~~~~~~~~~~88  
               DD``````````-TDD1/==NNNNNNNN  
               DD`````````````+GBkL$$````DD  
               88```````````````~kQQQ````88  
               88````````````````````````88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageWrite}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageWrite))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ServicesNavigationThemedIcons.UsageWrite.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageWrite&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageWrite.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageWrite">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageWrite.Load_Color">
            <summary>Loads the image for Themed Icon UsageWrite theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageWrite.Load_Gray">
            <summary>Loads the image for Themed Icon UsageWrite theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageWrite.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageWrite theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageWrite.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageWrite.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = AlteringFeatuThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(AlteringFeatuThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.CodeCleanupOptionPage">
             <summary>
            	<para>
            		<para>CodeCleanupOptionPage Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.CodeCleanupOptionPage"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.CodeCleanupOptionPage.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                         Iu ``'_,RD          
                         Iu ``'_,RD          
                         Iu ``'_,RD          
                         Iu ``'_,RD          
                   ,!rTFFIu ``'_,RDFFTr!^    
                 ~l7="-..Iu ``'_,RD..-,=|t;  
               `c}=-"rTFFFFFFFFFFFFFFTr"-~lT.
               +F;________________________~Fc
               FF""""""""""""""""""""""""""FF
               FF~~~~~~~~~~~~~~~~~~~~~~~~~~FF
               FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                 cc``cc``cc``cc``cc``cc``cc  
                 cc``cc``cc``cc``cc``cc``cc  
                 cc``cc``cc``cc``cc``cc``cc  
                 cccccccccccccccccccccccccc  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+CodeCleanupOptionPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.CodeCleanupOptionPage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = AlteringFeatuThemedIcons.CodeCleanupOptionPage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.CodeCleanupOptionPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.CodeCleanupOptionPage.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.CodeCleanupOptionPage">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.CodeCleanupOptionPage.Load_Color">
            <summary>Loads the image for Themed Icon CodeCleanupOptionPage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.CodeCleanupOptionPage.Load_Gray">
            <summary>Loads the image for Themed Icon CodeCleanupOptionPage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.CodeCleanupOptionPage.Load_GrayDark">
            <summary>Loads the image for Themed Icon CodeCleanupOptionPage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.CodeCleanupOptionPage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CodeCleanupOptionPage.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayAlphabetic">
             <summary>
            	<para>
            		<para>DisplayAlphabetic Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayAlphabetic"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayAlphabetic.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                 DDDDDDDDDD  
                     MMMMMMMM    DD      DD  
                     %%^^^^%%    DD  DD  DD  
                     88""""88    DD  DD  DD  
                     DD,,,,DD    DD      DD  
                     DD____DD    DD  DD  DD  
                 !-  RR____RR  -!DDDDDDDDDD  
                 mmwlmm----mmlwmmDDDDDDDDDD  
                 GG"+{9----9{+"GGDD      DD  
                 {bl,'''''''',lb{DDDDD! +DD  
                  _}wJ:....:Jw}_ DDD9-`uDDD  
                    _l67__76l_   DDC`_pDDDD  
                      -JUUJ-     DD      DD  
                        --       DDDDDDDDDD  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+DisplayAlphabetic}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.DisplayAlphabetic))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = AlteringFeatuThemedIcons.DisplayAlphabetic.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.DisplayAlphabetic&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayAlphabetic.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayAlphabetic">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayAlphabetic.Load_Color">
            <summary>Loads the image for Themed Icon DisplayAlphabetic theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayAlphabetic.Load_Gray">
            <summary>Loads the image for Themed Icon DisplayAlphabetic theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayAlphabetic.Load_GrayDark">
            <summary>Loads the image for Themed Icon DisplayAlphabetic theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayAlphabetic.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DisplayAlphabetic.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayByType">
             <summary>
            	<para>
            		<para>DisplayByType Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayByType"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayByType.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                               DDDDDDDDDDDD  
                               DD--------DD  
                     WWWWWWWW  DD--------DD  
                     88""""88  DD--------DD  
                     88,,,,88  DD--------DD  
                     DD____DD  DDDDDDDDDDDD  
                     RR____RR  DDR+-``./ODD  
                 !-  RR----RR  DD,      -DD  
                 GG9lGG----GGl9GG-      `DD  
                 dd,/l6....6l/,ddb=`   ^6DD  
                 }wi_````````_iwpDDDDDDDDDD  
                  _t67_````_76tRDDDD77DDDDD  
                    -lXT--TXl- DDDD7..7DDDD  
                      -sEEs-   DDD7....7DDD  
                        --     DD7......7DD  
                               DDDDDDDDDDDD  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+DisplayByType}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.DisplayByType))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = AlteringFeatuThemedIcons.DisplayByType.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.DisplayByType&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayByType.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayByType">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayByType.Load_Color">
            <summary>Loads the image for Themed Icon DisplayByType theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayByType.Load_Gray">
            <summary>Loads the image for Themed Icon DisplayByType theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayByType.Load_GrayDark">
            <summary>Loads the image for Themed Icon DisplayByType theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayByType.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DisplayByType.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.FileHeaderText">
             <summary>
            	<para>
            		<para>FileHeaderText Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.FileHeaderText"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.FileHeaderText.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
             FFFFFFFFFFFFFFFFFFFF            
             uu````````````````uu            
             yy``$$$$$$$$$$$$``yyuu3/`       
             UU................UU--~Jo\`     
             bb--$$$$$$--------bb----~lo+`   
             RR________________RR``----~t5+` 
             88888888888888888888  ------=}a+
                     VV----            ----VV
                     kk----            ----kk
                     EE----            ----EE
                     hh----            ----hh
                     XX----            ----XX
                     66----            ----66
                     ww--------------------ww
                     bb____________________bb
                     dddddddddddddddddddddddd
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+FileHeaderText}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.FileHeaderText))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = AlteringFeatuThemedIcons.FileHeaderText.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.FileHeaderText&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.FileHeaderText.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.FileHeaderText">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.FileHeaderText.Load_Color">
            <summary>Loads the image for Themed Icon FileHeaderText theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.FileHeaderText.Load_Gray">
            <summary>Loads the image for Themed Icon FileHeaderText theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.FileHeaderText.Load_GrayDark">
            <summary>Loads the image for Themed Icon FileHeaderText theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.FileHeaderText.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FileHeaderText.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.Gear">
             <summary>
            	<para>
            		<para>Gear Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.Gear"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.Gear.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                     ~/LJ33l)+~`             
                     E{,-``'_~TkJ~           
                     !aC,      `~yl`         
               `aooI~ `;2C"      .x2'        
               LV"`=ou~ .uV)`     ,Vi        
               IS.  `;o3af"`      `SS        
               )y~`````="`````````'y7        
               'oY-```````````````~j}_       
                `iu~```````````````./oi_     
                  =tur"_'``'-_.``````'+oi_   
                    .=?T{jj3tII!.``````-ro7_ 
                              ^{1!'``````-cor
                                ^}x!-....._o1
                                  ^}C!_._+I}-
                                    ^T337+"  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+Gear}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.Gear))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = AlteringFeatuThemedIcons.Gear.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.Gear&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.Gear.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.Gear">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.Gear.Load_Color">
            <summary>Loads the image for Themed Icon Gear theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.Gear.Load_Gray">
            <summary>Loads the image for Themed Icon Gear theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.Gear.Load_GrayDark">
            <summary>Loads the image for Themed Icon Gear theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.Gear.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Gear.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.GeneratedMembers">
             <summary>
            	<para>
            		<para>GeneratedMembers Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.GeneratedMembers"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.GeneratedMembers.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                 llllll                      
               llll  llll                    
             llllr-  -rllll                  
             ll          ll                  
             llll/.  ./llll   _+ak?:         
               llll  llllllllRmVlJyGR3/'     
                 llllllll  llll;;;;;+tZDbJ~  
                 llllll      ll^^^^^~/!:~88  
               llll  llll  llll;=~;"`_=!~88  
               ll      llllll!!~-.~++!=~"%%  
               llll  llll+/!;==~^Lr+/!=~"MM  
                 llllllNNL/!;==~^Lr+/!=~=NN  
                       +y8Dk7!=~^Lr++T5RWEr  
                          ,Tb$GI+JaG0Gz"`    
                             `;]8%u!.        
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+GeneratedMembers}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.GeneratedMembers))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = AlteringFeatuThemedIcons.GeneratedMembers.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.GeneratedMembers&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.GeneratedMembers.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.GeneratedMembers">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.GeneratedMembers.Load_Color">
            <summary>Loads the image for Themed Icon GeneratedMembers theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.GeneratedMembers.Load_Gray">
            <summary>Loads the image for Themed Icon GeneratedMembers theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.GeneratedMembers.Load_GrayDark">
            <summary>Loads the image for Themed Icon GeneratedMembers theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.GeneratedMembers.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon GeneratedMembers.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.IconTriangle">
             <summary>
            	<para>
            		<para>IconTriangle Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.IconTriangle"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.IconTriangle.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                    _?4a     
                                `~lD$$$a     
                             -+V$$$$$$$a     
                          "7#$$$$$$$$$$a     
                      .!e%$$$$$$$$$$$$$a     
                   :cd$$$$$$$$$$$$$$$$$a     
                  `=C8$$$$$$$$$$$$$$$$$a     
                      :)d$$$$$$$$$$$$$$a     
                         .!e%$$$$$$$$$$a     
                             ^7#$$$$$$$a     
                                -+V$$$$a     
                                   `~}Da     
                                       .     
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+IconTriangle}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.IconTriangle))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = AlteringFeatuThemedIcons.IconTriangle.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.IconTriangle&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.IconTriangle.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.IconTriangle">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.IconTriangle.Load_Color">
            <summary>Loads the image for Themed Icon IconTriangle theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.IconTriangle.Load_Gray">
            <summary>Loads the image for Themed Icon IconTriangle theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.IconTriangle.Load_GrayDark">
            <summary>Loads the image for Themed Icon IconTriangle theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.IconTriangle.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon IconTriangle.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.DaemonTooltipProviderAttribute">
            <summary>
            Custom tooltip provider for the error.
            Tooltip provider should be solution-level component and implement <see cref="T:JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider"/> interface
            </summary>
        </member>
        <member name="T:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="!:JetBrains.UI.Icons.ThemedIconExtension"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeatureSuggestionThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(FeatureSuggestionThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = FeatureSuggestionThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.UI.Icons.CompiledIconsCs.CompiledIconCsId(typeof(FeatureSuggestionThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;FeatureSuggestionThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.Clippy">
             <summary>
            	<para>
            		<para>Clippy Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.Clippy.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                      `:=rccr=_`            
                     "sL".``.,rs~           
                    "}; `;Lc!- ~};          
                  :s8BDPdk]]]}  ]{          
                 {8?-``-+D#uff&lt;d$A          
                "D^`\dO)`:DXuu6QQD          
                .A,`7$$3`-mk222222          
                 :x!-..-;SEeeeeeee          
                   -EKKEkks:kk;;kk ^)JCkkkkk
                    EE;;EE  EE  EEVF;-`   EE
                    XX  XX  XX  XXr -)uXXXXX
                    k4` k4` eE  4X` eX-     
                    +b; &gt;bT:` -|br _bT      
                    `uw~ :)EHHZ7_ ,XS.      
                      Lp2&lt;-`  `';1dv`       
                        ^726##4es~`         
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeatureSuggestionThemedIcons+Clippy}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeatureSuggestionThemedIcons.Clippy))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeatureSuggestionThemedIcons.Clippy.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeatureSuggestionThemedIcons.Clippy&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.Clippy.Id">
             <summary>
            	<para>
            		<para>Clippy Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.Clippy"></see> identifier class.</para>
            		<para>
            			<code>
                      `:=rccr=_`            
                     "sL".``.,rs~           
                    "}; `;Lc!- ~};          
                  :s8BDPdk]]]}  ]{          
                 {8?-``-+D#uff&lt;d$A          
                "D^`\dO)`:DXuu6QQD          
                .A,`7$$3`-mk222222          
                 :x!-..-;SEeeeeeee          
                   -EKKEkks:kk;;kk ^)JCkkkkk
                    EE;;EE  EE  EEVF;-`   EE
                    XX  XX  XX  XXr -)uXXXXX
                    k4` k4` eE  4X` eX-     
                    +b; &gt;bT:` -|br _bT      
                    `uw~ :)EHHZ7_ ,XS.      
                      Lp2&lt;-`  `';1dv`       
                        ^726##4es~`         
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeatureSuggestionThemedIcons+Clippy}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeatureSuggestionThemedIcons.Clippy))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeatureSuggestionThemedIcons.Clippy.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeatureSuggestionThemedIcons.Clippy&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.Clippy.Load_Color">
            <summary>Loads the image for Themed Icon Clippy theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.Clippy.Load_Gray">
            <summary>Loads the image for Themed Icon Clippy theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.Clippy.Load_GrayDark">
            <summary>Loads the image for Themed Icon Clippy theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.Clippy.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Clippy.</summary>
        </member>
        <member name="T:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.ClippyOff">
             <summary>
            	<para>
            		<para>ClippyOff Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.ClippyOff.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                      `:=rccr=_`            
                     "sL".``.,rs~           
                    "}; `;Lc!- ~};          
                  :s8BDPdk]]]}  ]{          
                 {8?-``-+D#uff&lt;d$A   -!{O8[ 
                "D^`\dO)`:DXuu6QQ8;sb888888[
                .A,`7$$3`-mk2Sb#888888888886
                 :x!-..-;kd#88888888888bJ~` 
             ^^^^^^*PZXXUZPPPPPPPPPkSeeEEEEK
            `!!!!!+TaSSSSSSSSSSeaay2lT)???aX
              -*u#888888888D8D: XXr -)uXXXXX
            CR888888888DDD_ eE  4X` eX-     
            C888888Dd8|`&gt;bT:` -|br _bT      
             [88Pc_``uw~ :)EHHZ7_ ,XS.      
                      Lp2&lt;-`  `';1dv`       
                        ^726##4es~`         
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeatureSuggestionThemedIcons+ClippyOff}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeatureSuggestionThemedIcons.ClippyOff))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeatureSuggestionThemedIcons.ClippyOff.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeatureSuggestionThemedIcons.ClippyOff&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.ClippyOff.Id">
             <summary>
            	<para>
            		<para>ClippyOff Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.ClippyOff"></see> identifier class.</para>
            		<para>
            			<code>
                      `:=rccr=_`            
                     "sL".``.,rs~           
                    "}; `;Lc!- ~};          
                  :s8BDPdk]]]}  ]{          
                 {8?-``-+D#uff&lt;d$A   -!{O8[ 
                "D^`\dO)`:DXuu6QQ8;sb888888[
                .A,`7$$3`-mk2Sb#888888888886
                 :x!-..-;kd#88888888888bJ~` 
             ^^^^^^*PZXXUZPPPPPPPPPkSeeEEEEK
            `!!!!!+TaSSSSSSSSSSeaay2lT)???aX
              -*u#888888888D8D: XXr -)uXXXXX
            CR888888888DDD_ eE  4X` eX-     
            C888888Dd8|`&gt;bT:` -|br _bT      
             [88Pc_``uw~ :)EHHZ7_ ,XS.      
                      Lp2&lt;-`  `';1dv`       
                        ^726##4es~`         
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeatureSuggestionThemedIcons+ClippyOff}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeatureSuggestionThemedIcons.ClippyOff))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeatureSuggestionThemedIcons.ClippyOff.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeatureSuggestionThemedIcons.ClippyOff&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.ClippyOff.Load_Color">
            <summary>Loads the image for Themed Icon ClippyOff theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.ClippyOff.Load_Gray">
            <summary>Loads the image for Themed Icon ClippyOff theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.ClippyOff.Load_GrayDark">
            <summary>Loads the image for Themed Icon ClippyOff theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons.ClippyOff.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ClippyOff.</summary>
        </member>
    </members>
</doc>
