<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Features.Navigation</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Features.Navigation.Core.Diagnostics.TrigramConsistencyProbailityWatchdog">
            <summary>
            This class only alarm if corruption detected in trigram index
            Intentionally added to diagnose a lot of corrupted cached reports
            https://jbs.zendesk.com/agent/tickets/1092682
            RSRP-449606 Find Usages Broken In Many Cases for a While
            RSRP-459068 Find Usages (Shift+F12) / Usage of symbol (Shift+Alt+F12) doesn't find all usages
            RSRP-460765 Usages of parameter not found
            RSRP-460557 In visual studio 2015 ReSharper option "Find Usages" does not works in some of the projects.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Navigation.Core.Navigation.ProjectFileToSolutionExplorerProvider">
            <summary>
            This provider is intended for generic ProjectFileNavigation.
            
            It is for scenarious where we should select best available point to navigate.
            For regular files we should do not suggest to navigate into navigate to solution explorer.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Core.RecentFiles.FileLocationInfo.GetProjectFile(JetBrains.ProjectModel.ProjectModelElementPointerManager)">
            <summary>
            Return always valid project file
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Core.RecentFiles.RecentFilesCommands.ShowRecentEdits(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Displays a popup menu list of the recent edits.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Core.RecentFiles.RecentFilesCommands.ShowRecentFiles(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Displays a popup menu list of the recent files.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Navigation.Core.RecentFiles.RecentlyViewedMethods">
            <summary>
            Record and persistent recently viewed method to provide smart navigation in Search Everywhere
            
            May not be available, don't inject this component.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Core.Search.SearchRequests.SearchProjectItemReferencedCodeRequest.#ctor(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IProjectItem},JetBrains.ProjectModel.ISolution,System.Boolean,System.Boolean,System.Collections.Generic.List{JetBrains.ProjectModel.IModule},System.Int32)">
            <param name="referencedCodeScope">Constraint for results to reference elements only from indicated modules. Use null if there is no constraint.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Debugger.TracePointEditorDialogOwner.Show(System.String,System.Action{System.String})">
            <summary>
            Show create tracepoint dialog and invoke callback functions when it is done.
            
            Call back function is guarantee to execute even if user cancelled input (in this case string parameter will be null) 
            </summary>
            <param name="initialValue"></param>
            <param name="commit">executed when dialog closed. If user doesn't enter any </param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Features.FindUsagesAdvanced.FindUsagesAdvancedContextSearch.AnyExternalAssemblyInDomain(System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.DeclaredElementInstance},JetBrains.ReSharper.Psi.Search.ISearchDomain)">
            <summary>
            If you going to make advanced search for Library scope or Solution and library scope the project specific compilation context
            is unappropriate as it can't resolve all type elements.
            
            This method just trying to detect is any external assembly is exist in search domain, which is not related to each element's domain.
            </summary>
            <param name="initialTargets"></param>
            <param name="searchDomain"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Navigation.Features.GoToText.GotoTextEmptyQueryProvider">
            <summary>
            Goto text without any query and enabled filter should work as goto file with filters
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Navigation.Features.Goto.GoToRecentFiles.AggregatedItemsProviderBase.LibrariesFlagAutoSwitch">
            <summary>
            Gets or sets whether when a solution-only search fails a solution-and-libraries search is performed automatically.
            <c>True</c> by default.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Features.HighlightUsages.HighlightUsagesProvider.ShowHintIfNecessary(JetBrains.ProjectModel.ISolution,JetBrains.Application.UI.PopupLayout.PopupWindowContextSource)">
            <summary>
            show hint to remove highlighters
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Navigation.Features.FindDeclarations.GotoTypeDeclarationAction">
            <summary>
            Navigates to the declaration of the type of a reference expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Features.Usages.SpecialUsagesContextSearchBase.GetSpecialFinderSearchDomain(JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ISpecialElementFinder,System.Object,JetBrains.Application.DataContext.IDataContext)">
            <summary>Get search domain for given special finder</summary>
            <returns>Return null to cancel search</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Features.OccurrencesActions.ShowOtherAccessAction.GetOtherOccurrenceKinds(JetBrains.Application.DataContext.IDataContext,JetBrains.ReSharper.Feature.Services.Tree.IOccurrenceBrowserDescriptor)">
            <summary>
            dirty hack to support old behaviour of other button in old grouping
            will be removed as soon as semantic grouping will be enabled by default (not only in internal mode)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Goto.GotoProviders.ClrGotoClassMemberProviderBase.GetQuickSearchTexts(JetBrains.ReSharper.Psi.IDeclaredElement)">
            <param name="declaredElement"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Goto.GotoProviders.ClrGotoFileMemberProvider.GetQuickSearchTexts(JetBrains.ReSharper.Psi.IDeclaredElement)">
            <param name="declaredElement"></param>
            <returns>collection of tuples. A = quick search text. B = whether there is a symbol to symbol matching</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Goto.GotoProviders.GotoFileProvider.ProjectItemsCollector.IsFakeVirtualFolder(JetBrains.ProjectModel.IProjectItem)">
            <summary>
            Hack for RSRP-454136 "Go to File" results contain invalid entries
            
            Ignore virtual folder when items with same location are exists
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Goto.GotoProviders.TypeMemberNavigationUtil.GetPsiSourceFileTypeElements(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Return custom filtered type members from all type elements inside indicated source file.
            </summary>
            <param name="sourceFile"></param>
            <returns></returns>   
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Utils.ElementInDocumentUtils.GetRangeFromDeclaration(JetBrains.ProjectModel.ISolution,JetBrains.DocumentModel.DocumentOffset)">
             This code is modified copy from GotoDeclarationAction.GetCandidates
        </member>
        <member name="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesCommonThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesCommonThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = FeaturesCommonThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(FeaturesCommonThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;FeaturesCommonThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.MergeOccurrencesInFeaturesCommon">
             <summary>
            	<para>
            		<para>MergeOccurrencesInFeaturesCommon Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.MergeOccurrencesInFeaturesCommon"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.MergeOccurrencesInFeaturesCommon.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                              ^!!!!!!,`      
                               ~/-  .~/"`    
             +++++++++++++++++++++_   '=+"`  
             rr`````````````````````````-!r^`
             LL`````````````````````````-=L;.
             )))))))L^-...-~/+L)))=...-!)!.  
                 `Tc----:?|=-``;T;--_\T/.    
                 /i^---~7r`   !iiiiii*'      
                 it____|t.                   
                 CC::::CC                    
                 IIIIIIII                    
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesCommonThemedIcons+MergeOccurrencesInFeaturesCommon}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesCommonThemedIcons.MergeOccurrencesInFeaturesCommon))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesCommonThemedIcons.MergeOccurrencesInFeaturesCommon.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesCommonThemedIcons.MergeOccurrencesInFeaturesCommon&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.MergeOccurrencesInFeaturesCommon.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.MergeOccurrencesInFeaturesCommon">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.MergeOccurrencesInFeaturesCommon.Load_Color">
            <summary>Loads the image for Themed Icon MergeOccurrencesInFeaturesCommon theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.MergeOccurrencesInFeaturesCommon.Load_Gray">
            <summary>Loads the image for Themed Icon MergeOccurrencesInFeaturesCommon theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.MergeOccurrencesInFeaturesCommon.Load_GrayDark">
            <summary>Loads the image for Themed Icon MergeOccurrencesInFeaturesCommon theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.MergeOccurrencesInFeaturesCommon.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon MergeOccurrencesInFeaturesCommon.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UsageHandles">
             <summary>
            	<para>
            		<para>UsageHandles Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UsageHandles"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UsageHandles.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                    _*?7Faaaaaaaaaaaaaaaaaa  
                 `+e}=_'`                SS  
                ,2F' ."=!rrrrrrrrrrrrrr  kk  
               "ET `=+++++++"``````'~++  EE  
               1U_ "///////"`````'~////  UU  
               66  !!!!!!!,````.^!!!!!!  66  
               ww  ;;;;;;,```.";;;;;;;;  ww  
               bb  =====_```````````===  bb  
               HH  ~~~~_```````````,~~~  HH  
               AA  ~~~~~~~~~_````_~~~~~  AA  
               RR  ^^^^^^^^-```_^^^^^^^  RR  
               DD  """""""- `-"""""""""  DD  
               DD  ,,,,,,'`-,,,,,,,,,,,  DD  
               88  ____________________  88  
               88                        88  
               WWWWWWWWWWWWWWWWWWWWWWWWWWWW  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesCommonThemedIcons+UsageHandles}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesCommonThemedIcons.UsageHandles))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesCommonThemedIcons.UsageHandles.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesCommonThemedIcons.UsageHandles&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UsageHandles.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UsageHandles">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UsageHandles.Load_Color">
            <summary>Loads the image for Themed Icon UsageHandles theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UsageHandles.Load_Gray">
            <summary>Loads the image for Themed Icon UsageHandles theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UsageHandles.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageHandles theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UsageHandles.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageHandles.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UserTemplates">
             <summary>
            	<para>
            		<para>UserTemplates Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UserTemplates"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UserTemplates.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                   aaaaaaaaaaaaaaaaaaaaaaaaaa
                   SS  %%  %%  %%  %%  %%  SS
                   EE8888888888888888888888EE
                 `~bbyyGA=`DD  DD  DD  DD  UU
                !b5*,--_!ubORRRRRRRRRRRRRRR66
               /b|........+bGOOOOOOOOOOOO  ww
               5b,''''''''-bbppppppppppppppbb
               +b?--------/bdwwwwwwwwwwww  AA
                Lb1/,__,!}bb666666666666666RR
              ;Co9bbbbbbbbwXXXZZZZZZZZZZZ  DD
             zb{*==_    _==\JbwkkkkkkkkkkkkDD
             ##/////;.`;/////##aa  aa  aa  88
             DDLLLLLLLLLLLLLLDDWWWWWWWWWWWWWW
             %%ssssssssssssss%%              
             BB]]]]]]]]]]]]]]BB              
             QQQQQQQQQQQQQQQQQQ              
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesCommonThemedIcons+UserTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesCommonThemedIcons.UserTemplates))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesCommonThemedIcons.UserTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesCommonThemedIcons.UserTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UserTemplates.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UserTemplates">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UserTemplates.Load_Color">
            <summary>Loads the image for Themed Icon UserTemplates theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UserTemplates.Load_Gray">
            <summary>Loads the image for Themed Icon UserTemplates theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UserTemplates.Load_GrayDark">
            <summary>Loads the image for Themed Icon UserTemplates theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesCommonThemedIcons.UserTemplates.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UserTemplates.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesFindingThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesFindingThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = FeaturesFindingThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(FeaturesFindingThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;FeaturesFindingThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons.SearchOptionsPage">
             <summary>
            	<para>
            		<para>SearchOptionsPage Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons.SearchOptionsPage"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons.SearchOptionsPage.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                            `"!+)ll(r!"`     
                          "coz/=~,,^=/To|^   
                        `c5r":^==!!==^,"+j7` 
                       `1u;,^="'`   ."=^,=Iu'
                       LV+"""-        ."""\VJ
                       uE=~__``````````__~~EE
                       7U+~_.----------.-~+U1
                      `*XS*=-`.-,"",_.`-=!5X_
                    `~lT!oXT!~-`    `-^!)Ua- 
                  `~l)~--,TK9uTL+//+?TI6k+`  
                `~l)"--:"~=rVRbSEHHPo}r_     
               _iT"--:"~=r2Dj_               
               )I"-:"~=rSDj_                 
               _uur=;LSDj_                   
                `;JXmV7_                     
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesFindingThemedIcons+SearchOptionsPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesFindingThemedIcons.SearchOptionsPage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesFindingThemedIcons.SearchOptionsPage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesFindingThemedIcons.SearchOptionsPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons.SearchOptionsPage.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons.SearchOptionsPage">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons.SearchOptionsPage.Load_Color">
            <summary>Loads the image for Themed Icon SearchOptionsPage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons.SearchOptionsPage.Load_Gray">
            <summary>Loads the image for Themed Icon SearchOptionsPage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons.SearchOptionsPage.Load_GrayDark">
            <summary>Loads the image for Themed Icon SearchOptionsPage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons.SearchOptionsPage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SearchOptionsPage.</summary>
        </member>
    </members>
</doc>
