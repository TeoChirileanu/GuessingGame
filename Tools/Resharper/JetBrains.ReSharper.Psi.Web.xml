<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Psi.Web</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiJavaScriptThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(PsiJavaScriptThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Jasmine">
             <summary>
            	<para>
            		<para>Jasmine Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Jasmine"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Jasmine.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                      '^+rsYPP5v?+^_         
                   "s4A}L;"_``_,;\FGG1^      
                 +hpt^ -+?Fu66E1T+' "ibGL    
               _POL`-*aRRRRs__sRRRRUL' =bh:  
              _dA' rD##v7##L  L##fr###|``6R~ 
             `OR. I#R###5=GS  tX=F###R#y``w#'
             |8L \8p``_;vpq8c;8DA[+_` U8s =8Z
             K8_ h8hT;_..'C8888u'..'^rP8D `8#
             w0' w0000XeV00000000GeX00008 `08
             IB+ TBBzT54qs:;BBr_Tp45TT8B5 ~BP
             'B8``6MMMMC` `q6E8`  TMMMMH-`HM_
              =Mq-`2WWe` _qWYTW#^ `FWWP-`hW\ 
               ^88+`,I0Mh%$$P5$$$hMMZ^ ~DM+  
                `{%81,`~taw8NN0pPI=`_z#$j-   
                  `rwQ83*^_'  ._^*l#QR7-     
                     `;(5PO0ggBRU2(+`        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WyfyguzThemedIconsThemedIcons+Jasmine}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WyfyguzThemedIconsThemedIcons.Jasmine))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WyfyguzThemedIconsThemedIcons.Jasmine.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WyfyguzThemedIconsThemedIcons.Jasmine&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Jasmine.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Jasmine">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Jasmine.Load_Color">
            <summary>Loads the image for Themed Icon Jasmine theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Jasmine.Load_Gray">
            <summary>Loads the image for Themed Icon Jasmine theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Jasmine.Load_GrayDark">
            <summary>Loads the image for Themed Icon Jasmine theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Jasmine.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Jasmine.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Mocha">
             <summary>
            	<para>
            		<para>Mocha Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Mocha"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Mocha.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                          `,L55r"`           
                       _+[a?"-`,ceZ*_        
                   .;lPl;' -"\L^' -=sP}+'    
               `^JPEL_ `_+FYY^FYY1*,` _*5hs=`
               4X!- _=7555555^'555555|;_``^XA
               RR  Y2222222222?2222222225  RR
               RR  jjjjjj`         jjjjjj  RR
               ##``E====5' IVVVVa `E====E``##
               88``a====|~ !Vu7;_ _1====a``88
               88``aaaaaaI ``     zaaaaaa``88
               BB``PPPPPPPr      +PPPPPPP``BB
               0M=`'=TyVVVVVVVVVVVVVVaz='`"MB
               _TU8yL_`_+1V6666666{*:`'*284J_
                  `^1qD[;.-"ruST^--=1Om[=`   
                      -!x0Gz~-`"T9BS*'       
                          _?UNN4T_           
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WyfyguzThemedIconsThemedIcons+Mocha}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WyfyguzThemedIconsThemedIcons.Mocha))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WyfyguzThemedIconsThemedIcons.Mocha.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WyfyguzThemedIconsThemedIcons.Mocha&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Mocha.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Mocha">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Mocha.Load_Color">
            <summary>Loads the image for Themed Icon Mocha theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Mocha.Load_Gray">
            <summary>Loads the image for Themed Icon Mocha theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Mocha.Load_GrayDark">
            <summary>Loads the image for Themed Icon Mocha theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Mocha.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Mocha.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.NodeJS">
             <summary>
            	<para>
            		<para>NodeJS Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.NodeJS"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.NodeJS.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                          -,=\\;,-           
                      `:;7?=_'''"*c=_`       
                   _+i}*,'--''__` `_=L\^'    
                =sas^'````--''___'    -:!?+: 
               1k"`    ```--''___,_       'T*
               AG^     ```--''___,~"`     "(7
               XX*=`   ```--''___,~^='  `=*lF
               Rq;;=-  ```--''___,~^=;_-=;;YI
               mD,,,~' ```--''___,~^=;+;,,,eu
               ##-.^;;_```--''___,~^=;+*;'-aa
               ##`;**++^``--''___,~^=;+**!`VP
               P#;******;'--''___,~^=;+***;4y
               `Twpv+;****_-''___,~^=;;;TV9T-
                  '+ZRP?;+*"''___,"~*uX5+'   
                      _?P8I\^'__^|RVT,       
                         `^F988GC=`          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WyfyguzThemedIconsThemedIcons+NodeJS}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WyfyguzThemedIconsThemedIcons.NodeJS))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WyfyguzThemedIconsThemedIcons.NodeJS.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WyfyguzThemedIconsThemedIcons.NodeJS&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.NodeJS.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.NodeJS">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.NodeJS.Load_Color">
            <summary>Loads the image for Themed Icon NodeJS theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.NodeJS.Load_Gray">
            <summary>Loads the image for Themed Icon NodeJS theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.NodeJS.Load_GrayDark">
            <summary>Loads the image for Themed Icon NodeJS theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.NodeJS.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon NodeJS.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.PhantomJS">
             <summary>
            	<para>
            		<para>PhantomJS Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.PhantomJS"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.PhantomJS.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                       _^+?12EIT+^'          
                    -?VkEYls||vf5E4y;`       
                   JpVCTTTTTTTTTTTTY4AT`     
                 `yq5????????????????[p4_    
                 am[??c"'-_;L"'',*????JAO_   
                c#Prrr_     .    `crrrr(#X`  
                q8Tccc_     `     \cccccP8+  
               _0mLLLL*_` .~;'  -^LLLLLLY0C  
               ;Bk**********************7Bk  
               iM5++++++++++++++++++++++*8B` 
              _MB*;;;;;;;;;;;;;;;;;;;;;;;5MY 
              O%s===;?55?;===\s5Z7========w%"
             T%]^;\7FsS888GG#88888DajPVw5=+%R
             G%z\T}SkY^;SGSCT+;rxH8q(=\7s[S%Z
             `zPVn7;+8BF;+)5kB8EL~~^C885lTr, 
                      *ub45?=`:FqW$MG!       
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WyfyguzThemedIconsThemedIcons+PhantomJS}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WyfyguzThemedIconsThemedIcons.PhantomJS))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WyfyguzThemedIconsThemedIcons.PhantomJS.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WyfyguzThemedIconsThemedIcons.PhantomJS&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.PhantomJS.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.PhantomJS">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.PhantomJS.Load_Color">
            <summary>Loads the image for Themed Icon PhantomJS theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.PhantomJS.Load_Gray">
            <summary>Loads the image for Themed Icon PhantomJS theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.PhantomJS.Load_GrayDark">
            <summary>Loads the image for Themed Icon PhantomJS theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.PhantomJS.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon PhantomJS.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Qunit">
             <summary>
            	<para>
            		<para>Qunit Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Qunit"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Qunit.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                .\tEk################ky[\.   
              .a#OUPSuuuuuuuuuuuuuuuuSaVp#P_ 
             _R#PjjjjjjjjjjjjjjjjjjjjjjjjaR#^
             58VEEEEEEEEJ=,'`  `_^sEEEEEEEP84
             00SSSSSSS?'           _5SSSSSS00
             BByyyyyS_    !vuy57'   'yyyyyyBB
             MMaaaaS:   '2aaaaaaC    aaaaaaMM
             MMaaaar   `5aaaaaaaf   `aaaaaaMM
             WWaaaa~   ,aaaaaaaa^   ;aaaaaaWW
             $$PPPP-   ^PPPPPPP?   :aPPPPPP$$
             $$PPPP'    !1PPPY^   :PPPPPPPP$$
             NNPPPPT                  ^PPPPNN
             DQ4PPPPt^`               tPPPkQ8
             ;gMGVVVVVVVVVVVVVVVVVVVVVVVVhBgL
              ^8g0HG6666666666666666664p8NM= 
                ^fV8ggggggggggggggggggMDZ~   
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WyfyguzThemedIconsThemedIcons+Qunit}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WyfyguzThemedIconsThemedIcons.Qunit))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WyfyguzThemedIconsThemedIcons.Qunit.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WyfyguzThemedIconsThemedIcons.Qunit&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Qunit.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Qunit">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Qunit.Load_Color">
            <summary>Loads the image for Themed Icon Qunit theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Qunit.Load_Gray">
            <summary>Loads the image for Themed Icon Qunit theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Qunit.Load_GrayDark">
            <summary>Loads the image for Themed Icon Qunit theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons.Qunit.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Qunit.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiAspThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(PsiAspThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiAspThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContent">
             <summary>
            	<para>
            		<para>AspContent Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContent"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContent.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
               }}}}}}}}}}}}}}}}}}}}}}}}}}}}  
               [[________________________[[  
               II________________________II  
               uu____                ____uu  
               oo,,,,  ^~~=;!/*+r?c  ,,,,oo  
               aa,,,,                ,,,,aa  
               SS""""  ^~~=          """"SS  
               kk""""        6666666666666666
               ZZ^^^^        ww~~~~~~~~~~~~ww
               XX~~~~        bb==        ==bb
               44~~~~        HH;;  !ppp  ;;HH
               bb====        OO!!        !!OO
               HH====        RR//  ppp!  //RR
               OO;;;;;;;;;;;;DD++        ++DD
               RR!!!!!!!!!!!!DDrrrrrrrrrrrrDD
               DDDDDDDDDDDDDD8888888888888888
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspContent}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspContent))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiAspThemedIcons.AspContent.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspContent&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContent.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContent">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContent.Load_Color">
            <summary>Loads the image for Themed Icon AspContent theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContent.Load_Gray">
            <summary>Loads the image for Themed Icon AspContent theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContent.Load_GrayDark">
            <summary>Loads the image for Themed Icon AspContent theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContent.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon AspContent.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContentPlaceholder">
             <summary>
            	<para>
            		<para>AspContentPlaceholder Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContentPlaceholder"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContentPlaceholder.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
               }}}}}}}}}}}}}}}}}}}}}}}}}}}}  
               [[________________________[[  
               II________________________II  
               uu____                ____uu  
               oo,,,,  ^~~=;!/*+r?c  ,,,,oo  
               aa,,,,                ,,,,aa  
               SS""""  ^~~=          """"SS  
               kk""""      RRRRRRRRRRRRRRRRRR
               ZZ^^^^      RR  !!  !!  !!  RR
               XX~~~~      DD//////////////DD
               44~~~~      DD  **********  DD
               bb====      88++++++++++++++88
               HH====      88  rrrrrrrrrr  88
               OO;;;;;;;;;;WWccccccccccccccWW
               RR!!!!!!!!!!NN  ||  ||  ||  NN
               DDDDDDDDDDDD$$$$$$$$$$$$$$$$$$
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspContentPlaceholder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspContentPlaceholder))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiAspThemedIcons.AspContentPlaceholder.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspContentPlaceholder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContentPlaceholder.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContentPlaceholder">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContentPlaceholder.Load_Color">
            <summary>Loads the image for Themed Icon AspContentPlaceholder theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContentPlaceholder.Load_Gray">
            <summary>Loads the image for Themed Icon AspContentPlaceholder theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContentPlaceholder.Load_GrayDark">
            <summary>Loads the image for Themed Icon AspContentPlaceholder theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContentPlaceholder.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon AspContentPlaceholder.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspMasterPage">
             <summary>
            	<para>
            		<para>AspMasterPage Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspMasterPage"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspMasterPage.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
             SSrr?Lcc)|TT77iJltt}Cx1I3uoj5aSS
             kkrr?Lcc)|TT77iJltt}Cx1I3uoj5akk
             PPrr?Lcc)|TT77iJltt}Cx1I3uoj5aPP
             XX  gggggggggggggggggggggggg^^XX
             44  QQQQQQ  QQQQQQQQQQQQQQQQ^^44
             ww  $$$$$$$$$$$$$$$$$$$$$$$$^^ww
             dd  %%  %%  %%  %%  %%  %%  ^^dd
             GG  DDDDDDDDDDDDDDDDDDDDDDDD^^GG
             ##  AAAAAA  AAAAAAAAAAAAAAAA^^##
             RR  wwwwwwwwwwwwwwwwwwwwwwww^^RR
             DD  PPPPPP  PPPPPPPPPPPPPPPP^^DD
             DD  yyyyyyyyyyyyyyyyyyyyyyyy^^DD
             88    ```````..'----____,,""^^88
             WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspMasterPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspMasterPage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiAspThemedIcons.AspMasterPage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspMasterPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspMasterPage.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspMasterPage">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspMasterPage.Load_Color">
            <summary>Loads the image for Themed Icon AspMasterPage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspMasterPage.Load_Gray">
            <summary>Loads the image for Themed Icon AspMasterPage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspMasterPage.Load_GrayDark">
            <summary>Loads the image for Themed Icon AspMasterPage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspMasterPage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon AspMasterPage.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspNet">
             <summary>
            	<para>
            		<para>AspNet Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspNet"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspNet.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 IIIIIIIIIIIIIII/`           
                 uu''''''''''''^7u/`         
                 oo''''''''''''''~iu*`       
                 ee''''        ''''~lj*`     
                 aa----        ------~l5+    
                 yy----            ----yy    
                 VV----            ----VV    
                 kk----            ----kk    
              `!IuuuuuuuuuuuuuuuuuuuL,-KK    
             =CT_    11=`    11    _Txrhh    
             {{``{{``{{``{{{{{{``{{``{{XX    
             ll``ll``ll"````^ll````-+ll44    
             ii``````iiiiii``ii``iiiiiiww    
             TT``TT``TT`````,TT``TTbbbbbb    
             ))))))))))))))))))))))          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspNet}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspNet))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiAspThemedIcons.AspNet.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspNet&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspNet.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspNet">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspNet.Load_Color">
            <summary>Loads the image for Themed Icon AspNet theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspNet.Load_Gray">
            <summary>Loads the image for Themed Icon AspNet theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspNet.Load_GrayDark">
            <summary>Loads the image for Themed Icon AspNet theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspNet.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon AspNet.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspTag">
             <summary>
            	<para>
            		<para>AspTag Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspTag"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspTag.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                     {{{{{{{{{{{{{{{{        
                    `xx^~==;!!/++r?xx`       
                  .LXuu^~        r?uuXL.     
                .cwo~jj^~  ;!!/++r?jj~owc.   
              .|b5=..aa^~==;!!/++r?aa..=5b|. 
             TAV=''"Ckk^~        r?kkC"''=VAT
             uRI^--!EKK^~  ;!!/++r?KKE!--^IRu
              _jDu~--66^~==;!!/++r?66--~uDj_ 
                :a85=ww^~        r?ww=58a:   
                  ,VMdd^~  ;!!/++r?ddMV,     
                    ,OO^~==;!!/++r?OO,       
                     RRRRRRRRRRRRRRRR        
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspTag}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspTag))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiAspThemedIcons.AspTag.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspTag&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspTag.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspTag">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspTag.Load_Color">
            <summary>Loads the image for Themed Icon AspTag theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspTag.Load_Gray">
            <summary>Loads the image for Themed Icon AspTag theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspTag.Load_GrayDark">
            <summary>Loads the image for Themed Icon AspTag theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspTag.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon AspTag.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspUserControl">
             <summary>
            	<para>
            		<para>AspUserControl Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspUserControl"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspUserControl.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                        `   ~777777_         
                      `rk   Ts.`'lJ.         
                    `?Ehh  "t/``;taE?`       
                  .LX1,66  TF-`.lC6,1XL.     
                .c6I"  ww -1c``~1Vw  "I6c.   
              .)wu"``-Jbb rI"..zIwbJ-``"uw). 
             |de^``_lGGGG.uVVVVVVVVVVVVVVVVVV
             1O}_``~aOOOO/2EE              EE
              _uRC,..=VRReeXX    `!Jkkk    XX
                _oD1"..DOS?ww    t6T.      ww
                  _2Du"DXk"HH````HH-```````HH
                    :a8DPl-##````VRT```````##
                      :XX=-RR````_xO888````RR
                      '6666DD..............DD
                           888888888888888888
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspUserControl}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspUserControl))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiAspThemedIcons.AspUserControl.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspUserControl&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspUserControl.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspUserControl">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspUserControl.Load_Color">
            <summary>Loads the image for Themed Icon AspUserControl theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspUserControl.Load_Gray">
            <summary>Loads the image for Themed Icon AspUserControl theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspUserControl.Load_GrayDark">
            <summary>Loads the image for Themed Icon AspUserControl theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspUserControl.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon AspUserControl.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:BrowsersThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(BrowsersThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = BrowsersThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(BrowsersThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;BrowsersThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChrome">
             <summary>
            	<para>
            		<para>BrowserChrome Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChrome"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChrome.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                      ',=+rz33|?*=,'         
                   :rjayEoY[111[I2yaST"      
                 =nPE[sssssssssssssstEPE!    
               'YVEFssssssssssssssssssvjVu_  
              _PPiElssssssJc+;\TFlllllll3aV, 
             `P6*=LPjFsT"`  ``  `,Tl7L+;^"Vh.
             rGs===+PPs` -=r???;'  '______LGl
             eb*====;P: `r???????'  _______b4
             aH*======- .????????'  ______"Hw
             |qi======"  _*????\_  .______!qZ
             .Op+======^_  `--`  ''______:GR_
              ^RwL========~:__^+!________V#! 
               "H#t==========7J=_______rOR=  
                `s#O5L======\7~_____,LG8f`   
                  `*P0He}7\!T:_"=+lG04r`     
                     `=?1eKRMMD4St?;`        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WyfyguzThemedIconsThemedIcons+BrowserChrome}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WyfyguzThemedIconsThemedIcons.BrowserChrome))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WyfyguzThemedIconsThemedIcons.BrowserChrome.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WyfyguzThemedIconsThemedIcons.BrowserChrome&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChrome.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChrome">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChrome.Load_Color">
            <summary>Loads the image for Themed Icon BrowserChrome theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChrome.Load_Gray">
            <summary>Loads the image for Themed Icon BrowserChrome theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChrome.Load_GrayDark">
            <summary>Loads the image for Themed Icon BrowserChrome theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChrome.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BrowserChrome.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChromeCanary">
             <summary>
            	<para>
            		<para>BrowserChromeCanary Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChromeCanary"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChromeCanary.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                      '"=+?|YYi?*;"'         
                   :rES2YCizTTTz|15aST"      
                 =jPYzrrrrrrrrrrrrrr7YPy+    
               'YVY?rrrrrrrrrrrrrrrrrr?tVj_  
              _Pa?CTrrrrrrL!^^;*?TTTTTTTzSV, 
             `PV+=+5CTr*_   ``  `^1]C7L+="P9.
             r4(===;Yjc` -;?TTT!'  '______L4F
             uG+=====3_ `?TTTTTTT'  _______Gh
             yw+======` .TTTTTTTT_  ______"w4
             (pz======,  _\TTTTL:  .______;pY
             .AG!======^_  `..`  ''______:kO_
              ~Xk\=======^"__:;?!________aq; 
               "Gqi==========YY=_______Lwp=  
                `7qG{*======?I~_____:*6Rl`   
                  `+y#4YF?*!l:_"=;sU#PL`     
                     `^LsYPw88pPZvL=`        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WyfyguzThemedIconsThemedIcons+BrowserChromeCanary}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WyfyguzThemedIconsThemedIcons.BrowserChromeCanary))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WyfyguzThemedIconsThemedIcons.BrowserChromeCanary.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WyfyguzThemedIconsThemedIcons.BrowserChromeCanary&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChromeCanary.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChromeCanary">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChromeCanary.Load_Color">
            <summary>Loads the image for Themed Icon BrowserChromeCanary theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChromeCanary.Load_Gray">
            <summary>Loads the image for Themed Icon BrowserChromeCanary theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChromeCanary.Load_GrayDark">
            <summary>Loads the image for Themed Icon BrowserChromeCanary theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserChromeCanary.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BrowserChromeCanary.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserEdge">
             <summary>
            	<para>
            		<para>BrowserEdge Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserEdge"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserEdge.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                     -,!c?l1ll)?;:`          
                  _\I}\~''````-'"\lI*'       
                :lY;-              'L2v_     
              `\2+      `.''-`       -\2/    
              z2_  '=*7FY21r)Il=       "2\   
             !2;_*Y25+-,2t_'''L2\       ;2"  
              `^\?27`  c????????c       '2)  
                _ZT                      2Z  
                )2-                      22  
               `2}     [22222222222222222Z!  
                YY     'Yl^`       '^cll;    
                ;2;     `,cFYYlll5[7;_^2+    
                 \2!          ```     _2+    
                  :t},`               _2+    
                    ^)2?^_-     `.__^\[t_    
                      `,!ri5222ZlTc+="-      
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WyfyguzThemedIconsThemedIcons+BrowserEdge}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WyfyguzThemedIconsThemedIcons.BrowserEdge))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WyfyguzThemedIconsThemedIcons.BrowserEdge.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WyfyguzThemedIconsThemedIcons.BrowserEdge&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserEdge.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserEdge">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserEdge.Load_Color">
            <summary>Loads the image for Themed Icon BrowserEdge theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserEdge.Load_Gray">
            <summary>Loads the image for Themed Icon BrowserEdge theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserEdge.Load_GrayDark">
            <summary>Loads the image for Themed Icon BrowserEdge theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserEdge.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BrowserEdge.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefox">
             <summary>
            	<para>
            		<para>BrowserFirefox Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefox"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefox.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                `TPkL                        
               +mPTmR   _czIuPVusr+_         
              _#aTTl#pR#V*^=7"_~!rfq4T_      
              ?#zT?!=^~~""^y` ````-'!k#9,    
              ;#t=""""""""7S+~_ ```-':?c#7   
              PD="""""""""L{Y5VI ``-.'Y'^Gj  
             L#L""""""'```'iPSc-```-''?_`^D? 
             V#^"""""``:;+:s;  ```-.''s: "(m_
             h#~"""""~jl7lsPL7CCC:''__G` "\#+
             [#="""""""""^**="=Cy:'__t~ _"L#/
             _#e"""""""""~=!vS1"___^Y_',""P#'
              T#Y""""""""=)EES|71Yz*,""""v#L 
               ?#a^"""""""""""~~"""""""=PmL  
                _[#Y=""""""""""""""""=s#u_   
                  -TXAC*^~~"""~~^=*YDar_     
                     -~?5Pkm##phu1)^`        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WyfyguzThemedIconsThemedIcons+BrowserFirefox}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WyfyguzThemedIconsThemedIcons.BrowserFirefox))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WyfyguzThemedIconsThemedIcons.BrowserFirefox.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WyfyguzThemedIconsThemedIcons.BrowserFirefox&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefox.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefox">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefox.Load_Color">
            <summary>Loads the image for Themed Icon BrowserFirefox theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefox.Load_Gray">
            <summary>Loads the image for Themed Icon BrowserFirefox theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefox.Load_GrayDark">
            <summary>Loads the image for Themed Icon BrowserFirefox theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefox.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BrowserFirefox.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefoxNightly">
             <summary>
            	<para>
            		<para>BrowserFirefoxNightly Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefoxNightly"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefoxNightly.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                `LEP*                        
               ;wPsbG   _*TlZPP2|c!_         
              _paTT{p94pPc;;T:_,=L1X4?_      
              LpvT?*!;==^^;Y     ``.;EHV:    
              =pI+^^^^^^^^7C^_'   ``-_T?bc   
              Ew!^^^^^^^^^*7|ijJ   ``.T_;6f  
             *p?^^^^^^_-`._TxC;`  ``-.+:.;wL 
             Sp=^^^^^--,;+,|^    ```.'\,`^sw'
             ap=^^^^^^5i71L[;*TT?_-.''u-`^rp;
             vp+^^^^^^^^^=\*;^;ll_'''?^`,^?p+
             _pj^^^^^^^^^=;+sYr_''',|,'"^=Pp'
              rpY=^^^^^^^=7uu1/*r7zL^^^^=lp* 
               LpS;^^^^^^^^^^^==^^^^^^^!Pw*  
                _vpY+^^^^^^^^^^^^^^^=!lpI'   
                  -Lkktc;==^^^==;+cYwn\'     
                     -"LCEPwpp9aI|?~`        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WyfyguzThemedIconsThemedIcons+BrowserFirefoxNightly}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WyfyguzThemedIconsThemedIcons.BrowserFirefoxNightly))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WyfyguzThemedIconsThemedIcons.BrowserFirefoxNightly.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WyfyguzThemedIconsThemedIcons.BrowserFirefoxNightly&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefoxNightly.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefoxNightly">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefoxNightly.Load_Color">
            <summary>Loads the image for Themed Icon BrowserFirefoxNightly theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefoxNightly.Load_Gray">
            <summary>Loads the image for Themed Icon BrowserFirefoxNightly theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefoxNightly.Load_GrayDark">
            <summary>Loads the image for Themed Icon BrowserFirefoxNightly theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserFirefoxNightly.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BrowserFirefoxNightly.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserIExplorer">
             <summary>
            	<para>
            		<para>BrowserIExplorer Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserIExplorer"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserIExplorer.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                       `:=LiZ99j17rL*LLL+='  
                    `*uRk5FTr?T7*"__.``.',?c-
                  `zdpY+";\T\^'``-_=+rJF);'7L
                 ^bXT~"+T?~-``'~*T?*=^"?wA~7L
                !D4=^LT!_``',*T?tq5_'__,=PR7:
               'Db;*T\.``'^cT^`  =d9_'__"=kR"
               FDsTT, `'^?sPRDDDDDDDl''_:~cDE
               9G7*``-,LT=``     ```.''_:~=DR
               a7!``'+7+'``````````-.'__,~=Db
              .7* `_rT=iDDDDDDDDDDDDDDDDDDDD}
             `?? `:TT^::GH=                  
             ^7_ 'T7;^~"^PD|,` '?dDDDDDDDDD! 
             L7` *7V7!;=^~\ZkRDknc^^==;T4D!  
             !7- +7YD4[L+;;======;;!*zPD}'   
             -c?_-'"~*9RP51)c***cTCSbGi'     
              `,+?77L+=~;ciu9DDb9Z};.        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WyfyguzThemedIconsThemedIcons+BrowserIExplorer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WyfyguzThemedIconsThemedIcons.BrowserIExplorer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WyfyguzThemedIconsThemedIcons.BrowserIExplorer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WyfyguzThemedIconsThemedIcons.BrowserIExplorer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserIExplorer.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserIExplorer">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserIExplorer.Load_Color">
            <summary>Loads the image for Themed Icon BrowserIExplorer theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserIExplorer.Load_Gray">
            <summary>Loads the image for Themed Icon BrowserIExplorer theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserIExplorer.Load_GrayDark">
            <summary>Loads the image for Themed Icon BrowserIExplorer theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserIExplorer.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BrowserIExplorer.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserOpera">
             <summary>
            	<para>
            		<para>BrowserOpera Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserOpera"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserOpera.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                       -"=+?i55FT*;".        
                    'LuP[(\=^~~^=*(tPSr'     
                  '1huT=^""TjPPj|^"^=?26Y_   
                 =ka/===:=ajr,_L2P+:^==+E4*  
                ;wu!;;;,_ZP,    'hj_:;;;;YwL 
               .wh+++++__Pp      p9__+++++ap_
               )dl*****''dd      dd''*****(dY
               aRT\\\\\''RR      RR''\\\\\cRb
               6m7ccccc..mm      mm..cccccrmR
               C#Y?????--##      ##--?????F#a
               _8OTTTTT'`j8      84`.TTTTT48^
                T0V))))*`_b_    -#,`=))))y0Y 
                 JBHCsss*``!^` ~*-`!sssFGBY  
                  ~RBpulFi+_-  `';sFF2AB#;   
                    =PMBwPS2YCCI2EPGBW9;     
                      `~T{aA8NN8XPYT^`       
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WyfyguzThemedIconsThemedIcons+BrowserOpera}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WyfyguzThemedIconsThemedIcons.BrowserOpera))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WyfyguzThemedIconsThemedIcons.BrowserOpera.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WyfyguzThemedIconsThemedIcons.BrowserOpera&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserOpera.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserOpera">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserOpera.Load_Color">
            <summary>Loads the image for Themed Icon BrowserOpera theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserOpera.Load_Gray">
            <summary>Loads the image for Themed Icon BrowserOpera theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserOpera.Load_GrayDark">
            <summary>Loads the image for Themed Icon BrowserOpera theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserOpera.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BrowserOpera.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSafari">
             <summary>
            	<para>
            		<para>BrowserSafari Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSafari"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSafari.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                      ',=+rz33|?*=,'         
                   :rjS?;~_'``'_~=cEST"      
                 =na?,`-"=!\??\+=~.`_LSE!    
               'YP!`-^czTTT????TTTz?^.`^au_  
              _PS'`=z7T?rLL\\\\LLrTIZ|;`-5V, 
             `PV'`*|T?cL*++!!!+\rsPXfT|L-'yh.
             rG*`=|T?c\*!;==*L*|PE8|c?T|!`=Gl
             eb:-?zT?L*+;=_'+FPYPG/*L?Tz|-'b4
             aH_.TzT?L*+;' '^LyAY;+*L?Tz|.'Hw
             |q*'!|T?c\!-.^:=vZr;!*\c?T|\'=qZ
             .Ow__?|T?+'^*YVI\!++*Lc?T|T__VR_
              ^R9:_L|\;SXST\\\\LLr?T7|r__a#! 
               "HpL_^|P{TTT????TTTzzL=_!GR=  
                `s#Xt;_=\r?7||7Tr\=:=FA8f`   
                  `*P0RYT\;^::^;\TfH04r`     
                     `=?1eKRMMD4St?;`        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WyfyguzThemedIconsThemedIcons+BrowserSafari}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WyfyguzThemedIconsThemedIcons.BrowserSafari))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WyfyguzThemedIconsThemedIcons.BrowserSafari.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WyfyguzThemedIconsThemedIcons.BrowserSafari&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSafari.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSafari">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSafari.Load_Color">
            <summary>Loads the image for Themed Icon BrowserSafari theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSafari.Load_Gray">
            <summary>Loads the image for Themed Icon BrowserSafari theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSafari.Load_GrayDark">
            <summary>Loads the image for Themed Icon BrowserSafari theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSafari.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BrowserSafari.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSystemDefault">
             <summary>
            	<para>
            		<para>BrowserSystemDefault Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSystemDefault"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSystemDefault.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                      '";*?v55lT\;"_         
                   :?aPI|?L*;;+L?zfPa)~      
                 ;yVI?==============c}PP+    
               '29i;====,==_``_==,=====TVS_  
              _UV*===^. "=_    '=^ -"===+a4, 
             `9G*;;;:  -;~      ";'  _;;;+6G'
             ?p1;;;;;;;;;;;;;;;;;;;;;;;;;;)pC
             yOc!!!-   =!`       !!   `!!!+Ow
             PRL+++-   =+`       ++   `++++RH
             vDC++++++++++++++++++++++++++zDj
             'RqL**+:  '*^      "*_  _+**\A#_
              ^#Hc***=. ;*:    _*!`-^***\48+ 
               ~qD[\***!^**_``_**^;****iq#;  
                `i8#as\\\\\\\\\\\\\\)SR0I`   
                  `\VM#P51|TLL?|1YamMG?-     
                     `=?tS4DMM#Ga[?;`        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:WyfyguzThemedIconsThemedIcons+BrowserSystemDefault}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(WyfyguzThemedIconsThemedIcons.BrowserSystemDefault))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = WyfyguzThemedIconsThemedIcons.BrowserSystemDefault.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;WyfyguzThemedIconsThemedIcons.BrowserSystemDefault&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSystemDefault.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSystemDefault">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSystemDefault.Load_Color">
            <summary>Loads the image for Themed Icon BrowserSystemDefault theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSystemDefault.Load_Gray">
            <summary>Loads the image for Themed Icon BrowserSystemDefault theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSystemDefault.Load_GrayDark">
            <summary>Loads the image for Themed Icon BrowserSystemDefault theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.BrowsersThemedIcons.BrowserSystemDefault.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon BrowserSystemDefault.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiWebThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(PsiWebThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiWebThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirective">
             <summary>
            	<para>
            		<para>AspDirective Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirective"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirective.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                     _)IkGGGGGGGGknT"        
                   `5G7=-        '~|pk.      
                  .kA^ ~uAAAAAAAAa/ _A6.     
                .c6AA  AAAA    .;AA  AA6c.   
              .)wo~GG  GGGGGGGG  GG  GG~ow). 
             THa~``GG  GG+-      GG  GG``~aHT
             3RC,..GG  GG  GGGG  GG  GG..,CR3
              _oDI"GG``GG``GGGG``GG``GG"IDo_ 
                :58HH``HH;``````````=HH85:   
                  ,9d"`+Edddddddddddddb,     
                   'Ewr^.````````bbbbX-      
                    `~}kbbbbbbbbbbE[;`       
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspDirective}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspDirective))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiWebThemedIcons.AspDirective.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspDirective&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirective.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirective">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirective.Load_Color">
            <summary>Loads the image for Themed Icon AspDirective theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirective.Load_Gray">
            <summary>Loads the image for Themed Icon AspDirective theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirective.Load_GrayDark">
            <summary>Loads the image for Themed Icon AspDirective theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirective.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon AspDirective.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirectiveAttribute">
             <summary>
            	<para>
            		<para>AspDirectiveAttribute Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirectiveAttribute"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirectiveAttribute.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                     _)IkGGGGGGGGknT"        
                   `5G7=-        '~|pk.      
                  .kA^ ~uAAAAAAAAa/ _A6.     
                .c6AA  AAAA    .;AA  AA6c.   
              .)wo~GG  GGGGGGGG  GG  GG~ow). 
             THa~``GG  GG+-      GG  GG``~aHT
             3RC,..GG  GG  GGGG  GG  GG..,CR3
              _oDI"GG``GG``GGGG``GG``GG"IDo_ 
                :58HH``HH;``````````=HH85:   
                  ,9d"`+Eddddxxxxxxxxxxxxxxxx
                   'Ewr^.````uu````````````uu
                    `~}kbbbbbaa````````````aa
                             KK............KK
                             4444444444444444
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspDirectiveAttribute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspDirectiveAttribute))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiWebThemedIcons.AspDirectiveAttribute.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspDirectiveAttribute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirectiveAttribute.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirectiveAttribute">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirectiveAttribute.Load_Color">
            <summary>Loads the image for Themed Icon AspDirectiveAttribute theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirectiveAttribute.Load_Gray">
            <summary>Loads the image for Themed Icon AspDirectiveAttribute theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirectiveAttribute.Load_GrayDark">
            <summary>Loads the image for Themed Icon AspDirectiveAttribute theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirectiveAttribute.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon AspDirectiveAttribute.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue">
             <summary>
            	<para>
            		<para>AspHtmlTagAttributeValue Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                        `   ~TTTTTT_         
                      `rV   T7``.is.         
                    `rEPP  ,l!``=laEr`       
                  `?h[_XX  |}-``i{X_[h?`     
                .LX1,  44 -CL``~Cy4  ,1XL.   
              .cwu"  -sbb r1"``71wbs-  "uwc. 
             (bo"``-lHHHH.ut.qqqqqqqqqqqqqqqq
             1At_``~5AAAA/o;.##------------##
              _3R{_``~SRRoo-.DD""""""""""""DD
                _oDx,..DGyr''DD;;;;;;;;;;;;DD
                  _jDI"DZV,--DDDDDDDDDDDDDDDD
                    :58DEl--/DD            DD
                      :Xh=--jOO            OO
                      '666666bb````````````bb
                             UUUUUUUUUUUUUUUU
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspHtmlTagAttributeValue}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspHtmlTagAttributeValue))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiWebThemedIcons.AspHtmlTagAttributeValue.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspHtmlTagAttributeValue&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue.Load_Color">
            <summary>Loads the image for Themed Icon AspHtmlTagAttributeValue theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue.Load_Gray">
            <summary>Loads the image for Themed Icon AspHtmlTagAttributeValue theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue.Load_GrayDark">
            <summary>Loads the image for Themed Icon AspHtmlTagAttributeValue theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon AspHtmlTagAttributeValue.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiCssThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(PsiCssThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiCssThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.Css">
             <summary>
            	<para>
            		<para>Css Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.Css"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.Css.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 IIIIIIIIIIIIIII/`           
                 uu''''''''''''^7u/`         
                 oo''''''''''''''~iu*`       
                 ee''''        ''''~lj*`     
                 aa----        ------~l5+    
                 yy----            ----yy    
                 VV----            ----VV    
                 kk----            ----kk    
              `rE$$$$$$$$$$$$$$$$$$$$$$KK    
             _RDr,```NNT.````NNT.````NNhh    
             y8"`=p8888``888888``888888XX    
             RR``XRRRRR\```-+RR\```-+RR44    
             2G".+dGGGGGGGG..GGGGGG..GGww    
             ,US!_---ww-----;ww-----;wwbb    
              .+3Phhhhhhhhhhhhhhhhhhhhh      
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+Css}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.Css))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiCssThemedIcons.Css.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.Css&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.Css.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.Css">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.Css.Load_Color">
            <summary>Loads the image for Themed Icon Css theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.Css.Load_Gray">
            <summary>Loads the image for Themed Icon Css theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.Css.Load_GrayDark">
            <summary>Loads the image for Themed Icon Css theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.Css.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Css.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssAtRule">
             <summary>
            	<para>
            		<para>CssAtRule Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssAtRule"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssAtRule.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                          `tQQu-             
                        `tQ8ll8Qu-           
                      `}Q8}////}8go-         
                    `}Q%x++++++++x%go-       
                  `{gW3!_`      `-;3Wgo-     
                `FgNocc` /cccccc/  ccoNg2-   
               CgBaTTTT  TT=`  T? `TTTTaBg5  
               Ug8uiiii  ii      _ciiiiu8gG  
                _Xg8oll  7lllllllllllo8gG"   
                  _6g%ar-`       {{a%gO"     
                    _6gMSxxxxxxxxSMgO^       
                      _4gNkIIIIkNg#^         
                        _9gBEEBgR^           
                          _wggR^             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssAtRule}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssAtRule))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiCssThemedIcons.CssAtRule.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssAtRule&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssAtRule.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssAtRule">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssAtRule.Load_Color">
            <summary>Loads the image for Themed Icon CssAtRule theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssAtRule.Load_Gray">
            <summary>Loads the image for Themed Icon CssAtRule theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssAtRule.Load_GrayDark">
            <summary>Loads the image for Themed Icon CssAtRule theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssAtRule.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CssAtRule.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssClass">
             <summary>
            	<para>
            		<para>CssClass Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssClass"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssClass.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                      `+X6c.  `)DDJ.         
                    `rw3__3bJlD6;;68l.       
                  `LHo, ```u89!''''!98l.     
                `c#y" `"\V8w/--------/w8t.   
              `)Dk^ .^+E8b\---_rHHr_---\b8t. 
             T8U~`'~/h%b+____?AWWWWA?____+b%t
             oBu_`_!+ANk=___"t8BBBB8t"___=kNk
              -a$e_`_/J#BE!,,,^{%%{^,,,!EBk, 
                _VgS,`,+tR$P!"""~~"""!P$E,   
                  _Egk".,""6$Z/""""/Z$E,     
                    _XgU^^UgR4$X\\X$Z,       
                      _4ggR^  -aQQU,         
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssClass}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssClass))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiCssThemedIcons.CssClass.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssClass&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssClass.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssClass">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssClass.Load_Color">
            <summary>Loads the image for Themed Icon CssClass theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssClass.Load_Gray">
            <summary>Loads the image for Themed Icon CssClass theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssClass.Load_GrayDark">
            <summary>Loads the image for Themed Icon CssClass theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssClass.Load_SymbolsIdea">
            <summary>Loads the image for Themed Icon CssClass theme aspect SymbolsIdea.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssClass.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CssClass.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssFunction">
             <summary>
            	<para>
            		<para>CssFunction Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssFunction"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssFunction.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                         `~sbdl=.            
                      _rSRUxL?FKRE),         
                  .!]mdu(;======;L3wRu*-     
                 9D]T!^^^^^^^^^^^^^^!T}Db    
                 DD=- _=~________~=_ '"DD    
                 88!!;;"``,~__~"``"=~"_88    
                 88!!==~~~~_  _;/;=~^"_88    
                 88!!==~~^"",++/!;=~^"_88    
                 %%!!==~~^"",++/!;=~^"_%%    
                 8MaT!=~~^"",++/!;=~~+FM%    
                  "Tb%bC+^"",++/!r{6%Gl^`    
                     .;I88V|~?{ED85/'        
                         _cUB$wT,            
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssFunction}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssFunction))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiCssThemedIcons.CssFunction.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssFunction&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssFunction.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssFunction">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssFunction.Load_Color">
            <summary>Loads the image for Themed Icon CssFunction theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssFunction.Load_Gray">
            <summary>Loads the image for Themed Icon CssFunction theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssFunction.Load_GrayDark">
            <summary>Loads the image for Themed Icon CssFunction theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssFunction.Load_SymbolsIdea">
            <summary>Loads the image for Themed Icon CssFunction theme aspect SymbolsIdea.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssFunction.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CssFunction.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssId">
             <summary>
            	<para>
            		<para>CssId Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssId"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssId.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                    `~Jllllllllllllllllllllll
                  `=t+`                    {{
                `=F+` -________xx__xx______11
              `;1r` .__________uu__uu______uu
             !ur` ._?L"------5555555555----jj
             yy `''W@@g''''''''VV''VV''''''yy
             ckT_..,Jt^......ZZZZZZZZZZ....kk
              '|ZT_````````````44``44``````ZZ
                'T6T-``````````dd``dd``````66
                  -7b7-````````````````````bb
                    -lHHHHHHHHHHHHHHHHHHHHHHH
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssId}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssId))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiCssThemedIcons.CssId.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssId&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssId.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssId">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssId.Load_Color">
            <summary>Loads the image for Themed Icon CssId theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssId.Load_Gray">
            <summary>Loads the image for Themed Icon CssId theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssId.Load_GrayDark">
            <summary>Loads the image for Themed Icon CssId theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssId.Load_SymbolsIdea">
            <summary>Loads the image for Themed Icon CssId theme aspect SymbolsIdea.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssId.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CssId.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssProperty">
             <summary>
            	<para>
            		<para>CssProperty Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssProperty"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssProperty.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                           `^ckkl+".         
                        -/Ib1/-'^rC6X}+".    
                    `~T66T~``~iu)~. .^r1ww[  
                 -+oR2+_ -\oR88M$$br` -~!RR  
               JpHl~``^)EdORD8R}=``,=;;!!DD  
               88~=^_``_;7yo+_ -^=~~==;!!88  
               MM,"^~~!!~_``,~"""^~~==;!!MM  
               $$,"^~~=!!\+__:,""^~~==LoO$6  
               QQ,"^~~=!!\+__:,""^;zZN%u!`   
               RgDEtr==!!\+__:,*1RgOT,       
                `,LaDg%bozr"cKQQV/`          
                     `"cV8ggDl"              
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssProperty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssProperty))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiCssThemedIcons.CssProperty.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssProperty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssProperty.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssProperty">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssProperty.Load_Color">
            <summary>Loads the image for Themed Icon CssProperty theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssProperty.Load_Gray">
            <summary>Loads the image for Themed Icon CssProperty theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssProperty.Load_GrayDark">
            <summary>Loads the image for Themed Icon CssProperty theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssProperty.Load_SymbolsIdea">
            <summary>Loads the image for Themed Icon CssProperty theme aspect SymbolsIdea.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssProperty.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CssProperty.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPropertyValue">
             <summary>
            	<para>
            		<para>CssPropertyValue Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPropertyValue"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPropertyValue.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                         }}}}}}}}            
                         xx""""xx            
                     uuFruu____uurFuu        
                     55^/Tn____nT/^55        
                     SS------------SS        
                     )ET,........,TEX}+".    
                    `~}w67_````_76}-.^r1ww[  
                 -+oR2+_-}wz__zwRBbr` -~!RR  
               JpHl~``^)EdRRGG#o=``,=;;!!DD  
               88~=^_``_;7yo+_ -^=~~==;!!88  
               MM,"^~~!!~_``,~"""^~~==;!!MM  
               $$,"^~~=!!\+__:,""^~~==LoO$6  
               QQ,"^~~=!!\+__:,""^;zZN%u!`   
               RgDEtr==!!\+__:,*1RgOT,       
                `,LaDg%bozr"cKQQV/`          
                     `"cV8ggDl"              
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssPropertyValue}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssPropertyValue))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiCssThemedIcons.CssPropertyValue.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssPropertyValue&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPropertyValue.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPropertyValue">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPropertyValue.Load_Color">
            <summary>Loads the image for Themed Icon CssPropertyValue theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPropertyValue.Load_Gray">
            <summary>Loads the image for Themed Icon CssPropertyValue theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPropertyValue.Load_GrayDark">
            <summary>Loads the image for Themed Icon CssPropertyValue theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPropertyValue.Load_SymbolsIdea">
            <summary>Loads the image for Themed Icon CssPropertyValue theme aspect SymbolsIdea.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPropertyValue.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CssPropertyValue.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPseudoElement">
             <summary>
            	<para>
            		<para>CssPseudoElement Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPseudoElement"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPseudoElement.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                       `=\LJIItTr!_          
                    .![E|"_-``'_"rayr-       
                   *65^            -)9t'     
                  7dT`               _aw:    
                 /AT -iX6t,  -iX6t,   .AZ    
                 yR- wWWWWD  wWWWWD    RR    
                 DD``^5DDV=``^5DDV=````DD    
                 88````````````````````88    
                 AM_```````````````````4M-   
                 F$|```````````````````T$r   
                 -$D-````r```````r`````:$R   
                  !QU.```uU_`````uU_````]Qc  
                   Tgk-..!gQz-...!gQz-..-$$` 
                    =$$r_~gg$Q1~-~gg$Q1~-ig| 
                     `Jbgg%~ =h8gg%~ =h8gg8: 
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssPseudoElement}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssPseudoElement))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiCssThemedIcons.CssPseudoElement.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssPseudoElement&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPseudoElement.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPseudoElement">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPseudoElement.Load_Color">
            <summary>Loads the image for Themed Icon CssPseudoElement theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPseudoElement.Load_Gray">
            <summary>Loads the image for Themed Icon CssPseudoElement theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPseudoElement.Load_GrayDark">
            <summary>Loads the image for Themed Icon CssPseudoElement theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPseudoElement.Load_SymbolsIdea">
            <summary>Loads the image for Themed Icon CssPseudoElement theme aspect SymbolsIdea.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPseudoElement.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CssPseudoElement.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset">
             <summary>
            	<para>
            		<para>CssRuleset Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                 -=+ciiiiiiiiiiiiiic+;-      
               `ri~.`              ``"7c`    
               /}_                    .}J;-  
               [[    {{{{{{{{          [["7c`
               II``````````````````````II .}c
               oo````oooooooooooooo````oo  [[
               55``````````````````````55``II
               SS....EEEEEE............SS``oo
               kk''''''''''''''''''''''kk``55
               PP----bbbbbbbbbb--------PP..SS
               lX~____________________"Xo''kk
               .aP+,________________,/kk~--PP
                `~{wddddddddddddddddZur,__"Xo
                   .aP+,________________,/kk-
                    `~{kddddddddddddddddKx;` 
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssRuleset}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssRuleset))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiCssThemedIcons.CssRuleset.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssRuleset&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset.Load_Color">
            <summary>Loads the image for Themed Icon CssRuleset theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset.Load_Gray">
            <summary>Loads the image for Themed Icon CssRuleset theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset.Load_GrayDark">
            <summary>Loads the image for Themed Icon CssRuleset theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset.Load_SymbolsIdea">
            <summary>Loads the image for Themed Icon CssRuleset theme aspect SymbolsIdea.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CssRuleset.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset2">
             <summary>
            	<para>
            		<para>CssRuleset2 Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset2"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset2.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 -=+LssssssssssssssssL+;-    
               `r7~.`                ``"7L`  
               /t-                      .tL  
               FF    }}}}}}}}}}          FF  
               11````````````````````````11  
               nn````oooooooooooooooo````nn  
               oo````````````````````````oo  
               55....kkkkkkkk............55  
               SS........................SS  
               kk----wwwwwwwwwwww--------kk  
               ZZ------------------------ZZ  
               l6~----------------------"6o  
               .aP+,__________________,/kV-  
                `~}kbbbbbbbbbbbbbbbbbbE[;`   
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssRuleset2}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssRuleset2))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiCssThemedIcons.CssRuleset2.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssRuleset2&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset2.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset2">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset2.Load_Color">
            <summary>Loads the image for Themed Icon CssRuleset2 theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset2.Load_Gray">
            <summary>Loads the image for Themed Icon CssRuleset2 theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset2.Load_GrayDark">
            <summary>Loads the image for Themed Icon CssRuleset2 theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset2.Load_SymbolsIdea">
            <summary>Loads the image for Themed Icon CssRuleset2 theme aspect SymbolsIdea.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset2.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CssRuleset2.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiAsxxThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(PsiAsxxThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiAsxxThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(PsiAsxxThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiAsxxThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons.Asxx">
             <summary>
            	<para>
            		<para>Asxx Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons.Asxx"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons.Asxx.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 IIIIIIIIIIIIIII/`           
                 uu''''''''''''^7u/`         
                 oo''''''''''''''~iu*`       
                 ee''''        ''''~lj*`     
                 aa----        ------~l5+    
                 yy----            ----yy    
                 VV----            ----VV    
                 kk----            ----kk    
              `!IuuuuuuuuuuuuuuuuuuuL,-KK    
             =CT_    11=`    11    _Txrhh    
             {{``{{``{{``{{{{{{``{{``{{XX    
             ll``ll``ll"````^ll````-+ll44    
             ii``````iiiiii``ii``iiiiiiww    
             TT``TT``TT`````,TT``TTbbbbbb    
             ))))))))))))))))))))))          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiAsxxThemedIcons+Asxx}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiAsxxThemedIcons.Asxx))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiAsxxThemedIcons.Asxx.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiAsxxThemedIcons.Asxx&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons.Asxx.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons.Asxx">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons.Asxx.Load_Color">
            <summary>Loads the image for Themed Icon Asxx theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons.Asxx.Load_Gray">
            <summary>Loads the image for Themed Icon Asxx theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons.Asxx.Load_GrayDark">
            <summary>Loads the image for Themed Icon Asxx theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons.Asxx.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Asxx.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiHtmlThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(PsiHtmlThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.Html">
             <summary>
            	<para>
            		<para>Html Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.Html"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.Html.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 IIIIIIIIIIIIIII/`           
                 uu''''''''''''^7u/`         
                 oo''''''''''''''~iu*`       
                 ee''''        ''''~lj*`     
                 aa----        ------~l5+    
                 yy----            ----yy    
                 VV----            ----VV    
                 kk----            ----kk    
             uuuuuuuuuuuuuuuun\``!Iuuuuuuuu  
             11  11          _T]FT_  11  11  
             {{``{{``{{``{{````{{````{{``{{  
             ll``````ll``ll``+-``-+``ll``ll  
             ii``ii``ii``ii``ii``ii``ii``iiii
             TT``TT``TT``TT``TT``TT``TT````TT
             ))))))))))))))))))))))))))))))))
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+Html}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.Html))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiHtmlThemedIcons.Html.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.Html&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.Html.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.Html">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.Html.Load_Color">
            <summary>Loads the image for Themed Icon Html theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.Html.Load_Gray">
            <summary>Loads the image for Themed Icon Html theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.Html.Load_GrayDark">
            <summary>Loads the image for Themed Icon Html theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.Html.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Html.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTag">
             <summary>
            	<para>
            		<para>HtmlTag Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTag"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTag.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                        `   ~TTTTTT_         
                      `rV   TT``.77.         
                    `rkEE  ,l!``=l5kr`       
                  `?PF_UU  (t-``z}U_FP?`     
                .LXx:  66 -F?``^Fa6  :xXL.   
              .c9I,  -7ww rx,``Tx4w7-  ,I9c. 
             )bo"  -Jdddd.Il``,I)ddddJ-  "ob)
             xGl_``^eGGGG!o=``co:GGGGe^``_lGx
              _I#}_``~a#Roo-._eF ##a~``_}#I_ 
                _uDC:``DGar..+a= DD``:CDu_   
                  _oD1,DPV_.-5a` DD,1Do_     
                    :58DkJ''/kr  8885:       
                      :UP=--oP.  8y:         
                      'XXXXXXJ   ,           
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+HtmlTag}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.HtmlTag))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiHtmlThemedIcons.HtmlTag.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.HtmlTag&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTag.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTag">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTag.Load_Color">
            <summary>Loads the image for Themed Icon HtmlTag theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTag.Load_Gray">
            <summary>Loads the image for Themed Icon HtmlTag theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTag.Load_GrayDark">
            <summary>Loads the image for Themed Icon HtmlTag theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTag.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon HtmlTag.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttribute">
             <summary>
            	<para>
            		<para>HtmlTagAttribute Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttribute"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttribute.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                        `   ~TTTTTT_         
                      `rV   T7``.is.         
                    `rEPP  ,l!``=laEr`       
                  `?h[_XX  |}-``i{X_[h?`     
                .LX1,  44 -CL``~Cy4  ,1XL.   
              .cwu"  -sbb r1"``71wbs-  "uwc. 
             (bo"``-lHHHH.ut.`"u)HHHHl-``"ob(
             1At_``~5AAAA/o;..)o:AAAA5~``_tA1
              _3R{_``~SRRoo-._5C RRS~``_{R3_ 
                _oDx,..DGyr''ry= DD..,xDo_   
                  _jDI"DZV,--}}}}}}}}}}}}}}}}
                    :58DEl--/11            11
                      :Xh=--joo            oo
                      '666666VV````````````VV
                             XXXXXXXXXXXXXXXX
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+HtmlTagAttribute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.HtmlTagAttribute))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiHtmlThemedIcons.HtmlTagAttribute.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.HtmlTagAttribute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttribute.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttribute">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttribute.Load_Color">
            <summary>Loads the image for Themed Icon HtmlTagAttribute theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttribute.Load_Gray">
            <summary>Loads the image for Themed Icon HtmlTagAttribute theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttribute.Load_GrayDark">
            <summary>Loads the image for Themed Icon HtmlTagAttribute theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttribute.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon HtmlTagAttribute.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttributeValue">
             <summary>
            	<para>
            		<para>HtmlTagAttributeValue Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttributeValue"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttributeValue.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                        `   ~TTTTTT_         
                      `rV   T7``.is.         
                    `rEPP  ,l!``=laEr`       
                  `?h[_XX  |}-``i{X_[h?`     
                .LX1,  44 -CL``~Cy4  ,1XL.   
              .cwu"  -sbb r1"``71wbs-  "uwc. 
             (bo"``-lHHHH.ut.qqqqqqqqqqqqqqqq
             1At_``~5AAAA/o;.##------------##
              _3R{_``~SRRoo-.DD""""""""""""DD
                _oDx,..DGyr''DD;;;;;;;;;;;;DD
                  _jDI"DZV,--DDDDDDDDDDDDDDDD
                    :58DEl--/DD            DD
                      :Xh=--jOO            OO
                      '666666bb````````````bb
                             UUUUUUUUUUUUUUUU
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+HtmlTagAttributeValue}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.HtmlTagAttributeValue))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiHtmlThemedIcons.HtmlTagAttributeValue.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.HtmlTagAttributeValue&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttributeValue.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttributeValue">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttributeValue.Load_Color">
            <summary>Loads the image for Themed Icon HtmlTagAttributeValue theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttributeValue.Load_Gray">
            <summary>Loads the image for Themed Icon HtmlTagAttributeValue theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttributeValue.Load_GrayDark">
            <summary>Loads the image for Themed Icon HtmlTagAttributeValue theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttributeValue.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon HtmlTagAttributeValue.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagId">
             <summary>
            	<para>
            		<para>HtmlTagId Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagId"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagId.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                         cjjjjjjjjjjj        
                        `aF `aaaF `a1        
                  `*khh !V= =VVV= =VhE?`     
                `+XI^hPPPk` uPPk` uPPPPXc.   
              `r9o~`^XT`````````````,Xl~ow). 
             ?ba=..:Pwwww"`Twww"`Twwww*..=aHT
             }Rx"../ddddE`'bddE`'bdddb;.."xRn
              -CD3^cO+`````````````rO|-^3Do_ 
                -I8#RRRR-.9RRR-.9RRRR/28a:   
                  -oNWDF.=DDDF.=Do NNNV,     
                     58=.o888=.o8~           
                     WWWWWWWWWWWR            
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+HtmlTagId}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.HtmlTagId))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiHtmlThemedIcons.HtmlTagId.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.HtmlTagId&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagId.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagId">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagId.Load_Color">
            <summary>Loads the image for Themed Icon HtmlTagId theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagId.Load_Gray">
            <summary>Loads the image for Themed Icon HtmlTagId theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagId.Load_GrayDark">
            <summary>Loads the image for Themed Icon HtmlTagId theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagId.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon HtmlTagId.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiJavaScriptThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(PsiJavaScriptThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Array">
             <summary>
            	<para>
            		<para>Array Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Array"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Array.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                 tttttttttttt  tttttttttttt  
                 }}        }}  }}        }}  
                 {{    {{{{{{  {{{{{{    {{  
                 ]]    ]]          ]]    ]]  
                 11    11          11    11  
                 33````33          33````33  
                 uu````uu          uu````uu  
                 oo````oo          oo````oo  
                 ee````ee          ee````ee  
                 aa````aaaaaa  aaaaaa````aa  
                 yy........yy  yy........yy  
                 VVVVVVVVVVVV  VVVVVVVVVVVV  
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+Array}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.Array))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiJavaScriptThemedIcons.Array.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.Array&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Array.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Array">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Array.Load_Color">
            <summary>Loads the image for Themed Icon Array theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Array.Load_Gray">
            <summary>Loads the image for Themed Icon Array theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Array.Load_GrayDark">
            <summary>Loads the image for Themed Icon Array theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Array.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Array.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.EcmaScript">
             <summary>
            	<para>
            		<para>EcmaScript Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.EcmaScript"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.EcmaScript.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 jjjjjjjjjjjjjju*`           
                 EE''''''''''''^1e*`         
                 SS''''''''''''''=CS/`       
                 aa''''````````''''=fa\`     
                 PP____        ______=[aL    
                 PP____            ____PP    
                 VV____            ____VV    
                 66____            ____66    
             XXXXXXXXXXYPXXXXXX    ____kk    
             44------44L_----44    ____44    
             PP''PPPPPP''PPPPPP    ____GG    
             SS'''''SSS;'''_*Sl________AA    
             55__5555555555__55________pp    
             tt______tt_____=t5OOOOOOOOOO    
             sssssssssssssss?^`              
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HyfytekThemedIconsThemedIcons+EcmaScript}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HyfytekThemedIconsThemedIcons.EcmaScript))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HyfytekThemedIconsThemedIcons.EcmaScript.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HyfytekThemedIconsThemedIcons.EcmaScript&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.EcmaScript.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.EcmaScript">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.EcmaScript.Load_Color">
            <summary>Loads the image for Themed Icon EcmaScript theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.EcmaScript.Load_Gray">
            <summary>Loads the image for Themed Icon EcmaScript theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.EcmaScript.Load_GrayDark">
            <summary>Loads the image for Themed Icon EcmaScript theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.EcmaScript.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon EcmaScript.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Js">
             <summary>
            	<para>
            		<para>Js Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Js"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Js.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 uuuuuuuuuuuuuu3/`           
                 oo------------~Jo\`         
                 22--------------~lo+`       
                 aa----````````----~t5+`     
                 yy----        ------=}a+    
                 VV----            ----VV    
                 kk----            ----kk    
                 EE----            ----EE    
                 bbbbbbbbbbbbbb    ----hh    
                 XX..XXr-....XX    ----XX    
                 VV..VV..VVVVVV    ----66    
             /=~,oo--oo;---_!oo--------ww    
             xx7Cxx--xxxxxx--xx________bb    
             7l"____~ll_____~lCdddddddddd    
             .;LTTTTTTTTTTT|+=`              
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+Js}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.Js))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiJavaScriptThemedIcons.Js.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.Js&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Js.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Js">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Js.Load_Color">
            <summary>Loads the image for Themed Icon Js theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Js.Load_Gray">
            <summary>Loads the image for Themed Icon Js theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Js.Load_GrayDark">
            <summary>Loads the image for Themed Icon Js theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Js.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Js.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsFunction">
             <summary>
            	<para>
            		<para>JsFunction Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsFunction"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsFunction.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                         `~sbdl=.            
                      _rSRUxL?FKRE),         
                  .!]mdu(;======;L3wRu*-     
                 9D]T!^^^^^^^^^^^^^^!T}Db    
                 DD=- _=~________~=_ '"DD    
                 88!!;;"``,~__~"``"=~"_88    
                 88!!==~~~~_  _;/;=~^"_88    
                 88!!==~~^"",++/!;=~^"_88    
                 %%!!==~~^"",++/!;=~^"_%%    
                 8MaT!=~~^"",++/!;=~~+FM%    
                  "Tb%bC+^"",++/!r{6%Gl^`    
                     .;I88V|~?{ED85/'        
                         _cUB$wT,            
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsFunction}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsFunction))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiJavaScriptThemedIcons.JsFunction.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsFunction&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsFunction.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsFunction">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsFunction.Load_Color">
            <summary>Loads the image for Themed Icon JsFunction theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsFunction.Load_Gray">
            <summary>Loads the image for Themed Icon JsFunction theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsFunction.Load_GrayDark">
            <summary>Loads the image for Themed Icon JsFunction theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsFunction.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon JsFunction.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsLabel">
             <summary>
            	<para>
            		<para>JsLabel Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsLabel"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsLabel.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                    `/yVVVVVVVVVVVVVVVVVVVVVV
                  `*kf_                    KK
                `+Px,                      XX
              `+6n"``````yy``yyyy``yy``yy``ww
             rwo^``*HA)``yy``yyyy``yy``yy``dd
             lO}_``7NBI``yy``yyyy``yy``yy``OO
              -}R]:``````yy``yyyy``yy``yy``RR
                -CDI"......................DD
                  -18o"''''''''''''''''''''88
                    -u%%%%%%%%%%%%%%%%%%%%%%%
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsLabel}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsLabel))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiJavaScriptThemedIcons.JsLabel.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsLabel&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsLabel.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsLabel">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsLabel.Load_Color">
            <summary>Loads the image for Themed Icon JsLabel theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsLabel.Load_Gray">
            <summary>Loads the image for Themed Icon JsLabel theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsLabel.Load_GrayDark">
            <summary>Loads the image for Themed Icon JsLabel theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsLabel.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon JsLabel.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs">
             <summary>
            	<para>
            		<para>JsMsAjaxNs Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                        .!}    F/-           
                      `rZF:    _lZT`         
                     -5Zl`      `)ZS_        
                    `TZZ:````````'ZZ1``      
                  `.~VF"``````````"FZ=.`     
                 ``ZZZ``````````````ZZZ``    
                 ``_/kT_``````````_TZ+:``    
                   ``lZZ_````````-ZZo``      
                    `,kZ7.```````?ZE~`       
                    `._tZJ_...._TZ1,.`       
                      `.^)S....VT~'`         
                        `.''''''.`           
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsMsAjaxNs}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsMsAjaxNs))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiJavaScriptThemedIcons.JsMsAjaxNs.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsMsAjaxNs&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs.Load_Color">
            <summary>Loads the image for Themed Icon JsMsAjaxNs theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs.Load_Gray">
            <summary>Loads the image for Themed Icon JsMsAjaxNs theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs.Load_GrayDark">
            <summary>Loads the image for Themed Icon JsMsAjaxNs theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon JsMsAjaxNs.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Json">
             <summary>
            	<para>
            		<para>Json Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Json"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Json.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 IIIIIIIIIIIIIII/`           
                 uu''''''''''''^su/`         
                 oo''''''''''''''~iu*`       
                 22----        ----~lj*`     
                 aa----        ------~t5+    
                 yy----            ----yy    
                 VV----            ----VV    
                 kk----            ----kk    
               bbbbbbIkbbbbbb/TooT/bbbbbbbbbb
               UU``UU+-````UU1=__~tUU``rU``UU
               SS..SS..SSSSSS-.iJ.'SS...r..SS
               uu''uu='''-!uu''uu''uu''!'''uu
             FFFF--FFFFFF--FF_-lt--FF--F;--FF
             JJ---^JJ-----~JJr^__"+JJ--JJ--JJ
             |||||r|||||||?~-;L|)+=||||||||||
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+Json}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.Json))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiJavaScriptThemedIcons.Json.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.Json&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Json.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Json">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Json.Load_Color">
            <summary>Loads the image for Themed Icon Json theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Json.Load_Gray">
            <summary>Loads the image for Themed Icon Json theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Json.Load_GrayDark">
            <summary>Loads the image for Themed Icon Json theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Json.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Json.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsParameter">
             <summary>
            	<para>
            		<para>JsParameter Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsParameter"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsParameter.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                `75555=            "5555s.   
               -II`~y+              =y!`}o_  
              _et`.a7                rS- Ty^ 
             `jo` xV.     `"L5Vc"`   `uo  xV.
             /E= ^Er   -/]w};~~;FwF!' =E! ,EL
             JZ- 7Z- |UU)~~)wD8O~`^GG `Zu `Zu
             2X. uX` DD  -\aXT^`   DD  XX  XX
             F6-`C6_ %%````````````%% .6V``6y
             r9;`+9+ $$=.```````")X$6 =9T`"9T
             .4k.-Xh`"lD$kr_-*oMB2!` `S9_`ob-
              ;d1-=dI   -|AggRJ"     7d\.ldr 
               ^wV_7G+              =GF-od;  
                -hOOOO=            ,GOOOX,   
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsParameter}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsParameter))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiJavaScriptThemedIcons.JsParameter.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsParameter&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsParameter.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsParameter">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsParameter.Load_Color">
            <summary>Loads the image for Themed Icon JsParameter theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsParameter.Load_Gray">
            <summary>Loads the image for Themed Icon JsParameter theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsParameter.Load_GrayDark">
            <summary>Loads the image for Themed Icon JsParameter theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsParameter.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon JsParameter.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsProperty">
             <summary>
            	<para>
            		<para>JsProperty Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsProperty"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsProperty.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                           `^ckkl+".         
                        -/Ib1/-'^rC6X}+".    
                    `~T66T~``~iu)~. .^r1ww[  
                 -+oR2+_ -\oR88M$$br` -~!RR  
               JpHl~``^)EdORD8R}=``,=;;!!DD  
               88~=^_``_;7yo+_ -^=~~==;!!88  
               MM,"^~~!!~_``,~"""^~~==;!!MM  
               $$,"^~~=!!\+__:,""^~~==LoO$6  
               QQ,"^~~=!!\+__:,""^;zZN%u!`   
               RgDEtr==!!\+__:,*1RgOT,       
                `,LaDg%bozr"cKQQV/`          
                     `"cV8ggDl"              
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsProperty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsProperty))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiJavaScriptThemedIcons.JsProperty.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsProperty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsProperty.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsProperty">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsProperty.Load_Color">
            <summary>Loads the image for Themed Icon JsProperty theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsProperty.Load_Gray">
            <summary>Loads the image for Themed Icon JsProperty theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsProperty.Load_GrayDark">
            <summary>Loads the image for Themed Icon JsProperty theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsProperty.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon JsProperty.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsVariable">
             <summary>
            	<para>
            		<para>JsVariable Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsVariable"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsVariable.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                      `_=rF1+"`              
                 `_;cIoT!"'-=T5l!-           
               |oa7!,. `,/JT=.`^?oac^`       
               XX",.  ^TVU9dODE)^`_/{UC/-    
               bb,""~~:``"LEODD8N%Vr--=TEUT  
               OO,""~~=;!~-`-*2wu?~-',=+LOO  
               DD,""~~=;!/++/^.`_~;!!)1rcDD  
               5DXl*~~=;!/++rLc,"T54HHHrc88  
                `~l#DVi\!/++rLc,"HHwV17rcWW  
                    -LU0#57rrLc,"*=;\TowD$m  
                       `=I8$po7"+}XDQDa?"`   
                           _|bgg8SL^`        
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsVariable}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsVariable))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiJavaScriptThemedIcons.JsVariable.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsVariable&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsVariable.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsVariable">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsVariable.Load_Color">
            <summary>Loads the image for Themed Icon JsVariable theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsVariable.Load_Gray">
            <summary>Loads the image for Themed Icon JsVariable theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsVariable.Load_GrayDark">
            <summary>Loads the image for Themed Icon JsVariable theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsVariable.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon JsVariable.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.NPMpackage">
             <summary>
            	<para>
            		<para>NPMpackage Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.NPMpackage"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.NPMpackage.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
               DDDDDDDDDDDDDDDDDDDDDDDDDDDD  
               88llllllllllllllllllllllll88  
               88llllllllllllllllllllllll88  
               WWtttt                ttttWW  
               NN}}}}                }}}}NN  
               BB{{{{        {{{{    {{{{BB  
               $$CCCC        CCCC    CCCC$$  
               $$]]]]        ]]]]    ]]]]$$  
               QQ1111        1111    1111QQ  
               QQIIII        IIII    IIIIQQ  
               gg3333        3333    3333gg  
               gguuuuuuuuuuuuuuuuuuuuuuuugg  
               ggoooooooooooooooooooooooogg  
               gggggggggggggggggggggggggggg  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+NPMpackage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.NPMpackage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiJavaScriptThemedIcons.NPMpackage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.NPMpackage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.NPMpackage.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.NPMpackage">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.NPMpackage.Load_Color">
            <summary>Loads the image for Themed Icon NPMpackage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.NPMpackage.Load_Gray">
            <summary>Loads the image for Themed Icon NPMpackage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.NPMpackage.Load_GrayDark">
            <summary>Loads the image for Themed Icon NPMpackage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.NPMpackage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon NPMpackage.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TsIndexer">
             <summary>
            	<para>
            		<para>TsIndexer Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TsIndexer"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TsIndexer.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                             SSSSSSSSSSSSSSSS
                             kk    kkkk    kk
                             PP  PPPPPPPP  PP
                             XX``XXXXXXXX``XX
                      _+oar_ 66``66666666``66
                  .;}GdjT|ubmww``wwwwwwww``ww
               "TXRki/~~~~~~!bb..bbbbbbbb..bb
               DD,'~="______,GG--GGGGGGGG--GG
               DD!!~' -^",~_ OO----OOOO----OO
               88;=~~~~,``"!!RRRRRRRRRRRRRRRR
               88;=~~^",_+/!=~^,_88          
               %%+=~~^",_+/!=~^,"%%          
               +58R5c~",_+/!;LIG8Vr          
                  ,(9Mwt!|uw%d7"`            
                     `=FD83!.                
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+TsIndexer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.TsIndexer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiJavaScriptThemedIcons.TsIndexer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.TsIndexer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TsIndexer.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TsIndexer">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TsIndexer.Load_Color">
            <summary>Loads the image for Themed Icon TsIndexer theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TsIndexer.Load_Gray">
            <summary>Loads the image for Themed Icon TsIndexer theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TsIndexer.Load_GrayDark">
            <summary>Loads the image for Themed Icon TsIndexer theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TsIndexer.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon TsIndexer.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TypeScript">
             <summary>
            	<para>
            		<para>TypeScript Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TypeScript"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TypeScript.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 nnnnnnnnnnnnnn3/`           
                 oo------------~iu\`         
                 22--------------~lo+`       
                 55----````````----~le+`     
                 yy----        ------=ta+    
                 VV----            ----VV    
                 kk----            ----kk    
                 EE----            ----EE    
             bbbbbbbbbbbbbbbbbb    ----ZZ    
             XX......XXr-....XX    ----XX    
             VVVV..VVVV..VVVVVV    ----66    
               oo--oooo;---_!oo________99    
               ]]--]]]]]]]]--]]________bb    
               ll__llll_____~lCdddddddddd    
               TTTTTTTTTTTT|+~`              
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+TypeScript}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.TypeScript))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiJavaScriptThemedIcons.TypeScript.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.TypeScript&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TypeScript.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TypeScript">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TypeScript.Load_Color">
            <summary>Loads the image for Themed Icon TypeScript theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TypeScript.Load_Gray">
            <summary>Loads the image for Themed Icon TypeScript theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TypeScript.Load_GrayDark">
            <summary>Loads the image for Themed Icon TypeScript theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TypeScript.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon TypeScript.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(PsiRazorThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiRazorThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(PsiRazorThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiRazorThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.Razor">
             <summary>
            	<para>
            		<para>Razor Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.Razor"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.Razor.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 uuuuuuuuuuuuuu3/`           
                 oo------------~Jo\`         
                 22--------------~lo+`       
                 aa----````````----~t5+`     
                 yy----        ------=}a+    
                 VV----            ----VV    
                'DNR%gg8dVT_       ----kk    
              'w$h!:.  ._;y$R_     ----EE    
             ,WR_1M$$$$$$MP-H$=    ----hh    
             yB~`BBd\_``^BB`_BH    ----XX    
             MM``MM_`MM``Dt`-MR    ----66    
             U8,`88V=-````'/RDr--------ww    
             /8x.E88888888888"_________bb    
              cDV=_--------DDdddddddddddd    
               -|kGRRRRRRRRRR                
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorThemedIcons+Razor}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiRazorThemedIcons.Razor))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiRazorThemedIcons.Razor.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiRazorThemedIcons.Razor&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.Razor.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.Razor">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.Razor.Load_Color">
            <summary>Loads the image for Themed Icon Razor theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.Razor.Load_Gray">
            <summary>Loads the image for Themed Icon Razor theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.Razor.Load_GrayDark">
            <summary>Loads the image for Themed Icon Razor theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.Razor.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Razor.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod">
             <summary>
            	<para>
            		<para>RazorHelperMethod Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                              -ll-           
                            -tRauRt-         
                          -}RS=''"oR}-       
                        -FDk=------~2DF-     
                      -xDbGGGGGGGPnc_~aDx-   
                    -18h!__GG"rGG"rGy__=S81- 
                   ?%8)::::GG::GG::GG::::+8%?
                ')VbWgg$D4IDG,,GG,,GG,,~3%6~ 
              'w$Z!_.  ._=a$$*"GG""GG=oWw~   
             ,WR_1M$$$$$$ME-H$|~~~~;jNb~     
             aB~`BBb/_``^BB`_BD~~!a$d~       
             MM``MM_`MM``Dt`-MNhS$G~         
             U8,`88V~-````./#RTmm=           
             /8[.k88888888888`               
              cDV=-''''''''DD                
               -|VGRRRRRRRRRR                
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorThemedIcons+RazorHelperMethod}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiRazorThemedIcons.RazorHelperMethod))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiRazorThemedIcons.RazorHelperMethod.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiRazorThemedIcons.RazorHelperMethod&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod.Load_Color">
            <summary>Loads the image for Themed Icon RazorHelperMethod theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod.Load_Gray">
            <summary>Loads the image for Themed Icon RazorHelperMethod theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod.Load_GrayDark">
            <summary>Loads the image for Themed Icon RazorHelperMethod theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod.Load_SymbolsIdea">
            <summary>Loads the image for Themed Icon RazorHelperMethod theme aspect SymbolsIdea.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod.Load_SymbolsVs08">
            <summary>Loads the image for Themed Icon RazorHelperMethod theme aspect SymbolsVs08.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RazorHelperMethod.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethodVs">
             <summary>
            	<para>
            		<para>RazorHelperMethodVs Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethodVs"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethodVs.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                              _+aVr:         
                          .;CROSliaGR3!'     
                       ^T6DX}r======+tKDbJ~  
                       88~_;/~^^^^^^~/!_^88  
                       88++=_`,=~~="`-=;^88  
                       %%*/!;!!~'.~++!=~"%%  
                ')Vb8ggQQHSc;=~~"?r+/!=~"MM  
              'w$Z!_.  ._=a$D?~~"?r+/!=~=NN  
             ,WR_1M$$$$$$ME-H$T~"?r+*T2R%kr  
             aB~`BBb/_``^BB`_BW1+i5HNG7"`    
             MM``MM_`MM``Dt`-MD[8%u!.        
             U8,`88V~-````./#R~              
             /8[.k88888888888`               
              cDV=-''''''''DD                
               -|VGRRRRRRRRRR                
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorThemedIcons+RazorHelperMethodVs}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiRazorThemedIcons.RazorHelperMethodVs))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiRazorThemedIcons.RazorHelperMethodVs.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiRazorThemedIcons.RazorHelperMethodVs&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethodVs.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethodVs">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethodVs.Load_Color">
            <summary>Loads the image for Themed Icon RazorHelperMethodVs theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethodVs.Load_Gray">
            <summary>Loads the image for Themed Icon RazorHelperMethodVs theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethodVs.Load_GrayDark">
            <summary>Loads the image for Themed Icon RazorHelperMethodVs theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethodVs.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RazorHelperMethodVs.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection">
             <summary>
            	<para>
            		<para>RazorSection Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                       VkPX4wbGmRDD8%W0$$    
                       Vk__,,"^~~~==;!!$$    
                       Vk__4wbGmRDD8%W0$$    
                       Vk__4w..--__,"^~D8    
                       VkPX4wwbbHG#RRDDD8    
                           X6..--__,"^~D8    
                           X6wbbHG#RRDDw4XhEV
                ')Vb8gg8bVTA6..--__,"^~w4__EV
              'w$Z!_.  ._=a$Q$W%8DDRmGdw4__EV
             ,WR_1M$$$$$$ME-H$t;==~~^"",,__EV
             aB~`BBb/_``^BB`_B$%8DDRmGdw4XhEV
             MM``MM_`MM``Dt`-M#              
             U8,`88V~-````./#R~              
             /8[.k88888888888`               
              cDV=-''''''''DD                
               -|VGRRRRRRRRRR                
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorThemedIcons+RazorSection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiRazorThemedIcons.RazorSection))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiRazorThemedIcons.RazorSection.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiRazorThemedIcons.RazorSection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection.Load_Color">
            <summary>Loads the image for Themed Icon RazorSection theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection.Load_Gray">
            <summary>Loads the image for Themed Icon RazorSection theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection.Load_GrayDark">
            <summary>Loads the image for Themed Icon RazorSection theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection.Load_SymbolsIdea">
            <summary>Loads the image for Themed Icon RazorSection theme aspect SymbolsIdea.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection.Load_SymbolsVs08">
            <summary>Loads the image for Themed Icon RazorSection theme aspect SymbolsVs08.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RazorSection.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorCSharpThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(PsiRazorCSharpThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiRazorCSharpThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(PsiRazorCSharpThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiRazorCSharpThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons.RazorCS">
             <summary>
            	<para>
            		<para>RazorCS Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons.RazorCS"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons.RazorCS.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                ')Vb8gg8bVT_                 
              'w$Z!_.  ._=a$$EnI/`           
             ,WR_1M$$$$$$ME-H$+~iu\`         
             aB~`BBb/_``^BB`_B#--~Jo+`       
             MM``MM_`MM``Dt`-MR----~le+`     
             U8,`88V~-````./#D=------~ta+    
             /8[.k88888888888`     ----SS    
              cDV=-''''''''DD      ----kk    
               -|RRRRRRRRRRRR      ----EE    
              `!1O###############  ----ZZ    
             -Ek!_```bbbb``bb``bbbb----XX    
             }6,`^e6666``````````66----66    
             EE``1EEEEEEE``EE``EEEE----99    
             ly:.;5yyyy..........yy----ww    
             _Il~_---oooo--oo--oooobbbbbb    
              `;71IIIIIIIIIIIIIII            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorCSharpThemedIcons+RazorCS}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiRazorCSharpThemedIcons.RazorCS))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiRazorCSharpThemedIcons.RazorCS.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiRazorCSharpThemedIcons.RazorCS&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons.RazorCS.Id">
            <inheritdoc cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons.RazorCS">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons.RazorCS.Load_Color">
            <summary>Loads the image for Themed Icon RazorCS theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons.RazorCS.Load_Gray">
            <summary>Loads the image for Themed Icon RazorCS theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons.RazorCS.Load_GrayDark">
            <summary>Loads the image for Themed Icon RazorCS theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons.RazorCS.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RazorCS.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.AspCodeBehindGeneratedDocumentService">
            <summary>
            Generated document service for C# and VB languages of ASP page.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.Generate.AspCodeBehindFileGenerator">
            <summary>
            AspCodeBehindFileGenerator is a utility to generate code-behind-like class for .aspx page.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.Generate.AspCodeBehindGenerator">
            <summary>
            Abstract base class for code generator
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Impl.Generate.LinqToXsd.LinqToXsdBuilder.CopyFile(JetBrains.Util.FileSystemPath,JetBrains.Util.FileSystemPath,JetBrains.ProjectModel.IProjectFile,JetBrains.DocumentManagers.DocumentManager)">
            <summary>
            Copies file content to the appropriate location (creates folders if necessary)
            </summary>
            <returns>relative path</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Impl.Generate.Tools.InterruptableProcessRunner.RunProcess(System.String,System.String,JetBrains.Util.FileSystemPath,System.Int32)">
            <summary>
            Runs external process, checks for interrupt and throws OperationCanceledException if interrupted
            </summary>
            <returns>true if process exited</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Impl.PsiModules.WebApp.Modules.SharepointPredefinedFilesModuleBase.InitializeFiles(JetBrains.Util.FileSystemPath,System.String,System.String,JetBrains.DocumentManagers.DocumentManager,JetBrains.ProjectModel.IProjectFileExtensions,JetBrains.ReSharper.Psi.PsiProjectFileTypeCoordinator)">
            <returns>true if loaded from physical folder</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.PsiModules.Website.Properties.IWebsiteAsxxPsiSourceFilePropertiesFactory">
            <summary>
            Psi language-dependent component
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.PsiModules.Website.Properties.IWebsiteCodeBehindPsiSourceFilePropertiesFactory">
            <summary>
            ProjectFile language-dependent component
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.References.TagNameReference">
            <summary>
            Reference should be qualifiable in order that AllNonQualifiableReferenceResolver processes it
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.References.TagPrefixReference">
            <summary>
            Reference should be qualifiable in order that AllNonQualifiableReferenceResolver processes it
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.UniqueIdGenerator">
            <summary>
            UniqueIdGenerator.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Parsing.AspElementFactory.WrapChildrenAndCreateHead(JetBrains.ReSharper.Psi.Html.Tree.IHtmlFile)">
            <summary>
            
            </summary>
            <param name="aspFile"></param>
            <returns>Triple of html, head, body tags</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Settings.MvcCustomReferencesSettingsEx">
            <remarks>Analogue of <see cref="T:JetBrains.ReSharper.Psi.Web.Util.MvcReferencedAssembliesService"/> but taking into account <see cref="T:JetBrains.ReSharper.Psi.Asp.Mvc.IAspMvcZone"/> zone.</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Settings.MvcCustomReferencesSettingsEx.IsApplied(JetBrains.ReSharper.Psi.Web.Util.MvcReferencedAssembliesService,JetBrains.ProjectModel.IProjectItem,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Check if any ASP.NET MVC activity should be done
            </summary>
            <param name="mvcReferencedAssembliesService"></param>
            <param name="projectItem"></param>
            <param name="targetFrameworkId"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Settings.MvcCustomReferencesSettingsEx.IsApplied(JetBrains.ReSharper.Psi.Web.Util.MvcReferencedAssembliesService,JetBrains.ReSharper.Psi.IPsiSourceFile,System.Version@)">
            <summary>
            Check if any ASP.NET MVC activity should be done
            </summary>
            <param name="mvcReferencedAssembliesService"></param>
            <param name="sourceFile"></param>
            <param name="version">Version of referenced MVC assembly</param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Settings.MvcCustomReferencesSettingsEx.IsApplied(JetBrains.ReSharper.Psi.Web.Util.MvcReferencedAssembliesService,JetBrains.ProjectModel.IProjectItem,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId,System.Version@)">
            <summary>
            Check if any ASP.NET MVC activity should be done
            </summary>
            <param name="mvcReferencedAssembliesService"></param>
            <param name="projectItem"></param>
            <param name="targetFrameworkId"></param>
            <param name="version">Version of referenced MVC assembly</param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Tree.AspTagExtensions.IsAffectedByCustomControlBuilder(JetBrains.ReSharper.Psi.Asp.Tree.IAspTag)">
            <summary>
            HACK HACK HACK!!!
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Utils.IComplexTypeParserFactory.CreateParserDelegate(System.Boolean)">
            <summary>
            Returns function that creates parser by: 
              string:        text to parse
              TreeTextRange: tree range of the text being parsed
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Css.CodeStyle.CssCodeFormatter.FormatDeletedNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Format code during WritePSI action
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Css.CodeStyle.CssCodeStyleSettings">
            <summary>
            Used for storing and managing of code style settings
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Css.Definitions.CssValueGroupType.All">
            <summary>
            All of them must occur, in the given order.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Css.Definitions.CssValueGroupType.And">
            <summary>
            All of which must occur, in any order
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Css.Definitions.CssValueGroupType.Any">
            <summary>
             One or more of them must occur, in any order
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Css.Definitions.CssValueGroupType.Or">
            <summary>
            Exactly one of them must occur.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Css.Definitions.CssValueGroupType.Default">
            <summary>
            <see cref="F:JetBrains.ReSharper.Psi.Css.Definitions.CssValueGroupType.All"/> is default value.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Css.Html.CssFromHtmlGeneratedDocumentService.#ctor(JetBrains.ReSharper.Psi.ILanguageManager,JetBrains.ProjectModel.HtmlProjectFileType)">
            <remarks><see cref="T:JetBrains.ReSharper.Psi.ILanguageManager" /> is marker interface, to get dependencies initialized (psi language instances)</remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Css.Impl.CssHacks.IE6To10PropertyValue9Hack">
            <summary>
            Browsers: Internet Explorer 6-10
            Scope: Property Value Hacks
            Description: IE does not ignore properties with value string ending with "\9" (with or without whitespace around)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Css.Asp.CssFromAspGeneratedDocumentService.#ctor(JetBrains.ReSharper.Psi.ILanguageManager,JetBrains.ProjectModel.AspProjectFileType)">
            <remarks><see cref="T:JetBrains.ReSharper.Psi.ILanguageManager" /> is marker interface, to get dependencies initialized (psi language instances)</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Css.CssConstantValuesExtensions.GetConstantValueAndUnits(JetBrains.ReSharper.Psi.Css.Tree.ICssPropertyValueExpression)">
            <summary>
            Returns numeric value and units of literal in case literal represents number
            Value parsed using double.TryParse
            </summary>
            <param name="propertyValueExpression"></param>
            <returns>pair of value and units or null</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Css.Razor.CSharp.CssFromRazorCSharpGeneratedDocumentService.#ctor(JetBrains.ReSharper.Psi.ILanguageManager,JetBrains.ProjectModel.RazorCSharpProjectFileType)">
            <remarks><see cref="T:JetBrains.ReSharper.Psi.ILanguageManager" /> is marker interface, to get dependencies initialized (psi language instances)</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Css.Razor.CssFromRazorGeneratedDocumentService.#ctor(JetBrains.ReSharper.Psi.ILanguageManager,JetBrains.ProjectModel.RazorProjectFileType)">
            <remarks><see cref="T:JetBrains.ReSharper.Psi.ILanguageManager" /> is marker interface, to get dependencies initialized (psi language instances)</remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Css.Services.MinifiedFilesFilter">
            <summary>
            Filter out not documented files (preferes bare .css to .min.css)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.CodeStyle.HtmlCodeFormatter.Format(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile,JetBrains.ReSharper.Psi.CodeStyle.AdditionalFormatterParameters)">
            <summary>
            Format the given range in the tree. The bounding nodes are random, not siblings
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.CodeStyle.HtmlCodeFormatter.FormatInsertedNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean)">
            <summary>
            Format code during WritePSI action
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.CodeStyle.HtmlCodeFormatter.FormatInsertedRange(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.ITreeRange)">
            <summary>
            Format code during WritePSI action
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.CodeStyle.HtmlCodeFormatter.FormatReplacedNode(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Format code during WritePSI action
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.CodeStyle.HtmlCodeFormatter.FormatDeletedNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Format code during WritePSI action
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.CodeStyle.HtmlCodeFormatter.GetMinimalSeparator(JetBrains.ReSharper.Psi.Tree.ITokenNode,JetBrains.ReSharper.Psi.Tree.ITokenNode)">
            <summary>
            Create the necessary separator between two given tokens (for example. space between identifiers)
             If there is no necessity for separator, then return <c>null</c>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.Parsing.HtmlTokenNodeTypes.#ctor">
            <summary>
            Constructor for inheritors - with no init
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Html.Impl.PredefinedControls.HtmlTagInfo.AttributeTypes">
            <summary>
            Tag's attrbute types
            <remarks>Can contains not all attributes</remarks>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.References.HtmlFileReference`2.#ctor(`0,JetBrains.ReSharper.Psi.Resolve.IQualifier,`1,JetBrains.ReSharper.Psi.TreeTextRange,JetBrains.ProjectModel.ProjectFileType,System.Collections.Generic.ICollection{System.String},System.Boolean,System.Boolean)">
            <param name="owner"></param>
            <param name="qualifier"></param>
            <param name="token"></param>
            <param name="rangeWithin"></param>
            <param name="expectedFileType"></param>
            <param name="expectedExtensions">if null - default extensions for project file type</param>
            <param name="noCircular"></param>
            <param name="allowEmptyName"></param>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Html.Impl.References.HtmlPathReferenceBase`2.WebRootCalculationKind">
            <summary>
            Supported web root path
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Html.Impl.References.HtmlReferenceToIdInsidePath.FileQualifier.Resolved">
            <summary>
            False means failed to resolve
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.References.HtmlReferenceToIdInsidePath.GetStaticness">
            <summary>
            Determines whether static members are accessible in this context.
             Staticness should be consistent with qualifier kind of access context.
             All qualifier 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.References.HtmlReferenceWithinElementBase`1.#ctor(`0,JetBrains.ReSharper.Psi.Html.Tree.IHtmlToken)">
            <param name="owner"></param>
            <param name="token">Unquoted token</param>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Html.Impl.Tree.HtmlDocumentRangeTranslator">
            <summary>
            HtmlDocumentRangeTranslator maps tree ranges of IHtmlFile to ranges of html/aspx/razor file and all included files
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.Tree.HtmlFile`1.TrySpecialReparse(JetBrains.ReSharper.Psi.TreeTextRange,System.String)">
            <summary>
            If we are changing child languages (JavaScript, CSS, etc) and we know that for sure
            (for example, change comes out of secondary PSI),
            then we can reparse it without invalidating major nodes, thus allowing cross-language operations and
            improving performance.
            P.S. This method checks that we are inside JavaScript, CSS, etc, but it doesn't check that
            modified text doesn't break JS/CSS/etc "envelope", for example by inserting closing tags (like &lt;/script&gt;).
            So it should be called only when that is not a problem (for example, when change comes out of secondary PSI or is whitespace).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Html.Impl.Tree.HtmlInclude">
            <summary>
            The node, that represents include
            if include file is resolved, the node has no children
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Html.Impl.Tree.HtmlIncludeEnd">
            <summary>
            End of include empty node
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Html.Parsing.HtmlCompoundIncrementalLexer`1">
            <summary>
            Incremental composite lexer for HTML-inherited files (ASPX, Razor).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Html.Parsing.HtmlCompoundLexer`1">
            <summary>
            Composite lexer for HTML-inherited files (ASPX, Razor).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Html.Parsing.HtmlTreeBuilderBase`5">
            <summary>
            HtmlTreeBuilder
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Html.Parsing.IWebTreeBuilder.CanHaveServerSideNodes">
            <summary>
            For optimization in case of HTML which does not have server-side nodes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Html.Parsing.WebTreeBuilder`5">
            <summary>
            WebTreeBuilder
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Parsing.WebTreeBuilder`5.ParseAdditionalConstruct(JetBrains.ReSharper.Psi.Html.Parsing.HtmlTokenNodeType{`3}@,JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement@)">
            <summary>
            
            </summary>
            <param name="tokenType"></param>
            <param name="compositeElement">Current tree parent, can be changed.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Parsing.WebTreeBuilder`5.AppendParsedTag(JetBrains.ReSharper.Psi.Html.Impl.Tree.HtmlTag,JetBrains.ReSharper.Psi.Html.Impl.Tree.HtmlTagHeader,JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement,JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement)">
            <summary>
            Adds just parsed tag to the tree and returns composite element used and current for further parsing
            </summary>
            <param name="tag">Parsed tag</param>
            <param name="originalParent">Default parent tag for just parsed one</param>
            <param name="compositeElement">Element being current for parsing (for spaces etc.)</param>
            <param name="tagHeader"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Html.Parsing.WebTreeBuilder`5.HandlingTokens">
            <summary>
            Token types, those are handled by tree builder
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Utils.HtmlAttributeContainerUtil.AddAttributeBefore``3(``0,``1,JetBrains.ReSharper.Psi.Tree.ITreeNode,``2)">
            <summary>
            Adds attribute before the anchor. If anchor == null, the attribute is inserted after the last attribute
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Utils.HtmlAttributeContainerUtil.AddAttributeAfter``3(``0,``1,JetBrains.ReSharper.Psi.Tree.ITreeNode,``2)">
            <summary>
            Adds attribute after the anchor. If anchor == null, the attribute is inserted before the first attribute
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Utils.HtmlPathReferenceUtil.ExpandRootName(System.String,JetBrains.ProjectModel.IProject,JetBrains.ReSharper.Psi.Web.Util.WebRootCalculationKind)">
            <summary>
            Expand root symbol in path (~) to real path in project
            </summary>
            <param name="path">Original path with ~</param>
            <param name="project">Project to calculate root</param>
            <param name="rootCalculationKind">Treat ~ path for client-side</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Utils.HtmlTagContainerUtil.AddTagAfter``1(JetBrains.ReSharper.Psi.Html.Tree.IHtmlTagContainer,``0,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Adds tag after ther anchor. If anchor == null, the tag is inserted before the first tag
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Html.Html.IHtmlEnumAttributeValueType.Strict">
            <summary>Additional values mode</summary>
            <remarks>False, if additional attributes are allowed, not listed in attribute's definition</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Tree.IHtmlTagContainer.AddTagBefore``1(``0,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Adds tag before then anchor. If anchor == null, the tag is inserted after the last tag
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Tree.IHtmlTagContainer.AddTagAfter``1(``0,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Adds tag after ther anchor. If anchor == null, the tag is inserted before the first tag
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.CodeStyle.SettingsUpgrade.JavaScriptCodeStyleSettings">
            <summary>
            Used for storing and managing of code style settings
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.CodeStyle.JavaScriptCodeFormatterBase.FormatDeletedNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Format code during WritePSI action
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsMemberElement">
            <summary>
            Any element that could be inside module/class/interface, local or exported, private or public
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsMemberElement.GetParentElement">
            <summary>
            Can be null if parent type is object literal, global module or for local classes/interfaces/modules
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsStaticTypedProperty">
            <summary>
            Type member that can used in structural search - any type member and TS literal property
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsTypeMember">
            <summary>
            Class/interface member - public or private
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsConstructor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsModuleMember">
            <summary>
            Module member
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsLocalModuleMember">
            <summary>
            Local (not exported) module members, except types
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsExportedModuleMember">
            <summary>
            Exported module members, except types
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsExtendableTypeElement.GetExtendedBaseElements(System.Boolean,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>Returns elements under 'extended' clause</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsExtendableTypeElement.GetAllBaseElements(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Returns elements under all hierarchy clauses - under 'extends' for interfaces, under 'extends' and 'implements' for classes. 
            Only immediate bases is returned. Use <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.HierarchyUtil"/> for full hierarchy.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsModuleElement.HasUsableName">
            <summary>
            Returns true if module name can be used in code. False will be returned if a module isn't declared by user and corresponding to a ts-file.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.IJavaScriptLocalElement.GetOwnerScopeOffset(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsDocumentOffsetProvider)">
            <summary>
            Position of the beginning of the owner scope in the document.
            It should be valid and != -1 even in case of doc comment parameter.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.IJavaScriptLocalElement.GetOwnerScope">
            <summary>
            Can be null in case of parameter from doc comment signature
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.IJavaScriptArgumentsVariable">
            <summary>
            Local 'arguments' variable
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.ContractAnnotations.Parser.FunctionAnnotationParser.ParseValueExpression">
            <summary>
            </summary>
            <remarks>
            Grammar for ValueExpression(expr):
            
            expr :: term ('|' term)*
            term :: factor ('&amp;' factor)*
            factor :: '(' expr ')'
            factor :: !factor
            factor :: VALUE
            </remarks>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.ContractAnnotations.PreparedAnnotation.WriteArrayElements(JetBrains.Util.PersistentMap.UnsafeWriter,JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.Values.JsVariableStateExtended[])">
            <summary>
            Note: doesn't write array length.
            </summary>    
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.DependentAnalysis.JsMemoryHiveExt.FilterHive(JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.DependentAnalysis.JsMemoryHive,System.Predicate{JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.DependentAnalysis.JsMemorySnapshot})">
            <summary>
            
            </summary>
            <param name="hive"></param>
            <param name="filterPredicate"></param>
            <remarks>filterPredicate should not modify snapshot, passed to it!</remarks>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.Rules.TableBinaryOpRules.InitTable">
            <summary>
            Should initialize a table used for futher calculations. Please note that this method is being called
            from constructor and, hence, should not assume Derived class will be initialized before its' call.
            </summary>    
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.Rules.TableUnaryOpRules.InitTable">
            <summary>
            Should initialize a table used for futher calculations. Please note that this method is being called
            from constructor and, hence, should not assume Derived class will be initialized upon its' call.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.ValueAnalysisPreprocessingData.DataBuilder.BuildData">
            <summary>
            Returns built ValueAnalysisPreproccessingData. Invalidates builder.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.TypeScript.TsProxyTypeBase`1">
            <summary>
            When we have a type params invocation for type with several possible signatures, we cannot immediately match
            type paramaters with type arguments to create an instantiation, so we store it in this class
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.TypeScript.TsResolveImplUtil.GetParameterType(JetBrains.ReSharper.Psi.JavaScript.Resolve.JsParameterInfo[],System.Int32,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature,JetBrains.ReSharper.Psi.JavaScript.Resolve.StrongTypeMode,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeResolveResult)">
            <summary>
            Returns Error if index is out of range when there are no rest params, or rest param is not Array type or has wrong instantiation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.TypeScript.TsResolveImplUtil.GetFormalParameterType(JetBrains.ReSharper.Psi.JavaScript.Resolve.JsParameterInfo[],System.Int32,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature,JetBrains.ReSharper.Psi.JavaScript.Resolve.StrongTypeMode,System.Boolean,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeResolveResult)">
            <summary>
            Doesn't check for rest params, only checks range
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.TypeScript.TsSignatureSearcher.Run(JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.TypeScript.TsPrimitiveWithTypeParams}@)">
            <summary>
            If myStopAfterFirstTypeWithSignatures, returns if signatures were found in the first (our) type. False means that they were found in base types.
            Otherwise returns true
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.CaseSensitiveMultipleFilterSymbolTable">
            TODO: Remove. Created just to fix 
            TODO: http://youtrack.jetbrains.com/issue/RSRP-396750RSRP-396750 
            TODO: Intellisense shouldn't replace class name by variable name, but should provide both of them instead 
            <summary>
            Case sensitive filtering!
            Filters symbol table with multiple filters
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext.FindCalculationIdentifier(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.ICalculationIdentifier)">
            <summary>
            Returns calculation depth of given identifier or -1 if identifier is not found in current calculation stack
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsRootResolveContextForCalculations">
            <summary>
            First child context stores non-thread-safe cache with temporary values
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveLoggerWithTextWriter">
            <summary>
            For tests and internal logging features
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Util.JavaScriptDeclaredElementFunctionUtil.ElementIsNewable(JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.IJavaScriptTypeOwner,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Returns true if element is a class element or if its type has construct signatures
            </summary>
            <param name="element"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Impl.Util.JavaScriptPsiImplUtil.ourWellKnownSymbols">
            <summary>
            ECMAScript 6 well-known symbols
            (https://people.mozilla.org/~jorendorff/es6-draft.html#sec-well-known-symbols)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Util.JavaScriptPsiImplUtil.GetAllDeclarationsInStatements``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns *all* declarations in statements, including block-local items in nested blocks
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Util.JavaScriptPsiImplUtil.GetDeclarationsInStatements``1(JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable{``0})">
            <summary>
            Returns declarations in statements, excluding block-local items in nested blocks
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Util.JavaScriptPsiImplUtil.IsGlobalScopeGetterHeuristics(JetBrains.ReSharper.Psi.JavaScript.Tree.IInvocationExpression)">
            <summary>
            Detection of heuristics of type (0, eval)('this') or (42 || eval)('this')
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.LruDictionary`2">
            <summary>  
            On new element addition evicts the least recently used element if full. Not thread-safe.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Framework.jQuery.JQueryNotDocumentedFilesFilter">
            <summary>
            Filter out not documented files (preferes -vsdoc.js to bare .js and .min.js)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Framework.MicrosoftAjax.NotDebugFilesFilter">
            <summary>
            Filter out not debugging files (preferes .debug.js to bare .js)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.SymbolFilters.BetterSourceFilesFilter">
            <summary>
            Filters out elements that don't have doc comments (when there are elements with doc comments)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.SymbolFilters.DocCommentsOwnerFilter">
            <summary>
            Filters out elements that don't have doc comments (when there are elements with doc comments)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLanguageServiceBase`1.CodeFormatter">
            <summary>
            Get the code formatter
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Naming.TypeScript.TsNamingLanguageService.GetConflictedElements(System.String,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind)">
            <summary>
            Finds all conflicting by specified name declarations in specified context with specified kind of scope.    
            </summary>
            <param name="name"> checking name </param>
            <param name="context">    
            Expected contexts in common scope:
              1) class/interface/objectType/objectLiteral/enum member - search among owner's members
              2) context is not last overload signature's or call signature's or index signature's child - search among this overload's params
              3) otherwise - search among all enclosing scopes and all nested scopes
            
            Expected context in type and namespace scope(symbol's namespace and type's namespace):
              1) any node - search among all enclosing scopes and all nested scopes
            </param>
            <param name="kind">
            common scope - namespace which includes names of symbols only
            type and namespace scope - namespace which includes names of symbols, types, modules
            local self scoped - unsupported
            </param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Naming.JavaScriptNamingLanguageService.GetConflictedElements(System.String,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind)">
            <summary>
            Finds all conflicting by specified name declarations in specified context with specified kind of scope.    
            </summary>       
            <param name="context">    
            Expected contexts in common scope:
              1) objectLiteral member - search among owner's members    
              2) otherwise - search among all enclosing scopes and all nested scopes
            </param>
            <param name="kind">
            common scope - namespace which includes names of symbols
            type and namespace scope - unsupported
            local self scoped - unsupported
            </param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Naming.JavaScriptNamingUtil.IsValidJsPropertyName(System.String)">
            <summary>
            True if valid identifier or has quotes
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.Angular2.Angular2DeclarationsUtil.FetchSingleDescriptionInfo(System.Collections.Generic.ICollection{JetBrains.ReSharper.Psi.JavaScript.Resolve.Angular2.IAngular2DeclarationInfo})">
            <summary>
            WARNING: POTENTIALLY VERY SLOW
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ITsType.GetIndexSignatureType(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.IndexerKind,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeResolveInfo)">
            <summary>
            Returns result type for index signature. If there is no index signature of the given type, returns struct with ResolvedType == null.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TsResolveUtil.GetNumericIndexFromPropertyName(System.String)">
            <summary>
            Returns -1 if not
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TypeRelationsUtil.UnionOrIntersectionAssignabilityOrSubtypingComparison(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeResolveInfo,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeResolveInfo,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonKind,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext)">
            <summary>
            Example relations table for subtyping (the same for assignability). "U" means "union", "I" means "intersection", "C" means "constituent"
               "all" means "for all", "exists" means "exists any", "sub" means "is subtype of"
             |  Source                  |  Target                 |
             ------------------------------------------------------
             | U ->    all C: C sub T   | U -> exists C: S sub C  |
             ------------------------------------------------------
             | I -> exists C: C sub T   | I ->    all C: S subt C |
             ------------------------------------------------------
            Logic is combined for case pairs source-U/target-I and source-I/target-U.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TypeRelationsUtil.CompareTypes(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonKind,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext)">
            <summary>
            Compares two TS types for identity, subtyping or assignability
            </summary>
            <param name="context">Resolve context</param>
            <param name="type1">Source type</param>
            <param name="type2">Target type</param>
            <param name="comparisonKind">Identity, subtyping or assignability</param>
            <param name="comparisonContext">If null, creates empty context without preserving errors. If provided, uses provided options.</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TypeRelationsUtil.CompareTypes(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeResolveResult,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeResolveResult,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonKind,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext)">
            <summary>
            Compares two TS types for identity, subtyping or assignability
            </summary>
            <param name="context">Resolve context</param>
            <param name="type1">Source type</param>
            <param name="type2">Target type</param>
            <param name="comparisonKind">Identity, subtyping or assignability</param>
            <param name="comparisonContext">If null, creates empty context without preserving errors. If provided, uses provided options.</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TypeRelationsUtil.CompareSignatures(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonKind,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext)">
            <summary>
            Compares two TS signatures for identity, subtyping or assignability
            </summary>
            <param name="context">Resolve context</param>
            <param name="signature1">Source signature</param>
            <param name="signature2">Target signature</param>
            <param name="comparisonKind">Identity, subtyping or assignability</param>
            <param name="comparisonContext">If null, creates empty context without preserving errors. If provided, uses provided options.</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TypeRelationsUtil.CompareSignatureSets(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,System.Collections.Generic.IList{JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature},System.Collections.Generic.IList{JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature},JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonKind,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext)">
            <summary>
            Compares two TS signature sets for identity, subtyping or assignability
            </summary>
            <param name="context">Resolve context</param>
            <param name="targetSignatures">Target signatures</param>
            <param name="sourceSignatures">Source signatures</param>
            <param name="comparisonKind">Identity, subtyping or assignability</param>
            <param name="comparisonContext">If null, creates empty context without preserving errors. If provided, uses provided options.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TypeRelationsUtil.IsNumberLikeType(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            number-with-value/number/enum
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TypeRelationsUtil.IsObjectInstance(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType)">
            <summary>
            Returns if type is an Object
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TypeRelationsUtil.IsEmptyObjectLiteral(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Returns if type is an empty object ({})
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TypeRelationsUtil.IsObjectType(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType)">
            <summary>
            Returns if type is an object type according to TS spec
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext">
            <summary>
            Context for type comparison operations
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.SkipExplicitDerivedCheck">
            <summary>
            By default, subtyping check uses a short-cut: if a type is derived, just returns true.
            Set this flag to not use this short-cut
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.SkipSignatureReturnCheck">
            <summary>
            Set this flag to compare signatures without taking their return types into account
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.SkipExcessPropertiesCheck">
            <summary>
            Set this flag to force skipping excess properties check
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.FuzzySignatureMatching">
            <summary>
            Set this flag to compare signatures with matching optional and rest parameters against required
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.SubTypingForOverloadsSort">
            <summary>
            This flag is only for use within TopoSignatureComparer
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.HasMissingMembers">
            <summary>
            If there are missing members, this flag will be set to true
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.RequestFullInfo">
            <summary>
            By default, check will interrupt at the first error
            Set this flag to go deeper
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.Silent">
            <summary>
            Set this flag to not save errors if you don't need them - preserves memory and improves performance
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.ExtraMembers">
            <summary>
            If there are extra members, and this is not null, save them here
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.MissingMembers">
            <summary>
            If there are missing members, and this is not null, save them here
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.IdenticalSignatureReturns">
            <summary>
            If this is a signature comparison, and signatures are identical, and this is not null, save return types for signatures
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.ResolveInfo">
            <summary>
            Merged status of types resolved during comparison
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.AddResult(JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.IComparisonResult,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Add comparison error result
            </summary>
            <param name="result">Result</param>
            <param name="resolveContext">Resolve context (if null, no logging)</param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.GetMainResult">
            <summary>
            Get the top-level comparison error result
            </summary>
            <returns>Main comparison error</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.PurgeResults">
            <summary>
            Drops all the results, leading to clean "no error" state
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.GetSingleDeepResult">
            <summary>
            Returns full hierarchy for errors if there is only single error chain
            Otherwise, returns null
            </summary>
            <returns>Full error hierarchy (0 is top-level, further is deeper) or null</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.HasErrorInfo">
            <summary>
            Returns true if there exist any error messages (so that string error should be available)
            </summary>
            <returns>Error messages exist or not</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.GetErrorText">
            <summary>
            Creates error message text for all the errors at all levels
            Levels are specified by indenting from the left
            </summary>
            <returns>Text</returns>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.myDepth">
            <summary>
            Current context depth
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.IsInitialCheck">
            <summary>
            Use this to ensure that the check is initial for original types, and is not a nested level check
            </summary>
            <returns>Whether the check is initial</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.IsSecondaryCheck">
            <summary>
            Use this to ensure that the check is the first nested after the initial for original types, and is not a nested level check
            </summary>
            <returns>Whether the check is initial</returns>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.mySilentByDepth">
            <summary>
            If context depth exceeds some reasonable level, switch to silent mode to not store 100500 error messages
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.PushDepth">
            <summary>
            Make deeper
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.PopDepth">
            <summary>
            Make shallower
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.JsFunctionSignatureTopoComparer">
            <summary>
            Use to sort overloads in order in which more specific signature is the first.
            <see cref="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.JsFunctionSignatureTopoComparer.Compare(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature)"/> for <see cref="M:JetBrains.Util.SortUtil.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Nullable{System.Int32}},System.Collections.Generic.IEqualityComparer{``0})"/>.   
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resolve.FrameworkIntegrators.IJsResolvePolicy">
            <summary>
            Adds specialized resolve actions for <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resolve.CustomFunctionAnnotation"/>s.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.FrameworkIntegrators.IJsResolvePolicy.DefaultExtension">
            <summary>
            Default extension that is trimmed from provided IntelliSense items.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.FrameworkIntegrators.IJsResolvePolicy.AllowedExtensions">
            <summary>
            Used to filter provided IntelliSense items.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.FrameworkIntegrators.IJsResolvePolicy.CreateBaseQualifier(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Creates the <see cref="T:JetBrains.ReSharper.Psi.Resolve.IQualifier"/> for the first <see cref="T:JetBrains.ReSharper.Psi.Web.References.JavaScriptFolderReference`2"/> created.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.FrameworkIntegrators.IJsResolvePolicy.PostResolve(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo)">
            <summary>
            Used to modify the <see cref="T:JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo"/> after retrieved from <see cref="T:JetBrains.ReSharper.Psi.Web.References.JavaScriptFileReference`2"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.FrameworkIntegrators.IJsResolvePolicy.GetModuleType(JetBrains.ReSharper.Psi.IPsiSourceFile,System.String,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Creates a <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeResolveResult"/> for the specified <paramref name="moduleName"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.FrameworkIntegrators.IJsResolvePolicy.GetSymbolTable(JetBrains.ReSharper.Psi.IPsiServices,JetBrains.ReSharper.Psi.Resolve.SymbolTableMode,JetBrains.Util.FileSystemPath,System.Boolean,JetBrains.ReSharper.Psi.Resolve.IPathReference)">
            <summary>
            Creates the <see cref="T:JetBrains.ReSharper.Psi.Resolve.ISymbolTable"/> for a given <paramref name="path"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.FrameworkIntegrators.IJsResolvePolicy.GetPossiblePaths(System.String,JetBrains.Util.FileSystemPath)">
            <summary>
            Based on the <param name="moduleName" /> and <param name="currentDirectory" />, returns all possible paths for including files.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resolve.FrameworkIntegrators.ISpecificJsFrameworkIntegrator">
            <summary>
            Acts as an interface for integrating JavaScript frameworks.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.FrameworkIntegrators.ISpecificJsFrameworkIntegrator.IsApplicable(JetBrains.ProjectModel.IProject,JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptFile)">
            <summary>
            Returns whether the integrator is applicable or not.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.FrameworkIntegrators.ISpecificJsFrameworkIntegrator.IsExternalModule(JetBrains.ProjectModel.IProject,JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptFile)">
            <summary>
            Affects whether a <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptFile"/> is treated as external module.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.FrameworkIntegrators.ISpecificJsFrameworkIntegrator.GetAdditionalDeclaredElementNames(System.Boolean)">
            <summary>
            Additional declared element names used for completion.
            </summary>
            <param name="strongTyped"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.FrameworkIntegrators.ISpecificJsFrameworkIntegrator.GetGlobalDirectives(JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptFile,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJavaScriptCacheBuilderContext)">
            <summary>
            Returns global directives which are converted into <code>JsRuleType.Assignment</code> rules with <code>JsTypingType.Dynamic</code>
            with the first item as <code>keyType</code> and the second as <code>type</code> object.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.FrameworkIntegrators.ISpecificJsFrameworkIntegrator.DependentFileInvocationReferenceNames">
            <summary>
            Returns all possible name for invocations that reference dependent files (e.g., "require")
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsCustomReferenceResolver.ResolveReference(JetBrains.ReSharper.Psi.Resolve.IReference,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Resolve.ISymbolTable,JetBrains.ReSharper.Psi.JavaScript.Services.JavaScriptServices,JetBrains.ReSharper.Psi.IPsiSourceFile,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,System.Boolean,System.Boolean)">
            <summary>
            When returns null, the result is ignored, and the processing is passed further
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resolve.CustomAnnotationProviders.ISpecificJsCustomAnnotationProvider">
            <summary>
            Retrieves custom annotations for <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Tree.IInvocationLikeExpression"/>s.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypingType.Dynamic">
            <summary>Only use this rule when doing dynamic type resolve</summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypingType.ImplicitTyping">
            <summary>Implicit could only be used after checking that there is explicit. Example: var a = expr;</summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypingType.ExplicitTyping">
            <summary>Example: var a: type;</summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypingType.ConditionalAlias">
            <summary>Can only use property after checking that associated type resolves</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature.DocSignature">
            <summary>
            Associated Doc comment signature.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature.SourceFile">
            <summary>
            Source file where signature owner is declared. Used for presentation.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsInvocationInfo.InvocationType">
            <summary>
            Return, element or constructed
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeDescriptionOpInfo.Name">
            <summary>
            For symbols, types, scopes
            <see cref="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitiveKindExtensions.HasName(JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitiveKind)"/> for full info
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeDescriptionOpInfo.Object">
            <summary>
            <see cref="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitiveKindExtensions.HasObject(JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitiveKind)"/> for full info
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeDescriptionOpInfo.ParameterIndex">
            <summary>
            For return types (invocations) and parameters
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeDescriptionOpInfo.TypeList">
            <summary>
            For storing parameter types in invocations, constructions, element types, combined types, etc.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeDescriptionOpInfo.Offset">
            <summary>
            For local types (symbols, obj or func literals, etc)
            Also used for primitives to store ID - should be remade
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType.FindSignatures(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsSignatureKind,JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature}@)">
            <summary>
            Don't use this method directly, use extension method GetSignatures instead
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsTypeComparer`1.Loose">
            <summary>
            Don't account for AllowIdentityLoss
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsTypeComparer`1.StrongTyped">
            <summary>
            Treat all dynamic types as equals
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsTypeComparer`1.IgnoreSubstitution">
            <summary>
            Ignore substitution while comparing
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType.BuiltinTypeID">
            <summary>
            Return 0 if not a built-in type
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType.ToSinglePrimitiveForm(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsDocumentOffsetProvider,System.Boolean)">
            <summary>
            Would return primitive with PrimitiveType.Unknown if empty or complex
            </summary>
            <param name="context"></param>
            <param name="leaveInvocationsIntact"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetReturnType(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType,System.Int32,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsUnresolvedTypeArray)">
            <summary>
            When type is a function returns type of the function return value
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetTypePredicateType(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsUnresolvedTypeArray,System.Int32)">
            <summary>
            When type is a type predicate (user-defined type guard) on an invocation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetConstructedType(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsUnresolvedTypeArray,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitiveKind)">
            <summary>
            If type is an object constructor returns type of the constructed object
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetConstructedTypeWithTypeParams(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsUnresolvedTypeArray)">
            <summary>
            If type is an object constructor returns type of the constructed object with type params
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetElementType(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType)">
            <summary>
            If type is instance of Array returns type of element of array
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetProperties(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,System.Boolean,JetBrains.ReSharper.Psi.IPsiSourceFile,System.Int32,System.Boolean,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeResolveInfo,JetBrains.ReSharper.Psi.JavaScript.Resolve.FindBaseTypePropertiesMode)">
            <summary>
            Properties of this object...
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetTsProperties(JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ITsType,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.FindBaseTypePropertiesMode)">
            <summary>
            Properties of this object...
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetSignatures(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsSignatureKind)">
            <summary>
            Returns signatures of all possible overloads
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.IsStandardJsType(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,System.String)">
            <summary>
            If fullType is standart type returns true, otherwise false
            TODO: remake everything
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.IsJsFunction(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            If fullType is function type returns true, otherwise false
            TODO: remake everything
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsDynamicCompositeType.HasSignatures(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Returns it this symbol can be used as a function (this check is much faster then Signatures.Any())
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsParameterInfo.Name">
            <summary>
            In case of ES 6.0 destructuring parameters, like function ({p1, p2}),
            one positional parameter could encompass several named parameters.
            In this case name for positional parameter is null.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsParameterInfo.JsAnnotatedType">
            <summary>
            Raw unresolved type as supplied by a user. Don't use unless sure. Use GetResolvedType instead.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Services.Json.IJsonSchemaManager.GetSchemaUriForFileFast(JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptFile)">
            <summary>
            Fast but *unreliable* way to get schema url
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Services.IJavaScriptDependencyManager.GetTransitiveDependenciesSorted(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            WARNING: performance impact
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Services.MinifiedFilesFilter">
            <summary>
            Filter out not documented files (preferes bare .js to .min.js)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.ITsModuleDeclaration.PresentableFullName">
            <summary>
            Full name of a module or external module name; 
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.ITsModuleDeclarationName.PresentableFullName">
            <summary>
            Full name of a module or external module name;
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.TsModifiersOwnerExtensions.IsAmbient(JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.ITypeScriptModifiersOwner)">
            <summary>
            Declaration or it's owner module has 'declare' modifier.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.TsParametersOwnerClassification.Declaration">
            <summary>
            Ambient declarations, overloads.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.TsParametersOwnerClassification.Implementation">
            <summary>
            Implementation declarations.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.IArrayLikePattern`1.GetAllArgumentsWithGaps(System.Boolean)">
            <summary>
            All pattern arguments, including "holes" between commas represented by "null"
            </summary>
            <param name="includeElided">Include elided elements (gaps-only sequence at the end of pattern which has no semantic sense) into the list</param>
            <returns>List of nodes and nulls for gaps</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptCommentNode.JsDocPsi">
            <summary>
            Full JsDoc PSI, bind to a document
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptCommentNode.CachedJsDocParsed">
            <summary>
            Lightweight in-memory JsDoc tree without a document
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptDeclaredElementProvider">
            <summary>
            Tree nodes that provide names to the parent scope, such as variables, function statement,
            TS modules, classes and interfaces
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptDirectiveOwner.GetDirectives">
            <summary>
            Returns all directives from this node
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptDirectiveOwner.HasUseStrictDirective">
            <summary>
            Indcates that this node has 'use strict' directive
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptDirectiveOwner.ThisOrParentHasUseStrictDirective">
            <summary>
            Indicates that this node or some of parents has 'use strict'
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptDirectiveOwner.GetStatementsOwner">
            <summary>
            Returns statements owner to add or remove directives
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.JavaScriptStatementExtensions.ReplaceBy``1(JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptStatement,``0)">
            <summary>
            Replace this statement in the tree by the copy of the given statement
            </summary>
            <param name="stmt"></param>
            <returns>The clone of the original statement which was added into the tree </returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Tree.IBlockScope">
            <summary>
            Parent for local elements which has block. Could be function, lambda or module.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Tree.IJsModuleScope.IsGlobal">
            <summary>
            Module is file without exports and imports (part of global module)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Tree.IJsModuleScope.IsExternal">
            <summary>
            Module is declared as: declare module "ExternalName" {} or is file with exports and imports
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.JavaScriptExpressionExtentions.GetExpressionToReplace(JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptExpression)">
            <summary>
            Calculates outer expression which can be redundant parentheses wrapper of <paramref name="expression"/>
            </summary>
            <param name="expression"></param>
            <returns>Wrapper if found, or <paramref name="expression"/> itself otherwise</returns>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Tree.JsModifiers.Export">
            <summary>
            Modifier for export declarations in modules.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Tree.JsModifiers.Declare">
            <summary>
            Ambient declaration in module modifier.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Tree.JsModifiers.Default">
            <summary>
            ECMAScript 6 'export default' thing
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.HierarchyUtil.GetBaseTypesWithLevelsRecursively(JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsExtendableTypeElement,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Returns pairs of base types with level
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.HierarchyUtil.GetBaseTypesWithInstantiationsRecursively(JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsExtendableTypeElement,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Returns pairs of base types with instantiations
            </summary>
            <param name="typeElement"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.TsBindUtil.ModuleImportExists(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.ITsStatementsOwner)">
            <summary>
            Checks whether <paramref name="owner"/> already have module import with module path <paramref name="modulePath"/>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.TsBindUtil.CreateReplacementReference(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.JavaScript.Impl.Services.TypeScript.TsElementFactory,System.String)">
            <summary>
            We shouldn't break the tree, so we replace original references only by corresponding types of references
            </summary>
            <param name="reference">Original reference</param>
            <param name="factory">Factory</param>
            <param name="format">Format string for replacement</param>
            <returns>Created replacement</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.TsTreeUtil.GetPossibleIdentifierExpression(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Gets possible identifier for an expression, if failed - returns expression itself
            Please don't use this for decorators - they are processed specially here
            </summary>
            <param name="decl">expression</param>
            <returns>identifier or original when failed</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.TsTypeUtil.IsFromTheSameInheritanceHierarchyWith(JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsExtendableTypeElement,JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsExtendableTypeElement,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Checks whether both items are from the same hierarchy
            (i.e., el1 extends/implements el2, or el2 extends/implements el1)
            </summary>
            <param name="el1">The first item</param>
            <param name="el2">The second item</param>
            <param name="jsResolveContext">Resolve context</param>
            <returns>Items are from the same hierarchy</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.TsTypeUtil.GetTypeDefaultValue(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Provides default values for common types
            (to use as placeholders in e.g. generate)
            </summary>
            <param name="type"></param>
            <param name="context"></param>
            <param name="contextNode"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.TsTypeUtil.IsDefinedInContextOfNode(JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsModuleMember,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,System.String@,System.String@)">
            <summary>
            Checks whether specified element is defined in context of specified node.
            Calculates qualifier and new name if needed (for example, if we locally have an alias for that element, name will differ actually)
            </summary>
            <param name="de">Declared element to check</param>
            <param name="contextNode">Context in which to check</param>
            <param name="context">Resolve context</param>
            <param name="qualifier">Qualifier for our element in our context</param>
            <param name="newName">New name for out element in our context (e.g., if it was aliased)</param>
            <returns>Whether it's possible to reference specified element in specified tree context</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Util.ComputeConstantValueUtilStatics">
            <summary>
            Note: don't use this unless you can't inject or get IJsConstantValueService easily
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.JsDoc.JsDocCommentNodeOwnerUtil.FindFirstSameNamedDeclarationFor``1(``0)">
            <summary>
            Returns first declaration for given member. Used e.g. to get the first function member overload in interface declaration.
            <code>
            interface A {
              /** 
               * doc
               */
              get(x : Number);
              get(x : String);
              get(x : Boolean);
            }
            </code>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="declaration"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.JsDoc.JsDocCommentNodeOwnerUtil.FindFirstDeclarationFor``1(``0,System.Predicate{``0})">
            <summary>
            Works like <see cref="M:JetBrains.ReSharper.Psi.JavaScript.Util.JsDoc.JsDocCommentNodeOwnerUtil.FindFirstSameNamedDeclarationFor``1(``0)"/> but operates on nameless members (call and construct signatures)
            <code>
            interface A {
              /** 
               * doc
               */
              (x : Number);
              (x : String);
              (x : Boolean);
            }
            </code>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="declaration"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.JavaScriptExpressionUtil.GetValueNodeForAssignmentPattern(JetBrains.ReSharper.Psi.JavaScript.Tree.ISingleNameAssignmentPattern)">
            <summary>
            Gets value node from source corresponding to assignment element at left
            </summary>
            <param name="assignmentPattern">AssignmentPattern</param>
            <returns>Value node, or null if nothing found</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.JavaScriptExpressionUtil.GetValueNodeForBinding(JetBrains.ReSharper.Psi.JavaScript.Tree.ISingleNameBinding)">
            <summary>
            Gets value node from initializer corresponding to binding element at left
            </summary>
            <param name="binding">Binding</param>
            <returns>Value node, or null if nothing found</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.JavaScriptExpressionUtil.GetValueNodeForPattern``2(JetBrains.ReSharper.Psi.JavaScript.Tree.ISingleItemPattern,JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptExpression)">
            <summary>
            Gets value node from an initializer/default value which corresponds to the specified binding/assignment pattern node
            </summary>
            <param name="singleItemPattern">Target binding / assignment pattern</param>
            <param name="valueExpression">Initializer or default value</param>
            <returns>Value node, or null if nothing found</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.JavaScriptExpressionUtil.GetValueNodeForPattern``2(JetBrains.ReSharper.Psi.JavaScript.Tree.ISingleItemPattern,JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptExpression,JetBrains.ReSharper.Psi.JavaScript.Tree.IDestructuringPattern)">
            <summary>
            Gets value node from an initializer/default value which corresponds to the specified binding/assignment pattern node
            </summary>
            <param name="singleItemPattern">Target binding / assignment pattern</param>
            <param name="valueExpression">Initializer or default value</param>
            <param name="fullPattern">Full pattern containing target binding</param>
            <returns>Value node, or null if nothing found</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.JavaScriptReferenceUtil.TryResolveSmart(JetBrains.ReSharper.Psi.Resolve.IReference)">
            <summary>
            If reference is JS ReferenceExpressionReference resolves it via FullJavaScriptType
            </summary>
            <param name="reference">reference to resolve</param>
            <returns>resolve result</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Parsing.JavaScriptTreeBuilder.ParseOtherStatementAfterDotAndNewline">
            <summary>
            Checks whether we need to treat the expression on new line after dot as a new expression
            instead of previous expression countinuation, e.g. "myVar.\r\nfor()" should be treated as function
            but "myVar.\r\nfor(;;)" should be treated as for-loop at the new line
            </summary>
            <returns>Whether we should treat newline statement as a different statement</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptSymbol">
            <summary>
            Customization point for javascript properties
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptSymbol.SourceFile">
            <summary>
            Owner PSI source file
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptSymbol.NavigationOffset">
            <summary>
            Offset where name of symbol is specified
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptSymbol.IsExplicit">
            <summary>
            Returns true for intentionally declared symbols (like var, {sss:} not just e = ???)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptSymbol.IsPrimaryFileSymbol">
            <summary>
            Symbol was declared/used in a global java script file (not in HTML)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptSymbol.IsFrameworkDeclaration">
            <summary>
            Symbol belongs to framework
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptTypeCache.FindAllPropertyRules(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Caches.IJsRuleConsumer,JetBrains.ReSharper.Psi.IPsiSourceFile,System.Boolean)">
            <summary>
            Returns property rules for file
            </summary>
            <param name="context"></param>
            <param name="consumer"></param>
            <param name="file"></param>
            <param name="filterOutNonJs"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptTypeCache.FindAllPropertyRules(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Caches.IJsRuleConsumer,System.Boolean)">
            <summary>
            Works slow because iterates over whole cache. Use overload with IPsiSourceFile when possible,
            or, to obtain all dynamic properties use <see cref="M:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptTypeCache.GetAllDeclarationsSymbolTable(JetBrains.ReSharper.Psi.IPsiSourceFile)"/> or <see cref="M:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptTypeCache.GetAllMeaningPropertyNames"/>
            </summary>
            <param name="context"></param>
            <param name="consumer"></param>
            <param name="filterOutNonJs"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptTypeCache.CheckIfRuleCouldExist(JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitive,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitive,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolveContext,System.Boolean)">
            <summary>
            Checks only via hash code, so false positives are possible
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptTypeCache.FindRulesWithParent(JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitive,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitive,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Caches.IJsRuleConsumer,System.Boolean)">
            <summary>
            Filters only by hash code, so could give consumer more rules than needed, please check for equality in Consume
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Caches.JsFilteringElementList">
            <summary>
            JsResolveImplUtil.ShouldAddElementToDeclaredElementList casts to the base collection class to perfrom optimal enumerating 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Html.GeneratedDocuments.JavaScriptGeneratedLanguageService.#ctor(JetBrains.ReSharper.Psi.ILanguageManager)">
            <remarks><see cref="T:JetBrains.ReSharper.Psi.ILanguageManager" /> is marker interface, to get dependencies initialized (psi language instances)</remarks>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Html.GeneratedDocuments.JavaScriptInWebLexer.myAlienTokenPositions">
            <summary>
            List of (x,y):
            where x - location in the projected buffer
                  y - range in the original buffer
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.CSharp.Impl.Regenerator.CodeToRegenerate">
            <summary>
            C# statement, either escapable with @ (like @if) or with @{...}
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.CSharp.Impl.Regenerator.HtmlOutputToRegenerate">
            <summary>
            Either HTML or Razor implicit or explicit expression (like @aaa)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Razor.CSharp.Impl.CustomHandlers.RazorCSharpPsiServices.IsSpecialStatementDelimeter(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Detect code generated by <see cref="P:JetBrains.ReSharper.Psi.Razor.CSharp.Generate.RazorCSharpCodeGenerator.StatementEnd"/>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Razor.CSharp.Impl.CustomHandlers.RazorCSharpPsiServices.IsMethodWithRazorMarkup(JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            Does method can contain markup (Execute or helper)?
            </summary>
            <param name="declaration"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Razor.CSharp.Generate.RazorCSharpCodeGenerator.#ctor(JetBrains.ReSharper.Psi.ILanguageManager,JetBrains.Application.IApplicationHost,JetBrains.ReSharper.Psi.CSharp.Impl.CSharpDeclaredElementPresenter,JetBrains.ReSharper.Psi.Razor.IRazorSharedServices)">
            <remarks><see cref="T:JetBrains.ReSharper.Psi.ILanguageManager" /> is marker interface, to get dependencies initialized (psi language instances)</remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Impl.Generate.IRazorCache">
            <summary>
            Marker interface for all razor caches used to hack their use
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Razor.Impl.Generate.IRazorCache.FilesWithCachedValue">
            <summary>
            Colletion of files for which their cached values is changed.
            This means all dependent files need to be regenerated
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Razor.Impl.Generate.RazorCodeGeneratorProcessor.WriteHtml(JetBrains.ReSharper.Psi.Web.Generation.GenerationResults,JetBrains.ReSharper.Psi.Razor.Tree.IRazorFile,System.Boolean)">
            <summary>
            Throw all cumulative html if any
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Razor.Impl.CustomHandlers.IRazorPsiServices.SplitCodebehindNode(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Splits comments and error elements attached to the end
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Razor.Impl.CustomHandlers.IRazorPsiServices.GetOriginalAnchorAndType(JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean,JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Predicate{JetBrains.Util.Pair{JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Razor.Impl.CustomHandlers.OriginalStatementType}})">
            <summary>
            If original node not found (for synthetic or empty statements), iterate until it would be found.
            If first == true, iterate forward, otherwise, backward
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Impl.RazorCodeBehindGeneratedDocumentService">
            <summary>
            Generated document service for C# and VB languages of Razor page.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Tree.IRazorBaseTypeDirective">
            <summary>
            Common interface for @inherits and @model directives
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Tree.IRazorBlockMarkup">
            <summary>
            &lt;text&gt;..&lt;/text&gt; block (for HTML inside code blocks)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Tree.IRazorHtmlMarkup">
            <summary>
            Special syntax for inserting HTML inside code blocks, such as &lt;text&gt;..&lt;/text&gt; or @:
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Tree.IRazorLineMarkup">
            <summary>
            @: (for HTML line inside code block)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Tree.IRazorTagHelper">
            <summary>
            @addTagHelper, @removeTagHelper, @tagHelperPrefix
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Tree.RazorElementTypes.RazorModelDirectiveNodeType">
            <remarks>
            Applied only for MVC
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Parsing.RazorTreeBuilder">
            <summary>
            RazorTreeBuilder
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Razor.RazorKeywords.Model">
            <remarks>
            Only for ASP.NET MVC Razor
            </remarks>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Razor.RazorKeywords.Inject">
            <remarks>
            Only for ASP.NET MVC 6 Razor
            </remarks>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Razor.RazorKeywords.Page">
            <remarks>
            Only for ASP.NET Core 2.0 Razor
            </remarks>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Razor.RazorKeywords.Layout">
            <remarks>
            Only for Blazor
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.WebApp.WebAppCommonReferenceProviderFactoryAttribute">
            <summary>
            Attribute for <see cref="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.WebApp.IWebAppCommonReferenceProviderFactory"/> impls.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.WebApp.WebAppPsiModuleHandlerHelperFactoryAttribute">
            <summary>
            Attribute for <see cref="!:IWebsitePsiModuleHandlerHelperFactory"/> impls.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.WebApp.WebAppModuleReferencer">
            <remarks>Temporary solution for RSRP-375600</remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.WebsiteCommonReferenceProviderFactoryAttribute">
            <summary>
            Attribute for <see cref="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.IWebsiteCommonReferenceProviderFactory"/> impls.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.WebsitePsiModuleHandlerHelperFactoryAttribute">
            <summary>
            Attribute for <see cref="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.IWebsitePsiModuleHandlerHelperFactory"/> impls.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.Properties.IWebsiteAppCodePsiSourceFilePropertiesFactory">
            <summary>
            ProjectFile language-dependent component
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.IWebPsiModuleHandlerHelper.Priority">
            <summary>
            The higher the priority, the sooner the helper is asked to process files.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.IWebPsiModuleHandlerHelper.OnProjectFileAdded(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder,System.Collections.Generic.IList{JetBrains.ReSharper.Psi.Web.Impl.PsiModules.IWebPsiModuleHandlerHelper})">
            <summary>
            Creates/ updates psi source files if knows what to do with incoming file
            </summary>
            <returns>True if and only if file is processed. False otherwise</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Impl.WebConfig.PsiModules.Website.Modules.IWebConfigModule.GetCommonReferences">
            <summary>
            Common assembly references defined by current web.config and all above
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuilder.RebuildWebsite">
            <summary>
            Builds website async (sync in tests)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuilder.GeneratedFilesDirectory">
            <summary>
            Directory, to which generated files are copied after build
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuilder.GeneratedFilesChanged">
            <summary>
            Signal is fired when new files are created
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.Project">
            <summary>
            Project being built
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.LogName">
            <summary>
            Logger string to identify build trace
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.BeforeBuildStarted">
            <summary>
            Called before build started to perform clean-up of cached values
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsPrimaryFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)">
            <summary>
            Checks whether file in question is a source of some generated data (i.e. file for custom build provider)
            Called while collecting files.
            </summary>
            <param name="file">File to be checked</param>
            <param name="folders">Cached frequently used folders. In the sake of performance only</param>
            <returns>True if the file produces content.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsSupplementaryFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)">
            <summary>
            Checks whether file in question is necessary to compile primary files.
            Called while collecting files.
            </summary>
            <param name="file">File to be checked</param>
            <param name="folders">Cached frequently used folders. In the sake of performance only</param>
            <returns>True if the file matches.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsSignificantFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)">
            <summary>
            If the change in a file requires website to be rebuilt, the file is significant. 
            Normally, it returns <see cref="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsPrimaryFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)"/> or <see cref="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsSupplementaryFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)"/>
            </summary>
            <param name="file">File to be checked</param>
            <param name="folders">Cached frequently used folders. In the sake of performance only</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.OnBuildFinished(System.Collections.Generic.Dictionary{JetBrains.Util.FileSystemPath,System.Int64},System.Collections.Generic.Dictionary{JetBrains.Util.FileSystemPath,System.Int64},JetBrains.ReSharper.Psi.Web.BuildProviders.WebsiteBuildResult,JetBrains.Util.FileSystemPath,JetBrains.Util.FileSystemPath,JetBrains.Util.FileSystemPath)">
            <summary>
            Called when build succeded to process content.
            </summary>
            <param name="primaryFiles">Primary files with their timestamps</param>
            <param name="supplementaryFiles">Supplementary files with their timestamps</param>
            <param name="buildResult">Build result</param>
            <param name="targetPath">Path of the website being built</param>
            <param name="outputPath">Path to compiled output</param>
            <param name="tempDirPath">Path to debug files produced while build</param>
            <returns>Map of generated files to be copied to a folder relative to root.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.IWebProjectFileLanguageService.GetMvcViewWithModelBaseTypes(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Default - empty
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.PsiModules.IWebProjectFileClassifier">
            <summary>
            ProjectFileType-specific 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.TagPrefixes.ITagPrefix.GetDeclaration">
            <summary>
            Returns declaration from which the TagPrefix is built
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.TagPrefixes.ITagName.GetDeclaration">
            <summary>
            Returns declaration from which the TagName is built
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.TagPrefixes.TagPrefixCache.GetSourceFiles(System.String)">
            <summary>
            Returns project files, that may contain holders if tagPrefix declarations
            </summary>
            <param name="tagPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.TagPrefixes.TagPrefixCache.GetGlobalTagPrefixes(JetBrains.ProjectModel.IModule)">
            <summary>
            Tagprefixes for a module, that are defined in framework's web.config or sharepoint's web.config
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil">
            <summary>
            Code behind (target language of asp generator) language util.
            Note: works with CS and VB but not with JS and other secondary languages.
            </summary>
            <summary>
            Related to MVC model
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguage(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind language by projectFile text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguageViaPsiFast(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind language via generated PSI
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindFileViaPsiFast(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind file via generated PSI
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindProjectFileLanguage(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind language by projectFile text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguageDefinedInFile(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind language by projectFile text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguageDefinedInFile(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Evaluates code-behind language by projectFile text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguage(JetBrains.ReSharper.Psi.Web.Tree.IWebFileWithCodeBehind)">
            <summary>
            Evaluates code-behind language committed PSIs
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguage(JetBrains.ReSharper.Psi.Web.Tree.IWebTreeNode)">
            <summary>
            Evaluates code-behind language committed PSIs
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.MvcReferencedAssembliesService.IsProjectReferencingMvc(JetBrains.ProjectModel.IProjectElement,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId,System.Version@)">
            <summary>Is project referencing MVC assembly?</summary>
            <param name="projectElement"></param>
            <param name="targetFrameworkId"></param>
            <param name="version">Version of MVC, if referenced</param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.MvcReferencedAssembliesService.IsProjectReferencingMvc3(JetBrains.ProjectModel.IProjectElement,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Is project referencing MVC assembly version >= 3
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.WebPathReferenceUtil.GetVirtualPathInWebsite(JetBrains.ReSharper.Psi.IPathDeclaredElement,JetBrains.ProjectModel.IProject)">
            <returns>Relative virtual path relative to website root or FileSystemPath.Empty if fails </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.WebPathReferenceUtil.GetVirtualPathInWebsite(JetBrains.ProjectModel.IProjectItem)">
            <returns>Relative virtual path relative to website root or FileSystemPath.Empty if fails</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Tree.IWebAttribute.AttributeNameEqualsTo(System.String)">
            <summary>
            Fast check for AttributeName to reduce memory traffic
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Tree.IWebAttributeContainer`1.AddAttributeBefore(`0,`0)">
            <summary>
            Adds attribute before the anchor. If anchor == null, the attribute is inserted after the last attribute
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Tree.IWebAttributeContainer`1.AddAttributeAfter(`0,`0)">
            <summary>
            Adds attribute after the anchor. If anchor == null, the attribute is inserted before the first attribute
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Tree.IWebCodeBlock">
            <summary>
            C# or VB code block or expression inside web page (ASP or Razor)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.WebConfig.Tree.IAddCodeSubDirectoryTag.DirectoryName">
            <summary>
            Relative to the \App_Code or staring with /
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.WebConfig.Util.TagPrefixUtil.GetRelevantHolders(JetBrains.ReSharper.Psi.Tree.IFile)">
            <summary>
            Finds all relevant tagPrefix/Name holder.
            The latter items in the enumerable take precedence over the previous ones
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.WebConfig.Util.TagPrefixUtil.GetRelevantHoldersBeforeFile(JetBrains.ReSharper.Psi.Tree.IFile,JetBrains.Util.FileSystemPath)">
            <summary>
            Finds all relevant tagPrefix/Name holder in all files except current.
            The latter items in the enumerable take precedence over the previous ones
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.WebConfig.Util.TagPrefixUtil.GetHoldersInFile(JetBrains.ReSharper.Psi.Tree.IFile,JetBrains.Util.FileSystemPath)">
            <summary>
            Finds all holder within file specified
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.WebConfig.WebExtensions.IsHtmlPage(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Is html or inherited page except ASP
            </summary>
            <param name="psiSourceFile"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ClassPartialTemplateEnd">
             <summary>
               Looks up a localized string similar to     }}
            .
             </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ClassPartialTemplateStart">
             <summary>
               Looks up a localized string similar to 
                {1}
                partial class {0} {{
            .
             </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ClassTemplateEnd">
             <summary>
               Looks up a localized string similar to     }}
            .
             </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ClassTemplateStart">
            <summary>
              Looks up a localized string similar to     
               {3}
               public partial class {0} : {1}{2}{11} {{
                 [{4}] private static void {5}(object value) {{}}
                 [{4}] private static void {5}({10} result) {{}}
                 [{4}] private static void {6}(System.IO.TextWriter writer, object content) {{}}
                 [{4}] private static void {6}(System.IO.TextWriter writer, {10} content) {{}}
                 [{4}] private static void {7}(object value) {{}}
                 [{4}] private static void {8}(System.IO.TextWriter writer, object content) {{}}
                 [{4}] private stati [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ExecuteAsyncStart">
            <summary>
              Looks up a localized string similar to [{1}] public override async Task ExecuteAsync() {{.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ExecuteEnd">
            <summary>
              Looks up a localized string similar to }}.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ExecuteStart">
            <summary>
              Looks up a localized string similar to [{1}] public override void Execute() {{.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.FileHeader" -->
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.FileTemplateEnd">
             <summary>
               Looks up a localized string similar to }}
            .
             </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.FileTemplateStart">
             <summary>
               Looks up a localized string similar to namespace {0} {{
            .
             </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.StaticExecuteStart">
            <summary>
              Looks up a localized string similar to [{0}, {1}] private void Execute() {{.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.WriteEnd">
            <summary>
              Looks up a localized string similar to );.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.WriteStart">
            <summary>
              Looks up a localized string similar to {0}({1}.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Html.HtmlEntities.HtmlEntitiesWalker.#ctor(JetBrains.ReSharper.Psi.Html.Parsing.IHtmlTokenNodeTypes,JetBrains.ReSharper.Feature.Services.Html.HtmlEntities.HtmlEntitiesNodeTypeSet)">
            <summary>
            Html entities iterator
            </summary>
            <param name="tokenTypes"></param>
            <param name="htmlEntitiesNodeTypeSet"></param>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Html.HtmlEntities.HtmlEntity.IsNumeric">
            <summary>
            Is original passed entity was numeric
            </summary>
        </member>
    </members>
</doc>
