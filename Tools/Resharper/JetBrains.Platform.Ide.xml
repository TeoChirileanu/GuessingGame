<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.Ide</name>
    </assembly>
    <members>
        <member name="P:JetBrains.IDE.OpenFileOptions.Activate">
            <summary>
            Whether open text control should be activated
            </summary>
        </member>
        <member name="P:JetBrains.IDE.OpenFileOptions.TargetFrameworkId">
            <summary>
            TargetFrameworkId set for the file open. Null if unknown or don't care
            </summary>
        </member>
        <member name="P:JetBrains.IDE.OpenFileOptions.TabOptions">
            <summary>
            In what type of tab the text control should be open
            </summary>
        </member>
        <member name="P:JetBrains.IDE.OpenFileOptions.FileView">
            <summary>
            What type of <see cref="P:JetBrains.IDE.OpenFileOptions.FileView"/> is to be used
            </summary>
        </member>
        <member name="F:JetBrains.IDE.OpenFileOptions.DefaultActivate">
            <summary>
            Depending on option in Search and navigation options default may means
            either "normal tab" or "preview tab"
            </summary>
        </member>
        <member name="F:JetBrains.IDE.OpenFileOptions.DefaultNoActivate">
            <summary>
            Depending on option in Search and navigation options default may means
            either "normal tab" or "preview tab"
            </summary>
        </member>
        <member name="P:JetBrains.IDE.FeatureSuggestion.FeatureSuggesterAttribute.ModeIndependent">
            <summary>
            Use this when feature suggestion serves also as an important notification, so that
            it should be displayed to user even if suggestions are turned off
            </summary>
        </member>
        <member name="P:JetBrains.IDE.FeatureSuggestion.IFeatureSuggester.Suggestion">
            <summary>
            Current feature suggestion.
            </summary>
            <remarks>
            Feature suggester should set this property in order notify feature suggestion manager about new suggestion.
            Feature suggestion manager will handle new suggestion and will either show or cancel it.
            </remarks>
        </member>
        <member name="P:JetBrains.IDE.FeatureSuggestion.IFeatureSuggester.Aspects">
            <summary>
            Collection of aspects that allow to tweak feature suggester behavior.
            </summary>
            <remarks>
            For details <see cref="T:JetBrains.IDE.FeatureSuggestion.IFeatureSuggestion"/> implementations.
            </remarks>
        </member>
        <member name="T:JetBrains.IDE.FeatureSuggestion.NotifyDisableMeAspect">
            <summary>
            Allows suggester to communicate that it is no longer needed and can be disabled.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.FeatureSuggestion.CustomSuggestionsIntervalAspect">
            <summary>
            Allows suggester to show notificatoins more or less often by overriding the time interval
            that is required to be passed since the previous suggestion.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.FeatureSuggestion.NoSuggestionsIntervalAspect">
            <summary>
            Allows suggester to show suggestion without requirements on time interval passed since the previous suggestion.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.FeatureSuggestion.SuggestionShowsLimitAspect">
            <summary>
            Allows suggester to set the limit on how many times it can show suggestions.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.FeatureSuggestion.DisableWhenSuggestionAcceptedAspect">
            <summary>
            Allows suggester to specify that after accepting its suggestion it should be disabled.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.FeatureSuggestion.DisableByActivityUsageAspect">
            <summary>
            Allows suggester to communicate that is should be disabled when certain usage statistics conditions are held.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.FeatureSuggestion.OverrideCurrentSuggestionAspect">
            <summary>
            Allows to cancel currently shown suggestion in order to show more prioritized one.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.Actions.ResultList_GoToNextLocationAction">
            <summary>
            Base result list handling implementation which only relies on our Result List and does not integrate with an IDE.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.Actions.ResultList_GoToPrevLocationAction">
            <summary>
            Base result list handling implementation which only relies on our Result List and does not integrate with an IDE.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.AnonymousResultListHandler">
            <summary>
            Default implementation.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.ResultListIdeActions">
            <summary>
            Integration of the result list operations into the IDE. Reqiured to enable overriding in VS environment.
            Executes the given actions on the currently active result list handler.
            Base implementation works on our result list object only.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.ResultListManager">
            <summary>
              <para>Allows to publish your “result list” for IDE-global navigation with standard actions (in VS: “Edit.GoToNextLocation”, “Edit.GoToPrevLocation”).</para>
              <para>Do this when you open a tool window with a list which should be walked when user invokes those commands right from the editor.</para>
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.ResultListManager.CurrentResultListHandler">
            <summary>
            Gets the current result list handler.
            To set your own, you should generally use <see cref="M:JetBrains.IDE.ResultList.ResultListManager.PublishResultList(JetBrains.DataFlow.LifetimeDefinition,JetBrains.Application.ResultList.IResultListHandler)" />.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.ResultList.ResultListManager.PublishResultList(JetBrains.DataFlow.LifetimeDefinition,JetBrains.Application.ResultList.IResultListHandler)">
            <summary>
            Makes this an active result list in the current IDE.
            </summary>
            <param name="def">Terminates when you request it or when your result list gets pushed out by smb else. Note that termination is NOT guarded here.</param>
            <param name="list"></param>
        </member>
        <member name="T:JetBrains.IDE.ResultList.ResultListValue">
            <summary>
            Implementation backend.
            Call <see cref="M:JetBrains.IDE.ResultList.ResultListManager.PublishResultList(JetBrains.DataFlow.LifetimeDefinition,JetBrains.Application.ResultList.IResultListHandler)" />.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.ResultListValue.CurrentResultListHandler">
            <summary>
            The currently active result list, if published.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.UIResultListPublisherAutomation">
            <summary>
              <para>Helps with publishing result lists from UI components.</para>
              <para>To be used in viewmodels. Bind to the view with a behavior for getting focus and keyboard events.</para>
            </summary>
            <remarks>
            Behavior:
            See <see cref="T:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState" /> for possible states of publishing the result list.
            Initially, when the control is created, we'd publish the result list and keep it even on focus loss.
            After that, we'd publish our result list on any focus entry, but it would be revoked automatically on focus loss if there were no explicit user actions on items (like using the result list next/prev actions, or executing a node with Enter). But if there were, it's the same way as on control creation once again, until smb else pushes us out.
            This behavior seems to be the most friendly in terms of the implicit modality.
            </remarks>
        </member>
        <member name="P:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.IsKeyboardFocusWithin">
            <summary>
            For binding from UI. Tells when actual keyboard focus is within the control. Controls the <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.FocusPublished" /> state.
            Unguarded, as this is for binding from UI.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.ItemExecuted">
            <summary>
            For binding from viewmodel / UI.
            Fire this event when an item has been executed in the control. This means we should enter the <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.HardPublished" /> state.
            Unguarded, as this is for binding from UI.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.ResultListByOwner">
            <summary>
            The original result list, as provided by the owner of this object. This is NOT submitted to the <see cref="T:JetBrains.IDE.ResultList.ResultListManager" />.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.ResultListWrapped">
            <summary>
            The wrapped result list created by this object which reports when an action is executed, so that to switch to <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.HardPublished" /> when it happens.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.State">
            <summary>
            The current state. Reflected into the global result list.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.ToString">
            <summary>
            String representation, for diagnostic needs.
            </summary>
            <returns></returns>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.NotPublished">
            <summary>
            The result list is currently not published.
            Entry: (1) when someone else publishes a result list and pushes out our one, (2) when losing focus in <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.FocusPublished" /> state.
            Leave: on any entry event for other states.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.FocusPublished">
            <summary>
            The result list has been published for the time while we have keyboard focus.
            Entry: control got focus (<see cref="P:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.IsKeyboardFocusWithin" /> going high) while in <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.NotPublished" /> state.
            Leave: (1) control lost focus, (2) switched to <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.HardPublished" /> due to an explicit user action.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.HardPublished">
            <summary>
            The result list has been explicitly published, and should persist even when focus goes to another control (e.g. to text control when navigating to the next location).
            Entry: (1) control with a result list initially created, (2) an explicit user action, like executing result list actions in <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.FocusPublished" /> mode, or executing an item in the control with mouse or keyboard.
            Leave: someone has published another result list and pushed ours out.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TreeBrowser.TreeModelBrowserDescriptor.CreateViewAutomation(JetBrains.Application.UI.TreeModels.TreeModel)">
            <summary>
            Used only in devexpress TreeModelBrowserPanel
            </summary>   
        </member>
        <member name="M:JetBrains.IDE.TreeBrowser.UpdateEventArgs.#ctor(JetBrains.IDE.TreeBrowser.UpdateKind,System.Boolean,System.Collections.Generic.IEnumerable{JetBrains.Application.UI.TreeModels.TreeModelNode})">
            <summary>
            Constructor
            </summary>
            <param name="kind">Update kind</param>
            <param name="immediate">Should it be performed now or delayed</param>
            <param name="relatedNodes">Nodes to update or null to update all nodes</param>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBePathSelector(JetBrains.DataFlow.IProperty{System.String},JetBrains.DataFlow.Lifetime,System.Collections.Generic.IList{System.String},System.String,JetBrains.Rider.Model.UIAutomation.PathChooser)">
            <summary>
            Get view model of control which has editable combobox and button with selected dialog type shown on click.Value selected in dialog is added to combobox textfield.
            Selected in combobox value is auto-mapped to given property. 
            </summary>
            <param name="property">Data model property</param>
            <param name="lifetime"/>
            <param name="initialValues">Values to be displayed inside combobox</param>
            <param name="buttonText">Text on button</param>
            <param name="type">Type of dialog</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeIconToggleButton(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{JetBrains.Rider.Model.Icon},JetBrains.DataFlow.IProperty{System.String})">
            <summary>
            Toggle button with two possible states: checked or not. There is an icon for each state.
            <br/>NOT IMPLEMENTED IN WPF YET
            </summary>
            <param name="isChecked">Current state, can be altered from UI and backend</param>
            <param name="lifetime"></param>
            <param name="uncheckedIcon">Icon when toggle is unchecked</param>
            <param name="checkedIcon">Icon when toggle is checked</param>
            <param name="tooltip">Tooltip can be altered only from backend</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeIconToggleButton(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.Lifetime,JetBrains.Rider.Model.Icon,JetBrains.Rider.Model.Icon,JetBrains.DataFlow.IProperty{System.String})">
            <summary>
            Toggle button with two possible states: checked or not. There is an icon for each state.
            <br/>NOT IMPLEMENTED IN WPF YET
            </summary>
            <param name="isChecked">Current state, can be altered from UI and backend</param>
            <param name="lifetime"></param>
            <param name="uncheckedIcon">Icon when toggle is unchecked</param>
            <param name="checkedIcon">Icon when toggle is checked</param>
            <param name="tooltip">Tooltip can be altered only from backend</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeOkCancelDialog(JetBrains.Rider.Model.UIAutomation.BeControl,JetBrains.DataFlow.Lifetime,System.Action,System.Action,JetBrains.Rider.Model.UIAutomation.DialogModality,System.String,JetBrains.Rider.Model.UIAutomation.BeDialogSize,JetBrains.Rider.Model.UIAutomation.BeScrollbarPolicy)">
            <summary>
            Get dialog with ok cancel buttons
            </summary>
            <param name="dialogContent"></param>
            <param name="lifetime"></param>
            <param name="ok"></param>
            <param name="cancel"></param>
            <param name="modality"></param>
            <param name="title"></param>
            <param name="size">How to initially size dialog. Fits to size by default.</param>
            <param name="scrollbarPolicy">Whether to allow scrollbars. No scrollbars by default.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeDoneDialog(JetBrains.Rider.Model.UIAutomation.BeControl,JetBrains.DataFlow.Lifetime,System.Action,JetBrains.Rider.Model.UIAutomation.DialogModality,System.String,JetBrains.Rider.Model.UIAutomation.BeDialogSize,JetBrains.Rider.Model.UIAutomation.BeScrollbarPolicy)">
            <summary>
            Get dialog with Done button
            </summary>
            <param name="dialogContent"></param>
            <param name="lifetime"></param>
            <param name="done"></param>
            <param name="modality"></param>
            <param name="title"></param>
            <param name="size">How to initially size dialog. Fits to size by default.</param>
            <param name="scrollbarPolicy">Whether to allow scrollbars. No scrollbars by default.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeRadioButton(System.String,System.String,JetBrains.DataFlow.Lifetime)">
            <summary>
            Get radio button control with description from given string.
            </summary>    
            <param name="description"> Text in radio button. Can have '_' for accelerator</param>
            <param name="controlId">Id for search this radio button inside containing element </param>
            <param name="lifetime">If text in radio button doesn't change can be null</param>
            <returns>New radio button control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeRadioButton(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.Lifetime,System.String,System.Boolean)">
            <summary>
            Get radio button control bound to given property.
            </summary>
            <param name="property"/>
            <param name="lifetime"/>
            <param name="description"> Text in radio button. Can have '_' for accelerator</param>
            <param name="enabled">Initial enabled value</param>
            <returns>New check box control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeCheckBox(System.String,System.String,JetBrains.DataFlow.Lifetime)">
            <summary>
            Get check box control with description from given string.
            </summary>    
            <param name="description"> Text in check box. Can have '_' for accelerator</param>
            <param name="controlId">Id for search this checkbox inside containing element </param>
            <param name="lifetime">If text in checkbox doesn't change can be null</param>
            <returns>New check box control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeCheckBox(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.Lifetime,System.String,System.Boolean)">
            <summary>
            Get check box control bound to given property.
            </summary>
            <param name="property"/>
            <param name="lifetime"/>
            <param name="description"> Text in check box. Can have '_' for accelerator</param>
            <param name="enabled">Initial enabled value</param>
            <returns>New check box control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeCheckBox(JetBrains.DataFlow.IProperty{System.Nullable{System.Boolean}},JetBrains.DataFlow.Lifetime,System.String,System.Boolean)">
            <summary>
            Get three state check box control bound to given property.
            </summary>
            <param name="property"/>
            <param name="lifetime"/>
            <param name="description"> Text in check box. Can have '_' for accelerator</param>
            <param name="enabled">Initial enabled value</param>
            <returns>New check box control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeSpinner(JetBrains.DataFlow.IProperty{System.Int32},JetBrains.DataFlow.Lifetime,System.Int32,System.Int32)">
            <summary>
            Get spinner control view model
            </summary>
            <param name="property">Property to promote value from spinner into</param>
            <param name="lifetime"/>
            <param name="min">Min value in spinner</param>
            <param name="max">Max value in spinner</param>
            <returns>New spinner control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeIcon(JetBrains.Rider.Model.Icon)">
            <summary>
            Get icon control model
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeTextBox(JetBrains.DataFlow.IProperty{System.String},JetBrains.DataFlow.Lifetime,System.Boolean)">
            <summary>
            Get text box control. Additional features (completion, validation) can be added on this by calling corresponding extension methods on it.  
            </summary>
            <param name="property">Property from data model to promote value from text box into</param>
            <param name="lifetime"/>
            <param name="isReadOnly">is text box readonly</param>
            <returns>New text box control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeHeader(System.String,JetBrains.Rider.Model.Icon)">
            <summary>
            Get header control model
            Header is essentially a label, but intended to separate groups of controls from one another.
            </summary>
            <param name="description">Text in header</param>
            <param name="iconId">If not null - given icon will be displayed before the header</param>
            <returns>New header control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeLabelWithShortCut(System.String,JetBrains.DataFlow.Lifetime,JetBrains.Rider.Model.Icon,System.Boolean,System.Boolean)">
            <summary>
            Get label control model with shortcut added from symbol after '_' inside description.  
            </summary>
            <param name="description">Text in label.Can have '_' for accelerator</param>
            <param name="lifetime">Can be null if text in label never be changed</param>
            <param name="iconId">If not null - given icon will be displayed before the label</param>
            <param name="capitalize">Should text in label be capitalised</param>
            <param name="wrapText">Allow label to occupy multiple lines if necessary</param>
            <returns>New label control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeLabel(System.String,JetBrains.Rider.Model.Icon,System.Boolean)">
            <summary>
            Get label control model
            </summary>
            <param name="description">Text in label</param>
            <param name="iconId">If not null - given icon will be displayed before the label</param>
            <returns>New label control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCreationExtensions.GetBeRichText(JetBrains.Rider.Model.ModelRichText)">
            <summary>
            Rich text that can be rendered inside BeControls, including BeTreeList/Grid
            <br/>NOT IMPLEMENTED IN WPF YET
            </summary>
            <param name="modelRichText"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeControls.GetAutoGrid(JetBrains.Rider.Model.UIAutomation.GridOrientation,JetBrains.Rider.Model.UIAutomation.BeControl[])">
            <summary>
              Get one-dimension directional grid control, where all elements get size they need
            </summary>
            <param name="orientation">Direction of grid</param>
            <param name="controls">List of controls to add</param>
            <returns>New grid control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeControls.GetGrid(JetBrains.Rider.Model.UIAutomation.GridOrientation,System.ValueTuple{JetBrains.Rider.Model.UIAutomation.BeControl,System.String}[])">
            <summary>
              Get one-dimension directional grid control, where all elements get specified size either * or auto
            </summary>
            <param name="orientation">Direction</param>
            <param name="controls">List of elements and corresponding sizes (* or auto)</param>
            <returns>New grid control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeControls.GetEmptyGrid(JetBrains.Rider.Model.UIAutomation.GridOrientation)">
            <summary>
              Get empty one-dimension directional grid control
            </summary>
            <param name="orientation">Direction of grid</param>
            <returns>New grid control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeControls.GetSpanGrid(System.String)">
            <summary>
              Get layout grid control, which can have multiple columns.
              Elements inside can fill multiple columns, but not rows.
            </summary>
            <param name="columnSizes">sizes of columns(auto\*) splitted by ','</param>
            <returns>New control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeComboBoxExtensions.GetBeComboBoxFromEnum``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,System.Func{``0,System.String},System.Func{``0,System.Boolean},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Get view model of combo box control from property with enum type. Values will be extracted from Enum.
            If this is user type enum <seealso cref="T:JetBrains.IDE.UI.Extensions.DescriptionAttribute"/> can be used for custom text presentation/>
            </summary>
            <param name="property">Property with enum type</param>
            <param name="lifetime"/>
            <param name="present">Returns presentation for value. Can have '_' for accelerator</param>
            <param name="isEnabled">Initial enabled state for value</param>
            <param name="visible">If this value exists in this combo.</param>
            <param name="reverse">Should enum values be added in reversed order</param>
            <typeparam name="T">Type of property which is associated with combobox values</typeparam>
            <returns>New combobox control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeComboBoxExtensions.GetBeComboBox(JetBrains.DataFlow.IProperty{System.String},System.Collections.Generic.IList{System.String},JetBrains.DataFlow.Lifetime,System.Boolean)">
            <summary>
            Get view model of combobox. Selected value is auto-mapped to given property
            </summary>
            <param name="property"/>
            <param name="values">Initial values for combobox</param>
            <param name="lifetime"/>
            <param name="isEditable"/>
            <returns></returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeComboBoxExtensions.GetBeComboBoxObsolete``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IListEvents{``0},System.Func{``0,System.String},System.Func{``0,System.Boolean},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Get view model of combo box control from property/>
            </summary>
            <param name="property">Property</param>
            <param name="lifetime"/>
            <param name="values">Values for combobox control</param>
            <param name="present">Function returning presentation for value. Can have '_' for accelerator</param>
            <param name="isEnabled">Function returning initial enabled state for value</param>
            <param name="visible">Function returning if this value has value in this combo.</param>
            <typeparam name="T">Type of property which is associated with combobox values</typeparam>
            <returns>New combobox control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeComboBoxExtensions.GetBeCustomComboBoxFromEnum``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,System.Func{``0,JetBrains.Rider.Model.UIAutomation.BeControl},System.Func{``0,System.Boolean},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Get view model of combo box control from property with enum type. Values will be extracted from Enum.
            If this is user type enum <seealso cref="T:JetBrains.IDE.UI.Extensions.DescriptionAttribute"/> can be used for custom text presentation/> 
            </summary>
            <param name="property">Property with enum type</param>
            <param name="lifetime"/>
            <param name="present">Returns presentation for value.</param>
            <param name="isEnabled">Initial enabled state for value</param>
            <param name="visible">If this value exists in this combo.</param>
            <param name="reverse">Should enum values be added in reversed order</param>
            <typeparam name="T">Type of property which is associated with combobox values</typeparam>
            <returns>New combobox control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeComboBoxExtensions.GetBeComboBox``2(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0},System.Func{``1,System.String},System.Func{``1,System.Boolean},System.Func{``1,System.Boolean})">
            <summary>
            Get view model of combo box control from property with enum type. Values will be extracted from Enum.
            If this is user type enum <seealso cref="T:JetBrains.IDE.UI.Extensions.DescriptionAttribute"/> can be used for custom text presentation/> 
            </summary>
            <param name="property">Property with enum type</param>
            <param name="lifetime"/>
            <param name="values">Values to display in combobox</param>
            <param name="convert">Converter between TTarget and TValue</param>
            <param name="present">Returns presentation for value.</param>
            <param name="isEnabled">Initial enabled state for value</param>
            <param name="visible">If this value exists in this combo.</param>
            <typeparam name="TTarget">Type of property </typeparam>
            <typeparam name="TValue">Type of combobox values</typeparam>
            <returns>New combobox control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeComboBoxExtensions.GetBeComboBoxFromEnum``2(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,System.Func{``1,``0},System.Func{``1,System.String},System.Func{``1,System.Boolean},System.Func{``1,System.Boolean})">
            <summary>
            Get view model of combo box control from property with enum type. Values will be extracted from Enum.
            If this is user type enum <seealso cref="T:JetBrains.IDE.UI.Extensions.DescriptionAttribute"/> can be used for custom text presentation/> 
            </summary>
            <param name="property">Property with enum type</param>
            <param name="lifetime"/>
            <param name="convert">Converter between TTarget and TValue</param>
            <param name="present">Returns presentation for value.</param>
            <param name="isEnabled">Initial enabled state for value</param>
            <param name="visible">If this value exists in this combo.</param>
            <typeparam name="TTarget">Type of property </typeparam>
            <typeparam name="TValue">Type of combobox values</typeparam>
            <returns>New combobox control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeComboBoxExtensions.GetBeCustomComboBoxFromEnum``2(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0},System.Func{``1,JetBrains.Rider.Model.UIAutomation.BeControl},System.Func{``1,System.Boolean},System.Func{``1,System.Boolean})">
            <summary>
            Get view model of combo box control from property with enum type. Values will be extracted from Enum.
            If this is user type enum <seealso cref="T:JetBrains.IDE.UI.Extensions.DescriptionAttribute"/> can be used for custom text presentation/> 
            </summary>
            <param name="property">Property with enum type</param>
            <param name="lifetime"/>
            <param name="values">Values to display in combobox</param>
            <param name="convert">Converter between TTarget and TValue</param>
            <param name="present">Returns presentation for value.</param>
            <param name="isEnabled">Initial enabled state for value</param>
            <param name="visible">If this value exists in this combo.</param>
            <typeparam name="TTarget">Type of property </typeparam>
            <typeparam name="TValue">Type of combobox values</typeparam>
            <returns>New combobox control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeComboBoxExtensions.GetBeCustomComboBox``2(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,System.Collections.Generic.IList{``1},System.Func{``1,``0},System.Func{``1,JetBrains.Rider.Model.UIAutomation.BeControl},System.Func{``1,System.Boolean},System.Func{``1,System.Boolean})">
            <summary>
            Get view model of combo box control from property with enum type. Values will be extracted from Enum.
            If this is user type enum <seealso cref="T:JetBrains.IDE.UI.Extensions.DescriptionAttribute"/> can be used for custom text presentation/> 
            </summary>
            <param name="property">Property with enum type</param>
            <param name="lifetime"/>
            <param name="values">Values to display in combobox</param>
            <param name="convert">Converter between TTarget and TValue</param>
            <param name="present">Returns presentation for value.</param>
            <param name="isEnabled">Initial enabled state for value</param>
            <param name="visible">If this value exists in this combo.</param>
            <typeparam name="TTarget">Type of property </typeparam>
            <typeparam name="TValue">Type of combobox values</typeparam>
            <returns>New combobox control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeComboBoxExtensions.GetBeCustomComboBox``1(JetBrains.DataFlow.IProperty{``0},System.Collections.Generic.IEnumerable{``0},JetBrains.DataFlow.Lifetime,System.Func{``0,JetBrains.Rider.Model.UIAutomation.BeControl},System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Get view model of combo box control from property with enum type
            </summary>
            <param name="property">Property with enum type</param>
            <param name="values">Values for combobox control</param>
            <param name="lifetime"/>
            <param name="present">Function returning presentation for value. Can have '_' for accelerator</param>
            <param name="isEnabled">Function returning initial enabled state for value</param>
            <param name="visible">Function returning if this value has value in this combo.</param>
            <typeparam name="T">Type of property which is associated with combobox values</typeparam>
            <returns>New combobox control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeComboBoxExtensions.GetBeRadioGroupFromEnum``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,System.String,System.Func{``0,JetBrains.IDE.UI.Extensions.RadioButtonProperties,System.String},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Get view model of radio buttons group control from enum values. 
            </summary>
            <param name="property">Enum property</param>
            <param name="lifetime"/>
            <param name="description">Text for label on top of radio group. Can have '_' for accelerator</param>
            <param name="present">Function returning presentation for enum value. Can have '_' for accelerator</param>
            <param name="isEnabled">Function returning initial enabled state for enum value</param>
            <param name="visible">Function returning if this enum value has radio button inside this group.</param>
            <param name="reverse">Should enum values be added in reversed order</param>
            <typeparam name="T">Enum type of property which is associated with radiobuttons</typeparam>
            <returns>New radio group control</returns>
        </member>
        <member name="T:JetBrains.IDE.UI.Extensions.CoveredInTest">
            <inheritdoc />
            <summary>
            Attribute for API methods
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCommonExtensions.FlowChangesIntoRd``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,JetBrains.Platform.RdFramework.Util.IRdProperty{``0})">
            <summary>
              Establishes a data flow of changes made to the source property between two properties.
              Does not flow a value when it is acknowledged.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCommonExtensions.Bind``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{``0})">
            <summary>
              Establishes a data flow of changes made to the source property between two properties.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCommonExtensions.Or(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{System.Boolean})">
            <summary>
              Creates a boolean property with value of this or another
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCommonExtensions.And(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{System.Boolean})">
            <summary>
              Creates a boolean property with value of this and another
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCommonExtensions.BindValidation(JetBrains.Platform.RdFramework.Util.IReadonlyProperty{JetBrains.Rider.Model.UIAutomation.ValidationResult}[],JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.Platform.RdFramework.Util.IRdProperty{System.Boolean})">
            <summary>
              Sets bool property to false when any validation result is error
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCommonExtensions.Bind``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,JetBrains.Platform.RdFramework.Util.IRdProperty{System.Nullable{``0}})">
            <summary>
              Maps value from given Property to given RdProperty two-way
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCommonExtensions.WithDefaultValueWhenDisabled(JetBrains.Rider.Model.UIAutomation.BeCheckbox,JetBrains.DataFlow.Lifetime,System.Boolean)">
            <summary>
              Sets default value to property when enabled is false
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCommonExtensions.WithDefaultValueWhenFalse``1(JetBrains.Platform.RdFramework.Util.IRdProperty{``0},JetBrains.DataFlow.Lifetime,JetBrains.Platform.RdFramework.Util.IRdProperty{System.Boolean},``0)">
            <summary>
              Sets default value to property when enabled is false
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCommonExtensions.Bind``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,JetBrains.Platform.RdFramework.Util.IRdProperty{``0})">
            <summary>
              Maps value from given Property to given RdProperty two-way
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCommonExtensions.WithDescription(JetBrains.Rider.Model.UIAutomation.BeControl,System.String,JetBrains.DataFlow.Lifetime,JetBrains.Rider.Model.UIAutomation.GridOrientation,System.String)">
            <summary>
            Wraps element with grid along with label in desired position
            </summary>
            <param name="control" />
            <param name="description">Text in label. Can contain '_' before shortcut</param>
            <param name="lifetime" />
            <param name="orientation">Label is added on the left if horizontal, and top if vertical</param>
            <param name="fill">Specifies if element inside grid should fill available space or not</param>
            <returns>Grid</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCommonExtensions.SetSingleSelection(System.Collections.Generic.IEnumerable{JetBrains.Rider.Model.UIAutomation.BeRadioButton},JetBrains.DataFlow.Lifetime)">
            <summary>
              Only one property can be set tor true from given list at a time
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeCommonExtensions.SetSingleSelection(System.Collections.Generic.IEnumerable{JetBrains.Platform.RdFramework.Util.IRdProperty{System.Boolean}},JetBrains.DataFlow.Lifetime,System.Boolean)">
            <summary>
              Only one property can be set tor true from given list at a time
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.AutomationGetterExtensions.GetBeControlById``1(JetBrains.Rider.Model.UIAutomation.BeControl,System.String)">
            <summary>
            Get control of given type with given name. If no element found - exception is thrown
            If element is inside list - may work inconsistent. 
            </summary>
            <param name="parent"/>
            <param name="name">Id of element</param>
            <typeparam name="T">Type of element</typeparam>
            <returns>Element</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.AutomationGetterExtensions.TryGetBeControlById``1(JetBrains.Rider.Model.UIAutomation.BeControl,System.String)">
            <summary>
            Get control of given type with given name. If no element found returns null
            If element is inside list - may work inconsistent. 
            </summary>
            <param name="parent"/>
            <param name="name">Id of element</param>
            <typeparam name="T">Type of element</typeparam>
            <returns>Element</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.AutomationGetterExtensions.Descendants``1(JetBrains.Rider.Model.UIAutomation.BeControl)">
            <summary>
            Get control descendants of given type. If parent type equals given type parent is returned too.
            If parent contains any lists - may work inconsistent/ 
            </summary>
            <param name="parent"></param>
            <typeparam name="T">Type of children</typeparam>
            <returns>List of children</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.GetRdAutoGrid(System.Collections.Generic.IEnumerable{JetBrains.Rider.Model.UIAutomation.BeControl},JetBrains.Rider.Model.UIAutomation.GridOrientation)">
            <summary>
              Get one-dimension directional grid control with initial elements inside with auto sizes
            </summary>
            <param name="initial">elements to add into grid</param>
            <param name="orientation">Direction of grid</param>
            <returns>New grid control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.GetRdGrid(System.Collections.Generic.IEnumerable{System.ValueTuple{JetBrains.Rider.Model.UIAutomation.BeControl,System.String}},JetBrains.Rider.Model.UIAutomation.GridOrientation)">
            <summary>
              Get one-dimension directional grid control with initial elements inside with specified sizes
            </summary>
            <param name="initial">elements to add into grid with sizes</param>
            <param name="orientation">Direction of grid</param>
            <returns>New grid control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.InAutoGrid(JetBrains.Rider.Model.UIAutomation.BeControl,JetBrains.Rider.Model.UIAutomation.GridOrientation)">
            <summary>
              Adds this control into grid with auto-size
            </summary>
            <param name="control" />
            <param name="orientation">Direction of grid</param>
            <returns>New grid control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.InGrid(JetBrains.Rider.Model.UIAutomation.BeControl,JetBrains.Rider.Model.UIAutomation.GridOrientation,System.String)">
            <summary>
              Adds this control into grid with specified size
            </summary>
            <param name="control" />
            <param name="orientation">Direction of grid</param>
            <param name="size"></param>
            <returns>New grid control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.WithColumnsFeelingLucky(JetBrains.Rider.Model.UIAutomation.BeGrid,System.String)">
            <summary>
            Converts this grid to span grid with specified columns. Extracts all elements fron grid and puts it into span grid with give sizes.
            If columns size is bigger than number of elements inside grid, and any element is * size - it will fill remaining space.    
            </summary>
            <param name="grid"/>
            <param name="columnSizes"></param>
            <returns>Same span grid</returns>    
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.InSpan(JetBrains.Rider.Model.UIAutomation.BeControl,System.String,System.String,System.Int32)">
            <summary>
              Get layout grid control, which can have multiple columns with given element inside    
            </summary>
            <param name="control"></param>
            <param name="columns">sizes of columns(auto\*) splitted by ','</param>
            <param name="rowSize">Size of row </param>
            <param name="columnSpan">Number of columns this element will fill</param>
            <returns>New span control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddColumnElementsToNewRow(JetBrains.Rider.Model.UIAutomation.BeSpanGrid,System.String,System.Boolean,System.ValueTuple{JetBrains.Rider.Model.UIAutomation.BeControl,System.String,System.Int32}[])">
            <summary>
            Adds given elements to layout control to new row with specified size(*\auto) and column span.May work unexpectedly if number of columns and total number of elements do not match   
            </summary>
            <param name="control">Layout control</param>
            <param name="rowSize">Will this row stretch(*) or fill only desired size(auto)</param>
            <param name="expandGrid">Will grid elements be extracted from grid and put into different columns of span control</param>
            <param name="elements">List of elements with size and span</param>
            <returns>Same span grid control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddColumnElementsToNewRow(JetBrains.Rider.Model.UIAutomation.BeSpanGrid,System.String,System.Boolean,System.ValueTuple{JetBrains.Rider.Model.UIAutomation.BeControl,System.String}[])">
            <summary>
            Adds given elements to layout control to new row with specified size(*\auto) and column span.May work unexpectedly if number of columns and total number of elements do not match   
            </summary>
            <param name="control">Layout control</param>
            <param name="rowSize">Will this row stretch(*) or fill only desired size(auto)</param>
            <param name="expandGrid">Will grid elements be extracted from grid and put into different columns of span control</param>
            <param name="elements">List of elements with span</param>
            <returns>Same span grid control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddStarColumnElementsToNewRow(JetBrains.Rider.Model.UIAutomation.BeSpanGrid,System.String,System.Boolean,JetBrains.Rider.Model.UIAutomation.BeControl[])">
            <summary>
            Adds given elements to layout control to new row with specified size(*\auto) and column span.May work unexpectedly if number of columns and total number of elements do not match   
            </summary>
            <param name="control">Layout control</param>
            <param name="rowSize">Will this row stretch(*) or fill only desired size(auto)</param>
            <param name="expandGrid">Will grid elements be extracted from grid and put into different columns of span control</param>
            <param name="elements">List of elements with span</param>
            <returns>Same span grid control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddColumnElementsToNewRow(JetBrains.Rider.Model.UIAutomation.BeSpanGrid,System.String,System.Boolean,System.ValueTuple{JetBrains.Rider.Model.UIAutomation.BeControl,System.Int32}[])">
            <summary>
            Adds given elements to layout control to new row with specified size(*\auto) and column span.May work unexpectedly if number of columns and total number of elements do not match   
            </summary>
            <param name="control">Layout control</param>
            <param name="rowSize">Will this row stretch(*) or fill only desired size(auto)</param>
            <param name="expandGrid">Will grid elements be extracted from grid and put into different columns of span control</param>
            <param name="elements">List of elements with span</param>
            <returns>Same span grid control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddColumnElementsToNewRow(JetBrains.Rider.Model.UIAutomation.BeSpanGrid,System.String,System.Boolean,JetBrains.Rider.Model.UIAutomation.BeControl[])">
            <summary>
            Adds given elements to layout control to new row with specified size(*\auto) and column span.May work unexpectedly if number of columns and total number of elements do not match   
            </summary>
            <param name="control">Layout control</param>
            <param name="rowSize">Will this row stretch(*) or fill only desired size(auto)</param>
            <param name="expandGrid">Will grid elements be extracted from grid and put into different columns of span control</param>
            <param name="elements">List of elements with span</param>
            <returns>Same span grid control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddGridElementToSpanGrid(JetBrains.Rider.Model.UIAutomation.BeSpanGrid,JetBrains.Rider.Model.UIAutomation.BeGrid,System.Int32,System.String,JetBrains.Rider.Model.UIAutomation.MarginType)">
            <summary>
            Extracts elements from given grid and arranges them in given span grid according to span size. May work unexpected if those numbers do not match
            </summary>
            <param name="control"/>
            <param name="grid"/>
            <param name="columnSpan">Number of columns which this grid should occupy. If less then zero - all available columns</param>
            <param name="elementSize">*/auto</param>
            <param name="sizeLeftMargin"></param>
            <returns>Same span grid</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddColumnElementToNewRow(JetBrains.Rider.Model.UIAutomation.BeSpanGrid,JetBrains.Rider.Model.UIAutomation.BeControl,System.String,System.Int32,System.String,System.Boolean,JetBrains.Rider.Model.UIAutomation.MarginType)">
            <summary>
            Adds given element to layout control to new row with specified size(*\auto) and column span.
            May work unexpectedly if number of columns and total number of elements do not match   
            </summary>
            
            <param name="control">Layout control</param>
            <param name="columnElement"/>
            <param name="columnSpan">Number of columns for this element to fill. If less then zero - all available columns</param>
            <param name="rowSize">Will this row stretch(*) or fill only desired size(auto)</param>
            <param name="expandGrid">Will grid elements be extracted from grid and put into different columns of span control</param>
            <param name="elementSize">*/auto</param>
            <param name="marginType"></param>
            <returns>Same span grid control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddColumnElementToLastRow(JetBrains.Rider.Model.UIAutomation.BeSpanGrid,JetBrains.Rider.Model.UIAutomation.BeControl,System.String,System.Int32,System.Boolean)">
            <summary>
            Adds given element to layout control to last row with specified size(*\auto) and column span.May work unexpectedly if number of columns and total number of elements do not match   
            </summary>
            <param name="control">Layout control</param>
            <param name="columnSpan">Number of columns for this element to fill. If less then zero - all available columns</param>
            <param name="columnElement"/>
            <param name="elementSize">Will this row stretch(*) or fill only desired size(auto)</param>
            <param name="expandGrid">Will grid elements be extracted from grid and put into different columns of span control</param>
            <returns>Same span grid control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddElements(JetBrains.Rider.Model.UIAutomation.BeGrid,System.ValueTuple{JetBrains.Rider.Model.UIAutomation.BeControl,JetBrains.Rider.Model.UIAutomation.MarginType}[])">
            <summary>
            Adds given elements into grid with specified size and logical margin
            </summary>
            <param name="grid" />
            <param name="controls" />
            <returns>Same grid</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddElements(JetBrains.Rider.Model.UIAutomation.BeGrid,System.ValueTuple{JetBrains.Rider.Model.UIAutomation.BeControl,System.String,JetBrains.Rider.Model.UIAutomation.MarginType}[])">
            <summary>
            Adds given elements into grid with specified size and logical margin
            </summary>
            <param name="grid" />
            <param name="controls" />
            <returns>Same grid</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddElements(JetBrains.Rider.Model.UIAutomation.BeGrid,System.ValueTuple{JetBrains.Rider.Model.UIAutomation.BeControl,System.String}[])">
            <summary>
            Adds given elements into grid with specified size
            </summary>
            <param name="grid" />
            <param name="controls" />
            <returns>Same grid</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddElements(JetBrains.Rider.Model.UIAutomation.BeGrid,JetBrains.Rider.Model.UIAutomation.BeControl[])">
            <summary>
            Adds elements to grid with auto size
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddElement(JetBrains.Rider.Model.UIAutomation.BeGrid,JetBrains.Rider.Model.UIAutomation.BeControl,System.String)">
            <summary>
            Adds element to new row into directional simple grid with specified size(auto\*)
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddElementWithMargin(JetBrains.Rider.Model.UIAutomation.BeGrid,JetBrains.Rider.Model.UIAutomation.BeControl,JetBrains.Rider.Model.UIAutomation.MarginType,System.String)">
            <summary>
            Add element into grid with specified logical margin
            </summary>
            <param name="grid" />
            <param name="control" />
            <param name="leftMargin" />
            <param name="size">*/auto</param>
            <returns>Same grid</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.SetElement(JetBrains.Rider.Model.UIAutomation.BeGrid,JetBrains.Rider.Model.UIAutomation.BeControl,System.String)">
            <summary>
            Replaces all elements inside grid with given element with specified size
            </summary>    
            <returns>Same grid</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.AddTab(JetBrains.Rider.Model.UIAutomation.BeTabbedControl,JetBrains.Rider.Model.UIAutomation.BeControl,System.String,JetBrains.DataFlow.Lifetime)">
            <summary>
            Adds element to new tab with given name to tabbed control model
            </summary>
            <param name="tabbedControl"/>
            <param name="control"/>
            <param name="name">Tab name</param>
            <param name="lifetime"/>
            <returns>Same tabbed control</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeLayouterExtensions.ParseUnitSize(System.String,JetBrains.Rider.Model.UIAutomation.MarginType)">
            <summary>
            Converts string size to protocol model
            </summary>
            <param name="size">size - auto\*</param>
            <param name="leftMargin">Logical margin for element with this size</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeTreeGridExtensions.GetBeList``1(System.Collections.Generic.IEnumerable{``0},JetBrains.DataFlow.Lifetime,JetBrains.IDE.UI.Extensions.PresentListLine{``0},JetBrains.IDE.UI.Extensions.TreeConfiguration,System.String)">
            <summary>
            Gets list control model from static list of data model elements.
            </summary>
            <param name="items">List of elements</param>
            <param name="lifetime"/>
            <param name="presentLine">Gets list of controls (one for one column) representing current data model elements</param>
            <param name="configuration">defines if list has single or multiselection</param>//todo: change to enum value
            <param name="id">Id for search this control inside parent element</param>
            <typeparam name="T">Type of data element</typeparam>
            <returns>Created list control model</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeTreeGridExtensions.GetBeList``1(JetBrains.DataFlow.IListEvents{``0},JetBrains.DataFlow.Lifetime,JetBrains.IDE.UI.Extensions.PresentListLine{``0},JetBrains.IDE.UI.Extensions.TreeConfiguration,System.String)">
            <summary>
            Gets list control model from dynamic list (ListEvents) of data model elements.
            </summary>
            <param name="items">List of elements</param>
            <param name="lifetime"/>
            <param name="presentLine">Gets list of controls (one for one column) representing current data model elements</param>
            <param name="configuration">defines if list has single or multiselection</param>//todo: change to enum value
            <param name="id">Id for search this control inside parent element</param>
            <typeparam name="T">Type of data element</typeparam>
            <returns>Created list control model</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeTreeGridExtensions.GetBeTree``1(JetBrains.DataFlow.IListEvents{``0},JetBrains.DataFlow.Lifetime,JetBrains.IDE.UI.Extensions.PresentTreeLine{``0},System.Func{``0,JetBrains.DataFlow.IListEvents{``0}},JetBrains.IDE.UI.Extensions.TreeConfiguration,System.String)">
            <summary>
            Gets tree control model from list of data model elements
            </summary>
            <param name="items">List of elements</param>
            <param name="lifetime"/>
            <param name="presentLine">Gets list of controls (one for one column) representing current data model elements</param>
            <param name="configuration"></param>
            <param name="id">Id for search this control inside parent element</param>
            <param name="getChildren"></param>
            <returns>Created list control model</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeTreeGridExtensions.GetBeTree``1(System.Collections.Generic.IEnumerable{``0},JetBrains.DataFlow.Lifetime,JetBrains.IDE.UI.Extensions.PresentTreeLine{``0},System.Func{``0,JetBrains.DataFlow.IListEvents{``0}},JetBrains.IDE.UI.Extensions.TreeConfiguration,System.String)">
            <summary>
            Gets tree control model from list of data model elements
            </summary>
            <param name="items">List of elements</param>
            <param name="lifetime"/>
            <param name="presentLine">Gets list of controls (one for one column) representing current data model elements</param>
            <param name="configuration"></param>
            <param name="id">Id for search this control inside parent element</param>
            <param name="getChildren"></param>
            <returns>Created list control model</returns>
        </member>
        <member name="T:JetBrains.IDE.UI.Extensions.ValidationRule`1">
            <summary>
            Class for validation rule to be added inside control
            </summary>
            <typeparam name="T">Type of incoming value</typeparam>
        </member>
        <member name="T:JetBrains.IDE.UI.Extensions.CustomValidationRule`1">
            <inheritdoc />
            <summary>
            Custom implementation of validation rule which takes function for validation and applies it when value in control has changed.
            If locks are non null - rule is considered as guarded and will be executed under guard.   
            </summary>
            <typeparam name="T">Type of incoming value</typeparam>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.CustomValidationRule`1.#ctor(System.Func{`0,System.ValueTuple{System.String,JetBrains.Rider.Model.Icon,JetBrains.Rider.Model.UIAutomation.ValidationStates}},JetBrains.DataFlow.Lifetime,JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Custom implementation of validation rule which takes function for validation and applies it when value in control has changed.
            </summary>
            <param name="validate">function to check new value from control. Returned string should be null if entered value is valid according to the rule</param>
            <param name="lifetime"/>
            <param name="validationState">State in case value is invalid.</param>
            <param name="locks">Can be null, in other case validation function will be executed under guard </param>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeValidationExtensions.WithValidationRule(JetBrains.Rider.Model.UIAutomation.BeComboBox,JetBrains.DataFlow.Lifetime,System.Func{System.String,System.Boolean},System.String,JetBrains.Rider.Model.Icon,JetBrains.Application.Threading.IShellLocks,JetBrains.Rider.Model.UIAutomation.ValidationStates)">
            <summary>
            Adds validation rule to given combobox 
            </summary>
            <param name="control">Control to apply rule to</param>
            <param name="lifetime"/>
            <param name="validate">Function to validate value</param>
            <param name="errorMessage">Error to display in tooltip when value is invalid</param>
            <param name="icon">Icon which will be displayed in ui in case value is invalid</param>
            <param name="locks">Can be null, in other case validation function will be executed under guard </param>
            <param name="validationState">State in case value is invalid.</param>
            <returns>same combobox for fluid api</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeValidationExtensions.WithValidationRule(JetBrains.Rider.Model.UIAutomation.BeTextBox,JetBrains.DataFlow.Lifetime,System.Func{System.String,System.Boolean},System.String,JetBrains.Rider.Model.Icon,JetBrains.Rider.Model.UIAutomation.ValidationStates,JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Adds validation rule to given textbox 
            </summary>
            <param name="control">Control to apply rule to</param>
            <param name="lifetime"/>
            <param name="validate">Function to validate value</param>
            <param name="errorMessage">Error to display in tooltip when value is invalid</param>
            <param name="icon">Icon which will be displayed in ui in case value is invalid</param>
            <param name="locks">Can be null, in other case validation function will be executed under guard </param>
            <param name="validationState">State in case value is invalid.</param>
            <returns>same textbox for fluid api</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeValidationExtensions.WithValidationRule(JetBrains.Rider.Model.UIAutomation.BeTextBox,JetBrains.DataFlow.Lifetime,System.Func{System.String,System.String},JetBrains.Rider.Model.Icon,JetBrains.Application.Threading.IShellLocks,JetBrains.Rider.Model.UIAutomation.ValidationStates)">
            <summary>
            Adds validation rule to given textbox 
            </summary>
            <param name="control">Control to apply rule to</param>
            <param name="lifetime"/>
            <param name="validate">Function to validate value. Returns null if value is valid, error text otherwise</param>
            <param name="icon">Icon which will be displayed in ui in case value is invalid</param>
            <param name="locks">Can be null, in other case validation function will be executed under guard </param>
            <param name="validationState">State in case value is invalid.</param>
            <returns>same control for fluid api</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeValidationExtensions.WithValidationRule(JetBrains.Rider.Model.UIAutomation.BeComboBox,JetBrains.DataFlow.Lifetime,System.Func{System.String,System.String},JetBrains.Rider.Model.Icon,JetBrains.Application.Threading.IShellLocks,JetBrains.Rider.Model.UIAutomation.ValidationStates)">
            <summary>
            Adds validation rule to given combobox 
            </summary>
            <param name="control">Control to apply rule to</param>
            <param name="lifetime"/>
            <param name="validate">Function to validate value. Returns null if value is valid, error text otherwise</param>
            <param name="icon">Icon which will be displayed in ui in case value is invalid</param>
            <param name="locks">Can be null, in other case validation function will be executed under guard </param>
            <param name="validationState">State in case value is invalid.</param>
            <returns>same control for fluid api</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeValidationExtensions.WithValidationRule``2(``0,JetBrains.DataFlow.Lifetime,System.Func{``1,System.ValueTuple{System.String,JetBrains.Rider.Model.Icon,JetBrains.Rider.Model.UIAutomation.ValidationStates}},JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Adds validation rule to given control if is's possible 
            </summary>
            <param name="control">Control to apply rule to</param>
            <param name="lifetime"/>
            <param name="validate">Function to validate value. Returns null if value is valid, error text otherwise</param>
            <param name="locks">Can be null, in other case validation function will be executed under guard </param>
            <param name="validationState">State in case value is invalid.</param>
            <returns>same control for fluid api</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeValidationExtensions.WithValidationRule``2(``0,JetBrains.DataFlow.Lifetime,JetBrains.IDE.UI.Extensions.ValidationRule{``1})">
            <summary>
            Adds validation rule to given control if possible 
            </summary>
            <param name="control">Control to apply rule to</param>
            <param name="lifetime"/>
            <param name="rule">Rule to add</param>
            <returns>same control for fluid api</returns>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.BeValidationExtensions.TryAddRule``1(JetBrains.Rider.Model.UIAutomation.BeControlWithValidation,JetBrains.DataFlow.Lifetime,JetBrains.IDE.UI.Extensions.ValidationRule{``0})">
            <summary>
            Currently all types of controls with validation should be added to this method  
            </summary>
            <typeparam name="T">Type of value which will be returned by control</typeparam>
        </member>
        <member name="T:JetBrains.IDE.UI.Extensions.ValidationRules`2">
            <summary>
            Class for storing validation rules inside ext for custom control
            </summary>
            <typeparam name="TControlType"/>
            <typeparam name="T">Type of value which is expected from control</typeparam>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.EnumHelper.Description(System.Enum)">
            <summary>
              Gets the description of a specific enum value.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.EnumHelper.GetAllValuesAndDescriptions``1">
            <summary>
              Returns an enumerable collection of all values and descriptions for an enum type.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.UI.Extensions.EnumHelper.EnumValue``1(System.String)">
            <summary>
            Returns enum value with given description
            </summary>
        </member>
        <member name="T:JetBrains.IDE.UI.Options.OptionsPageViewFactorySolution">
            <summary>
            Enables <see cref="T:JetBrains.Application.UI.Options.OptionsPageViewFactoryManager"/> to import Solution components to the ctor (preeempts Shell when a solution is open and it's the current solution).
            </summary>
        </member>
        <member name="T:JetBrains.IDE.UsageStatistics.ILicensedEntityUsageCheckerByProject">
            <summary>
            Implement the component to count usages of product specific to project type. 
            Make sure the component is marked with corresponding product zone so it is available if and only if the product is enabled.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.EditorManager">
            <summary>
            Default implementation that is not bound to any specific editor and is appropriate as test and stub implementation.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.PersistableViewManager.CreatePersistableView(JetBrains.DataFlow.LifetimeDefinition,JetBrains.Application.UI.PersistableDocument.PersistableDocument,JetBrains.Application.UI.UIAutomation.EitherControl,JetBrains.Application.Shortcuts.ShortcutManager.ShortcutScope)">
            <summary>
            Creates a new document tab and opens it with the given content.
            </summary>
            <param name="lifetimeDefinition">The limiting lifetime definition which will be terminated by the persistable view when its document tab is closed.</param>
            <param name="persistableDocument">Descriptor of the document in this document tab.</param>
            <param name="contentControl">Document tab content.</param>
            <param name="shortcutScope">Global or TextEditor shortcut scope.</param>
            <returns></returns>
        </member>
    </members>
</doc>
