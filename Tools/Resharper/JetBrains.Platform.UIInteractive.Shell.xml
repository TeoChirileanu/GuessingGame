<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.UIInteractive.Shell</name>
    </assembly>
    <members>
        <member name="T:JetBrains.UI.SrcView.Actions.ActionBar.ActionAutomationInteractivityServiceTmp">
            <summary>
            Presenter service for actions automation, to facilitate views creation on a command from the automation.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Actions.Views.ActionToolBar.IsVertical">
            <summary>
            Defines whether toolbar should be vertical or horizontal. It was introduced to avoid using toolbartray
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Application.Env.DpiAwarenessHostMixin">
            <summary>
            Sets up the app to favor dynamic DPI in the best possible manner.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Application.Env.HideSplashScreen">
            <summary>
            After the main window is ready, hides the splash screen.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Application.Env.Launcher">
            <summary>
            Launcher for base app entry points.
            The full standalone app has its own launcher in its project, because it references more stuff.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Application.Env.Launcher.MainMethod">
            <summary>
            Refer to this if you need to get the <see cref="T:JetBrains.Build.Serialization.AssemblyQualifiedTypeMemberName" /> for the <see cref="M:JetBrains.UI.SrcView.Application.Env.Launcher.Main" /> method of this launcher.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Application.Env.Launcher.MainMethodScattered">
            <summary>
            Refer to this if you need to get the <see cref="T:JetBrains.Build.Serialization.AssemblyQualifiedTypeMemberName" /> for the <see cref="M:JetBrains.UI.SrcView.Application.Env.Launcher.Main" /> method of this launcher.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Application.Env.Launcher.Main">
            <summary>
            The GUI entry point for calling from the native part.
            Inits the simple GUI host, without the tabwell-required services.
            Expects to have the partial set of components written in resources, like host name and environment zone, while the set of the application packages is collected ad-hoc based on what's found in the application folder.
            </summary>
            <returns>The exit code for the process.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Application.Env.Launcher.MainScattered">
            <summary>
            The GUI entry point for calling from the native part.
            Inits the simple GUI host, without the tabwell-required services.
            Expects to have the partial set of components written in resources, like host name and environment zone, while the set of the application packages is collected ad-hoc based on what's found in the application folder.
            </summary>
            <returns>The exit code for the process.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Application.Env.Launcher.ValidateCompileTimeConstants(JetBrains.Util.ILogger)">
            <summary>
            Vaidates <see cref="T:JetBrains.Application.BuildScript.Compile.LauncherCompileTimeConstants" /> against <see cref="T:JetBrains.UI.SrcView.Application.Env.Launcher" />.
            Mounts to an attempt to declare a host.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.UI.SrcView.Application.Env.SplashScreenHwnd">
            <summary>
            Wraps the Splash Screen HWND which was created by the bootstrapper for passing it into the application host so that the splash could be closed after the appication is ready to show the main window.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Application.Env.WindowsSimpleGuiApplicationHost">
            <summary>
            Additional host features for creating standalone interactive GUI applications, core features (no IDE window frame, no ActiPro, no nothing).
            For full-scale standalone GUI apps, see the Standalone family assemblies and hosts.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Application.Env.WindowsSimpleGuiApplicationHost.OnWindowsInteractiveSimpleGuiEngine(JetBrains.Application.Environment.JetHostItems.Empty)">
            <summary>
            Minimum Interactive GUI support. See “Standalone” family assemblies for full support.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.UI.SrcView.Application.Env.WinFormsApplicationIdleEvent">
            <summary>
            UI-Interactive implementation for <see cref="T:JetBrains.Application.Environment.ApplicationIdleEvent"/> when we can sink it from WinForms.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Automation.AutomationViewsRegistryAvalon.JetBrains#UI#SrcView#Automation#IAutomationViewsRegistryAvalon#DataTemplatesResourceDictionary">
            <summary>
            <para>Gets a WPF <see cref="T:System.Windows.ResourceDictionary"/> representing <see cref="F:JetBrains.Application.UI.Automation.AutomationViewsRegistry.myRegisteredViews"/> as <see cref="T:System.Windows.DataTemplate"/>s.</para>
            <para>As a result, using a listed automation type as <see cref="P:System.Windows.Controls.ContentControl.Content"/> in a <see cref="T:System.Windows.Controls.ContentControl"/>, or as an item in an <see cref="T:System.Windows.Controls.ItemsControl"/> etc will result in the corresponding view automatically applied to the automation object.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.AutomationViewsRegistryAvalon.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.Environment.ShellPartCatalogSet,JetBrains.Application.Components.IComponentContainer,JetBrains.Util.ILogger)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.UI.SrcView.Automation.EitherControlView">
            <summary>
            A view to be used as a data template for presenting an <see cref="T:JetBrains.Application.UI.UIAutomation.EitherControl"/>, correctly with lifetiming.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Automation.IAutomationViewsRegistryAvalon.DataTemplatesResourceDictionary">
            <summary>
            <para>Gets a WPF <see cref="T:System.Windows.ResourceDictionary"/> representing <see cref="T:System.Windows.DataTemplate"/> as <see cref="T:System.Windows.Controls.ContentControl"/>s.</para>
            <para>As a result, using a listed automation type as <see cref="T:System.Windows.Controls.ContentControl"/> in a <see cref="P:JetBrains.Application.UI.Automation.IAutomationViewsRegistry.RegisteredViews"/>, or as an item in an <see cref="T:JetBrains.Application.UI.Automation.IAutomationViewsRegistry"/> etc will result in the corresponding view automatically applied to the automation object.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.IAutomationViewsRegistryEx.TryCreateWindowlessControlView(JetBrains.Application.UI.Automation.IAutomationViewsRegistry,JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.UIAutomation.IAutomation,JetBrains.Application.Components.IComponentContainer)">
            <summary>
            Normally, an automation object gets an Avalon view with a <see cref="T:System.Windows.Controls.ContentPresenter"/> automatically.
            This allows to create an alternative <see cref="T:JetBrains.Application.UI.Controls.IWindowlessControl"/>-based view for use with WinForms APIs. Such view must be separately implemented for an automation object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.IAutomationViewsRegistryEx.CreateWindowlessControlView(JetBrains.Application.UI.Automation.IAutomationViewsRegistry,JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.UIAutomation.IAutomation,JetBrains.Application.Components.IComponentContainer)">
            <summary>
            Normally, an automation object gets an Avalon view with a <see cref="T:System.Windows.Controls.ContentPresenter"/> automatically.
            This allows to create an alternative <see cref="T:JetBrains.Application.UI.Controls.IWindowlessControl"/>-based view for use with WinForms APIs. Such view must be separately implemented for an automation object.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Automation.PublishAutomationViewsRegistryToPlatformResources">
            <summary>
            Mounts <see cref="T:JetBrains.Application.UI.Automation.IAutomationViewsRegistry"/> into the common <see cref="T:JetBrains.UI.Wpf.IPlatformResourceDictionary"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.All">
            <summary>
            Gets all of the results
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.First">
            <summary>
            Gets the first search result.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.FirstOrDefault">
            <summary>
            Gets the first search result, or <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.LastOrDefault">
            <summary>
            Gets the last search result, or <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.Single(System.String)">
            <summary>
            Gets the one and only search result.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.Last">
            <summary>
            Gets the last search result.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.Union(System.Windows.Automation.AutomationProperty,System.Object)">
            <summary>
            Fluent. Adds an OR condition to the search.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.Where(System.Windows.Automation.AutomationProperty,System.Object)">
            <summary>
            Fluent. Adds an AND condition to the search.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.ExecRequest(System.Func{System.Windows.Automation.AutomationElement})">
            <summary>
            A stub for switching into calling for <see cref="!:Automation.ExecFreeThreaded"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.FindAllCore">
            <summary>
            Switching implementation: by UIA or HWND.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.FindFirstOrDefaultCore">
            <summary>
            Switching implementation: by UIA or HWND.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.FindLastOrDefaultCore">
            <summary>
            Switching implementation: by UIA or HWND.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.GetConditionForSearch">
            <summary>
            Gets the condition to be used for running UIA searches.
            Specifically handles the case with no condition.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.SearchHwndCore">
            <summary>
            HWND-based search, universal impl.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.Hwnd(System.Windows.Automation.AutomationElement)">
            <summary>
            Gets the HWND of an UIA.
            Throws if the latter is not a window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.Render(System.Windows.Automation.Condition)">
            <summary>
            Renders the textual representation of the condition.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.Search(System.Windows.Automation.AutomationElement,System.Windows.Automation.TreeScope)">
            <summary>
            A fluent search API on automation elements.
            Supports searching in both HWND-based and virtual UIA trees.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.SearchHwnd(System.Windows.Automation.AutomationElement,System.Windows.Automation.TreeScope)">
            <summary>
            A fluent search API on automation elements.
            Supports searching HWND automation elements only, but does this with less chances of a deadlock.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.ToggleInto(System.Windows.Automation.AutomationElement,System.Windows.Automation.ToggleState)">
            <summary>
            Toggle pattern: toggles until the desired result is achieved.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.ValueGet(System.Windows.Automation.AutomationElement)">
            <summary>
            Value pattern: gets the value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.ValueSet(System.Windows.Automation.AutomationElement,System.String)">
            <summary>
            Value pattern: sets the value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.WhereEnabled(JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch)">
            <summary>
            Property-specific overload for the <see cref="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.Where(System.Windows.Automation.AutomationProperty,System.Object)"/> method.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.WhereVisible(JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch)">
            <summary>
            Property-specific overload for the <see cref="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.Where(System.Windows.Automation.AutomationProperty,System.Object)"/> method.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.WhereAutomationIdIs(JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch,System.String)">
            <summary>
            Property-specific overload for the <see cref="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.Where(System.Windows.Automation.AutomationProperty,System.Object)"/> method.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.WhereControlTypeIs(JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch,System.Windows.Automation.ControlType)">
            <summary>
            Property-specific overload for the <see cref="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.Where(System.Windows.Automation.AutomationProperty,System.Object)"/> method.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.WhereNameIs(JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch,System.String)">
            <summary>
            Property-specific overload for the <see cref="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.Where(System.Windows.Automation.AutomationProperty,System.Object)"/> method.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.WhereClassNameIs(JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch,System.String)">
            <summary>
            Property-specific overload for the <see cref="M:JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx.AutomationElementSearch.Where(System.Windows.Automation.AutomationProperty,System.Object)"/> method.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationPeerEx.GetChildAutomationPeers(System.Windows.DependencyObject,JetBrains.UI.SrcView.Automation.UIA.AutomationPeerEx.StartingElement,System.Collections.Generic.List{System.Windows.Automation.Peers.AutomationPeer})">
            <summary>
            If you are implementing an automation peer for an UI element, this helper gets its automation children by looking up automation peers in the Visual Tree of the given UI element.
            This works generally the same way as the default implementation of <see cref="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetChildrenCore" /> or <see cref="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetChildrenCore" />, by DFSing the visual descendants, stopping at nodes which are automation peers themselves.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Automation.UIA.AutomationPeerEx.GetChildAutomationPeers(System.Windows.DependencyObject,JetBrains.UI.SrcView.Automation.UIA.AutomationPeerEx.StartingElement)">
            <summary>
            If you are implementing an automation peer for an UI element, this helper gets its automation children by looking up automation peers in the Visual Tree of the given UI element.
            This works generally the same way as the default implementation of <see cref="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetChildrenCore" /> or <see cref="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetChildrenCore" />, by DFSing the visual descendants, stopping at nodes which are automation peers themselves.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Automation.UIA.AutomationPeerEx.StartingElement.Exclude">
            <summary>
            Only children and grandchilren are considered. Even if the original element has a peer (which would prevent from looking at its children at all), it's ignored and children are considered. Use this if you are calling on an automation-peer-enabled element to find its children peers.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Automation.UIA.AutomationPeerEx.StartingElement.Include">
            <summary>
            The original element is considered as well, and if it's a peer, it's the only one to be returned. Use when you're calling this not on your own element (which is a peer and which you want to obviously skip), but on some of its child visual elements.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Automation.UIA.AutomationProperties">
            <summary>
            Exposes automation properties.
            Because of the class name, R# Smart Completion can suggest them where applicable.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Automation.UIA.AutomationProperties.AutomationId">
            <summary>Property ID: AutomationId - An identifier for an element that is unique within its containing element.</summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Automation.UIA.AutomationProperties.ClassName">
            <summary>Property ID: ClassName - name of underlying class - implementation dependant, but useful for test</summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Automation.UIA.AutomationProperties.ControlType">
            <summary>Property ID: The ControlType of this Element</summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Automation.UIA.AutomationProperties.Name">
            <summary>Property ID: name of this instance of control</summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Automation.UIA.AutomationProperties.NativeWindowHandle">
            <summary>Property ID: NativeWindowHandle - Window Handle, if the underlying control is a Window</summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Automation.UIA.AutomationProperties.IsEnabled">
            <summary>Property ID: Enabled</summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Automation.WinFormsControlView">
            <summary>
            A view to be used as a data template for presenting a WinForms control as a WPF content element. No additional lifetiming is applied, it's on part of the automation object.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Build.App.BuildAppDispatchAutomationInteractivityInteractive">
            <summary>
            User interactivity for the <see cref="T:JetBrains.Application.Build.App.Ux.BuildAppDispatchAutomation" />.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Build.ProfileExplorerView">
            <summary>
            ProfileExplorerView
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Build.ProfileExplorerView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Build.SwatchIndicatorView.Dim.Base.InactiviyDimFactor">
            <summary>
            Add this much shade to simulate inactive color on an active one.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.MinPreferredRowHeight">
            <summary>
            Add more rows as the rowheight is above this limit (this tradess off indicator height for its width, which is good for reading its text)
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.NaturalIndicatorHeight">
            <summary>
            Having constant pixel sizes of borders etc at any scale looks bad, let's render it at this height and than scale to any size required (downscaling included).
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.GetRowCountApproxFromFactor(System.Double,System.Windows.Size,System.Int32)">
            <summary>
            An inverse to <see cref="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.CalculatedLayout.GetIndicatorAspect" />.
            As there's the <see cref="M:System.Math.Ceiling(System.Double)" /> function that can't exactly be inverted, it has been ignored here. Round the rowcount up or down, depending on the conditions.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.RowCountCeiling(System.Double,System.Int32)">
            <summary>
            Round the number of rows to the closest meaningful integer (not any number of rows is meaningful, it must be a divider of the indicators count).
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.RowCountFloor(System.Double,System.Int32)">
            <summary>
            Round the number of rows to the closest meaningful integer (not any number of rows is meaningful, it must be a divider of the indicators count).
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.RowCountRoundCore(System.Int32,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Round the number of rows to the closest meaningful integer (not any number of rows is meaningful, it must be a divider of the indicators count).
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.Run_ChooseRowCount(System.Windows.Size,System.Int32)">
            <summary>
            Optimizes the count of project indicator rows (total rows is greater by one).
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.CalculatedLayout.GetFullRowIndicatorLogicalSize">
            <summary>
            Same as <see cref="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize" />, just for an indicator that occupies the whole row (like solution indicator does).
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.CalculatedLayout.GetIndicatorAspect">
            <summary>
            Indicator width-to-height factor in both logical and visual sizes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize">
            <summary>
            Logical indicator size (the only size the indicator control knows about; always have the same height to preserve line-thickness-to-body-size proportions when the view is resized).
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.CalculatedLayout.GetIndicatorVisualHeight">
            <summary>
            Indicator size as it sits in the <see cref="F:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.CalculatedLayout.ViewSize" />, as seen on screen.
            <see cref="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize" /> is render-transformed to become this.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.CalculatedLayout.GetIndicatorVisualSize">
            <summary>
            Indicator size as it sits in the <see cref="F:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.CalculatedLayout.ViewSize" />, as seen on screen.
            <see cref="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize" /> is render-transformed to become this.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.CalculatedLayout.GetIndicatorVisualWidth">
            <summary>
            Indicator size as it sits in the <see cref="F:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.CalculatedLayout.ViewSize" />, as seen on screen.
            <see cref="M:JetBrains.UI.SrcView.Build.SwatchPanelView.SwatchPanelViewElement.LayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize" /> is render-transformed to become this.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ControlShowcase.ActionSystem.ActionSystemUIPlayground">
            <summary>
            Interaction logic for ActionSystemUIPlayground.xaml
            </summary>
            <summary>
            ActionSystemUIPlayground
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.ControlShowcase.ActionSystem.ActionSystemUIPlayground.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.ViewModels.SortingViewModel.Name">
            <summary>
            Gets name of sorting type
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.Views.ExtensionManagerView">
            <summary>
            Interaction logic for ExtensionManagerView.xaml
            </summary>
            <summary>
            ExtensionManagerView
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.Views.ExtensionManagerView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ControlShowcase.ControlShowcaseView">
            <summary>
            Interaction logic for ControlShowcaseView.xaml
            </summary>
            <summary>
            ControlShowcaseView
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.ControlShowcase.ControlShowcaseView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.ActionBarView">
            <summary>
            A UI element for planting the Action Manager Toolbar into the WPF UI.
            Does not require any components for creating an instance.
            All of the components and data are databound from the viewmodel.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.ActionBarViewFocusedControlScope">
            <summary>
            A UI element for planting the Action Manager Toolbar into the WPF UI.
            Does not require any components for creating an instance.
            All of the components and data are databound from the viewmodel.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.ActionMenuView">
            <summary>
            A UI element for planting the Action Manager Toolbar into the WPF UI.
            Does not require any components for creating an instance.
            All of the components and data are databound from the viewmodel.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.ActionMenuViewFocusedControlScope">
            <summary>
            A UI element for planting the Action Manager Toolbar into the WPF UI. Does not require any components for creating an instance.
            All of the components and data are databound from the viewmodel.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView">
            <summary>
            Layouter and renderer interface that handles the presentation for the <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem"/>.
            Directed and invoked by <see cref="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.Item">
            <summary>
            Gets the item this presentation handler is attached to.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.Location">
            <summary>
            Gets or sets the location.
            Must be set before calling the <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)"/> method.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.GetSize(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim)">
            <summary>
            Gets the actual size of the item at the current moment, as obtained after the last <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)"/>, according to which the item is about to <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)"/>.
            Flags affect the upper margin size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.HitTest(System.Drawing.Point,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim)">
            <summary>
            Performs a hit-test of the menu item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            First (bottom-up) part of the layout: the preferred sizes are being collected.
            Calculates the per-column preferred size of the menu item.
            Should be called before <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)" /> on any change.
            </summary>
            <param name="gc">A device context to measure the text against.</param>
            <param name="dim">Cached dimensions for the item, for its current DPI.</param>
            <param name="renderparamsShared">
            Gets the rendering parameters to be used while rendering or measuring the items text, as per the current dynamic DPI.
            Non thread-safe.
            You CAN and MUST set up all of the color parameters over this instance each time before the paint call (measure does not care).
            </param>
            <returns>Returns an array of preferred sizes for each of the cells defined.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            Performs the top-down part of the layout, when the item receives some size it should layout itself into.
            Should be called after <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)"/>.
            </summary>
            <param name="cells">The available size for layouting each of the cells into.</param>
            <param name="gc">A device context to measure the text against.</param>
            <param name="dim">Cached dimensions for the item, for its current DPI.</param>
            <param name="renderparamsShared">
            Gets the rendering parameters to be used while rendering or measuring the items text, as per the current dynamic DPI.
            Non thread-safe.
            You CAN and MUST set up all of the color parameters over this instance each time before the paint call (measure does not care).
            </param>
            <returns>The size the item succeeded to layout into. Typically, should be equal in width to the sum of all the cell widths, and in height to the maximum height encountered.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            Paints the item according to the current layout.
            <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)"/> must be called before painting to achieve a meaningful result.
            The painting is performed within the <see cref="T:System.Drawing.Size"/>, at the location <see cref="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.Location"/>.
            Either includes or not the upper margin that constitutes the spacing between the items and makes the item asymmetric.
            The first item in non-scrollable menu and the standalone item presentation should not have the upper margin.
            </summary>
            <param name="dim">Cached dimensions for the item, for its current DPI.</param>
            <param name="renderparamsShared">
            Gets the rendering parameters to be used while rendering or measuring the items text, as per the current dynamic DPI.
            Non thread-safe.
            You CAN and MUST set up all of the color parameters over this instance each time before the paint call (measure does not care).
            </param>
            <param name="g"></param>
            <param name="colors"></param>
            <param name="flags"></param>
            <param name="adorner"></param>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView">
            <summary>
            A base class for the popup menu item presentations in their default rendering ("as in menu").
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.myItem">
            <summary>
            Menu item we're rendering.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.myLocation">
            <summary>
            <see cref="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Location"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.PaintWithUpperMargin(System.Drawing.Graphics,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            Painting implementation. Always includes the upper margin. Works in menu-item-local coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.GetSize(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim)">
            <summary>
            Gets the actual size of the item at the current moment, as obtained after the last <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)"/>, according to which the item is about to <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.HitTest(System.Drawing.Point,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim)">
            <summary>
            Performs a vertical hit-test (checks the y-coordinate only).
            </summary>
            <returns>Zero if hit, less than zero if the point is located above the item, and more than zero if below.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            First (bottom-up) part of the layout: the preferred sizes are being collected.
            Calculates the per-column preferred size of the menu item.
            Should be called before <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)"/> on any change.
            </summary>
            <param name="gc">A device context to measure the text against.</param>
            <param name="dim"></param>
            <param name="renderparamsShared"></param>
            <returns>Returns an array of preferred sizes for each of the cells defined.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            Performs the top-down part of the layout, when the item receives some size it should layout itself into.
            Should be called after <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)"/>.
            </summary>
            <param name="cells">The available size for layouting each of the cells into.</param>
            <param name="gc">A device context to measure the text against.</param>
            <param name="dim"></param>
            <param name="renderparamsShared"></param>
            <returns>The size the item succeeded to layout into. Typically, should be equal in width to the sum of all the cell widths, and in height to the maximum height encountered.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            Paints the item according to the current layout.
            <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)" /> must be called before painting to achieve a meaningful result.
            The painting is performed within the <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.GetSize(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim)" />, at the location <see cref="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.Location" />.
            Either includes or not the upper margin that constitutes the spacing between the items and makes the item asymmetric.
            The first item in non-scrollable menu and the standalone item presentation should not have the upper margin.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Item">
            <summary>
            Gets the item this presentation handler is attached to.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Location">
            <summary>
            Gets or sets the location.
            Must be set before calling the <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)"/> method.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim">
            <summary>
            A class with dimension constants.
            See the layout image for meanings.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim.GroupHeaderGap">
            <summary>
            Width of the gap between the icon column and its bulk fill.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim.LabelMinDesiredSize">
            <summary>
            The minimum size under which it's not desirable to shrink the label.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim.Margin">
            <summary>
            Width of the left&amp;right margins, height of the upper margin.
            Don't use this directly, instead, see the <see cref="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim.Margin"/> property that sets the margin height to zero for the first item.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim.Separator">
            <summary>
            Height of the separator.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim.DisplayNameToShortcutTextGap">
            <summary>
            Minimal gap between the menu item text and its mnemonic on the right.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim.TailGlyphSeparatorWidth">
            <summary>
            Width of the tail glyph separator (for an execute-or-expand item).
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim.TailGlyphMargin">
            <summary>
            Margin around the tail glyph (separates it from selection rect on the right and separator on the left).
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim.Dpi">
            <summary>
            The resolution of the item presentation.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView">
            <summary>
            Implements the Mainpart sub-control of the <see cref="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.ScrollTimerIntervalWithMouse">
            <summary>
            The scroll timer interval in case a mouse button (left or right) is down.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.ScrollTimerIntervalWithoutMouse">
            <summary>
            The scroll timer interval in case neither left nor right mouse button is down.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LastVisibleItem">
            <summary>
            Index of the last visible item in the scrolling view.
            <c>-1</c> means it has not been initialized yet.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myBmpArrowDownDisabled">
            <summary>
            The pre-rendered lower-scroller arrow, disabled state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myBmpArrowDownEnabled">
            <summary>
            The pre-rendered lower-scroller arrow, enabled state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myBmpArrowUpDisabled">
            <summary>
            The pre-rendered upper-scroller arrow, disabled state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myBmpArrowUpEnabled">
            <summary>
            The pre-rendered upper-scroller arrow, enabled state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myColumnWidths">
            <summary>
            After performing the first layouting, stores the menu-item-column-widths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myDirtyItems">
            <summary>
            Collects the indices of dirty items that have to be repainted on the next paint iteration.
            The usual <c>GetUpdateRgn</c> mechanisms do not take scrolling into account correctly.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myDropShadowEnabled">
            <summary>
            Caches the drop-shadow-enabled state, as it must be maintained constant between calc-sizes, but should update from time to time.
            Synced to OS settings on each <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.OnLayout(System.Windows.Forms.LayoutEventArgs)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myItemToView">
            <summary>
            After the mapping between items and views is established by <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.InitDataFlow_ItemViews(JetBrains.DataFlow.Lifetime,JetBrains.Application.Icons.IThemedIconManager)"/>, contains the up-to-date mapping from document items to item views.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myLastKeyDownWasMnemonic">
            <summary>
            Set by the <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs)"/> depending on whether it has successfully processed the key-down message as a mnemonic, or not.
            If <c>False</c>, the <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs)"/> should try looking up a mnemonic by char also, in addition to the key-down's v-key.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myMenuClientHeight">
            <summary>
            Caches the <see cref="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuClient"/> value so that the scroll ranges could be adjusted when the menu client height changes.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myMenuView">
            <summary>
            Codebehind that implements the menu logic.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myMouseLocation">
            <summary>
            Filters out zero movements.
            Also, helps with telling the initial menu display from normal mouse movements.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myMouseWheelScrollDelta">
            <summary>
            Caches the system metric.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myMouseWheelScrollLines">
            <summary>
            Caches the system metric.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myReadonlyCookie">
            <summary>
            A token that supports implementing the readonly <see cref="T:JetBrains.DataFlow.Property`1"/> items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myRects">
            <summary>
            The current precalculated layout.
            Created on the first top-down layouting pass.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myScrollNeeded">
            <summary>
            Whether the content does not fit into the control's constrained size, and scrolling is needed to present it all.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myScrollPos">
            <summary>
            If <see cref="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myScrollNeeded"/>, represents the scrolling position — an index of the item at the top of the view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myScrollTimer">
            <summary>
            A timer that triggers scrolling by one item.
            Lazily-created.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.Document">
            <summary>
            Gets the object that implements the menu logic.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.FirstVisibleItem">
            <summary>
            Gets the first visible item in the scrolling view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.IsKeyboardNavigating">
            <summary>
            Readonly. Set to <c>True</c> when the keyboard navigation is being performed.
            If the document's selected item is being changed due to a keyboard action, this property is <c>True</c> when the change actually occurs.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.IsMouseNavigating">
            <summary>
            Readonly. Set to <c>True</c> when the mouse navigation is being performed.
            If the document's selected item is being changed due to a mouse action, this property is <c>True</c> when the change actually occurs.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.MenuView">
            <summary>
            Gets the parent menu view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.ScrollNeeded">
            <summary>
            Gets whether scrolling is turned on in the menu (if the items do not fit into the constrained size).
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.ExpandedItem">
            <summary>
            Once an item is expaned to show its popup menu, remembers that item. A non-<c>Null</c> value here indicates we're in expanded state, which modifies behavior a bit (eg moving mouse out does not reset selection).
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.IsHighlightingSearchHostResults">
            <summary>
            Whether menu should automatically highlight search hits from the Search Host when rendering menu items.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.RenderItem(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            Renders the current presentation of an item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.IsValidItemLocation(System.Drawing.Point)">
            <summary>
            Checks whether such a location represents a visible item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.EnsureVisible(System.Int32,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt)">
            <summary>
            Adjusts the view scrolling so that the item with the given index were visible at the position specified.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.GetAutoscrolling(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.NextItemDir@)">
            <summary>
            Gets whether the autoscrolling mode is on, and, if yes, what it direction is.
            </summary>
            <param name="direction">Autoscrolling direction, if the retval is <c>True</c>. Otherwise, undefined.</param>
            <returns>Whether autoscrolling is currently on.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.GetHitMenuItemIndex(System.Drawing.Point)">
            <summary>
            Looks up a menu item hit by the given point. <c>-1</c> means outside any items.
            </summary>
            <param name="pt">Point, in client coordinates.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.InitControls">
            <summary>
            Inits the UI controls, including the form itself
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.InitDataFlow_Document(JetBrains.DataFlow.Lifetime)">
            <summary>
            Sinks the document events.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.InitDataFlow_EnableKeyboardTooltips(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Tooltips.ITooltipManager,JetBrains.Application.Settings.ISettingsStore)">
            <summary>
            All of the keyboard tooltip handling for this menu.
            Keyboard-tooltips: appear when items are selected with keyboard.
            NOTE: when not given ITooltipManager, does not enable keyboard tooltips.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.InitDataFlow_ItemViews(JetBrains.DataFlow.Lifetime,JetBrains.Application.Icons.IThemedIconManager)">
            <summary>
            Monitors the document items, maintains the item views.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.InitDataFlow_ExpandOnHover(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.ISettingsStore)">
            <summary>
            When mouse is hovered over exandable items, they'd exand even without clicking.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.InvalidateDirtyItems">
            <summary>
            Marks the regions occupied by those items considered dirty as invalid.
            Helps taking scrolling into account correctly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.InvalidateItem(System.Int32)">
            <summary>
            Causes the specified item to be repainted on the next painting cycle.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Layouts the main part that includes the part borders, menu items, scrollers, quick-search editbox, etc.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutBottomUp_MenuItems(System.Int32[]@,System.Int32[]@,System.Drawing.Size@,JetBrains.UI.IGraphicsContainer,System.Drawing.Size,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            Invokes the menu items' bottom-up layouting and collects the information about max-column-widths and total-menu-width.
            </summary>
            <param name="nColumnWidths">Maximum encountered widths for each of the columns.</param>
            <param name="nItemHeights">Height of each of the items.</param>
            <param name="sizeTotal">Total size of all the items (item height is max cells' height, item width is the sum of cell widths).</param>
            <param name="gc">A device context to measure the text against.</param>
            <param name="sizeLimit">The limit for the size, as it helps to reduce the number of calculations.</param>
            <param name="dimItem"></param>
            <param name="renderparamsShared"></param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_MenuItems(JetBrains.UI.IGraphicsContainer,System.Drawing.Size,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            During the top-down layout session, when the menu area is already placed, layouts the menu items and scrolling arrows.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.Dim)">
            <summary>
            Sets the menu items' coordinates according to the scrolling position.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.OnScrollTimerTick">
            <summary>
            The scroll timer has ticked, perform the scrolling.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.Paint(System.Drawing.Graphics)">
            <summary>
            Does just the very painting into the given <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="g">Device context.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.PrerenderBitmapsStatic(JetBrains.DataFlow.Lifetime,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView)">
            <summary>
            Prerenders some of the commonly used UI elements into bitmaps.
            </summary>
            <param name="lifetime"></param>
            <param name="menuview"></param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.PrerenderBitmapsStatic_ScrollArrows(JetBrains.DataFlow.Lifetime)">
            <summary>
            Prerenders the bitmaps for scrolling arrows.
            </summary>
            <param name="lifeControl"></param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.ResetScrollRanges">
            <summary>
            Resets the scroll ranges and recalculates the current scrolling position so that the selected item were visible and the scrolling pos was not beyound the last reasonable position (ie no empty space beyond the end).
            Should be called after loading a new set of items or after the menu client height (<see cref="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuClient"/>) changes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.ScrollByOneItem(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.NextItemDir)">
            <summary>
            Scrolls the view by one item, if possible.
            In either case, one item is expected to appear in view after the scrolling, and zero or more items to disappear at the opposite edge. This is to the case of non-equally-sized items.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.ScrollMenu(System.Int32)">
            <summary>
            Scrolls the menu vertically by the amount given by the <paramref name="dy" /> value, in pixels.
            <paramref name="dy" /> being positive, the content slides down. Otherwise, it slides up.
            This method causes no repaint.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.SelectItemAtPoint(System.Drawing.Point)">
            <summary>
            Selects a menu item that is currently under the point specified.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.SetAutoscrolling">
            <summary>
            Checks whether the autoscrolling mode should be turned on or off, and applies the state.
            Safe to call more than once even in the same auto-scrolling mode.
            No params, as it's evident form mouse position &amp; capture state as whether we're autoscrolling or not.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.Colors">
            <summary>
            Gets the set of colors involved in painting the control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The non-Transparency mode painting function.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged"></see> event.
            </summary>
            
            <param name="e">The <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.OnKeyDownHighPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process only high-priority keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.Dim">
            <summary>
            A static class with dimension constants.
            See the layout image for meanings.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.Dim.ScrollArrow">
            <summary>
            Size of the scroller arrow inside the <see cref="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.Dim.Scroller">scroller area</see>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.Dim.ScrollArrowMargin">
            <summary>
            A width-only size that defines the minimum distance between a scroll arrow and the edge of its parent scroll area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.Dim.Scroller">
            <summary>
            Height-only size of the scroller area.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects">
            <summary>
            Groups a set of rectangles that completely define the layout and drawing parts of the control.
            An instance is filled on the layouting stage, and used for painting and hittesting.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuLowerScrollArrow">
            <summary>
            Layouted in <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.Dim)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuLowerScrollArrow2">
            <summary>
            Layouted in <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.Dim)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuUpperScrollArrow">
            <summary>
            Layouted in <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.Dim)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuUpperScrollArrow2">
            <summary>
            Layouted in <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.Dim)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt">
            <summary>
            Location argument for the <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.EnsureVisible(System.Int32,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt)"/> function.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt.DontCare">
            <summary>
            The menu should be scrolled so that the item at the given index were visible, be it at the top, bottom or middle of the list.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt.Top">
            <summary>
            The menu should be scrolled so that the item at the given index were at the top of the visible area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt.Bottom">
            <summary>
            The menu should be scrolled so that the item at the given index were at the bottom of the visible area.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView">
            <summary>
            Layouter and renderer for ordinary menu items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.RTailGlyphSeparatorHot">
            <summary>
            On an execute-or-expand item, a separator between bulk and tail glyph (when item is in the selected state).
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.RTailGlyphSeparatorCold">
            <summary>
            On an execute-or-expand item, a separator between bulk and tail glyph (when item is not in the selected state).
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.RTailGlyphSeparatedSelectionBody">
            <summary>
            On an execute-or-expand item, the part of selection body in the tail glyph area, after the separator between bulk and tail glyph. If such an item is expanded, should be highlighted.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.myIsIconFit">
            <summary>
            Whether the icon fits into the specified size or not.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.myCache_LayoutBottomUp_ResultCells">
            <summary>
            Caches the <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)"/> calculations.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.myCache_LayoutTopDown_InputCells">
            <summary>
            Caches the <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)"/> input cells. If they don't differ, the rects will not be recalculated.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.GetIconCellPadding(JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim)">
            <summary>
            Padding for the icon and to the icon-cell boundaries.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.GetLabelCellPadding(JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim)">
            <summary>
            Padding for the label and to the label-cell boundaries.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.GetLabelCellPadding_TextPart(JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim)">
            <summary>
            Padding around the text part of the label (displayname + shortcut text) up to (not including) the selection margin &amp; tail glyph.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.GetLabelCellPadding_AroundPartsToFullSell(JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim)">
            <summary>
            Around the already-padded <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.GetLabelCellPadding_TextPart(JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim)"/> and tail glyph, the padding that makes up the selection border and cell margins (menu item margins) up to the whole size of the cell.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.GetIconConstrainedSize(JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim)">
            <summary>
            Gets the icon size, constrained by the min-icon-size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.HitTest(System.Drawing.Point,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim)">
            <summary>
            Performs a vertical hit-test (checks the y-coordinate only).
            </summary>
            <returns>Zero if hit, less than zero if the point is located above the item, and more than zero if below.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            First (bottom-up) part of the layout: the preferred sizes are being collected.
            Calculates the per-column preferred size of the menu item.
            Should be called before <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)" /> on any change.
            </summary>
            <param name="gc">A device context to measure the text against.</param>
            <param name="dim"></param>
            <param name="renderparamsShared"></param>
            <returns>Returns an array of preferred sizes for each of the cells defined.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            Performs the top-down part of the layout, when the item receives some size it should layout itself into.
            Should be called after <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)" />.
            </summary>
            <param name="cells">The available size for layouting each of the cells into.</param>
            <param name="gc">A device context to measure the text against.</param>
            <param name="dim"></param>
            <param name="renderparamsShared"></param>
            <returns>The size the item succeeded to layout into. Typically, should be equal in width to the sum of all the cell widths, and in height to the maximum height encountered.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView.PaintWithUpperMargin(System.Drawing.Graphics,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            Painting implementation. Always includes the upper margin. Works in menu-item-local coordinates.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuSeparatorItemView">
            <summary>
            Layouter and renderer for separator menu items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuSeparatorItemView.RNonGradientAboveSep">
            <summary>
            Non-gradient part above the separator line (the upper margin).
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuSeparatorItemView.RNonGradientLefty">
            <summary>
            Non-gradient part to the left of the separator line, to the right of the gradient part.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuSeparatorItemView.RSeparatorBody">
            <summary>
            The separator itself.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuSeparatorItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            First (bottom-up) part of the layout: the preferred sizes are being collected.
            Calculates the per-column preferred size of the menu item.
            Should be called before <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuSeparatorItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)" /> on any change.
            </summary>
            <param name="gc">A device context to measure the text against.</param>
            <param name="dim"></param>
            <param name="renderparamsShared"></param>
            <returns>Returns an array of preferred sizes for each of the cells defined.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuSeparatorItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            Performs the top-down part of the layout, when the item receives some size it should layout itself into.
            Should be called after <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuSeparatorItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)" />.
            </summary>
            <param name="cells">The available size for layouting each of the cells into.</param>
            <param name="gc">A device context to measure the text against.</param>
            <param name="dim"></param>
            <param name="renderparamsShared"></param>
            <returns>The size the item succeeded to layout into. Typically, should be equal in width to the sum of all the cell widths, and in height to the maximum height encountered.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuSeparatorItemView.PaintWithUpperMargin(System.Drawing.Graphics,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)">
            <summary>
            Paints the item according to the current layout.
            <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim,JetBrains.UI.RenderParams)"/> must be called before painting to achieve a meaningful result.
            The painting is performed within the <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView.GetSize(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView.Dim)"/>, and the coordinate system origin of <paramref name="g"/> must be adjusted so that it were in the top-left corner of the item place.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView">
            <summary>
            Implements the Title sub-control of the <see cref="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.myControlExtension">
            <summary>
            The extension control that's added to the title area.
            <c>Null</c> by default, which means there is no control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.myEditboxQuickSearch">
            <summary>
            The quick-search string input editbox.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.myIconQuickSearch">
            <summary>
            An icon for the quick search editbox line.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.myMenuView">
            <summary>
            The parent menu view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.myMouseLocation">
            <summary>
            Filters out zero movements.
            Also, helps with telling the initial menu display from normal mouse movements.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.myRects">
            <summary>
            The current precalculated layout.
            Created on the first top-down layouting pass.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.myStateQuickSearch">
            <summary>
            Whether, how and where the quick-search editbox should be displayed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.myToolbar">
            <summary>
            The toolbar in the header.
            <c>Null</c> if there are no toolbar items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView,JetBrains.Application.UI.Components.Theming.ITheming,JetBrains.Application.UI.Components.IUIApplicationSimple)">
            <summary>
            Init the instance, attach to the parent menu view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Document">
            <summary>
            Gets the object that implements the menu logic.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.ExtensionControl">
            <summary>
            Gets or sets the custom extension control that is added to the title.
            May be <c>Null</c>, which means there is no extension control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.IsEditboxChangingColor">
            <summary>
            Specifies whether the QuickSearch editbox color reflects the ready-state and validness of the quick search.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.MenuView">
            <summary>
            Gets the parent menu view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.QuickSearchEditbox">
            <summary>
            Gets the editbox that accepts the quick search string.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Toolbar">
            <summary>
            Gets the toolbar part of the title view.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.InitControls(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Components.IUIApplicationSimple)">
            <summary>
            Inits the UI controls, including the form itself
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Paint(System.Drawing.Graphics)">
            <summary>
            Does just the very painting into the given <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="g">Device context.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.UpdateEditboxColor">
            <summary>
            Updates the quick-search editbox coloring to reflect the current state: pending, invalid, etc.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.UpdateQuickSearchState">
            <summary>
            Syncs the quick-search-related UI controls state.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Colors">
            <summary>
            Gets the set of colors involved in painting the control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The non-Transparency mode painting function.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.OnKeyDownHighPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process only high-priority keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Dim">
            <summary>
            A static class with dimension constants.
            See the layout image for meanings.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Dim.CaptionPadding">
            <summary>
            Padding around the caption element of the title.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Dim.EditboxTextPadding">
            <summary>
            Approximate padding of the editbox text, that includes the border and some additional padding inside it.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Dim.InterlineGap">
            <summary>
            Gap between the title lines.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Dim.ItemsGap">
            <summary>
            Gap between different items in the title.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Dim.Margin">
            <summary>
            Margin around the title client content inside the borders.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Dim.QuickSearchEditBoxMin">
            <summary>
            The minimum size of the QuickSearch editbox.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Dim.QuickSearchIconPadding">
            <summary>
            The desired visual passing around the Quick Search icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Dim.QuickSearchIconPaddingLeftInSecondLine">
            <summary>
            The part of the Quick Search icon leftside visual padding that falls within the second line rect.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Dim.QuickSearchIconPaddingRightInSecondLine">
            <summary>
            The part of the Quick Search icon rightside visual padding that falls within the second line rect.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Dim.EditboxBorderThickness">
            <summary>
            Thickness of the custom-painted border around the borderless editbox.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.Dim.DimItem">
            <summary>
            Dimentions for menu items (title borrows many dimensions from item's).
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.LayoutRects">
            <summary>
            Groups a set of rectangles that completely define the layout and drawing parts of the control.
            An instance is filled on the layouting stage, and used for painting and hittesting.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.QuickSearchEditboxStates">
            <summary>
            Whether, how and where the quick-search editbox should be displayed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.QuickSearchEditboxStates.Hidden">
            <summary>
            The editbox is hidden, no space is layouted for it.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView.QuickSearchEditboxStates.ShownInTitle">
            <summary>
            The editbox is displayed right in the title bar.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView">
            <summary>
            A toolbar item on the <see cref="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView"/>'s toolbar (<see cref="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView"/>).
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.myShortcutText">
            <summary>
            The shortcut, as a text string.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.myBounds">
            <summary>
            The item bounds, in parent coordinates (unlike other Rects, that are WC-local).
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.ExternalInfo">
            <summary>
            The document of this view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.IsSelected">
            <summary>
            Gets whether this item is currently in the selected state.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.Shortcuts">
            <summary>
            Gets the shortcuts assigned to the toolbar button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.ShortcutText">
            <summary>
            Gets the <see cref="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.Shortcuts"/> formatted as user-friendly text, or an empty string if the shortcut is not defined.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.Toolbar">
            <summary>
            Gets the toolbar that owns this item.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.TooltipText">
            <summary>
            Gets the tooltip text, as provided by the user, without appending any shortcuts. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.TooltipTextWithShortcut">
            <summary>
            Gets the tooltip text with the shortcut tip, which is the <see cref="T:System.Windows.Forms.ToolTip"/> with a user-friendly rep of <see cref="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.Shortcuts"/> appended. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.Execute">
            <summary>
            Executes the action of this menu button.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.HitTestHorizontal(System.Int32)">
            <summary>
            Hit-tests the item by the x-coordinate, which must be in item-local coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.InitShortcuts">
            <summary>
            Inits the shortcuts text, appends to the tooltip.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.Application.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.Application.UI.Controls.IConstrainableControl" />, but could employ the <paramref name="gc" /> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size" /> with width and height equal to <see cref="F:System.Int32.MaxValue" />, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit" />.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.Application.UI.Controls.IWindowlessControl.Bounds" /> property.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.SetLayout(JetBrains.Application.UI.PopupLayout.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.Bounds">
            <summary>
            Gets the item bounds, in the same coordinate space, as the parent toolbar (probably, the parent window's client rect coords).
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView.Dim">
            <summary>
            Dimension constants.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView">
            <summary>
            The <see cref="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView"/>'s toolbar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.myToolbarRenderParams">
            <summary>
            Use <see cref="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.ToolbarRenderParams"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.myMapKeysToItems">
            <summary>
            Maps keyboard shortcuts to the assigned items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.myBounds">
            <summary>
            The bounds, in parent coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.ToolbarRenderParams">
            <summary>
            Gets the toolbar rendering aspects.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.ItemViews">
            <summary>
            Gets the views for the toolbar items.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.Items">
            <summary>
            Gets the toolbar items.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.MenuView">
            <summary>
            Gets the menu that owns this toolbar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.SelectedIndex">
            <summary>
            Gets or sets the index of the selected toolbar button, or <c>-1</c> if none is selected.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.SelectedItem">
            <summary>
            Gets the selected item of the toolbar, or <c>Null</c> if none is available.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.ExecuteSelectedItem">
            <summary>
            Executes an action associated with the selected item.
            Safe to call even if there's no selection.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the keyboard shortcuts associated with the toolbar.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles mouse movements.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.GetHitItemIndex(System.Drawing.Point)">
            <summary>
            Looks up a menu item hit by the given point. <c>-1</c> means outside any items.
            The point must be in owner coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.Application.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.Application.UI.Controls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.Application.UI.Controls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.SetLayout(JetBrains.Application.UI.PopupLayout.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.Bounds">
            <summary>
            Gets the toolbar bounds (in parent window client rect coords).
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView">
            <summary>
            Masters the Jet Popup Menu main body presentation.
            Is a topmost popup window that looks like an MSO-11 v-menu, performs low-level custom layered-window painting to achieve the alpha-channel transparency (non-rectangular form, shadows).
            Visually reflects the state backended by <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc"/>.
            Implements the control that is displayed by the <see cref="!:JetPopupMenu.Show()"/> method.
            Do not create directly, use <see cref="N:JetBrains.UI.SrcView.Controls.JetPopupMenu"/> frontend instead.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myOptionEnableMovingArrows">
            <summary>
            Whether the scroll-arrows reflect the scrolling position and range, or not.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myOptionHollowDisabledScrollArrows">
            <summary>
            Whether the disabled scroll arrows have an outline and no fill.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.OptionTransparencyAlwaysOff">
            <summary>
            Forces the Alpha rendering mode to be never used.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.OptionTransparencyAlwaysOn">
            <summary>
            Forces the Alpha rendering mode to be used always.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.Caption">
            <summary>
            The caption for the menu view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.CaptureMouseInitially">
            <summary>
            Gets or sets whether the menu should capture mouse input on startup and trigger the action on mouseup, thus assuming the "mouse-down" part of the input already done.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myAutoActivate">
            <summary>
            <see cref="T:JetBrains.Application.UI.Controls.IConstrainableControl"/> helper.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myColors">
            <summary>
            The precalculated set of colors.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myDocument">
            <summary>
            Codebehind that implements the menu logic.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myDropShadowEnabled">
            <summary>
            Caches the drop-shadow-enabled state, as it must be maintained constant between calc-sizes, but should update from time to time.
            Synced to OS settings on each <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.OnLayout(System.Windows.Forms.LayoutEventArgs)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myMainpart">
            <summary>
            The mainpart subcontrol.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myRects">
            <summary>
            The current precalculated layout.
            Created on the first top-down layouting pass.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myShadows">
            <summary>
            Hands a shadow next to the window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myShape">
            <summary>
            The list of rectangles describing the current shape of the window — that is, the region most recently specified at the top-down layouting stage.
            Useful for checking whether we should update the shape or not.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myTitle">
            <summary>
            The title subcontrol.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myTitleDisposition">
            <summary>
            Defines where the title should be placed, depending on the side of the anchoring rectangle at which the menu is displayed.
            Vertically, may only be <see cref="F:JetBrains.UI.Anchoring.NearWithin"/> or <see cref="F:JetBrains.UI.Anchoring.FarWithin"/>, which means that the header is either above or below the body.
            Horizontally, may only be one of the inside anchorings, <see cref="F:JetBrains.UI.Anchoring.NearWithin"/>, <see cref="F:JetBrains.UI.Anchoring.MiddleWithin"/>, or <see cref="F:JetBrains.UI.Anchoring.NearWithout"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myTransparency">
            <summary>
            Defines whether the transparency special effects, like real shadow, are enabled, or not.
            Setting the initial value to <c>False</c> forcibly disables the effect.
            The field fallbacks to <c>False</c> automatically if there are too few display colors.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.myDpiLive">
            <summary>
            The LIVE DPI resolution for this window, per-monitor and dynamic.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.Disposition">
            <summary>
            Gets the menu disposition, which determines whether the title is above or below, and so on.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.Document">
            <summary>
            Gets the object that implements the menu logic.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.Mainpart">
            <summary>
            Gets the Mainpart subcontrol.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.Title">
            <summary>
            Gets the Title subcontrol.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.DpiLive">
            <summary>
            The LIVE DPI resolution for this window, per-monitor and dynamic.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.InitControls">
            <summary>
            Inits the UI controls, including the form itself
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Calculates the preferred size of the control so that all the context fit.
            Does not apply the size, just returns it.
            </summary>
            <param name="gc">The device context to measure the text against.</param>
            <param name="sizeLimit">The limit for the size, as it helps to reduce the number of calculations.</param>
            <returns>The preferred constrained size.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.LayoutTopDown(JetBrains.UI.IGraphicsContainer)">
            <summary>
            Performs the top-down layouting stage.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.Paint(System.Drawing.Graphics,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet,System.Drawing.Region)">
            <summary>
            Does just the very painting into the given <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="g">Device context.</param>
            <param name="colors">The color table currently in use by the menu.</param>
            <param name="rgnDirty">The dirty region within which the items should be painted. May be <c>Null</c>.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.GetShadowSize(JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.Dim)">
            <summary>
            Gets the shadow size (width/height of vertical/horizontal shadow, respectively).
            </summary>
            <param name="dim"></param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.UpdateShape">
            <summary>
            Updates the window non-rectangular shape, as defined by the <see cref="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.LayoutRects.Opaque"/> set.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.Colors">
            <summary>
            Gets the set of colors involved in painting the control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyPress"></see> event.
            </summary>
            
            <param name="args">A <see cref="T:System.Windows.Forms.KeyPressEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.OnLocationChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LocationChanged" /> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The non-Transparency mode painting function.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event.
            </summary>
            
            <param name="e">The <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.ShowWithoutActivation">
            <summary>
            Gets a value indicating whether the window will be activated when it is shown.
            </summary>
            
            <returns>
            True if the window will not be activated when it is shown; otherwise, false. The default is false.
            </returns>
            
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.Dim">
            <summary>
            A static class with dimension constants.
            See the layout image for meanings.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.Dim.MainPartFarBorder">
            <summary>
            Height-only.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.Dim.MainPartNearBorder">
            <summary>
            Height-only.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.ISubpart">
            <summary>
            An interface to be implemented by all the menu subparts.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.ISubpart.OnKeyDownHighPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process only high-priority keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.ISubpart.OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.ISubpart.OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.LayoutRects">
            <summary>
            Groups a set of rectangles that completely define the layout and drawing parts of the control.
            An instance is filled on the layouting stage, and used for painting and hittesting.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.LayoutRects.Opaque">
            <summary>
            A set of rectangles that produce the opaque part of the window, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.LayoutRects.ClearRects(System.Object)">
            <summary>
            Clears all the <see cref="T:System.Drawing.Rectangle"/> fields in the specified container.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.LayoutRects.BorderLayoutRects.GetBackgroundColorArea">
            <summary>
            Gets the list of borders to be filled with <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet.Background"/> when painting.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.LayoutRects.BorderLayoutRects.GetBorderColorArea">
            <summary>
            Gets the list of borders to be filled with <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet.Border"/> when painting.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.FillRenderParamsDefaults(JetBrains.UI.RenderParams,JetBrains.Util.Interop.DpiResolution)">
            <summary>
            Sets the default render params for UI in this menu. Note that the colors, including the background hint, are only approximate, so you should always override it with concrete colors before use.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.GetCaptionLocation(JetBrains.Util.Interop.DpiResolution)">
            <summary>
            Gets the offset of the menu caption from the menu top left corder, which is needed in case you want to position the image right above some object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.GdipPaint.FillRectangles(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Rectangle[])">
            <summary>
            Fallback for the case when all gradient colors are the same.
            Does input checks and skips collapsed rects.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.GdipPaint.FillRectangles(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Color,System.Windows.Forms.Orientation,System.Drawing.Rectangle[])">
            <summary>
            Two-color gradient routine. Fallbacks to flat painting if colors are the same.
            Does input checks and skips collapsed rects.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.GdipPaint.FillRectanglesThreeStopsFourColors(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Windows.Forms.Orientation,System.Drawing.Rectangle[])">
            <summary>
            Four-color gradient routine, but with only three stops. The color at the center is non-contiguous, the two middle color go into the same coordinate. Fallbacks to three- or two-color or flat painting if some/all colors are the same.
            Does input checks and skips collapsed rects.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView.GdipPaint.FillRectangles(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Windows.Forms.Orientation,System.Drawing.Rectangle[])">
            <summary>
            Three-color gradient routine. Fallbacks to two-color or flat painting if some/all colors are the same.
            Does input checks and skips collapsed rects.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuViewHierarchy">
            <summary>
            Manages nested popup menus.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuViewHierarchy.#ctor(JetBrains.DataFlow.LifetimeDefinition,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView)">
            <summary>
            Creates the hierarchy.
            </summary>
            <param name="lifetimeDefinition">Lifetime of the hierarchy, and of the root menu of the hierarchy (<paramref name="menuviewRoot"/>). Terminated automatically when the root menu exits the hierarchy.</param>
            <param name="menuviewRoot">The root menu in the hierarchy.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuViewHierarchy.CloseAll">
            <summary>
            Close all of the menus in the hierarchy, i.e. when a menu item gets executed.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof">
            <summary>
            Floats a shadow near to some other window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.myColorsShadowCorner">
            <summary>
            Colors in the shadow corner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.myColorsShadowLine">
            <summary>
            Colors in the linear shadow.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.myBmpShadowCornerLeftBottom">
            <summary>
            Shadow corner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.myBmpShadowCornerRightBottom">
            <summary>
            Shadow corner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.myBmpShadowCornerRightTop">
            <summary>
            Shadow corner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.myBmpShadowHorizontal">
            <summary>
            One-pixel-long shadow segment.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.myBmpShadowVertical">
            <summary>
            One-pixel-long shadow segment.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.myLocation">
            <summary>
            <see cref="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.Location"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.myRects">
            <summary>
            The list of rectangles, in client coordinates, that form the thing that should be casting the shadow.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.UpdateRequested">
            <summary>
            Fires when the object gets dirty.
            The object does not update immediately, but instead collects the requests.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.UpdateRequired">
            <summary>
            Fires when the <see cref="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.UpdateRequested"/> signals get collected and are finally executed (basically, when we get off the stack frame).
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.ShadowThickness">
            <summary>
            Gets the linear shadow thickness (height for horizontal, width for vertical).
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.Location">
            <summary>
            Gets or sets the screen location to which the <see cref="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.Rectangles"/> coordinates are relative.
            To set both <see cref="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.Location"/> and <see cref="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.Rectangles"/>, use <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.Adjust(System.Drawing.Point,System.Collections.Generic.List{System.Drawing.Rectangle})"/> to do it in a batch.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.Rectangles">
            <summary>
            Gets or sets the list of rectangles for which the shadow is displayed.
            The coordinates must be relative to the <see cref="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.Location"/>.
            To set both <see cref="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.Location"/> and <see cref="P:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.Rectangles"/>, use <see cref="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.Adjust(System.Drawing.Point,System.Collections.Generic.List{System.Drawing.Rectangle})"/> to do it in a batch.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.Adjust(System.Drawing.Point,System.Collections.Generic.List{System.Drawing.Rectangle})">
            <summary>
            Sets the new location and new list of rectangles in a single call, thus only one recalculation and redisplay.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.AttachShadowHorizontal(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Attaches a vertical shadow, including the upper corner.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.AttachShadowVertical(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Attaches a vertical shadow, including the upper corner.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.CreateBitmaps">
            <summary>
            Lazy-creates the static bitmaps.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.FillShadowHorizontal(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Tiles the <see cref="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.myBmpShadowHorizontal"/> to draw a horizontal shadow. A tricky thing in GDI+.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.FillShadowVertical(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Tiles the <see cref="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.myBmpShadowVertical"/> to draw a vertical shadow. A tricky thing in GDI+.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.OptimizeRectangles(System.Collections.Generic.List{System.Drawing.Rectangle})">
            <summary>
            Decreases the number of rects by merging, sorts them vertically, etc.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.CheckCreateWindow">
            <summary>
            Creates the window when it's finally needed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.SetLocation(System.Drawing.Point)">
            <summary>
            Sets the <see cref="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.myLocation"/>, tells whether modified, does not cause an update.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.SetRectangles(System.Collections.Generic.List{System.Drawing.Rectangle})">
            <summary>
            Sets the <see cref="F:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.myRects"/>, tells whether modified, does not cause an update.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof.Update">
            <summary>
            Updates the visual presentation on the screen to respect the new coordinates.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetPopupMenu.JetPopupMenusInteractive">
            <summary>
              <para>Factory for popup menus to inject all of the required components into the popup menu.</para>
              <para>Designed to be usable even without a running shell.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.JetPopupMenu.JetPopupMenusInteractive.GetOrCreatePopupWindowContext(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,System.Windows.Forms.IWin32Window)">
            <summary>
            Gets the layouter supplied by the user, or creates the default one if missing (for the center of the screen, or the main window).
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.PresentableItemView.OnRenderView(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Controls.PresentableItemAutomation)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.StringCollectionEdit.Buttons.ButtonView">
            <summary>
            ButtonView
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.StringCollectionEdit.Buttons.ButtonView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.StringCollectionEdit.PairStringCollectionEditView">
            <summary>
            PairStringCollectionEditView
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.StringCollectionEdit.PairStringCollectionEditView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.StringCollectionEdit.StringCollectionEditView">
            <summary>
            StringCollectionEditView
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.StringCollectionEdit.StringCollectionEditView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.EitherControlAvalonView.#ctor">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.EitherControlWinFormsView.#ctor(JetBrains.Application.UI.UIAutomation.EitherControlAutomation)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetLoaderAnimationElement">
            <summary>
            WPF UI element for the JetBrains loader animation.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.JetLoaderAnimationView">
            <summary>
            WPF UI view for the JetBrains loader animation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.SpinningTrefoilView.myAngularSpeed">
            <summary>
            Defines the speed mul-factor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.SpinningTrefoilView.mySpinPeriod">
            <summary>
            Period of a full spin, in milliseconds.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.SpinningTrefoilWindowlessControl.myGottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.SpinningTrefoilWindowlessControl.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.CheckBoxView">
            <summary>
            View for the automation object which represents a check box control in the UI.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentView.HorizontalSizeAnimator">
            <summary>
            Decorates a control to make it gradually acquire its desired size.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.GapAroundText">
            <summary>
            Gap on the right and left of the text, but within the progress fill.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.GapIconProgress">
            <summary>
            Gap between the icon and the progress area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.SizeAdaptationStep">
            <summary>
            Step for changing the size when adapting.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.TicksBeforeChangingImmediateSize">
            <summary>
            Number of <see cref="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.myTicksAfterDesiredSizeChanged" /> ticks before the immediate size starts adapting.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.myDesiredSize">
            <summary>
            The indicator's desired size, as derived from the content.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.myDesiredSizeImmediate">
            <summary>
            The indicator size currently reported to the host as the desired size. Gradually changes to fit <see cref="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.myDesiredSize" />.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.myGottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.myTicksAfterDesiredSizeChanged">
            <summary>
            Calculates the number of timer ticks after the <see cref="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.myDesiredSize" /> change.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.myTimerAdjustDesiredSize">
            <summary>
            Gradually adjusts <see cref="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.myDesiredSizeImmediate" /> to fit <see cref="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.myDesiredSize" />.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.OnUpdateDesiredSize(JetBrains.Application.Icons.IThemedIconManager)">
            <summary>
            Calculates the true desired size.
            </summary>
            <param name="thicman"> </param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.OnTimerAdjustDesiredSize">
            <summary>
            When the timer ticks, gradually changes the immediate desired size value towards the actual desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.JetBrains#Application#UI#Tooltips#ITooltipProvider#GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.Application.UI.Tooltips.ITooltipInfo" />, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.JetBrains#Application#UI#Controls#IConstrainableControl#GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.Application.UI.Controls.IConstrainableControl" />, but could employ the <paramref name="gc" /> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size" /> with width and height equal to <see cref="F:System.Int32.MaxValue" />, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit" />.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.JetBrains#Application#UI#Controls#IWindowlessControl#Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.JetBrains#Application#UI#Controls#IWindowlessControl#SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.Application.UI.Controls.IWindowlessControl.Bounds" /> property.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.JetBrains#Application#UI#Controls#IConstrainableControl#SetLayout(JetBrains.Application.UI.PopupLayout.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter" />.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.JetBrains#Application#UI#Controls#IConstrainableControl#AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation" /> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.JetBrains#Application#UI#Controls#IWindowlessControl#Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.JetBrains#Application#UI#Controls#IWindowlessControl#GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl.JetBrains#Application#UI#Controls#IConstrainableControl#WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.CrossFramework.AvalonHwndSourceDpiCharmer">
            <summary>
            Charms an Avalon HWND Source so that it behaved to per-monitor and dynamically changing DPI.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.CrossFramework.AvalonHwndSourceDpiCharmer.myIsGlobalCharmingSuccessful">
            <summary>
            Recent WPF versions support dynamic DPI out of the box, but do not activate it by default. Try the manual activation on it.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.CrossFramework.AvalonHwndSourceDpiCharmer.CharmAvalonWindowLive(JetBrains.DataFlow.Lifetime,System.Windows.Window)">
            <summary>
              <para>Adds a DPI-charming request for the window. It is OK to call multiple times.</para>
              <para>Would force Avalon to switch to the new DPI values for coordinate translation and rendering when the window DPI changes, either due to system DPI change or when moved to a monitor with a different resolution.</para>
              <para>Would adjust window physical size when DPI changes to maintain the logical size.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.CrossFramework.AvalonHwndSourceDpiCharmer.CharmAvalonWindowLive(JetBrains.DataFlow.Lifetime,System.Windows.Interop.HwndSource,JetBrains.Application.Threading.IThreading,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
              <para>Adds a DPI-charming request for the window. It is OK to call multiple times.</para>
              <para>Would force Avalon to switch to the new DPI values for coordinate translation and rendering when the window DPI changes, either due to system DPI change or when moved to a monitor with a different resolution.</para>
              <para>Would adjust window physical size when DPI changes to maintain the logical size.</para>
            </summary>
            <param name="lifetime">Lifetime for this charming request. If there's more than one request for the same window, it would be charmed for high-DPI until the last lifetime terminates.</param>
            <param name="hwnds">The HWND Source of a window to process. Can be either a top-level window or an Element Host. See optional parameters which depend on that.</param>
            <param name="threadingIfNotTopLevel">When <paramref name="hwnds" /> points to a top-level window (<see cref="T:System.Windows.Window" />), might be <c>NULL</c>. For non-top-level windows such as an <see cref="T:System.Windows.Forms.Integration.ElementHost" /> or <see cref="T:JetBrains.Application.UI.UIAutomation.EitherControl" />, a valid instance of the component must be supplied.</param>
            <param name="hookmanIfNotTopLevel">When <paramref name="hwnds" /> points to a top-level window (<see cref="T:System.Windows.Window" />), might be <c>NULL</c>. For non-top-level windows such as an <see cref="T:System.Windows.Forms.Integration.ElementHost" /> or <see cref="T:JetBrains.Application.UI.UIAutomation.EitherControl" />, a valid instance of the component must be supplied.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.CrossFramework.AvalonHwndSourceDpiCharmer.ForceAvalonWindowDpi(System.Windows.Interop.HwndSource,JetBrains.Util.Interop.DpiResolution)">
            <summary>
            Forces an Avalon window update its DPI.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.CrossFramework.AvalonHwndSourceDpiCharmer.TryTurnOnWpfDpiAwareMode">
            <summary>
            If we're running on a new Windows OS and a new WPF version, turns ON its dynamic DPI awareness and avoids hacking per-window DPI values.
            Safe to call multiple times.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.CrossFramework.RunningAvalonWindowsList">
            <summary>
            Tracks active running Avalon windows.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.CrossFramework.RunningAvalonWindowsList.AvalonWindow.Hwnd">
            <summary>
            We only track HWND-backed windows, that's its handle.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.CrossFramework.RunningAvalonWindowsList.AvalonWindow.PresentationSource">
            <summary>
            A window gets only listed here when a presentation source gets created for it, so it's as well non-NULL.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.CommandReference">
            <summary>
            This class facilitates associating a key binding in XAML markup to a command
            defined in a View Model by exposing a Command dependency property.
            The class derives from Freezable to work around a limitation in WPF when data-binding from XAML.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.CommandSinkBinding">
            <summary>
            A CommandBinding subclass that will attach its
            CanExecute and Executed events to the event handling
            methods on the object referenced by its CommandSink property.  
            Set the attached CommandSink property on the element 
            whose CommandBindings collection contain CommandSinkBindings.
            If you dynamically create an instance of this class and add it 
            to the CommandBindings of an element, you must explicitly set
            its CommandSink property.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.CommandSinkBinding.CommonElement">
            <summary>
            This class makes it easier to write code that works 
            with the common members of both the FrameworkElement
            and FrameworkContentElement classes.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Behavior.BindToolbarCommandsBehavior">
            <summary>
              Binds a toolbar to a list of <see cref="T:JetBrains.Application.UI.Commands.UiCommandAutomation" /> objects.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Behavior.AvalonBehaviorHelpers">
            <summary>
                <para>Base implementation for quickly setting up attached-property-behaviors for WPF elements.</para>
                <para>Use in WPF: set an attached property to some value.</para>
                <para>Backend: when element is loaded and a value is set, you're called with that value and its lifetime.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Behavior.AvalonBehaviorHelpers.AvalonBehaviorStateProperty">
            <summary>
                Behaviors which are based on this helper use the property bag to store a DataFlow copy of the behavior state. The lifetime-driven behavior function binds to it and to the element's loaded state.
                The transition is as follows: when behavior property value is set, it's copied to the DataFlow property in this bag.
                When the property is first created, the behavior function is bound to it as follows: when both the property has a non-null value, and the element is loaded into WPF, execute with that lifetime.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Behavior.AvalonBehaviorHelpers.GetPropertyChangedCallback``2(System.String,System.Action{JetBrains.DataFlow.Lifetime,``0,``1})">
            <summary>
                On your behavior attached property, set the <see cref="T:System.Windows.PropertyChangedCallback" /> on the
                <see
                    cref="T:System.Windows.FrameworkPropertyMetadata" />
                to the result of this function.
            </summary>
            <typeparam name="TValue">Behavior property value type.</typeparam>
            <typeparam name="TElement">
                Type of elements to which the behavior is applicable. Must be at least a <see cref="T:System.Windows.FrameworkElement" /> because of the
                <see
                    cref="E:System.Windows.FrameworkElement.Loaded" />
                event.
            </typeparam>
            <param name="sName">Name of the behavior. MUST be unique, otherwise behavior states might get mixed up.</param>
            <param name="FBehave">You'll be called into this function for the behavior value.</param>
            <returns>
                Set this to the <see cref="T:System.Windows.PropertyChangedCallback" /> of a <see cref="T:System.Windows.FrameworkPropertyMetadata" /> of your behavior's
                <see
                    cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
                call.
            </returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Behavior.AvalonBehaviorHelpers.RegisterBehavior``3(System.String,System.Action{JetBrains.DataFlow.Lifetime,``0,``2})">
            <summary>
                <para>
                    Registers the <see cref="T:System.Windows.DependencyProperty">dependency property</see> for your behavior.
                </para>
                <para>
                    When a valid value is assigned to the behavior property and the element is loaded into WPF tree, your callback at
                    <paramref
                        name="FBehave" />
                    is called with a lifetime to activate the behavior.
                </para>
            </summary>
            <typeparam name="TValue">Type of the value which is given to the behavior by binding or setting the dependency property.</typeparam>
            <typeparam name="TOwningClass">The class which defines the behavior. This is used when registering the dependency property.</typeparam>
            <typeparam name="TElement">
                Type of the UI elements on which this behavior is allowed (<see cref="T:System.Windows.FrameworkElement" /> at the least). This element will also be given to the behavior as a parameter.
            </typeparam>
            <param name="name">Name for the attached dependency property. Better be unique.</param>
            <param name="FBehave">The function whcih runs the behavior on the given value during the lifetime.</param>
            <returns>The dependency property for your behavior.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Behavior.AvalonBehaviorHelpers.RegisterBehavior``2(System.String,System.Action{JetBrains.DataFlow.Lifetime,``0,System.Windows.FrameworkElement})">
            <summary>
                <para>
                    Registers the <see cref="T:System.Windows.DependencyProperty">dependency property</see> for your behavior.
                </para>
                <para>
                    When a valid value is assigned to the behavior property and the element is loaded into WPF tree, your callback at
                    <paramref
                        name="FBehave" />
                    is called with a lifetime to activate the behavior.
                </para>
            </summary>
            <typeparam name="TValue">Type of the value which is given to the behavior by binding or setting the dependency property.</typeparam>
            <typeparam name="TOwningClass">The class which defines the behavior. This is used when registering the dependency property.</typeparam>
            <param name="name">Name for the attached dependency property. Better be unique.</param>
            <param name="FBehave">The function whcih runs the behavior on the given value during the lifetime.</param>
            <returns>The dependency property for your behavior.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Behavior.AvalonBehaviorHelpers.RegisterOnOffBehavior``2(System.String,System.Action{JetBrains.DataFlow.Lifetime,``1})">
            <summary>
                <para>
                    Registers a boolean-based behavior which is only activated when it's set to <c>True</c>.
                </para>
                <para>
                    When a <c>True</c> value is assigned to the behavior property and the element is loaded into WPF tree, your callback at
                    <paramref
                        name="FBehave" />
                    is called with a lifetime to activate the behavior.
                </para>
            </summary>
            <typeparam name="TOwningClass">The class which defines the behavior. This is used when registering the dependency property.</typeparam>
            <typeparam name="TElement">
                Type of the UI elements on which this behavior is allowed (<see cref="T:System.Windows.FrameworkElement" /> at the least). This element will also be given to the behavior as a parameter.
            </typeparam>
            <param name="name">Name for the attached dependency property. Better be unique.</param>
            <param name="FBehave">The function whcih runs the behavior on the given value during the lifetime.</param>
            <returns>The dependency property for your behavior.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Behavior.AvalonBehaviorHelpers.RegisterOnOffBehavior``1(System.String,System.Action{JetBrains.DataFlow.Lifetime,System.Windows.FrameworkElement})">
            <summary>
                <para>
                    Registers a boolean-based behavior which is only activated when it's set to <c>True</c>.
                </para>
                <para>
                    When a <c>True</c> value is assigned to the behavior property and the element is loaded into WPF tree, your callback at
                    <paramref
                        name="FBehave" />
                    is called with a lifetime to activate the behavior.
                </para>
            </summary>
            <typeparam name="TOwningClass">The class which defines the behavior. This is used when registering the dependency property.</typeparam>
            <param name="name">Name for the attached dependency property. Better be unique.</param>
            <param name="FBehave">The function whcih runs the behavior on the given value during the lifetime.</param>
            <returns>The dependency property for your behavior.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Behavior.AvalonBehaviorHelpers.GetOrCreateAvalonBehaviorState(System.Windows.FrameworkElement)">
            <summary>
                Used by behavior implementation.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Behavior.HierarchicalFocusScopeRootBehavior">
            <summary>
            <para>In WPF, nested focus scopes won't propagate its logical focused control state to the parent focus scope.</para>
            <para>Attach this behavior to the root focus scope of a control graph in which nested focus scopes should propagate this state.</para>
            <para>Why we need to propagate the state?</para>
            <para>(1) Action system toolbars use the logically-focused element to handle commands when focus is not under the scope of the toolbar. For example, tool window toolbar command should apply to the selection in that toolwindow even when focus is in some other tool window.</para>
            <para>(2) Restoring focus when window gets activated. Without proper propagation, if focus actually were in a nested focus scope, focus will be restored to the last-focused element in the topmost scope instead of the nested one.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Behavior.HierarchicalFocusScopeRootBehavior.HierarchicalFocusScopeRootTokensProperty">
            <summary>
            Service property to support lifetiming of the view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Behavior.HierarchicalFocusScopeRootBehavior.IsHierarchicalFocusScopeRootProperty">
            <summary>
            See comments to the class.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Behavior.HierarchicalFocusScopeRootBehavior.GetIsHierarchicalFocusScopeRoot(System.Windows.FrameworkElement)">
            <summary>
            <para>Raw property. For use from UI only. Note that more than one owner is not supported here.</para>
            <para>From code, use <see cref="!:SetIsHierarchicalFocusScopeRoot(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Behavior.HierarchicalFocusScopeRootBehavior.SetIsHierarchicalFocusScopeRoot(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            <para>Raw property. For use from UI only. Note that more than one owner is not supported here.</para>
            <para>From code, use <see cref="!:SetIsHierarchicalFocusScopeRoot(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Behavior.HierarchicalFocusScopeRootBehavior.SetIsHierarchicalFocusScopeRoot(JetBrains.DataFlow.Lifetime,System.Windows.FrameworkElement,JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
            <summary>
            <para>Call from code if you'd like to turn a focus scope into a focus scope root.</para>
            <para>Note that multiple owners are supported for the same element, identified by tokens, served till the last one goes.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Behavior.HierarchicalFocusScopeRootBehavior.GetTokens(System.Windows.FrameworkElement)">
            <summary>
            Stores the tokens collection on the element.
            Binds the activity to happen when (there're request tokens present).
            NOTE: we don't check when the element is loaded because we're attaching to an event which is quite safe to listen forever.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Behavior.HierarchicalFocusScopeRootBehavior.PropagateFocusScopesToElement(JetBrains.DataFlow.Lifetime,System.Windows.FrameworkElement)">
            <summary>
            Attaches to events, does the thing when the events are fired.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.RoutedCommandHandler">
            <summary>
            Allows a viewmodel to handle routed commands, viewmodel should implement <see cref="M:JetBrains.Application.UI.Utils.ViewModelUtil.CommandSink.AddHandler``1(System.Windows.Input.ICommand,System.Action{``0},System.Predicate{``0})"/> interface
            and call <see cref="T:JetBrains.Application.UI.Utils.ViewModelUtil.CommandSink"/> method to register a handler of the command
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ContextNotifications.ContextNotificationControl">
            <summary>
            Interaction logic for BackgroundNotificationControl.xaml
            </summary>
            <summary>
            ContextNotificationControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.ContextNotifications.ContextNotificationControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ExtensionManager.ExtensionManagerWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            ExtensionManagerWindow
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.ExtensionManager.ExtensionManagerWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Extensions.OptionsPages.PackageSourceEditorDialog.components">
            <summary>Required designer variable</summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Extensions.OptionsPages.PackageSourceEditorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Extensions.OptionsPages.PackageSourceEditorDialog.InitializeComponent(JetBrains.Application.UI.Components.IUIApplication)">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
            <param name="application"></param>
        </member>
        <member name="T:JetBrains.UI.SrcView.Extensions.SafeIconExtension">
            <summary>
            Loads an icon in such a way that it does not cause unhandled exceptions on Windows XP HiColor when it encounters the icons in the icon group which it can't handle with WIC.
            TODO: load icon with smth else but WIC actually, somewhen
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Extensions.View.ExtensionManagerOptionsView">
            <summary>
            ExtensionManagerOptionsView
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Extensions.View.ExtensionManagerOptionsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Icons.Settings.ThemedIconsPreviewView">
            <summary>
            ThemedIconsPreviewView
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Icons.Settings.ThemedIconsPreviewView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.TaskDialogs.MultipleChoiceTaskDialog.Show(System.String,System.String,System.String,System.Action,System.Int32,System.IntPtr,JetBrains.UI.SrcView.TaskDialogs.TaskDescriptor[])">
            <summary>
            Displays modal task dialog in front of the specified window,
            returns a result of user choice.
            </summary>
            <param name="caption">Title bar caption of dialog window</param>
            <param name="instructionText">Purpose of the dialog</param>
            <param name="text">Detailed information for the user</param>
            <param name="hyperlinkAction">action which is performed when hyperlink is clicked, null if no hyperlinks</param>
            <param name="defaultTaskIndex">Selected task button index</param>
            <param name="ownerHandle">Handle of owner window of the dialog</param>
            <param name="tasks">List of alternative actions from which the user makes a choice</param>
            <returns>
            Index of action that the user has chosen or
            -1 if user closes dialog without choosing any alternative or current platform does not support task dialogs</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.TaskDialogs.MultipleChoiceTaskDialog.Show(System.String,System.String,System.String,System.Int32,System.Windows.Window,JetBrains.UI.SrcView.TaskDialogs.TaskDescriptor[])">
            <summary>
            Displays modal task dialog in front of the specified window,
            returns a result of user choice.
            </summary>
            <param name="caption">Title bar caption of dialog window</param>
            <param name="instructionText">Purpose of the dialog</param>
            <param name="text">Detailed information for the user</param>
            <param name="defaultTaskIndex">Selected task button index</param>
            <param name="owner">Owner window of the dialog</param>
            <param name="tasks">List of alternative actions from which the user makes a choice</param>
            <returns>
            Index of action that the user has chosen or
            -1 if user closes dialog without choosing any alternative or current platform does not support task dialogs</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.TaskDialogs.MultipleChoiceTaskDialog.Show(System.String,System.String,System.String,System.Int32,System.IntPtr,JetBrains.UI.SrcView.TaskDialogs.TaskDescriptor[])">
            <summary>
            Displays modal task dialog in front of the specified window,
            returns a result of user choice.
            </summary>
            <param name="caption">Title bar caption of dialog window</param>
            <param name="instructionText">Purpose of the dialog</param>
            <param name="text">Detailed information for the user</param>
            <param name="defaultTaskIndex">Selected task button index</param>
            <param name="ownerHandle">Handle of owner window of the dialog</param>
            <param name="tasks">List of alternative actions from which the user makes a choice</param>
            <returns>
            Index of action that the user has chosen or
            -1 if user closes dialog without choosing any alternative or current platform does not support task dialogs</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.TaskDialogs.MultipleChoiceTaskDialog.IsPlatformSupported">
            <summary>
            Determines whether current platform (operating system) supports task dialog
            (Windows Vista or later)
            </summary>
            <returns>true, if supported</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.ThemedIconsToolWindow.ImportedIconsViewerView.OnRenderView(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Icons.ThemedIconsToolWindow.ImportedIconsViewerAutomation)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.UI.SrcView.ThemedIconsToolWindow.CompiledIconsViewerGroupedView.OnRenderView(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Icons.ThemedIconsToolWindow.CompiledIconsViewerAutomation.Grouped)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.UI.SrcView.ThemedIconsToolWindow.CompiledIconsViewerListView.OnRenderView(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Icons.ThemedIconsToolWindow.CompiledIconsViewerAutomation.List)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.UI.SrcView.ThemedIconsToolWindow.CompiledIconsViewerTilesView.OnRenderView(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Icons.ThemedIconsToolWindow.CompiledIconsViewerAutomation.Tiles)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.UI.SrcView.ThemedIconsToolWindow.CompiledIconsViewerView.OnRenderView(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Icons.ThemedIconsToolWindow.CompiledIconsViewerAutomation)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.UI.SrcView.ThemedIconsToolWindow.IconViewerImportSourceView.OnRenderView(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerImportSourceAutomation)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.UI.SrcView.ThemedIconsToolWindow.MasterDetailHelperView.OnRenderView(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Icons.ThemedIconsToolWindow.MasterDetailHelperAutomation)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.UI.SrcView.ThemedIconsToolWindow.IconViewerView">
            <summary>
            A tool window which browses the available themed icons.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.UsageStatistics.CounterGroupView">
            <summary>
            CounterGroupView
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.UsageStatistics.CounterGroupView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.UsageStatistics.CounterItemView">
            <summary>
            CounterItemView
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.UsageStatistics.CounterItemView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.UsageStatistics.UsageStatisticsView">
            <summary>
            UsageStatisticsView
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.UsageStatistics.UsageStatisticsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.OptionPages.WebProxyCustomUsingView">
            <summary>
            WebProxyCustomUsingView
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.OptionPages.WebProxyCustomUsingView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.OptionsDialog.CompositeOptionPageView.OnRenderView(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Options.OptionPages.CompositeOptionPage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.UI.SrcView.OptionsDialog.SettingsLayersDialogOwnerInteractive">
            <summary>
            Spawns the Settings Layers dialog.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.OptionsDialog.SettingsLayersDialogOwnerInteractive.Show(JetBrains.Application.UI.Automation.WindowModality)">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.UI.SrcView.OptionsDialog.SettingsLayersDialogOwnerInteractive.myShow">
            <summary>
            We require that the guard is not held when this method is called.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.OptionsDialog.SimpleOptions.SimpleOptionsPageView">
            <summary>
            SimpleOptionsPageView
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.OptionsDialog.SimpleOptions.SimpleOptionsPageView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.PopupLayout.MainWindowPopupWindowContextInteractive">
            <summary>
            Provides the popup window context for the main application window.
            The popup layouter will be anchoring to the middle of the window, and ESC pressings will be handled correctly.
            If there is no main window, the working area of the primary screen is used as a fallback.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.PopupLayout.MainWindowPopupWindowContextInteractive.GetSourceCore">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.UI.SrcView.PopupLayout.MainWindowPopupWindowContextInteractive.CreateCore(JetBrains.DataFlow.Lifetime)">
            <summary>
            Gives the popup window context for the main application window.
            The popup layouter will be anchoring to the middle of the window (<see cref="M:JetBrains.UI.WindowManagement.MainWindowLayouter.CreateCenteredCorner(JetBrains.DataFlow.Lifetime,JetBrains.Application.StdApplicationUI.IMainWindow,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)"/> is used), and ESC pressings will be handled correctly.
            If there is no main window, the working area of the primary screen is used.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ProcessExplorer.EtwClrRundownSession">
            <summary>
            Rundown trace session allows to obtain the information on CLR 4.0 objects.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ProcessExplorer.EtwClrRuntimeSession">
            <summary>
            Runtime trace session with LoaderRundown and StartRundown keywords allows to obtain CLR 2.0 modules.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ProcessExplorer.ETW.ClrEtw.RundownKeywords">
            <summary>
            CLR ETW Rundown Keywords
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ProcessExplorer.ETW.ClrEtw.RuntimeKeywords">
            <summary>
            CLR ETW Runtime Keywords.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ProcessExplorer.ETW.ClrEtw.EventLevel">
            <summary>
            ETW event levels.
            </summary>
            <remarks>
            ETW events can also be filtered by level. If the level is set at 0x5, events of all levels, including 0x5 and below (which are events that belong to categories enabled through keywords) are raised. If the level is set at 0x2, only events that belong to level 0x2 and below are raised.
            </remarks>
        </member>
        <member name="T:JetBrains.UI.SrcView.ProcessExplorer.ETW.ClrEtw.LoaderEvents">
            <summary>
            These events collect information relating to loading and unloading application domains, assemblies, and modules.
            </summary>
            <remarks>
            All loader events are raised under the LoaderKeyword (0x8) keyword. The DCStart and the DCEnd events are raised under LoaderRundownKeyword (0x8) with StartRundown/EndRundown enabled.
            </remarks>
            <remarks>
            .NET Framework 4.   http://msdn.microsoft.com/en-us/library/vstudio/ff356159(v=vs.100).aspx
            .NET Framework 4.5  http://msdn.microsoft.com/en-us/library/vstudio/ff356159(v=vs.110).aspx
            </remarks>
        </member>
        <member name="T:JetBrains.UI.SrcView.ProcessExplorer.ETW.ClrEtw.LoaderEvents.RuntimeInformationData">
            <summary>
            http://msdn.microsoft.com/en-us/library/vstudio/ff356156(v=vs.100).aspx
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ProcessExplorer.ETW.ClrEtw.LoaderEvents.AppDomainData_V1">
            <summary>
            Event data for AppDomain* events.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ProcessExplorer.ETW.ClrEtw.LoaderEvents.AssemblyData_V1">
            <summary>
            Event data for Assembly* events.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ProcessExplorer.ETW.ClrEtw.LoaderEvents.ModuleData_V1">
            <summary>
            Event data for Module* events .NET Framework 4.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ProcessExplorer.ETW.ClrEtw.LoaderEvents.ModuleData_V2">
            <summary>
            Event data for Module* events .NET Framework 4.5.
            </summary>
            <remarks>
            <para>The fields that have "Pdb" in their names can be used by profiling tools to locate PDBs that match the modules that were loaded during the profiling session. The values of these fields correspond to the data written into the IMAGE_DIRECTORY_ENTRY_DEBUG sections of the module normally used by debuggers to help locate PDBs that match the loaded modules.</para>
            <para>The field names that begin with "ManagedPdb" refer to the managed PDB corresponding to the MSIL module that was generated by the managed compiler (such as the C# or Visual Basic compiler). This PDB uses the managed PDB format, and describes how elements from the original managed source code, such as files, line numbers, and symbol names, map to MSIL elements that are compiled into the MSIL module.</para>
            <para>The field names that begin with "NativePdb" refer to the NGen PDB generated by calling NGEN createPDB. This PDB uses the native PDB format, and describes how elements from the original managed source code, such as files, line numbers, and symbol names, map to native elements that are compiled into the NGen module.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.UI.SrcView.ProcessExplorer.ETW.ClrEtw.LoaderEvents.DomainModuleData_V1">
            <summary>
            Event data for DomainModule* events.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.ProcessExplorer.ETW.EtwSessionBase.EventCallbackHandler(JetBrains.Interop.WinApi.EVENT_RECORD@)">
            <summary>
            ETW calls EventCallback function for each event in the buffer.
            </summary>
            <param name="eventRecord">Pointer to an EVENT_TRACE structure that contains the event information.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.ProcessExplorer.ETW.EtwSessionBase.BufferCallbackHandler(JetBrains.Interop.WinApi.EVENT_TRACE_LOGFILE@)">
            <summary>
            BufferCallback receives buffer-related statistics for each buffer ETW flushes. ETW calls this callback after it delivers all the events in the buffer. This callback is optional..
            </summary>
            <param name="bufferRecord">Pointer to an EVENT_TRACE_LOGFILE structure that contains information about the buffer.</param>
            <returns>To continue processing events, return TRUE. Otherwise, return FALSE. Returning FALSE will terminate the ProcessTrace function.</returns>
        </member>
        <member name="T:JetBrains.UI.SrcView.ProcessExplorer.ProcessFinder.Info">
            <summary>
            Information on process and window under cursor.
            </summary>
            <remarks>
            It contains only the information that can be obtained on-the-fly without accessing the hard drive or having special privileges.
            That's why it doesn't contain process [file]name, we could not have enought rights to open the process handle.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.SrcView.ProcessExplorer.ProcessFinder.Info.Cancelled">
            <summary>
            Set this flag in your OnMove callback to stop process finding.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.ProcessExplorer.Utils.ProcessExplorerUtil.GetExpectedProcessRuntimes(System.Int32)">
            <summary>
            A rough way to detect .NET processes. Works even if the target process (identified by processId) is elevated and our one is not.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Symbols.EulaDialogView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Symbols.EulaDialogView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Symbols.EulaDialogView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.Avalon.AvalonTooltipElement">
            <summary>
            Defines tooltips over Avalon elements.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.Avalon.AvalonTooltipElement.UIElement">
            <summary>
            The UI element over which the tooltip is shown.
            Note that, unlike <see cref="P:System.Windows.FrameworkElement.ToolTip"/>, the tooltip described by our <see cref="P:JetBrains.UI.SrcView.Tooltips.ITooltipElement.TooltipInfo"/> does not necessarily represent the whole element area, but only a subpart designated by <see cref="M:JetBrains.Application.UI.Tooltips.ITooltipInfo.HitTestToolArea(System.Windows.Point)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.Avalon.AvalonTooltipManagerComponent">
            <summary>
            Initializes the Avalon tooltip event handling.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.Avalon.AvalonTooltipManagerComponent.GetJetTooltipEvent">
            <summary>
            Fires when the tooltip is requested for the element under the mouse. Bubbles up the elements tree to see if somebody has a tooltip.
            Handle the event and call its arguments' <see cref="M:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.SetTooltip(System.Windows.UIElement,JetBrains.UI.SrcView.Tooltips.TooltipInfo)"/> to provide a tooltip.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.Avalon.FindAvalonTooltipElementsAtCursor">
            <summary>
            Avalon tooltip provider.
            Finds elements to handle the <see cref="F:JetBrains.UI.SrcView.Tooltips.Avalon.AvalonTooltipManagerComponent.GetJetTooltipEvent"/> call-for-tooltip event.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs">
            <summary>
            Arguments to the <see cref="F:JetBrains.UI.SrcView.Tooltips.Avalon.AvalonTooltipManagerComponent.GetJetTooltipEvent"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.Lifetime">
            <summary>
            Lifetime for all the entities you might create for this tooltip session, e.g. popup layouters and tooltip renderers.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.HitElement">
            <summary>
            The element immediately hit by the mouse. Normally, if you get this event, you're an ancestor of the hit element (or the hit element itself).
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.myPointInRoot">
            <summary>
            The hit test point, in <see cref="F:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.myRootElement"/> coord space.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.myPointOnScreen">
            <summary>
            Needed for <see cref="T:JetBrains.UI.SrcView.Tooltips.ITooltipElement"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.myRootElement">
            <summary>
            Root element of the tree, an ancestor for any possible hit element handling this event. Basically, just the element in which the <see cref="F:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.myPointInRoot"/> is initially defined.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.myTooltipElement">
            <summary>
            The result of a <see cref="M:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.SetTooltip(System.Windows.UIElement,JetBrains.UI.SrcView.Tooltips.TooltipInfo)"/> call.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.TooltipElement">
            <summary>
            The result of a <see cref="M:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.SetTooltip(System.Windows.UIElement,JetBrains.UI.SrcView.Tooltips.TooltipInfo)"/> call.
            The entity firing the event must make sure this value is disposed of, eventually.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.GetPointInVisual(System.Windows.Media.Visual)">
            <summary>
            Gets the hit test point in local coordinate space of your element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.SetTooltip(System.Windows.UIElement,JetBrains.UI.SrcView.Tooltips.TooltipInfo)">
            <summary>
            If you handle the event and would like to show a tooltip, call this method. Sets the <see cref="P:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs.TooltipElement"/> property.
            The event will be marked as <see cref="P:System.Windows.RoutedEventArgs.Handled"/> automatically.
            </summary>
            <param name="element">The element to “own” the tooltip. Used for limiting the tooltip lifetime and treating the local coordinates in <paramref name="tti"/>'s tool area and the newly-created <see cref="T:JetBrains.UI.SrcView.Tooltips.ITooltipElement"/>.</param>
            <param name="tti">The tooltip.</param>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventHandler">
            <summary>
            Delegate to the <see cref="F:JetBrains.UI.SrcView.Tooltips.Avalon.AvalonTooltipManagerComponent.GetJetTooltipEvent"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.ExportFindTooltipElementsAtCursorAttruibute">
            <summary>
            Attribute for <see cref="T:JetBrains.UI.SrcView.Tooltips.IFindTooltipElementsAtCursor"/> impls.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.ExportFindTooltipElementsAtCursorAttruibute.Priority">
            <summary>
            The higher the priority, the sooner the finder is asked (and can promote its own result in precedence of the others).
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.FindWinFormsTooltipElementsAtCursor">
            <summary>
            Classic tooltip provider.
            Finds tooltips over WinForms controls that implement <see cref="T:JetBrains.Application.UI.Tooltips.ITooltipProvider"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.FindWinFormsTooltipElementsAtCursor.TryGetWinFormsTooltipProvider(JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs)">
            <summary>
            WinForms controls register by implementing an <see cref="T:JetBrains.Application.UI.Tooltips.ITooltipProvider"/>. Try getting one here.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.IFindTooltipElementsAtCursor">
            <summary>
            An entity to look for any <see cref="T:JetBrains.UI.SrcView.Tooltips.ITooltipElement"/>s under the current cursor position (given by a <see cref="T:JetBrains.Interop.WinApi.MOUSEHOOKSTRUCT"/> from a mouse hook).
            </summary>
            <seealso cref="T:JetBrains.UI.SrcView.Tooltips.ExportFindTooltipElementsAtCursorAttruibute"/>.
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.IFindTooltipElementsAtCursor.TryFindElementUnderCursor(JetBrains.DataFlow.Lifetime,JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs)">
            <summary>
            Looks for any elements with tooltips under cursor.
            </summary>
            <param name="lifetime">Lifetime for the tooltip data returned (eg layouters).</param>
            <param name="args">Windows message data, including current cursor position.</param>
            <returns>The element found, or <c>Null</c> otherwise.</returns>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.ITooltipElement">
            <summary>
            A generic element over which tooltips could be shown.
            The classic version is an HWND window, but now we need to add Avalon support.
            This object binds to the specific point and the specific tooltip text to be shown over that point.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Tooltips.ITooltipElement.OriginalPointClient">
            <summary>
            The point for which the element were originally created.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Tooltips.ITooltipElement.OriginalPointScreen">
            <summary>
            The point for which the element were originally created.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Tooltips.ITooltipElement.TooltipInfo">
            <summary>
            The tooltip info at the point for which the element were requested.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.ITooltipElement.AddExceptionData(System.Exception)">
            <summary>
            Adds data to the exception to report this element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.ITooltipElement.IsValid">
            <summary>
            Checks whether the element is still alive. If not, the tooltip will be dismissed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.ITooltipElement.ScreenToClient(System.Drawing.Point)">
            <summary>
            Converts a point from screen (mouse native) coordinates to the local client coordinates of the element.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.TipControlView">
            <summary>
            A control that implements the tooltip window.
            Don't use this class directly if you need to show a tooltip. Instead, either use the TipControl static class for one-time tooltips, or implement the <see cref="T:JetBrains.Application.UI.Tooltips.ITooltipProvider"/> interface on your window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TipControlView.myRenderParams">
            <summary>
            <see cref="T:JetBrains.UI.RenderParams"/>, lazy-init.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TipControlView.myAutoActivate">
            <summary>
            <see cref="T:JetBrains.Application.UI.Controls.IConstrainableControl"/> worker field.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TipControlView.myPainter">
            <summary>
            Tip painter, as a windowless control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TipControlView.myColorTheme">
            <summary>
            Color theme
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TipControlView.myTimeout">
            <summary>
            <see cref="P:JetBrains.UI.SrcView.Tooltips.TipControlView.Timeout"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TipControlView.myTimerTimeout">
            <summary>
            Waits for the tooltip to hide.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TipControlView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TipControlView.#ctor(JetBrains.Application.UI.Controls.IWindowlessControl,JetBrains.Application.UI.Components.Theming.ITheming,System.Windows.Forms.IWin32Window)">
            <summary>
            Creates a tip control with the given painter inside.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TipControlView.GetRenderParams(JetBrains.Application.UI.Components.Fonts.IFontsManager)">
            <summary>
            Gets the default rendering parameters for a tooltip.
            Do not modify this instance.
            </summary>
            <param name="getComponent"></param>
        </member>
        <member name="P:JetBrains.UI.SrcView.Tooltips.TipControlView.Timeout">
            <summary>
            The default timeout, the maximum time span for which the tooltip is visible, in milliseconds.
            Initially set to <see cref="P:JetBrains.Application.UI.Tooltips.TooltipConfig.DefaultTimeout"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TipControlView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TipControlView.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Layout"></see> event.
            </summary>
            
            <param name="levent">A <see cref="T:System.Windows.Forms.LayoutEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TipControlView.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged"></see> event.
            </summary>
            
            <param name="e">The <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.UI.SrcView.Tooltips.TipControlView.ShowWithoutActivation">
            <summary>
            Gets a value indicating whether the window will be activated when it is shown.
            </summary>
            
            <returns>
            True if the window will not be activated when it is shown; otherwise, false. The default is false.
            </returns>
            
        </member>
        <member name="P:JetBrains.UI.SrcView.Tooltips.TipControlView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Tooltips.TipControlView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.TipControlView.Dim">
            <summary>
            Dimension constants for the tooltip control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TipControlView.Dim.Border">
            <summary>
            Width and height of the horizontal and vertical border sides.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TipControlView.Dim.Padding">
            <summary>
            Padding between the border and tooltip's inner content.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.TooltipElement">
            <summary>
            Base impl.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.TooltipInfo">
            <summary>
            The standard implementation of the <see cref="T:JetBrains.Application.UI.Tooltips.ITooltipInfo"/> interface.
            Don't dispose of this instance until you're done with using its members, eg painters and layouters.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TooltipInfo.myLayouter">
            <summary>
            <see cref="P:JetBrains.UI.SrcView.Tooltips.TooltipInfo.Layouter"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TooltipInfo.myPopupWindowContext">
            <summary>
            <see cref="P:JetBrains.UI.SrcView.Tooltips.TooltipInfo.PopupWindowContext"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TooltipInfo.myTipPainter">
            <summary>
            <see cref="P:JetBrains.UI.SrcView.Tooltips.TooltipInfo.Painter"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TooltipInfo.myToolArea">
            <summary>
            <see cref="P:JetBrains.UI.SrcView.Tooltips.TooltipInfo.ToolArea"/>, used by <see cref="M:JetBrains.UI.SrcView.Tooltips.TooltipInfo.HitTestToolArea(System.Windows.Point)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipInfo.#ctor(JetBrains.Application.UI.Controls.IWindowlessControl,System.Windows.Rect)">
            <summary>
            Creates a tooltip info from the raw parameters.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipInfo.#ctor(JetBrains.Application.UI.Controls.IWindowlessControl,System.Drawing.Rectangle)">
            <summary>
            Creates a tooltip info from the raw parameters.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipInfo.#ctor(JetBrains.UI.RichText.RichText,System.Windows.Rect)">
            <summary>
            Creates a tooltip info upon the supplied text and with the specified tool area, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipInfo.#ctor(JetBrains.UI.RichText.RichText,System.Drawing.Rectangle)">
            <summary>
            Creates a tooltip info upon the supplied text and with the specified tool area, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipInfo.#ctor(JetBrains.UI.RichText.RichText,System.Windows.Forms.Control)">
            <summary>
            Creates a tooltip info upon the supplied text, acquiring the tool area from the given control's client rectangle.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipInfo.#ctor(JetBrains.UI.RichText.RichTextBlock,System.Windows.Forms.Control)">
            <summary>
            Creates a tooltip info upon the supplied text, acquiring the tool area from the given control's client rectangle.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipInfo.#ctor(JetBrains.UI.RichText.RichTextBlock,System.Windows.Rect)">
            <summary>
            Creates a tooltip info upon the supplied text and with the specified tool area, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipInfo.#ctor(JetBrains.UI.RichText.RichTextBlock,System.Drawing.Rectangle)">
            <summary>
            Creates a tooltip info upon the supplied text and with the specified tool area, in client coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Tooltips.TooltipInfo.ToolArea">
            <summary>
            Gets the tool area of this tooltip, in client coordinates.
            An empty rectangle means “no constraints”.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipInfo.HitTestToolArea(System.Windows.Point)">
            <summary>
            Checks whether the given point falls within the tool area of this tooltip. The tooltip is displayed while mouse pointer is within the tool area. One window may have more than one tooltip for different tool areas.
            </summary>
            <param name="pt">Point, in the client coordinates, to be tested for falling within the area.</param>
            <returns><c>True</c> if point is within the area, <c>False</c> otherwise.</returns>
        </member>
        <member name="P:JetBrains.UI.SrcView.Tooltips.TooltipInfo.Layouter">
            <summary>
            Gets or sets the layouter that positions the tooltip onscreen.
            <c>Null</c> means the default layouter will be used, one that positions the tooltip against the mouse pointer.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Tooltips.TooltipInfo.Painter">
            <summary>
            Gets the painter for the tooltip.
            Must be implemented. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Tooltips.TooltipInfo.PopupWindowContext">
            <summary>
            Gets or sets the popup window context that fires the actions upon which the tooltip is dismissed.
            <c>Null</c> means the default popup window context will be used.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive">
            <summary>
            An UI-interactive implementation for the <see cref="T:JetBrains.Application.UI.Tooltips.ITooltipManager"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.myContentMarging">
            <summary>
            Back-end for <see cref="P:JetBrains.Application.UI.Tooltips.ITooltipManager.ContentMargin"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.myCurrentTooltip">
            <summary>
            The element (HWND in classic case) that owns the currently displayed tooltip, or the tooltip that is about to be shown after a delay.
            <c>Null</c> if not displaying or awaiting the tooltip.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.myScreenCursorPositionWhenDismissedWithEsc">
            <summary>
            When user hits ESC to dismiss the tooltip, gets the prev cursor position to avoid re-showing the tooltip immediately over the same element.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.TooltipElementFindersPushNotifications">
            <summary>
            An externally managed collection.
            Its maintenance has been extracted to avoid dependency from Tooltip Manager on each and every provider, which is not required on startup. // TODO: turn into demand imports
            Must be sorted by priority, first-comes-first.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.CreateTooltipView">
            <summary>
            Creates and immediately displays the tooltip, as described by <see cref="F:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.myCurrentTooltip"/>.
            To schedule display on hover, fill the data fields and wind up this method on a timer.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.DestroyTooltip">
            <summary>
            Destroys the currently visible tooltip and cleans up its data fields.
            Does nothing if no tooltip is currently visible.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.OnInputAction(JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs)">
            <summary>
            Mouse and keyboard hooks handler.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.OnMouseMove_CheckCreate(JetBrains.DataFlow.LifetimeDefinition,JetBrains.UI.SrcView.Tooltips.ITooltipElement)">
            <summary>
            Show the new tooltip for the hovered area (only if we're not displaying a tooltip).
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.OnMouseMove_CheckCreate_Condition(JetBrains.UI.SrcView.Tooltips.ITooltipElement)">
            <summary>
            Condition of creating the new tooltip for <see cref="M:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.OnMouseMove_CheckCreate(JetBrains.DataFlow.LifetimeDefinition,JetBrains.UI.SrcView.Tooltips.ITooltipElement)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.OnMouseMove_CheckDestroy(System.Drawing.Point)">
            <summary>
            Remove tooltip if we've exited its tool area.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.ShowCore(JetBrains.DataFlow.LifetimeDefinition,JetBrains.Application.UI.UIAutomation.IAutomation,JetBrains.Application.UI.PopupLayout.IPopupWindowContext,JetBrains.Application.UI.WindowManagement.HideFlags,System.TimeSpan)">
            <summary>
            Core impl for <see cref="M:JetBrains.Application.UI.Tooltips.ITooltipManager.Show(JetBrains.DataFlow.LifetimeDefinition,JetBrains.Application.UI.UIAutomation.IAutomation,JetBrains.Application.UI.PopupLayout.IPopupWindowContext,JetBrains.Application.UI.WindowManagement.HideFlags,System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.GetContentMarginCore">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.GetRenderParamsCore">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.CurrentTooltipElementData.TooltipView">
            <summary>
            The control that renders the tooltip.
            <c>Null</c> if not displaying a tooltip.
            Check this field for <c>Null</c> to determine whether the tooltip is currently visible.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentTooltipElementFindersManager">
            <summary>
            Manages the <see cref="F:JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive.TooltipElementFindersPushNotifications" /> list.
            <see cref="T:JetBrains.Application.UI.Tooltips.TooltipManagerComponent" /> MUST NOT be referencing this class to spare its clients from circular dependencies.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.TooltipProvider">
            <summary>
            A simple tooltip provider implementation for the cases when the tooltip provider is external to the window it's requested on.
            If you're implementing the tooltip-providing window class, implement the <see cref="T:JetBrains.Application.UI.Tooltips.ITooltipProvider"/> interface instead.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipProvider.#ctor">
            <summary>
            Creates a tooltip provider without a tooltip yet, sink the <see cref="F:JetBrains.UI.SrcView.Tooltips.TooltipProvider.TooltipRequested"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipProvider.#ctor(System.Action{JetBrains.DataFlow.InOutEventArgs{System.Drawing.Point,JetBrains.Application.UI.Tooltips.ITooltipInfo}})">
            <summary>
            Creates a tooltip provider with one handler.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.TooltipProvider.TooltipRequested">
            <summary>
            Fires when the tooltip is requested by the caller.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.TooltipProvider.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.Application.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="T:JetBrains.UI.SrcView.Tooltips.WinFormsTooltipElement">
            <summary>
            Tooltips over WinForms controls that implement <see cref="T:JetBrains.Application.UI.Tooltips.ITooltipProvider"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Tooltips.WinFormsTooltipElement.TooltipProvider">
            <summary>
            Optional. The tooltip provider on the element (if applicable to the origin of the tooltip element, as is in the case of WinForms elements; used for exception diag mostly).
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Tooltips.WinFormsTooltipElement.IsValid">
            <summary>
            Checks whether the HWND belongs to a still-living .NET control or a good window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.ToolWindowManagement.TabbedToolWindowTabStripView.OnRenderView(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.ToolWindowManagement.TabbedToolWindowClass.TabbedToolWindowTabStripAutomation)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.UI.SrcView.ToolWindowManagement.TabRenamePromptInteractive.Prompt(System.String,System.String,System.String[])">
            <summary>
            Asks user for a new tab name. Returns null on cancel
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.ToolWindowManagement.ToolWindowContentPresenter">
            <summary>
            Interaction logic for ToolWindowContentPresenter.xaml
            </summary>
            <summary>
            ToolWindowContentPresenter
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.ToolWindowManagement.ToolWindowContentPresenter.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.ToolWindowManagement.ToolWindowFrameContentPlaceholderView.OnRenderView(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.ToolWindowManagement.ToolWindowFrameContentPlaceholderAutomation)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.UI.SrcView.BulbMenu.BulbMenuComponentInteractive.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Components.IUIApplication,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus,JetBrains.Application.Threading.IShellLocks,JetBrains.Application.UI.Actions.ActionManager.IActionManager,JetBrains.Application.ActivityTrackingNew.UsageStatistics,JetBrains.Application.UI.Controls.BulbMenu.FeatureSuggestionBulbItemsProvider)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.UI.SrcView.BulbMenu.BulbMenuComponentInteractive.IconMargin">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.BooleanEditorResourceDictionary">
            <summary>
            BooleanEditorResourceDictionary
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.BooleanEditorResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.DialogEditorResourceDictionary">
            <summary>
            DialogEditorResourceDictionary
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.DialogEditorResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.EnumEditorResourceDictionary">
            <summary>
            EnumEditorResourceDictionary
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.EnumEditorResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.ExtendedEditorResourceDictionary">
            <summary>
            ExtendedEditorResourceDictionary
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.ExtendedEditorResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.InvalidEditorResourceDictionary">
            <summary>
            InvalidEditorResourceDictionary
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.InvalidEditorResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.StringEditorResourceDictionary">
            <summary>
            StringEditorResourceDictionary
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.StringEditorResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.LayoutDesigner.Controls.Themes.ModelPropertyPanelResourceDictionary">
            <summary>
            ModelPropertyPanelResourceDictionary
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.LayoutDesigner.Controls.Themes.ModelPropertyPanelResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.LayoutDesigner.Controls.Themes.ToolboxResourceDictionary">
            <summary>
            ToolboxResourceDictionary
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.LayoutDesigner.Controls.Themes.ToolboxResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.LayoutDesigner.Themes.BrushesResourceDictionary">
            <summary>
            BrushesResourceDictionary
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.LayoutDesigner.Themes.BrushesResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.LayoutDesigner.Themes.ColorsResourceDictionary">
            <summary>
            ColorsResourceDictionary
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.LayoutDesigner.Themes.ColorsResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.LayoutDesigner.Themes.GenericDictionary">
            <summary>
            GenericDictionary
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.LayoutDesigner.Themes.GenericDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Progress.CustomProgressDialog">
            <summary>
            A custom-crafted progress dialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.CustomProgressDialog.DescriptionLine1">
            <summary>
            The first line of the progress dialog description. Shortens paths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.CustomProgressDialog.DescriptionLine2">
            <summary>
            The second line of the progress dialog description. Shortens paths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.CustomProgressDialog.IsCancelable">
            <summary>
            Whether the cancel button is available on the dialog.
            Cannot be changed when <see cref="F:JetBrains.UI.SrcView.Progress.CustomProgressDialog.IsRunning"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.CustomProgressDialog.IsRunning">
            <summary>
            Whether the dialog is currently visible. Set to <c>True</c> to show. To hide, either set to <c>False</c> or dispose of the dialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.CustomProgressDialog.IsRunningEffective">
            <summary>
            The dialog is shown with a delay, this is the delayed value.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.CustomProgressDialog.IsUserCanceled">
            <summary>
            Whether the user has canceled the progress dialog. Readonly.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.CustomProgressDialog.Title">
            <summary>
            Progress dialog title.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.CustomProgressDialog.Value">
            <summary>
            Value of the progress, in the [0…1] range.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.CustomProgressDialog.WindowHandle">
            <summary>
            A handle to the progress window. Readonly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.CustomProgressDialog.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.CustomProgressDialogEx.BindToProgressIndicator(JetBrains.UI.SrcView.Progress.CustomProgressDialog,JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel)">
            <summary>
            Binds a progress indicator to its visual presentation.
            The values are prevented from being updated too often.
            Returns a diconnection token.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Progress.JetProgressWnd">
            <summary>
            Implementation details for the <see cref="T:JetBrains.UI.SrcView.Progress.CustomProgressDialog"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.JetProgressWnd.IsUserCanceled">
            <summary>
            Whether the user has canceled the progress dialog. Readonly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.JetProgressWnd.WndProc_DontStealFocusFromDialogBoxes(System.Windows.Forms.Message)">
            <summary>
            The progress window is shown after a delay.
            If the task-under-progress shows a dialog box before the delay elapses, the progress would steal focus from that dialog box. Not nice.
            An example is the checkout dialog box.
            Make sure we return focus where it belongs.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.JetProgressWnd.JetBrains#Application#UI#Controls#IConstrainableControl#GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.Application.UI.Controls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.JetProgressWnd.JetBrains#Application#UI#Controls#IConstrainableControl#SetLayout(JetBrains.Application.UI.PopupLayout.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.SrcView.Progress.JetProgressWnd.JetBrains#Application#UI#Controls#IConstrainableControl#AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.SrcView.Progress.JetProgressWnd.JetBrains#Application#UI#Controls#IConstrainableControl#WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Progress.SystemProgressDialog">
            <summary>
            Exposes the system-standard Progress Dialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.Animation">
            <summary>
            An animation to be displayed on the dialog above the progress. A choice of the standard system animations.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.DescriptionLine1">
            <summary>
            The first line of the progress dialog description. Shortens paths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.DescriptionLine2">
            <summary>
            The second line of the progress dialog description. Shortens paths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.DescriptionLine3">
            <summary>
            Available only when not <see cref="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.IsEstimatingTime"/>. The third line of the progress dialog description. Shortens paths.
            When <see cref="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.IsEstimatingTime"/>, this line is used for displaying the time estimate.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.IsCancelable">
            <summary>
            Whether the cancel button is available on the dialog.
            Cannot be changed when <see cref="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.IsRunning"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.IsEstimatingTime">
            <summary>
            Whether the system should estimate the remaining time and give it out in the third description line of the dialog.
            Cannot be changed when <see cref="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.IsRunning"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.IsShownWithoutDelay">
            <summary>
            Show dialog immideatly after creating.
            Cannot be changed when <see cref="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.IsRunning"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.IsMarquee">
            <summary>
            Whether the progress is indeterminate.
            Cannot be changed when <see cref="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.IsRunning"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.IsRunning">
            <summary>
            Whether the dialog is currently visible. Set to <c>True</c> to show. To hide, either set to <c>False</c> or dispose of the dialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.IsUserCanceled">
            <summary>
            Whether the user has canceled the progress dialog. Readonly.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.Title">
            <summary>
            Progress dialog title.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.Value">
            <summary>
            Value of the progress, in the [0…1] range.
            </summary>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.SystemProgressDialog.WindowHandle">
            <summary>
            A handle to the progress window. Readonly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.SystemProgressDialog.InitRunning_DontStealFocusFromDialogBoxes(JetBrains.DataFlow.Lifetime)">
            <summary>
            The progress window is shown after a delay.
            If the task-under-progress shows a dialog box before the delay elapses, the progress would steal focus from that dialog box. Not nice.
            An example is the checkout dialog box.
            Make sure we return focus where it belongs.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.SystemProgressDialog.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.SystemProgressDialogEx.BindToProgressIndicator(JetBrains.UI.SrcView.Progress.SystemProgressDialog,JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Application.Threading.IThreading)">
            <summary>
            Binds a progress indicator to its visual presentation.
            The values are prevented from being updated too often.
            Returns a diconnection token.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Progress.TaskProgressControl">
            <summary>
            Summary description for TaskProgressControl.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Progress.UITaskExecutorRun">
            <summary>
            Controls a single <see cref="M:JetBrains.Application.Progress.ITaskExecutor.ExecuteTask(System.String,JetBrains.Application.Progress.TaskCancelable,System.Action{JetBrains.Application.Progress.IProgressIndicator})"/> run of the <see cref="T:JetBrains.UI.SrcView.Progress.UITaskExecutorRuns"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRun.Run(JetBrains.Application.UI.Progress.TaskThreadAffinity,System.Action{JetBrains.Application.Progress.IProgressIndicator},System.Func{JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,System.IntPtr},JetBrains.Application.Progress.ProgressIndicator,System.Windows.Forms.IWin32Window,JetBrains.Application.Threading.IThreading,JetBrains.Application.UI.Progress.WorkerThreadShop,System.Boolean)">
            <summary>
            Creates an object that runs the task execution once.
            </summary>
            <param name="taskThreadAffinity">Whether the task MUST be run on the primary thred (<see cref="F:JetBrains.Application.UI.Progress.TaskThreadAffinity.Primary"/>), or it COULD be run on a worker thread to avoid freezing the UI (<see cref="F:JetBrains.Application.UI.Progress.TaskThreadAffinity.Free"/>).</param>
            <param name="task">The task to run. The <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> given to the task is always free-threaded for both reading and writing, even if <see cref="F:JetBrains.Application.UI.Progress.TaskThreadAffinity.Primary"/>.</param>
            <param name="FAttachUi">Allows the owner to attach its UI to the progress of the task. The <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> object given as parameter is always primary-threaded, which means that it fires modifications on the primary thread only. To cancel out the UI or binding, submit to the <see cref="T:JetBrains.DataFlow.Lifetime"/> parameter. Optionally return the window handle, if known already, to keep from disabling when applying the modal state.</param>
            <param name="indicator">The owner-provided progress indicator.</param>
            <param name="parentWindow">The window focus will be restored to if it was impossible to restore focus to the previous window.</param>
            <param name="threading"></param>
            <param name="workerThreadShop"></param>
            <param name="enforceModalityState"></param>
        </member>
        <member name="F:JetBrains.UI.SrcView.Progress.UITaskExecutorRun.myBackingA">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRun.RunCore(JetBrains.Application.UI.Progress.TaskThreadAffinity,System.Action{JetBrains.Application.Progress.IProgressIndicator},System.Func{JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,System.IntPtr},JetBrains.Application.Progress.ProgressIndicator,System.Windows.Forms.IWin32Window,JetBrains.Application.Threading.IThreading,JetBrains.Application.UI.Progress.WorkerThreadShop,System.Boolean)">
            <summary>
            Creates an object that runs the task execution once.
            </summary>
            <param name="taskThreadAffinity">Whether the task MUST be run on the primary thred (<see cref="F:JetBrains.Application.UI.Progress.TaskThreadAffinity.Primary"/>), or it COULD be run on a worker thread to avoid freezing the UI (<see cref="F:JetBrains.Application.UI.Progress.TaskThreadAffinity.Free"/>).</param>
            <param name="FTask">The task to run. The <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> given to the task is always free-threaded for both reading and writing, even if <see cref="F:JetBrains.Application.UI.Progress.TaskThreadAffinity.Primary"/>.</param>
            <param name="FAttachUi">Allows the owner to attach its UI to the progress of the task. The <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> object given as parameter is always primary-threaded, which means that it fires modifications on the primary thread only. To cancel out the UI or binding, submit to the <see cref="T:JetBrains.DataFlow.Lifetime"/> parameter. Optionally return the window handle, if known already, to keep from disabling when applying the modal state.</param>
            <param name="progressIndicator">The owner-provided progress indicator.</param>
            <param name="parentWindow">The window focus will be restored to if it was impossible to restore focus to the previous window.</param>
            <param name="threading"></param>
            <param name="workerThreadShop"></param>
            <param name="enforceModalityState"></param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRun.Run_PumpForSingleThreadedTasks(JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Application.Threading.IThreading)">
            <summary>
            When a single-threaded task manipulates its progress, pump Windows messages to make sure the UI is not stuck (also required to let the progress window show onscreen).
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRun.PushProgressCanceledInterruptableCookie(JetBrains.Application.Progress.IProgressIndicator,JetBrains.Application.UI.Progress.TaskThreadAffinity)">
            <summary>
            Throws the <see cref="T:System.OperationCanceledException"/> on <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRun.GetTaskAffinedThread(JetBrains.Application.UI.Progress.TaskThreadAffinity,JetBrains.Threading.JetDispatcher,JetBrains.Application.UI.Progress.WorkerThreadShop)">
            <summary>
            Gets or creates the thread on which the task should be executed (either the current one, or the special worker thread, see <see cref="!:myTaskThreadAffinity"/>).
            </summary>
            <param name="taskThreadAffinity"></param>
            <param name="dispatcherPrimary"></param>
            <param name="workerThreadShop"></param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRun.RunStartTask(System.Action{JetBrains.Application.Progress.IProgressIndicator},JetBrains.Application.UI.Progress.TaskThreadAffinity,JetBrains.Application.Progress.ProgressIndicator,JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.Threading.JetDispatcher,JetBrains.Application.UI.Progress.WorkerThreadShop)">
            <summary>
            Starts the task, on whichever thread needed.
            </summary>
            <param name="FTask"></param>
            <param name="taskThreadAffinity"></param>
            <param name="progressIndicator"></param>
            <param name="isDone"></param>
            <param name="dispatcherPrimary"></param>
            <param name="workerThreadShop"></param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRun.RunStartTaskCallTaskAction(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.Application.Progress.ProgressIndicator,JetBrains.Application.UI.Progress.TaskThreadAffinity,System.Action{JetBrains.Application.Progress.IProgressIndicator},JetBrains.Threading.JetDispatcher)">
            <summary>
            The <see cref="!:myTask"/> caller impl, runs on task target thread, at the end notifies the owner thru <see cref="!:IsDone"/> async.
            </summary>
            <param name="isDone"></param>
            <param name="progressIndicator"></param>
            <param name="taskThreadAffinity"></param>
            <param name="FTask"></param>
            <param name="dispatcherPrimary"></param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRun.Run_AttachUI(JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Application.Threading.IThreading,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,System.IntPtr})">
            <summary>
            Progress UI for the task run, as specified by the owner of this Run object.
            </summary>
            <param name="lifetime"></param>
            <param name="progressIndicator"></param>
            <param name="threading"></param>
            <param name="fAttachUi"></param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRun.Run_DisableWindowsButOne(JetBrains.DataFlow.Lifetime,System.IntPtr)">
            <summary>
            Pushes a main-window-disable, to emulate modality.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRun.Run_PushFocusedWindowState(JetBrains.DataFlow.Lifetime,System.Windows.Forms.IWin32Window)">
            <summary>
            Stores the focused window, restores in a reliable manner later.
            </summary>
            <param name="lifetime"></param>
            <param name="parentWindow"></param>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRun.Run_WaitUntilDone(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{System.Boolean})">
            <summary>
            Pumps messages until the task is thru.
            </summary>
            <param name="lifetime"></param>
            <param name="isDone"></param>
        </member>
        <member name="T:JetBrains.UI.SrcView.Progress.UITaskExecutorRun.ModalityForm">
            <summary>
            A window to enforce modality (which is technically a disable on other windows plus a separate message pump).
            We want modality to be in effect immediately, while progress windows are created later. All of the manual measures of modality seem to be unstable about restoring keyboard focus correctly after modality is reverted.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SrcView.Progress.UITaskExecutorRuns">
            <summary>
            A task executor that displays graphical user interface while the progress is running.
            This object is reusable and is not connected to any given task execution.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRuns.#ctor(JetBrains.Application.UI.Progress.TaskThreadAffinity,JetBrains.Application.Threading.IThreading,JetBrains.Application.UI.Components.IUIApplicationSimple,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.Application.UI.Progress.WorkerThreadShop,System.Windows.Forms.IWin32Window,JetBrains.Application.Progress.TaskExecutorNotification)">
            <summary>
            Creates a new task executor. Specifies whether a task might be executed on another thread.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRuns.OnAttachProgressWindowUI(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Application.Progress.TaskCancelable,JetBrains.Application.Threading.IThreading,System.Windows.Forms.IWin32Window,JetBrains.Application.UI.Components.IUIApplicationSimple,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Progress UI for the task run: chooses whichever implementation to use.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRuns.OnAttachProgressWindowUI_CustomDialog(System.String,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Application.Progress.TaskCancelable,JetBrains.DataFlow.Lifetime,System.Windows.Forms.IWin32Window,JetBrains.Application.UI.Components.IUIApplicationSimple,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Progress UI for the task run: homebrew progress dlg.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRuns.OnAttachProgressWindowUI_SystemDialog(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Application.Progress.TaskCancelable,JetBrains.Application.Threading.IThreading,System.Windows.Forms.IWin32Window,JetBrains.Application.UI.Components.IUIApplicationSimple)">
            <summary>
            Progress UI for the task run: system progress dlg.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorRuns.ExecuteTask(System.String,JetBrains.Application.Progress.TaskCancelable,System.Action{JetBrains.Application.Progress.IProgressIndicator})">
            <summary>
            Executes the task without exiting the method until the task is completed.
            </summary>
            <param name="name">
              <para>Task title, short form.</para>
              <para>This is used for the progress window title by the UI progress indicators.</para>
              <para>The long form of the task caption should go to the <see cref="P:JetBrains.Application.Progress.IProgressIndicator.TaskName" /> of the <paramref name="task" />'s <see cref="T:JetBrains.Application.Progress.IProgressIndicator" />.</para>
              <para>Prepended with the product name automatically. Might be empty, in which case the product name will be used.</para>
            </param>
            <param name="task">The task to execute.</param>
            <param name="cancelable">Whether the task could be canceled by the user, if the task progress indication provided by <see cref="T:JetBrains.Application.Progress.ITaskExecutor" /> supports canceling.</param>
            <returns>Whether the task has completed execution (ie was not canceled). Note that a <see cref="T:System.OperationCanceledException" /> could cancel even a <see cref="F:JetBrains.Application.Progress.TaskCancelable.No" /> task.</returns>
            <remarks>Any return values of the task should be assigned inside the closure that implements the <paramref name="task" />.</remarks>
        </member>
        <member name="T:JetBrains.UI.SrcView.Progress.UITaskExecutorSwitchingImplementationInteractive">
            <summary>
            Allows to override the default <see cref="T:JetBrains.UI.SrcView.Progress.UITaskExecutorRuns" /> implementation with test mocks or app-specifics.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SrcView.Progress.UITaskExecutorSwitchingImplementationInteractive.CreateExecutor(JetBrains.Application.UI.Progress.TaskThreadAffinity,System.Windows.Forms.IWin32Window)">
            <summary>
            Switching implementation for <see cref="T:JetBrains.UI.SrcView.Progress.UITaskExecutorRuns" />.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.JetProgressBar">
            <summary>
            Ordinary indeterminate progress bars don't disable animations while hidden.
            
            This control enforces disable IsIndeterminate for hidden progress bars.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.Common.ControlWithSlidingContent">
            <summary>
            Interaction logic for WizardControlWithAnimation.xaml
            </summary>
            <summary>
            ControlWithSlidingContent
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Common.ControlWithSlidingContent.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Common.ComboBox.PresentationTemplate">
            <summary>
            Gets or sets template to present currently selected item
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Common.ComboBox.PresentationTemplateSelector">
            <summary>
            Gets or sets data template selector to present currently selected item
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Common.ComboBox.IsCheckable">
            <summary>
            Gets or sets if control is checkable
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Common.ComboBox.IsReordable">
            <summary>
            Gets or sets if feature which allows to up and down items in itemssource is turned on
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Common.ComboBox.IsSearchable">
            <summary>
            Gets or sets whether combo box should provide a way to search item
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Common.ComboBox.NoneContent">
            <summary>
            Gets or sets content when no items are checked
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Common.ComboBox.MaxSuggestions">
            <summary>
            Gets or sets how many suggestion should be shown to user while it inputs
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Common.ComboBox.SuggestionProvider">
            <summary>
            Gets or sets suggestion provider
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Dialogs.PromptWinForm.ShowDialog">
            <summary>
            Shows the prompt form with the <see cref="T:JetBrains.Application.StdApplicationUI.IMainWindow"/> as the parent.
            Returns whether the user accepted the change.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Dialogs.PromptWinForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Dialogs.PromptWinForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Dialogs.PromptWinForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.ContentAdorner">
            <summary>
            Represents implementation of adorner to host any type of content
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.Glyph">
            <summary>
            Presenter to make vector based graphical content be as text glyph. 
            It propagates Foreground to the content, replaces brushes to the target (Stroke &amp; Fill). 
            Stroke &amp; Fill properties are bound to inherited Foreground by default
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Glyph.Stroke">
            <summary>
            Gets or sets stroke brush which is applied to draw 'contours'
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Glyph.Fill">
            <summary>
            Gets or sets brush which is applied to fill shapes
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.GlyphDecorator">
            <summary>
            Recolors its content to foreground color
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.JetLoaderAnimationRenderer">
            <summary>
            Renderer implementation for the JetBrains loader animation.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.JetLoaderAnimationRenderer.Loop">
            <summary>
            Runs missed steps. Returns if there were steps and render should be invalidated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.UI.Controls.Misc.SearchViewEventArgs.SearchText">
            <summary>
            Gets the current text in the search box.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.Misc.ItemStyles">
            <summary>
            Exposes properties IsFirst \ IsLast on FrameworkElements for styling purposes
            EnableItemsStyle should be set on target panel or itemspresenter
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Misc.SearchTextBox.SearchBehaviorProperty">
            <summary>
            Search behavior: allows to assign a property from the viewmodel.
            Converts the handler type to the view-type handler and sets another property (this is required because we need to track an instance to later do RemoveHandler).
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Misc.SearchTextBox.SearchBehaviorConvertedToViewProperty">
            <summary>
            The internal property with the view-version of the handler, modifies the event.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Misc.SearchTextBox.SearchBehavior">
            <summary>
            Exposes the <see cref="F:JetBrains.UI.Controls.Misc.SearchTextBox.SearchEvent"/> routed event in a way suitable for viewmodel-binding.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.PanoramaHeaderPanel.SelectedIndex">
            <summary>
            Gets or sets selected index
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.RadioGroup.RadioGroup`1">
            <summary>
            Represents a group of radio buttons with a single value that is determined by the radiobutton that is checked.
            There is an option checkbox that disables or enables the whole group.
            </summary>
            <typeparam name="TValue">Type of the value chosen by this group.</typeparam>
        </member>
        <member name="F:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.myDefaultRadioMargin">
            <summary>
            The default radio button margin to which we're adding.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.myButtonValues">
            <summary>
            Values on the radio buttons.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.myPropertyButtonsEnabled">
            <summary>
            Indicates whether the property buttons should be enabled.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.myValueBeforeDisabling">
            <summary>
            Provides for restoring the selection that used to be before disabling the radio buttons.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.HasCheckbox">
            <summary>
            WHether the label or checkbox is visible.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.LabelText">
            <summary>
            Text of the label (if there's no checkbox), or the checkbox (if it's ON).
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.NothingSelectedValue">
            <summary>
            The <see cref="F:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.Value"/> when nothing is selected (eg checkbox is unchecked).
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.RadioButtonsAdditionalMargin">
            <summary>
            The additional margin around the radio buttons, ie one that positions them indented under the title check/label.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.Value">
            <summary>
            The composite value of this group.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.AddComment(System.Windows.Forms.Control)">
            <summary>
            Adds a comment to the last radio button.
            The only difference with adding a control directly is that the enabled state of the comment will be synched to the previous radio button.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.AddDependent(System.Windows.Forms.Control)">
            <summary>
            Adds a dependent control to the last radio button.
            The only difference with adding a control directly is that the enabled state of the dependent control will be synched to the previous radio button checked/enabled state.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.AddRadioButton(System.String,`0)">
            <summary>
            Adds a new radio button to the group, along with its value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.AddRadioButton(System.String,System.Drawing.Image,`0)">
            <summary>
            Adds a new radio button to the group, along with its value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RadioGroup.RadioGroup`1.AddRef(System.IDisposable)">
            <summary>
            Adds a reference so that it's held until the form is disposed of, after which it's disposed of.
            </summary>
            <param name="ref"></param>
        </member>
        <member name="M:JetBrains.UI.Controls.RadioGroup.RadioGroupView.#ctor">
            <summary>
            Default ctor. Designer-compatible. Make <see cref="T:JetBrains.Application.UI.Controls.RadioGroup.IRadioGroupViewModel"/> available in the data context for the control to work.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RadioGroup.RadioGroupView.#ctor(JetBrains.Application.UI.Controls.RadioGroup.IRadioGroupViewModel)">
            <summary>
            Assigns view model to the data context of this control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RadioGroup.RadioGroupView.SetModel``1(JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel{``0},JetBrains.Application.UI.Controls.RadioGroup.PanelOrientation)">
            <summary>
            Assigns view model to the data context of this control. Flient.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.RecolorDecorator">
            <summary>
            Provides ability to recolor any content on per-pixel level to target color with some level of brightness preserving
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RecolorDecorator.TargetColor">
            <summary>
            Gets or sets color which will be used to recolor the content
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RecolorDecorator.BrightnessPreserving">
            <summary>
            Gets or sets 'percent' of original brightness in recolored result (from 0 to 1)
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.RichTextAutomationView">
            <summary>
            When a <see cref="T:JetBrains.Application.UI.Controls.RichTextAutomation"/> object is in the datacontext, presents it with <see cref="T:JetBrains.UI.Controls.RichTextPresenter"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextTextBlock.IsKeyAccessed">
            <summary>
            Gets or sets whether the RichTextPresenter 
            is key accessed by ALT + accesskey (access key is processed from the RichText)
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextTextBlock.IsKeyAccessedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsKeyAccessed.  
            This enables styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextTextBlock.IsAutoContrasted">
            <summary>
            Gets or sets whether colors will be automatically adjusted to achieve visual contrast
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.SearchTextBox.Search">
            <summary>
            Event to handle explicit user request to search
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SearchTextBox.Watermark">
            <summary>
            Gets or sets content to show when no text 
            in the search box and it is not has keyboard focus
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SearchTextBox.HasText">
            <summary>
            Gets whether <see cref="T:JetBrains.UI.Controls.SearchTextBox"/> has any text
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SearchTextBox.Delay">
            <summary>
            Gets or sets milliseconds before Search event will be triggered
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SearchTextBox.ListenOn">
            <summary>
            Gets or sets control where text input will be listen 
            and intercept automatically in case of it is not handled
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SearchTextBox.ListenOnFocusable">
            <summary>
            Get or set whether <see cref="P:JetBrains.UI.Controls.SearchTextBox.ListenOn"/> can receive focus when the user press up, down or tab button in the search box
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.StripEx.ToolStripEx">
            <summary>
            This class adds click-through behaviour to ToolStrip
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.StripEx.ToolStripEx.ClickThrough">
            <summary>
            Gets or sets whether the ToolStripEx honors item clicks when its containing form does
            not have input focus.
            </summary>
            <remarks>
            Default value is false, which is the same behavior provided by the base ToolStrip class.
            </remarks>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.BindingChildrenProvider">
            <summary>
            Represents implementation to provide children via binding
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.ChildrenProvider`1">
            <summary>
            Represents implementation to provide children explicitly via function
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.SelfreferenceChildrenProvider">
            <summary>
            Represents fallback implementation to detect children automatically.
            The provider detects 'children property' if type has a property 
            of IEnumerable or Array with the same type or close one.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.Automation.TreeGridRowAutomationPeer">
            <summary>
            Exposes <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridRow"/> types to UI Automation
            to manupulate <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridRow"/> for testing purpose.
            Actually, due to UI virtualization, <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridRow"/> containers 
            might be inaccasable, so the peer uses an internal <see cref="T:JetBrains.UI.TreeGrid.TreeGridNode"/> to make possible interation with rows.
            Supports ExpandCollapse, SelectionItem and ScrollItem control patterns
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.Automation.TreeGridViewAutomationPeer">
            <summary>
            Exposes <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/> types to UI Automation
            to manupulate <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/> for testing purpose.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.DragDrop.DragDropPopup.DragItem">
            <summary>
            Gets or sets drag item
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.DragDrop.DragDropPopup.DragItemProperty">
            <summary>
            Using a DependencyProperty as the backing store for DragItem.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.Filters.DefinitiveFilterDescriptor.Acceptance.IsDefinitife">
            <summary>
            Definitife, an item is definetly accepted or declined (filter produce true or false).
            Derivative, an item is considered accepted or declined, but it was inherited from ancestor or children acceptance
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.Helpers.WeakEventListener`1">
            <summary>
            A common weak event listener which can be used for different kinds of events.
            </summary>
            <typeparam name="TEventArgs">The EventArgs type for the event.</typeparam>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.Helpers.WeakEventListener`1.#ctor(System.EventHandler{`0})">
            <summary>
            Initializes a new instance of the WeakEventListener class.
            </summary>
            <param name="handler">The handler for the event.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.Helpers.WeakEventListener`1.System#Windows#IWeakEventListener#ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <summary>
            Receives events from the centralized event manager.
            </summary>
            <param name="managerType">The type of the WeakEventManager calling this method.</param>
            <param name="sender">Object that originated the event.</param>
            <param name="e">Event data.</param>
            <returns>
            true if the listener handled the event. It is considered an error by the WeakEventManager handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return false if it receives an event that it does not recognize or handle.
            </returns>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.DefaultParentProvider">
            <summary>
            Default implementation via straightforward traversal, 
            appropriate only for 'trees' of few nodes and should be avoided in other cases
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.NullParentProvider">
            <summary>
            Implementation appropriate only for plane lists
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.ItemsProjectionIterator">
            <summary>
            Helps to iterate items of tree as if they are flattened
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.Primitives.ExpanderTrianglePresentation">
            <summary>
            Represents high-performance control to visualize state of expansion of an TreeGrid item
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.Primitives.SortDirectionPresentation">
            <summary>
            Represents high-performance control to visualize sorting direction of an TreeGrid column
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.Snapshot.UpdateRelative(System.Windows.Size,System.Object,System.Double,System.Boolean)">
            <summary>
            Updates snapshot relative to the given item
            IMPORTANT: currentItem should be strongly valid and projected 
            (be in expanded parent, expansion should be updated)
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.SortDescriptors.SortDescription">
            <summary>
            Represents general usage implementation <see cref="T:JetBrains.Application.UI.Controls.TreeGrid.Revised.ISortDescription"/>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumn">
            <summary>
            Represents a column in <see cref="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumn.TreeGridView"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumn.Resizable">
            <summary>
            Defines whether it can be resized or it should be fixed. 
            It should be used as trigger in a corresponding Style / ControlTemplate
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumn.ResizableProperty">
            <summary>
            Using a DependencyProperty as the backing store for Resizable.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumn.IsSortColumnProperty">
            <summary>
            Using a DependencyProperty as the backing store for Level.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumn.IsSortColumn">
            <summary>
            Gets whether this column is used to sort
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumn.IsDragOver">
            <summary>
            Gets whether drop is ready to be performed on the column to insert other one after this
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumn.IsDragOverProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDragOver.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnResizeEventArgs">
            <summary>
            Event arguments for TreeGrid column resizing
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnResizeEventArgs.Offset">
            <summary>
            Gets absolute offset in pixels from drag start point horizontally
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnResizeEventArgs.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="offset">Absolute offset in pixels from drag start point horizontally</param>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition">
            <summary>
            User definition of column
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.WidthChanged">
            <summary>
            Occurs when column's width changed
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.Width">
            <summary>
            Gets or sets initial width of the column
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.MinWidthChanged">
            <summary>
            Occurs when column's minwidth changed
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.MinWidth">
            <summary>
            Gets or sets minimal width of the column
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.MaxWidthChanged">
            <summary>
            Occurs when column's maxwidth changed
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.MaxWidth">
            <summary>
            Gets or sets maximum width of the column
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.Resizable">
            <summary>
            Gets or sets whether the column is allowed to be re-sized by user
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.HasExpander">
            <summary>
            Gets or sets whether this column contains expander
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.HasExpanderProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasExpander.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.HasExpanderChanged">
            <summary>
            Occurs when HasExpander property has been changed
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.Header">
            <summary>
            Gets or sets header of column
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellTemplate">
            <summary>
            Gets or sets data template to fill cells of this column
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellTemplate.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.IsEditable">
            <summary>
            Gets or sets whether cells can be edited
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.IsEditableProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsEditable.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellEditingTemplate">
            <summary>
            Gets or sets template for inplace editors
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellEditingTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellEditingTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellEditingTemplateSelector">
            <summary>
            Gets or sets a custom logic how to select data template for cells corresponding to the column
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellEditingTemplateSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellTemplateSelector. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellTemplateSelector">
            <summary>
            Gets or sets a custom logic how to select data template for cells corresponding to the column
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellTemplateSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellTemplateSelector. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellMemberPath">
            <summary>
            Gets or sets path to the member of data model which will be presented in cells
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellMemberPathProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellMemberPath.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellMemberGetter">
            <summary>
            Gets or sets function to retrieve a member of data model which will be presented in cells
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellStyle">
            <summary>
            Gets or sets style for cells corresponding to the column
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellStyle. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellStyleSelector">
            <summary>
            Gets or sets a selector to choose style applying to corresponding cells
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.CellStyleSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellStyleSelector.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.ActualWidth">
            <summary>
            Gets actual current width of columns since last update of column sizes has been performed
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.Sortable">
            <summary>
            Gets or sets whether it is soratble column (i.e. user can click to sort by column)
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition.SortMemberPathProperty">
            <summary>
            Using a DependencyProperty as the backing store for SortMemberPath. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinitionCollection.UpdateColumnDesiredWidths(System.Double[],System.Boolean)">
            <summary>
            Updates desired width via growing of TreeGridColumnDefinition.DesiredWidth values
            </summary>
            <param name="desiredWidths">Desired widths in current viewport</param>
            <param name="growOnly">Specify true in case of column widths should grow only</param>
            <returns>True if one of desired withs has been changed</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridRow.UpdateStyleValue">
            <summary>
            Internal method to update Style property of the row according to TreeGridView properties
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.ChildrenChanged">
            <summary>
            Raises each time when children of an item were changed.
            Note, it might be invoked from different threads where actual changes were made
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.AllowAutomaticArrangement">
            <summary>
            Gets or sets whether the control should sort and filter items. 
            It should be switched off in case of arrangement is performed by view models or no arrangement is performed at all
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.CellTemplate">
            <summary>
            Gets or sets data template for cells as default
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.CellTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellTemplate. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.CellTemplateSelector">
            <summary>
            Gets or sets data template selector
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.CellTemplateSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellTemplateSelector.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.MaxLevelsExpansion">
            <summary>
            Gets or sets how many levels will be expanded by default 
            with method ExpandAll and when user press '*'
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.ColumnDefinitionsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ColumnDefinitions.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.AllowAutoExpandSingleChild">
            <summary>
            Gets or sets whether tree should automatically expand nodes with single child
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.ShowColumnHeaders">
            <summary>
            Defines whether column headers should be shown. 
            Note, that if all column definitions have no header set, it is hidden 
            automatically no matter what value the propery has
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.SortColumnChanged">
            <summary>
            Occurs when SortColumn value changes
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.SortColumn">
            <summary>
            Gets or sets <see cref="T:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition"/> which is using to sort items. 
            Note, it has no effect if SortDescription set up
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.SortColumnProperty">
            <summary>
            Using a DependencyProperty as the backing store for SortColumn.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.SortDirection">
            <summary>
            Gets or sets sort direction
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.SortDirectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SortDirection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.SelectedItemChanged">
            <summary>
            Occurs when SelectedItem changes
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.SelectedItem">
            <summary>
            Gets or sets selected item of <see cref="T:JetBrains.UI.TreeGrid.TreeGridView1"/>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.SelectedItemProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedItem.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.SelectedItemsChanged">
            <summary>
            Occurs when collection of selected items modified \
            or replaced with another collection (in that case Reset will be fired)
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.FocusabilityProvider">
            <summary>
            Gets or sets a function to define focusability of nodes
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.SelectabilityProvider">
            <summary>
            Gets or sets a function to define selectability of nodes
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.UsingAccessBrackets">
            <summary>
            Using brackets to warp model access
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.CatchBrackets(System.Action)">
            <summary>
            Catch exceptions, use access brackets to warp model access
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.CatchBrackets``1(System.Func{``0})">
            <summary>
            Catch exceptions, use access brackets to warp model access
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.ExpandAll(System.Nullable{System.Int32})">
            <summary>
            Expand all nodes
            </summary>
            <param name="maxLevels">How deep we can expand or null (MaxLevelsExpansion will be used)</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.ExpandAll(System.Object,System.Nullable{System.Int32})">
            <summary>
            Expand all nodes starting with the given node
            </summary>
            <param name="item">Node to start expansion process</param>
            <param name="maxLevels">How deep we can expand or null (MaxLevelsExpansion will be used)</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.Print">
            <summary>
            Print current structure (for debug perpose)
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.Exists(System.Object)">
            <summary>
            Returns true if item is valid and exists in the tree data source
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView.IsProjected(System.Object,System.Boolean)">
            <summary>
            Returns true if item is visible (not necessary in the viewport)
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridViewport.UsingAccessBrackets">
            <summary>
            Using brackets to warp model access
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridViewport.CatchBrackets(System.Action)">
            <summary>
            Catch exceptions, use access brackets to warp model access
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridViewport.CatchBrackets``1(System.Func{``0})">
            <summary>
            Catch exceptions, use access brackets to warp model access
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridViewport.UpdateCurrentItemTracking(System.Object)">
            <param name="relativeItem">
            In case of relativeItem is not null, it should be used instead of other candidates
            </param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Revised.TreeGridViewport.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Forces content to scroll until the coordinate space of a <see cref="T:System.Windows.Media.Visual"/> object is visible. 
            </summary>
            <returns>
            A <see cref="T:System.Windows.Rect"/> that is visible.
            </returns>
            <param name="visual">A <see cref="T:System.Windows.Media.Visual"/> that becomes visible.</param>
            <param name="rectangle">A bounding rectangle that identifies the coordinate space to make visible.</param>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.IItemsProvider`1">
            <summary>
            Represents a provider of collection details.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.IItemsProvider`1.FetchCount">
            <summary>
            Fetches the total number of items available.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.IItemsProvider`1.FetchRange(System.Int32,System.Int32)">
            <summary>
            Fetches a range of items.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="count">The number of items to fetch.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1">
            <summary>
            Specialized list implementation that provides data virtualization. The collection is divided up into pages,
            and pages are dynamically fetched from the IItemsProvider when required. Stale pages are removed after a
            configurable period of time.
            Intended for use with large collections on a network or disk resource that cannot be instantiated locally
            due to memory consumption or fetch latency.
            </summary>
            <remarks>
            The IList implmentation is not fully complete, but should be sufficient for use as read only collection 
            data bound to a suitable ItemsControl.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.#ctor(JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.IItemsProvider{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1"/> class.
            </summary>
            <param name="itemsProvider">The items provider.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageTimeout">The page timeout.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.#ctor(JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.IItemsProvider{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1"/> class.
            </summary>
            <param name="itemsProvider">The items provider.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.#ctor(JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.IItemsProvider{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1"/> class.
            </summary>
            <param name="itemsProvider">The items provider.</param>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.ItemsProvider">
            <summary>
            Gets the items provider.
            </summary>
            <value>The items provider.</value>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.PageSize">
            <summary>
            Gets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.PageTimeout">
            <summary>
            Gets the page timeout.
            </summary>
            <value>The page timeout.</value>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            The first time this property is accessed, it will fetch the count from the IItemsProvider.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index. This property will fetch
            the corresponding page from the IItemsProvider if required.
            </summary>
            <value></value>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <remarks>
            This method should be avoided on large collections due to poor performance.
            </remarks>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.Add(`0)">
            <summary>
            Not supported.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.Contains(`0)">
            <summary>
            Not supported.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            Always false.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.Clear">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.IndexOf(`0)">
            <summary>
            Not supported
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            Always -1.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.Insert(System.Int32,`0)">
            <summary>
            Not supported.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.RemoveAt(System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.Remove(`0)">
            <summary>
            Not supported.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <typeparamref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>Always false.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>Always true.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>Always false.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.CleanUpPages">
            <summary>
            Cleans up any stale pages that have not been accessed in the period dictated by PageTimeout.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.PopulatePage(System.Int32,System.Collections.Generic.IList{`0})">
            <summary>
            Populates the page within the dictionary.
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.RequestPage(System.Int32)">
            <summary>
            Makes a request for the specified page, creating the necessary slots in the dictionary,
            and updating the page touch time.
            </summary>
            <param name="pageIndex">Index of the page.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.LoadCount">
            <summary>
            Loads the count of items.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.LoadPage(System.Int32)">
            <summary>
            Loads the page of items.
            </summary>
            <param name="pageIndex">Index of the page.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.FetchPage(System.Int32)">
            <summary>
            Fetches the requested page from the IItemsProvider.
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1.FetchCount">
            <summary>
            Fetches the count of itmes from the IItemsProvider.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.ParentProvider`1">
            <summary>
            Represents implementation to provide parent via callback
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridNode.IsSelectedChanged">
            <summary>
            Occurs when IsSelected has been changed
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridNode.IsExpandedChanging">
            <summary>
            Occurs when IsSelected has been changing
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridNode.IsExpandedChanged">
            <summary>
            Occurs when IsSelected has been changed
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridNode.HasChildrenChanged">
            <summary>
            Occurs when HasChildren property has been changed
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridNode.CollapsableChanged">
            <summary>
            Occurs when Collapsable property has been changed
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridNode.ExpandableChanged">
            <summary>
            Occurs when Expandable property has been changed
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridNode.HasChildren">
            <summary>
            Gets whether the node has child nodes
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridNode.Level">
            <summary>
            Gets level in the tree
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridNode.IsExpanded">
            <summary>
            Gets or sets is the given item expanded
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridNodeChildren.Count">
            <summary>
            Gets current number of children
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.TreeGridProjection">
            <summary>
            Represents flatted tree structure of all expanded nodes in the <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/>
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridProjection.IsExpandedChanged">
            <summary>
            Occurs when IsExpanded of one of items changed its value
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridProjection.Changed">
            <summary>
            Occures each time when an item removed, added or moved
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridProjection.Inserted">
            <summary>
            Occures each time when an item inserted
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridProjection.Removed">
            <summary>
            Occures each time when an item removed
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridProjection.Moved">
            <summary>
            Occures each time when an item moved
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridProjection.ExpandTo(System.Object,System.Boolean,System.Int32)">
            <summary>
            Expands nodes along the path from root up to the given item (the item's expansion is not changed)
            </summary>
            <param name="data">Data item</param>
            <param name="allowTraverse">Allow tree traversing to found the item in case of it's not projected</param>
            <param name="maxTraverseDepth">Max traversing level</param>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.IParentProvider">
            <summary>
            Exposes ability to get parent data item of the given data item
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.IParentProvider.GetParent(System.Object)">
            <summary>
            Returns parent data item of the given data item
            </summary>
            <param name="item">Data item</param>
            <returns>Parent data item</returns>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.PendedActionQueue">
            <summary>
            Incapsulates action queuing and execution in right time
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.PendedActionQueue.ActionInvocator">
            <summary>
            Gets or sets an optional custom scheduler
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Automation.TreeGridRowAutomationPeer">
            <summary>
            Exposes <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridRow"/> types to UI Automation
            to manupulate <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridRow"/> for testing purpose.
            Actually, due to UI virtualization, <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridRow"/> containers 
            might be inaccasable, so the peer uses an internal <see cref="T:JetBrains.UI.TreeGrid.TreeGridNode"/> to make possible interation with rows.
            Supports ExpandCollapse, SelectionItem and ScrollItem control patterns
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Automation.TreeGridViewAutomationPeer">
            <summary>
            Exposes <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/> types to UI Automation
            to manupulate <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/> for testing purpose.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.DragDrop.DragDropPopup.DragItem">
            <summary>
            Gets or sets drag item
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.DragDrop.DragDropPopup.DragItemProperty">
            <summary>
            Using a DependencyProperty as the backing store for DragItem.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Primitives.SortDirectionPresentation">
            <summary>
            Represents high-performance control to visualize sorting direction of an TreeGrid column
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Primitives.MetroBusyIndicatorPresentation">
            <summary>
            Represents light-weight control to visualize busy state of TreeGrid
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Primitives.MetroBusyIndicatorPresentation.IsBusy">
            <summary>
            Gets or sets whether TreeGrid is busy now
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Primitives.MetroBusyIndicatorPresentation.IsBusyProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsBusy.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Primitives.MetroBusyIndicatorPresentation.BackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for Background.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Primitives.MetroBusyIndicatorPresentation.IndicatorBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for IndicatorBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Primitives.MetroBusyIndicatorPresentation.Velocity">
            <summary>
            Gets or sets milliseconds for the full cycle of the animation
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.Primitives.MetroBusyIndicatorPresentation.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. 
            The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">
            The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.Primitives.ExpanderTrianglePresentaion">
            <summary>
            Represents high-performance control to visualize state of expansion of an TreeGrid item
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Primitives.ExpanderTrianglePresentaion.IsExpanded">
            <summary>
            Gets or sets whether the corresponding item is expanded
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Primitives.ExpanderTrianglePresentaion.Level">
            <summary>
            Gets or sets level of the tree row
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.Primitives.ExpanderTrianglePresentaion.LevelProperty">
            <summary>
            Using a DependencyProperty as the backing store for Level.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Primitives.ExpanderTrianglePresentaion.Collapsable">
            <summary>
            Gets or sets whether we can collapse this node
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.Primitives.ExpanderTrianglePresentaion.AutoExpandDragOverMilliseconds">
            <summary>
            Gets or sets how many milliseconds expander will wait while drag over it before expand the target node
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridCell.LevelProperty">
            <summary>
            Using a DependencyProperty as the backing store for Level.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridCell.Level">
            <summary>
            Gets or sets level in the TreeGrid
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridCell.IsSelected">
            <summary>
            Gets or sets whether the cell is selected
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridCell.IsSelectedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelected.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridCell.IsExpanded">
            <summary>
            Gets or sets whether item is expanded
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridCell.IsExpandedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsExpanded.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridCell.IsActiveProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsActive.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridCell.IsActive">
            <summary>
            Gets whether the cell active (i.e. parent <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/> has keyboard focus within)
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridCell.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or 
            internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridCellsPresenter.Content">
            <summary>
            Gets or sets current content
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridCellsPresenter.ContentProperty">
            <summary>
            Using a DependencyProperty as the backing store for Content.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridCellsPresenter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridCellsPresenter.GetCellDesiredWidth(System.Int32)">
            <summary>
            Calculates desired width of the cell. (Performance costly)
            </summary>
            <param name="columnIndex">Index of cell (column index) in the row</param>
            <returns>Desired width in pixels</returns>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridCellsPresenter.Viewport">
            <summary>
            Gets the viewport where cells are
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.TreeGridColumnResizeEventArgs">
            <summary>
            Event arguments for TreeGrid column resizing
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnResizeEventArgs.Offset">
            <summary>
            Gets absolute offset in pixels from drag start point horizontally
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridColumnResizeEventArgs.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="offset">Absolute offset in pixels from drag start point horizontally</param>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.TreeGridColumn">
            <summary>
            Represents a column in <see cref="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumn.TreeGridView"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumn.ColumnDefinitions">
            <summary>
            Gets or sets actual column definitions
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumn.ColumnDefinition">
            <summary>
            Gets or sets actual column definition
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumn.ColumnDefinitionProperty">
            <summary>
            Using a DependencyProperty as the backing store for ColumnDefinition.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumn.Resizable">
            <summary>
            Defines whether it can be resized or it should be fixed. 
            It should be used as trigger in a corresponding Style / ControlTemplate
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumn.ResizableProperty">
            <summary>
            Using a DependencyProperty as the backing store for Resizable.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumn.IsSortColumnProperty">
            <summary>
            Using a DependencyProperty as the backing store for Level.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumn.IsSortColumn">
            <summary>
            Gets whether this column is used to sort
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumn.IsDragOver">
            <summary>
            Gets whether drop is ready to be performed on the column to insert other one after this
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumn.IsDragOverProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDragOver.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridColumn.GetHeaderHeight">
            <summary>
            Gets current header height
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition">
            <summary>
            User definition of column
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.Name">
            Gets or sets column's name
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.Width">
            <summary>
            Gets or sets initial width of the column
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.MinWidth">
            <summary>
            Gets or sets minimal width of the column
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.MaxWidth">
            <summary>
            Gets or sets maximum width of the column
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.Resizable">
            <summary>
            Gets or sets whether the column is allowed to be re-sized by user
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.HasExpander">
            <summary>
            Gets or sets whether this column contains expander
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.HasExpanderProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasExpander.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.HasExpanderChanged">
            <summary>
            Occurs when HasExpander property has been changed
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.Header">
            <summary>
            Gets or sets header of column
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellTemplate">
            <summary>
            Gets or sets data template to fill cells of this column
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellTemplate.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.IsEditable">
            <summary>
            Gets or sets whether cells can be edited
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.IsEditableProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsEditable.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellEditingTemplate">
            <summary>
            Gets or sets template for inplace editors
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellEditingTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellEditingTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellEditingTemplateSelector">
            <summary>
            Gets or sets a custom logic how to select data template for cells corresponding to the column
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellEditingTemplateSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellTemplateSelector. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellTemplateSelector">
            <summary>
            Gets or sets a custom logic how to select data template for cells corresponding to the column
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellTemplateSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellTemplateSelector. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellMemberPath">
            <summary>
            Gets or sets path to the member of data model which will be presented in cells
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellMemberPathProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellMemberPath.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellMemberGetter">
            <summary>
            Gets or sets function to retrieve a member of data model which will be presented in cells
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellStyle">
            <summary>
            Gets or sets style for cells corresponding to the column
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellStyle. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellStyleSelector">
            <summary>
            Gets or sets a selector to choose style applying to corresponding cells
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.CellStyleSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellStyleSelector.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.ActualWidth">
            <summary>
            Gets actual current width of columns since last update of column sizes has been performed
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.Sortable">
            <summary>
            Gets or sets whether it is soratble column (i.e. user can click to sort by column)
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition.SortMemberPathProperty">
            <summary>
            Using a DependencyProperty as the backing store for SortMemberPath. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinitionCollection.UpdateColumnDesiredWidths(System.Double[],System.Boolean)">
            <summary>
            Updates desired width via growing of TreeGridColumnDefinition.DesiredWidth values
            </summary>
            <param name="desiredWidths">Desired widths in current viewport</param>
            <param name="growOnly">Specify true in case of column widths should grow only</param>
            <returns>True if one of desired withs has been changed</returns>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.TreeGridColumnsPanel">
            <summary>
            Represents internal TreeGrid panel to hold and manage layout of columns
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnsPanel.AllowResize">
            <summary>
            Determines wheather user can resize columns
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumnsPanel.AllowResizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowResize. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnsPanel.AllowResizeOverflow">
            <summary>
            Determines wheather user can resize column over available width
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridColumnsPanel.AllowResizeOverflowProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowResizeOverflow. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridColumnsPanel.ColumnDefinitions">
            <summary>
            Gets or sets actual column definitions
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridColumnsPanel.GetHeaderHeight">
            <summary>
            Gets header height
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridColumnsPanel.GetColumnSizes(JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinitionCollection,System.Double)">
            <summary>
            Calculates actual sizes of columns
            </summary>
            <param name="columnDefinitions">Current column definitions</param>
            <param name="constrainedWidth">Can be Infinity</param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridDragDropData.TargetRowProperty">
            <summary>
            Using a DependencyProperty as the backing store for TargetRow.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridDragDropData.TargetRow">
            <summary>
            Gets the d'n'd target row
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridDragDropData.TargetCellProperty">
            <summary>
            Using a DependencyProperty as the backing store for TargetCell.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridDragDropData.TargetCell">
            <summary>
            Gets the d'n'd target cell
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridDragDropData.SourceRowsProperty">
            <summary>
            Using a DependencyProperty as the backing store for SourceRows.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridDragDropData.SourceRows">
            <summary>
            Gets source data of drag
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.TreeGridRowCollection">
            <summary>
            Core viewport rows manager
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.TreeGridRow">
            <summary> 
            A child of a <see cref="N:JetBrains.UI.Controls.TreeGrid" />.
            </summary> 
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridRow.IsExpandedChanged">
            <summary>
            Occures whenever IsExpaned changes its value
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridRow.IsSelectedChanged">
            <summary>
            Occures whenever IsSelected changes its value
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridRow.LevelChanged">
            <summary>
            Occures whenever Level changes its value
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridRow.IsActiveChanged">
            <summary>
            Occures whenever IsActive changes its value
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridRow.HasChildrenChanged">
            <summary>
            Occures whenever HasChildren changes its value
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridRow.LevelProperty">
            <summary>
            Using a DependencyProperty as the backing store for Level.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridRow.Level">
            <summary>
            Gets or sets level in the TreeGrid
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridRow.IsExpanded">
            <summary>
            Gets or sets whether item is expanded
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridRow.IsExpandedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsExpanded.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridRow.IsSelected">
            <summary>
            Gets or sets whether the row is selected
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridRow.HasChildrenProperty">
            <summary>
            Using a DependencyProperty as the backing store for Level.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridRow.HasChildren">
            <summary>
            Gets or sets whether this row has children
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridRow.IsActiveProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsActive.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridRow.IsActive">
            <summary>
            Gets whether the cell active (i.e. parent <see cref="P:JetBrains.UI.Controls.TreeGrid.TreeGridRow.TreeGridView"/> has keyboard focus within)
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridRow.AlternationIndex">
            <summary>
            Gets the assigned value of the item container when alternating item containers are used.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridRow.IsDragOver">
            <summary>
            Gets whether drop is ready to be performed on the row to insert other one or multiple rows after this
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridRow.IsDragOverProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDragOver.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridRow.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or 
            internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridRow.UpdateStyleValue">
            <summary>
            Internal method to update Style property of the row according to TreeGridView properties
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridRow.GetCellDesiredWidth(System.Int32)">
            <summary>
            Calculates desired width of the cell. (Performance costly)
            </summary>
            <param name="columnIndex">Index of cell (column index) in the row</param>
            <returns>Desired width in pixels</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.SelectedItemCollection.Add(System.Object)">
            <summary>
            Select item
            </summary>
            <param name="item">Item</param>
            <returns>True if item was select or false in case of no such node or it is already selected</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.SelectedItemCollection.Remove(System.Object)">
            <summary>
            Deselect item
            </summary>
            <param name="item"></param>
            <returns>True if item was deselect or false in case of no such node or it is already deselected</returns>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridView.FocusedItemChanged">
            <summary>
            Occurs when the focused row has been changed
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridView.CellValidating">
            <summary>
            Occurs to customize cell editing validating process
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridView.CellEditing">
            <summary>
            Occurs just before cell editing process will be finished
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridView.CellEditied">
            <summary>
            Occurs each time when cell has been edited
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridView.Expanded">
            <summary>
            Occurs when a node realted to an item is expanded
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridView.Collapsed">
            <summary>
            Occurs when a node realted to an item is expanded
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.IsBusy">
            <summary>
            Gets whether the tree has pended actions
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.AllowBusyIndication">
            <summary>
            Gets or sets if IsBusy should be visualised by the control
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.AllowTraversing">
            <summary>
            Gets or sets whether is allowed to traverse the tree to find a node in case of no parentational info available
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.Idle">
            <summary>
            Signals when the control is in Idle state (it has not any scheduled jobs).
            It is triggered with some delay after IsBusy is false
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.ActionInvocator">
            <summary>
            Gets or sets <see cref="T:JetBrains.Application.UI.Controls.TreeGrid.IActionInvocator"/>
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.AccessBrackets">
            <summary>
            Gets or sets brackets to warp model access
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.MaxTraverseDepth">
            <summary>
            Gets or sets how many levels are allowed to traverse in case of searching an item (building a path to an item)
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.SelectionMode">
            <summary>
            Gets or sets selection mode
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.GetFocusedRow">
            <summary>
            Gets current focused UI element (row)
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.FocusedItem">
            <summary>
            Gets or sets current focused item
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.Filter">
            <summary>
            Gets or sets filter
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.SortDescription">
            <summary>
            Gets or sets custom comparer to sort items
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.SortDirection">
            <summary>
            Gets or sets sort direction
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.SortDirectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SortDirection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.ItemsSource">
            <summary> 
            ItemsSource specifies a collection used to generate the content of
            this control.  This provides a simple way to use exactly one collection 
            as the source of content for this control. 
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.ItemsSourceProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemsSource.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.GetSortDescription">
            <summary>
            Gets comparer to sort, provides user defined or default one
            </summary>
            <returns></returns>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.ColumnDefinitionsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ColumnDefinitions.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridView.SortColumnChanged">
            <summary>
            Occurs when SortColumn value changes
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.SortColumn">
            <summary>
            Gets or sets <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition"/> which is using to sort items. 
            Note, it has no effect if SortDescription set up
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.SortColumnProperty">
            <summary>
            Using a DependencyProperty as the backing store for SortColumn.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.IsAsynchronious">
            <summary>
            Gets or sets whether allowed to schedule actions pseudo-asynchronious way (on UI thread)
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.ChildrenProvider">
            <summary>
            Gets or sets provider to retrieve children
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.AreRootsFixed">
            <summary>
            Gets or sets whether root nodes and their ancestor can be 'tighten' 
            (root nodes dont have expanders and all nodes move to the left)
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.AreRootsFixedProperty">
            <summary>
            Using a DependencyProperty as the backing store for AreRootsFixed.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.CollapsabilityProvider">
            <summary>
            Gets or sets a function to define collapsability of nodes
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.FocusabilityProvider">
            <summary>
            Gets or sets a function to define focusability of nodes
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.SelectabilityProvider">
            <summary>
            Gets or sets a function to define selectability of nodes
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.AllowColumnRearrange">
            <summary>
            Gets or sets whether user is allowed to re-arrange columns
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.AllowColumnRearrangeProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowColumnRearrange.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.AllowRowDrag">
            <summary>
            Gets or sets whether user is allowed to drag rows
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.AllowRowDragProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowRowDrag. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.AllowRowDrop">
            <summary>
            Gets or sets whether user is allowed to drop into rows
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.AllowRowDropProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowRowDrop.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.AllowColumnResize">
            <summary>
            Gets or sets whether user is allowed to resize columns
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.AllowColumnResizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowColumnResize. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.AllowColumnResizeOverflow">
            <summary>
            Gets or sets whether user is allowed to resize columns
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.AllowColumnResizeOverflowProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowColumnResizeOverflow. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.MaxLevelsExpansion">
            <summary>
            Gets or sets how many levels will be expanded by default 
            with method ExpandAll and when user press '*'
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.AllowColumnSorting">
            <summary>
            Gets or sets is it allowable to sort tree nodes by clicking columns
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.AllowColumnSortingProperty">
            <summary>
            Using a DependencyProperty as the backing store for AllowColumnSorting.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.CellStyle">
            <summary>
            Gets or sets default cell style for this instance
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.CellStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellStyle.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.CellStyleSelector">
            <summary>
            Gets or sets <see cref="T:System.Windows.Controls.StyleSelector"/> for cells
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.CellStyleSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellStyleSelector. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.EditingCell">
            <summary>
            Gets or sets cell which are editing now
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.ValidationErrorTemplate">
            <summary>
            Gets or sets validation error template
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.ValidationErrorTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for ValidationErrorTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.CellTemplate">
            <summary>
            Gets or sets data template for cells as default
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.CellTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellTemplate. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.CellTemplateSelector">
            <summary>
            Gets or sets data template selector
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.CellTemplateSelectorProperty">
            <summary>
            Using a DependencyProperty as the backing store for CellTemplateSelector.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.RowStyle">
            <summary>
            Gets or sets style for rows
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.RowStyleSelector">
            <summary>
            Gets or sets style selectors for rows
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.IntercolumnSpacing">
            <summary>
            Gets or sets distance between columns
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.AlternationCount">
            <summary>
            Gets or sets the number of alternating item containers in the <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/>, which enables alternating containers to have a unique appearance.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.InvalidationRequested">
            <summary>
            Special property to request invalidation of ItemsSource. It will lead to updating sorting and filtering.
            Set true to request invalidation.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.Schedule(System.Action,System.Boolean)">
            <summary>
            Schedules an action taking into account invokation rules associated with that control.
            Optionally, (if whenIdle == true), it will invoked only when IsBusy = false
            </summary>
            <param name="action">Action</param>
            <param name="whenIdle">If true, it is invoked only when IsBusy = false</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.TryFocusNear(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Tries to find the closest focusable node and focus it
            (if preferAbove is true - tries to seach above first, below elsewhere).
            Returns false in case of there is no focusable nodes or Focus fail
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.FindFocusable(System.Int32,System.Boolean)">
            <summary>
            Returns the given index in case of index's item is focusable or tries to search 
            the closest one (if preferAbove is true - tries to seach above first, below elsewhere).
            Returns -1 in case of there is no focusable nodes
            </summary>
            <param name="index"></param>
            <param name="preferAbove"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or 
            internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridView.SelectedItemChanged">
            <summary>
            Occurs when SelectedItem changes
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.SelectedItem">
            <summary>
            Gets or sets selected item of <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridView.SelectedItemProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedItem.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridView.ShowColumnHeaders">
            <summary>
            Defines whether column headers should be shown. 
            Note, that if all column definitions have no header set, it is hidden 
            automatically no matter what value the propery has
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.SelectAll">
            <summary>
            Selects all 'projected' items (~expanded items)
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.Expand(System.Object)">
            <summary>
            Expands a node bounded with the given data item
            </summary>
            <param name="data">Data item</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.Collapse(System.Object)">
            <summary>
            Collapse a node bounded with the given data item
            </summary>
            <param name="data">Data item</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.ExpandPathTo``1(JetBrains.Application.UI.Controls.TreeGrid.ObjectIndexPath{``0})">
            <summary>
            Expands all nodes along the path to the target (target remains as is)
            </summary>
            <param name="path">Path from root to the last node to expand</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.ExpandPath``1(JetBrains.Application.UI.Controls.TreeGrid.ObjectPath{``0})">
            <summary>
            Expands all nodes along the path
            </summary>
            <param name="path">Path from root to the last node to expand</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.ExpandPath``1(JetBrains.Application.UI.Controls.TreeGrid.ObjectIndexPath{``0})">
            <summary>
            Expands all nodes along the path
            </summary>
            <param name="path">Path from root to the last node to expand</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.ExpandPathTo``1(JetBrains.Application.UI.Controls.TreeGrid.ObjectPath{``0})">
            <summary>
            Expands all nodes along the path to the target (target remains as is)
            </summary>
            <param name="path">Path from root to the last node to expand</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.ExpandPathCore``1(JetBrains.Application.UI.Controls.TreeGrid.ObjectIndexPath{``0},System.Boolean)">
            <summary>
            Expands all nodes along the path
            </summary>
            <param name="path">Path from root to the last node to expand</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.ExpandPathCore``1(JetBrains.Application.UI.Controls.TreeGrid.ObjectPath{``0},System.Boolean)">
            <summary>
            Expands all nodes along the path
            </summary>
            <param name="path">Path from root to the last node to expand</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.ExpandTo(System.Object)">
            <summary>
            Expands nodes along the path from root up to the given item (the item's expansion is not changed)
            </summary>
            <param name="data">Data item</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.ExpandAll">
            <summary>
            Expands all items in the tree recursively. 
            In this case levels to expand is limited by MaxLevelsExpansion property value
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.ExpandAll(System.Int32)">
            <summary>
            Expands all items in the tree recursively
            </summary>
            <param name="level">How many levels to expand</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.ExpandAll(System.Object,System.Int32,System.Boolean)">
            <summary>
            Expands all items in the tree recursively from the given node
            </summary>
            <param name="item">Data item</param>
            <param name="levels">How many levels to expand</param>
            <param name="allowTraverse">Allow tree traversing to found the item in case of it's not projected</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.ExpandAll(System.Object,System.Boolean)">
            <summary>
            Expands all items in the tree recursively from the given node.
            In this case levels to expand is limited by MaxLevelsExpansion property value
            </summary>
            <param name="item">Data item</param>
            <param name="allowTraverse">Allow tree traversing to found the item in case of it's not projected</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.CollapseAll">
            <summary>
            Collapse all expanded nodes
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.GetExpandedItems``1(JetBrains.UI.Controls.TreeGrid.TouchMode)">
            <summary>
            Gets currently expanded items
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.GetProjectedItems``1(JetBrains.UI.Controls.TreeGrid.TouchMode)">
            <summary>
            Gets currently 'projected' items
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.FindObjectPathTo``1(``0,System.Boolean,System.Int32)">
            <summary>
            Tries to find path from one of the roots to the target data item. It works slow in case of data item is 
            not projected or data item is not exist at all. Note, that if data item exists it will be found, 
            however it should be avoided due to performance cost. Also, note, that it cant build path to a filtered item
            </summary>
            <typeparam name="T">Type of data items</typeparam>
            <param name="data">Requested data</param>
            <param name="allowTraverse">Allow tree traversing to found the item in case of it's not projected</param>
            <param name="maxTraverseDepth">How many levels it can traverse</param>
            <returns>Path to the item or null</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.FindObjectPathTo``1(``0,System.Boolean)">
            <summary>
            Tries to find path from one of the roots to the target data item. It works slow in case of data item is 
            not projected or data item is not exist at all. Note, that if data item exists it will be found, 
            however it should be avoided due to performance cost. Also, note, that it cant build path to a filtered item
            </summary>
            <typeparam name="T">Type of data items</typeparam>
            <param name="data">Requested data</param>
            <param name="allowTraverse">Allow tree traversing to found the item in case of it's not projected</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.FindObjectIndexPathTo``1(``0,System.Boolean,System.Int32)">
            <summary>
            Tries to find path from one of the roots to the target data item. It works slow in case of data item is 
            not projected or data item is not exist at all. Note, that if data item exists it will be found, 
            however it should be avoided due to performance cost. Also, note, that it cant build path to a filtered item
            </summary>
            <typeparam name="T">Type of data items</typeparam>
            <param name="data">Requested data</param>
            <param name="allowTraverse">Allow tree traversing to found the item in case of it's not projected</param>
            <param name="maxTraverseDepth">How many levels it can traverse</param>
            <returns>Path to the item or null</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.FindObjectIndexPathTo``1(``0,System.Boolean)">
            <summary>
            Tries to find path from one of the roots to the target data item. It works slow in case of data item is 
            not projected or data item is not exist at all. Note, that if data item exists it will be found, 
            however it should be avoided due to performance cost. Also, note, that it cant build path to a filtered item
            </summary>
            <typeparam name="T">Type of data items</typeparam>
            <param name="data">Requested data</param>
            <param name="allowTraverse">Allow tree traversing to found the item in case of it's not projected</param>
            <returns>Path to the item or null</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.GetVisibleRows">
            <summary>
            Gets currentrly visible rows. 
            IMPORTANT: they will contain rows which are technically visible, 
            but stay offscreen at this moment (for ex., for the sake of scrolling calculation)
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.GetRecycledRows">
            <summary>
            Gets recycled rows. These rows are offscreen and detached, but can be revived.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.IsInViewport(System.Object)">
            <summary>
            Gets whether item is in viewport (visible, not virtualized)
            </summary>
            <param name="item">Item</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.GetRowIfVisible(System.Object)">
            <summary>
            Gets currently visible <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridRow"/> by 
            corresponding data item or null if it is a virtualized one
            </summary>
            <param name="item">Bounded data item</param>
            <returns>Corresponding <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridRow"/> or null</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.HitRow(System.Windows.Point)">
            <summary>
            Gets <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridRow"/> by coordinates of <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/>
            </summary>
            <param name="coordinates">Coordinates, in space of <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/></param>
            <returns>Corresponding <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridRow"/> or null</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.HitCell(System.Windows.Point)">
            <summary>
            Gets <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridCell"/> by coordinates of <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/>
            </summary>
            <param name="coordinates">Coordinates, in space of <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/></param>
            <returns>Corresponding <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridCell"/> or null</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.HitItem(System.Windows.Point)">
            <summary>
            Gets bounded data item by coordinates of <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/>
            </summary>
            <param name="coordinates">Coordinates, in space of <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/></param>
            <returns>Corresponding data item or null</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.Focus(System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Attempt to set focus to row which corresponds the given data item
            </summary>
            <param name="item">Data item</param>
            <param name="bringIntoView">True denotes that item should be brought into view</param>
            <param name="transferKeyboardFocus">Transfer keyboard focus</param>
            <param name="allowTraverse">Allow tree traversing to found the item in case of it's not projected</param>
            <returns>True if row was focused successfuly, false otherwise</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.GetNodeIfProjected(System.Object)">
            <summary>
            Gets currently projected <see cref="T:JetBrains.UI.TreeGrid.TreeGridNode"/> by 
            corresponding data item or null if it is out of projection
            </summary>
            <param name="item">Bounded data item</param>
            <returns>Corresponding <see cref="T:JetBrains.UI.TreeGrid.TreeGridNode"/> or null</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.BringIntoView(System.Object)">
            <summary>
            Brings into view row which contains the given data item
            </summary>
            <param name="item">Data item</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.IsFiltered(System.Object)">
            <summary>
            Checks whether the given item is currently filtered (out of the projection)
            </summary>
            <param name="item">Item</param>
            <returns>True if item is filtered</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.UpdateExpansion">
            <summary>
            Upadtes expansion state of nodes
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridView.IsExpanded(System.Object)">
            <summary>
            Gets whether the given item expanded
            </summary>
            <param name="item">Item</param>
            <returns>True if an item is expanded</returns>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.TreeGridViewHelper">
            <summary>
            Encapsulate rare using and debug-only methods under <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridView"/>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridViewHelper.Dump(JetBrains.UI.Controls.TreeGrid.TreeGridView)">
            <summary>
            Dump in format [+/-/' ']{Level}({Data})[+/-]{Level}(Data)*[+/-]{Level}({Da....
            Star ('*') uses to denote selection
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridViewHelper.DumpFormatted(JetBrains.UI.Controls.TreeGrid.TreeGridView)">
            <summary>
            Dump in format 
            
            -A
              +B
              -C
                +D
                 E*
              +F
            +G
            -H
               J
              +X
            
            Star ('*') uses to denote selection
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.TreeGridViewport">
            <summary>
            Represents internal TreeGrid panel to hold and manage layout of nodes
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.ViewportUpdateSchedulePriority.Idle">
            <summary>
            Should use if some continuous request can be occurred from input system for example. 
            In that case, viewport updating process will not interfere user input 
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.ViewportUpdateSchedulePriority.Normal">
            <summary>
            Should use if request should be performed as soon as 
            possible without any significant UX-delay
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.AssertAccess">
            <summary>
            Checks whether we are from UI thread where the control was created 
            and check <see cref="T:JetBrains.Threading.ReentrancyGuard"/> in case of IsGuarded is equals true
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.ExecuteOrQueue(System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Executes action or queue depending on IsGuarded value and ReentrancyGuard state 
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.FocusedNodeChanged">
            <summary>
            Occures each time when focused item changes
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.LineDown">
            <summary>
            Scrolls down within content by one logical unit. 
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.CanHorizontallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.
            </summary>
            <returns>
            true if scrolling is possible; otherwise, false. This property has no default value.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.System#Windows#Controls#Primitives#IScrollInfo#MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Forces content to scroll until the coordinate space of a <see cref="T:System.Windows.Media.Visual"/> object is visible. 
            </summary>
            <returns>
            A <see cref="T:System.Windows.Rect"/> that is visible.
            </returns>
            <param name="visual">A <see cref="T:System.Windows.Media.Visual"/> that becomes visible.</param>
            <param name="rectangle">A bounding rectangle that identifies the coordinate space to make visible.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.GetRowSize(JetBrains.UI.Controls.TreeGrid.TreeGridNode)">
            <summary>
            Gets size of node (which is in projection now)
            </summary>
            <param name="node">Node in projection</param>
            <returns>Size</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.SetWin32Focus(System.IntPtr)">
            <summary>
            The SetFocus function sets the keyboard focus to the specified window. The window must be attached to the calling thread's message queue. The SetFocus function sends a WM_KILLFOCUS message to the window that loses the keyboard focus and a WM_SETFOCUS message to the window that receives the keyboard focus. It also activates either the window that receives the focus or the parent of the window that receives the focus. If a window is active but does not have the focus, any key pressed will produce the WM_SYSCHAR, WM_SYSKEYDOWN, or WM_SYSKEYUP message. If the VK_MENU key is also pressed, the lParam parameter of the message will have bit 30 set. Otherwise, the messages produced do not have this bit set. By using the AttachThreadInput function, a thread can attach its input processing to another thread. This allows a thread to call SetFocus to set the keyboard focus to a window attached to another thread's message queue. 
            </summary>
            <param name="hWnd">[in] Handle to the window that will receive the keyboard input. If this parameter is NULL, keystrokes are ignored. </param>
            <returns>If the function succeeds, the return value is the handle to the window that previously had the keyboard focus. If the hWnd parameter is invalid or the window is not attached to the calling thread's message queue, the return value is NULL. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.GetWin32Focus">
            <summary>
            The GetFocus function retrieves the handle to the window that has the keyboard focus, if the window is attached to the calling thread's message queue. 
            </summary>
            <returns>The return value is the handle to the window with the keyboard focus. If the calling thread's message queue does not have an associated window with the keyboard focus, the return value is <c>NULL</c>.</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.HasItem(System.Object)">
            <summary>
            Gets whether the given item is visible in the viewport currently
            </summary>
            <param name="item">Item</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.GetRowIfVisible(System.Object)">
            <summary>
            Gets currently visible <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridRow"/> by 
            corresponding data item or null if it is a virtualized one
            </summary>
            <param name="item">Bounded data item</param>
            <returns>Corresponding <see cref="T:JetBrains.UI.Controls.TreeGrid.TreeGridRow"/> or null</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.GetScreenedRows">
            <summary>
            Gets rows which are rendered by the tree (including rows which rendered for internal use only and not visible). 
            GetScreenedRows() and GetRecycledRows() are total rows are operated by the control currently
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeGrid.TreeGridViewport.GetRecycledRows">
            <summary>
            Gets rows which are recycled and currently are out of screen, but they might be revived (reused) lately. 
            GetScreenedRows() and GetRecycledRows() are total rows are operated by the control currently
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.UI.Controls.UITextView">
            <summary>
            Represents control to view UIText
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.UITextView.Styles">
            <summary>
            Gets styles definitions
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.Utils.AutomationProvidersRegistry">
            <summary>
            <para>Manages the automation providers, as available for our custom controls.</para>
            <para>Automation provider implementations require referencing the Avalon assemblies, which we cannot do yet.</para>
            <para>When an Avalon-aware DLL is about to query for providers on our controls, it should load the providers DLL and cause them to sign up for this Registry. Subsequently, controls will start returning the providers in response to their <see cref="F:JetBrains.Interop.WinApi.WindowsMessages.WM_GETOBJECT"/>.</para>
            </summary>
            <remarks>
            The default implementation should call into <c>System.Windows.Automation.Provider.AutomationInteropProvider::ReturnRawElementProvider</c>.
            </remarks>
        </member>
        <member name="F:JetBrains.UI.Controls.Utils.AutomationProvidersRegistry.Items">
            <summary>
            Lists the provider entries. The <see cref="T:System.Type"/> key is the class whose instance is requesting the automation peer. The <see cref="T:System.Func`2"/> takes in an instance of the key <see cref="T:System.Type"/> plus some more things and returns an instance of the automation provider, converted to an LResult (.NET Object -> COM Object -> IDispatch -> LResult), or <c>Null</c> if not available.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.AutomationProvidersRegistry.TryHandleWindowsMessage(System.Object,System.Windows.Forms.Message@)">
            <summary>
            Called from a <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/> of a control that would like be supported by an external automation peer, fills in the message result with that peer, if available.
            </summary>
            <param name="owner">The owning object who's handling the windows message. A key to the <see cref="F:JetBrains.UI.Controls.Utils.AutomationProvidersRegistry.Items"/> and a parameter to its value <see cref="T:System.Func`2"/>.</param>
            <param name="msg">Windows message, as received by <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.</param>
            <returns>Whether the message has been handled, and the base <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/> should not be called.</returns>
        </member>
        <member name="T:JetBrains.UI.Controls.Utils.AutomationProvidersRegistry.AutomationProviderRequest">
            <summary>
            Parameters to the value func of the <see cref="F:JetBrains.UI.Controls.Utils.AutomationProvidersRegistry.Items"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Utils.AutomationProvidersRegistry.AutomationProviderRequest.Hwnd">
            <summary>
            Handle to the window represented by the <see cref="F:JetBrains.UI.Controls.Utils.AutomationProvidersRegistry.AutomationProviderRequest.Owner"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Utils.AutomationProvidersRegistry.AutomationProviderRequest.Owner">
            <summary>
            The owner object, of the type given by the <see cref="T:System.Type"/> key in the <see cref="F:JetBrains.UI.Controls.Utils.AutomationProvidersRegistry.Items"/> dictionary.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Utils.AutomationProvidersRegistry.AutomationProviderRequest.WParam">
            <summary>
            <c>wParam</c> of the Windows message we're handling. <c>lParam</c> is always <see cref="F:JetBrains.Interop.WinApi.Declarations.Constants.OBJID.OBJID_CLIENT"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Utils.AutomationProvidersRegistry.AutomationProviderRequest.LParam">
            <summary>
            <c>lParam</c>, always <see cref="F:JetBrains.Interop.WinApi.Declarations.Constants.OBJID.OBJID_CLIENT"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.Utils.ControlUtil">
            <summary>
            Utils for accessing controls
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.ControlUtil.GetControlContainingPoint(System.Drawing.Point)">
            <summary>
            Returns control at screenPoint or a control, that contains a window at screenPoint
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.ControlUtil.CenterInMainWindow(System.Drawing.Size,System.Windows.Forms.IWin32Window)">
            <summary>
            Centers the <paramref name="size"/>-sized rectangle over the main window, checks that it falls in screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.ControlUtil.CenterInWindow(System.IntPtr,System.Drawing.Size)">
            <summary>
            Centers the <paramref name="size"/>-sized rectangle over the <paramref name="hwndOwner"/> window, checks that it falls in screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.ControlUtil.FitToScreen(System.Drawing.Rectangle)">
            <summary>
            Ensures the given bounds fall within a screen.
            Prefers to rather move than downsize.
            Chooses the screen that contains most of the initial <paramref name="bounds"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.ControlUtil.GetControlContainingFocus">
            <summary>
            Returns the control that currently has focus, or <c>Null</c> if either none of our windows has focus, or the focused window is not a control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.ControlUtil.GetControl(System.Void*)">
            <summary>
            Returns Control whose handle equals to hwnd passed or containing window with current hwnd
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.ControlUtil.ClearInternalCaches(System.Windows.Forms.Control)">
            <summary>
            Clear private cachedLayoutEventArgs field of a Control.
            </summary>
            <remarks>
            (DK) It could retain a solution and lead to a solution leak. 
            cachedLayoutEventArgs is set if PerformLayout method is called when the layout is suspended.
            The field is cleared on the next PerformLayout.
            Stackoverflow.com suggests to call PerformLayout (again) but we had better clear the field using reflection.
            </remarks>
        </member>
        <member name="T:JetBrains.UI.Controls.Utils.GoTransparentOnControlKey">
            <summary>
            Supports the VS behavior for a window to go transparent when the Control modifier key is down.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.GoTransparentOnControlKey.Apply(JetBrains.DataFlow.Lifetime,System.Windows.Forms.IWin32Window,JetBrains.Application.Threading.IThreading)">
            <summary>
            Apply the transparency on Ctrl key to a window.
            </summary>
            <returns>
            A signal that allows to disable the transparency on the fly while the Ctrl key is down.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.GoTransparentOnControlKey.Apply(JetBrains.DataFlow.Lifetime,System.Void*,JetBrains.Application.Threading.IThreading)">
            <summary>
            Apply the transparency on Ctrl key to a window handle.
            </summary>
            <returns>
            A signal that allows to disable the transparency on the fly while the Ctrl key is down.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.GoTransparentOnControlKey.IsCtrlKeyDownNow">
            <summary>
            Polls keyboard for the current Ctrl key state.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.Utils.LayoutSuspender">
            <summary>
            Suspends the layout of the given control and resumes it automatically when disposed of. [Omea]
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Utils.LayoutSuspender._bLayoutOnResume">
            <summary>
            Whether to apply layout on resume.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Utils.LayoutSuspender._suspended">
            <summary>
            The list of controls to be resumed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.LayoutSuspender.#ctor(System.Windows.Forms.Control,System.Boolean,System.Boolean)">
            <summary>
            Suspends the layout of the following control and resumes it when disposed of.
            </summary>
            <param name="control">Control to be suspended/resumed. Must not be <c>Null</c>.</param>
            <param name="recursive">Whether to suspend all the child controls also.</param>
            <param name="bLayoutOnResume"><see cref="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)"/> will be called with <paramref name="bLayoutOnResume"/> as an argument.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.LayoutSuspender.#ctor(System.Windows.Forms.Control)">
            <summary>
            Suspends the layout of the following control and resumes it when disposed of.
            </summary>
            <param name="control">Control to be suspended/resumed. Must not be <c>Null</c>.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.LayoutSuspender.Resume">
            <summary>
            Suspends the <see cref="F:JetBrains.UI.Controls.Utils.LayoutSuspender._suspended"/> list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.LayoutSuspender.Suspend">
            <summary>
            Suspends the <see cref="F:JetBrains.UI.Controls.Utils.LayoutSuspender._suspended"/> list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.LayoutSuspender.Dispose">
            <summary>
            Resumes the control's layout.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.Utils.PresentableItemBlockRenderer">
            <summary>
            Utility class to render <see cref="T:JetBrains.Application.UI.Controls.Utils.PresentableItemBlock"/> 
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemBlockRenderer.Render(System.Drawing.Graphics,JetBrains.Application.UI.Controls.Utils.PresentableItemBlock,System.Drawing.Rectangle,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager)">
            <summary>
            Renders <see cref="T:JetBrains.Application.UI.Controls.Utils.PresentableItemBlock"/> object on the specified graphics in the specified bounds.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to render on.</param>
            <param name="item"><see cref="T:JetBrains.Application.UI.Controls.Utils.PresentableItemBlock"/> to render.</param>
            <param name="bounds">Bounds to render in.</param>
            <param name="renderParams">Additional information about rendering.</param>
            <param name="themedIconManager"> </param>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemBlockRenderer.GetTextBounds(System.Drawing.Graphics,System.Drawing.Rectangle,JetBrains.Application.UI.Controls.Utils.PresentableItemBlock,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager)">
            <summary>
            Calculates rectangle of the RichText for specified bounds and rendering parameters.
            </summary>
            <param name="g">Graphics to measure against.</param>
            <param name="bounds">Bounds to measure in.</param>
            <param name="item"><see cref="T:JetBrains.Application.UI.Controls.Utils.PresentableItemBlock"/> to measure.</param>
            <param name="renderParams">Additional information about rendering.</param>
            <param name="themedIconManager"> </param>
            <returns>Rectangle for the RichText.</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemBlockRenderer.HitTest(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,JetBrains.Application.UI.Controls.Utils.PresentableItemBlock,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,System.Drawing.Rectangle@)">
            <summary>
            Finds subobject of <see cref="T:JetBrains.Application.UI.Controls.Utils.PresentableItemBlock"/> object in the specified point.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to test on.</param>
            <param name="hitPoint">Point to test for.</param>
            <param name="bounds">Bounds to test in.</param>
            <param name="item"><see cref="T:JetBrains.Application.UI.Controls.Utils.PresentableItemBlock"/> to analyze.</param>
            <param name="renderParams">Additional information about rendering.</param>
            <param name="themedIconManager"> </param>
            <param name="hitRect">Rectangle of the element at the specified location, or <see cref="F:System.Drawing.Rectangle.Empty"/> if no element was found.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemBlockRenderer.Measure(System.Drawing.Graphics,JetBrains.Application.UI.Controls.Utils.PresentableItemBlock,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager)">
            <summary>
            Renders <see cref="T:JetBrains.Application.UI.Controls.Utils.PresentableItemBlock"/> object on the specified graphics in the specified bounds.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to render on.</param>
            <param name="item"><see cref="T:JetBrains.Application.UI.Controls.Utils.PresentableItemBlock"/> to render.</param>
            <param name="renderParams">Additional information about rendering.</param>
            <param name="themedIconManager"> </param>
        </member>
        <member name="T:JetBrains.UI.Controls.Utils.PresentableItemRenderer">
            <summary>
            Utility class to render <see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem"/> 
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Utils.PresentableItemRenderer.ReusableLayout">
            <summary>
            Reusable object to avoid creating a new instance on each operation.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemRenderer.Arrange(System.Drawing.Graphics,JetBrains.Application.UI.Controls.Utils.IPresentableItem,System.Drawing.Size,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,JetBrains.Util.Interop.DpiResolution,JetBrains.UI.Controls.Utils.PresentableItemRenderer.Layout)">
            <summary>
            <para>Arranges the item in the given bounds and fills the layout data.</para>
            <para>This is the base routine for all of the measuring, hittesting and rendering methods.</para>
            </summary>
            <param name="g">Graphics object for measuring the GDI-painted text against.</param>
            <param name="item">The item itself.</param>
            <param name="size">The limiting size. Setting too small a size might cause the item to fail to measure its desired size correctly, so for the bottom-up layout pass use the max-size here.</param>
            <param name="renderParams">Additional information about rendering.</param>
            <param name="themedIconManager">Icons renderer.</param>
            <param name="resolution"></param>
            <param name="layout">Hand in an empty or dirty object. It will be filled with layout results.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemRenderer.GetTextBounds(System.Drawing.Graphics,System.Drawing.Rectangle,JetBrains.Application.UI.Controls.Utils.IPresentableItem,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,JetBrains.Util.Interop.DpiResolution)">
            <summary>
            Calculates rectangle of the RichText for specified bounds and rendering parameters.
            </summary>
            <param name="g">Graphics to measure against.</param>
            <param name="bounds">Bounds to measure in.</param>
            <param name="item"><see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem" /> to measure.</param>
            <param name="renderParams">Additional information about rendering.</param>
            <param name="themedIconManager"> </param>
            <param name="resolution"> </param>
            <returns>Rectangle for the RichText.</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemRenderer.GetTextBounds(System.Drawing.Graphics,System.Drawing.Rectangle,JetBrains.Application.UI.Controls.Utils.IPresentableItem,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,JetBrains.Application.UI.Icons.RasterizationResolution)">
            <summary>
            Calculates rectangle of the RichText for specified bounds and rendering parameters.
            </summary>
            <param name="g">Graphics to measure against.</param>
            <param name="bounds">Bounds to measure in.</param>
            <param name="item"><see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem" /> to measure.</param>
            <param name="renderParams">Additional information about rendering.</param>
            <param name="themedIconManager"> </param>
            <param name="resolution"> </param>
            <returns>Rectangle for the RichText.</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemRenderer.HitTest(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,JetBrains.Application.UI.Controls.Utils.IPresentableItem,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,System.Drawing.Rectangle@,JetBrains.Util.Interop.DpiResolution)">
            <summary>
            Finds subobject of <see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem"/> object at the specified point.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to test on.</param>
            <param name="hitPoint">Point to test for.</param>
            <param name="bounds">Bounds to test in.</param>
            <param name="item"><see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem"/> to analyze.</param>
            <param name="renderParams">Additional information about rendering.</param>
            <param name="themedIconManager"> </param>
            <param name="elementRect">Rectangle of the element at the specified location, or <see cref="F:System.Drawing.Rectangle.Empty"/> if no element was found.</param>
            <param name="resolution"> </param>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemRenderer.HitTest(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,JetBrains.Application.UI.Controls.Utils.IPresentableItem,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,System.Drawing.Rectangle@,JetBrains.Application.UI.Icons.RasterizationResolution)">
            <summary>
            Finds subobject of <see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem"/> object at the specified point.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to test on.</param>
            <param name="hitPoint">Point to test for.</param>
            <param name="bounds">Bounds to test in.</param>
            <param name="item"><see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem"/> to analyze.</param>
            <param name="renderParams">Additional information about rendering.</param>
            <param name="themedIconManager"> </param>
            <param name="elementRect">Rectangle of the element at the specified location, or <see cref="F:System.Drawing.Rectangle.Empty"/> if no element was found.</param>
            <param name="resolution"> </param>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemRenderer.Measure(System.Drawing.Graphics,JetBrains.Application.UI.Controls.Utils.IPresentableItem,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,JetBrains.Util.Interop.DpiResolution)">
            <summary>
            Measures <see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem" /> object on the specified graphics
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics" /> object to measure on.</param>
            <param name="item"><see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem" /> to measure.</param>
            <param name="renderParams">Additional information about measuring.</param>
            <param name="themedIconManager"> </param>
            <param name="resolution"> </param>
            <returns>Size of the item</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemRenderer.Measure(System.Drawing.Graphics,JetBrains.Application.UI.Controls.Utils.IPresentableItem,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,JetBrains.Application.UI.Icons.RasterizationResolution)">
            <summary>
            Measures <see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem" /> object on the specified graphics
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics" /> object to measure on.</param>
            <param name="item"><see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem" /> to measure.</param>
            <param name="renderParams">Additional information about measuring.</param>
            <param name="themedIconManager"> </param>
            <param name="resolution"> </param>
            <returns>Size of the item</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemRenderer.Render(System.Drawing.Graphics,JetBrains.Application.UI.Controls.Utils.IPresentableItem,System.Drawing.Rectangle,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,JetBrains.Util.Interop.DpiResolution)">
            <summary>
            Renders <see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem" /> object on the specified graphics in the specified bounds.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics" /> object to render on.</param>
            <param name="item"><see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem" /> to render.</param>
            <param name="bounds">Bounds to render in.</param>
            <param name="renderParams">Additional information about rendering.</param>
            <param name="themedIconManager"> </param>
            <param name="resolution"> </param>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemRenderer.Render(System.Drawing.Graphics,JetBrains.Application.UI.Controls.Utils.IPresentableItem,System.Drawing.Rectangle,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,JetBrains.Application.UI.Icons.RasterizationResolution)">
            <summary>
            Renders <see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem" /> object on the specified graphics in the specified bounds.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics" /> object to render on.</param>
            <param name="item"><see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem" /> to render.</param>
            <param name="bounds">Bounds to render in.</param>
            <param name="renderParams">Additional information about rendering.</param>
            <param name="themedIconManager"> </param>
            <param name="resolution"> </param>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemRenderer.RenderAnimatedFrame(System.Drawing.Graphics,JetBrains.Application.UI.Controls.Utils.IPresentableItem,System.Drawing.Rectangle,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,System.Double,JetBrains.Application.UI.Icons.RasterizationResolution)">
            <summary>
            Renders <see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem"/> object on the specified graphics in the specified bounds.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to render on.</param>
            <param name="item"><see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem"/> to render.</param>
            <param name="bounds">Bounds to render in.</param>
            <param name="renderParams">Additional information about rendering.</param>
            <param name="themedIconManager"> </param>
            <param name="fFrame">Frame percentage, [0..1).</param>
            <param name="resolution"> </param>
        </member>
        <member name="M:JetBrains.UI.Controls.Utils.PresentableItemRenderer.RenderCore(System.Drawing.Graphics,JetBrains.Application.UI.Controls.Utils.IPresentableItem,System.Drawing.Point,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,JetBrains.Util.Interop.DpiResolution,JetBrains.UI.Controls.Utils.PresentableItemRenderer.Layout,System.Nullable{System.Double})">
            <summary>
            Renders <see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem" /> object on the specified graphics in the specified bounds.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics" /> object to render on.</param>
            <param name="item"><see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem" /> to render.</param>
            <param name="location">Point at which to render. The size, and whether it's the desired size or constrained-down size, is taken from the pre-calculated <paramref name="layout" /> object.</param>
            <param name="renderParams">Additional information about rendering.</param>
            <param name="themedIconManager">Icon renderer.</param>
            <param name="resolution">Screen resolution to be applied to the icons. Currently, DPI for the text is to be accounted for in <paramref name="renderParams" />.</param>
            <param name="layout">The cached layout to render in. Must be already filled with <see cref="M:JetBrains.UI.Controls.Utils.PresentableItemRenderer.Arrange(System.Drawing.Graphics,JetBrains.Application.UI.Controls.Utils.IPresentableItem,System.Drawing.Size,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,JetBrains.Util.Interop.DpiResolution,JetBrains.UI.Controls.Utils.PresentableItemRenderer.Layout)" />.</param>
            <param name="fAnimatedFrame">Frame percentage, [0..1), if expecting animation. <c>Null</c> means render the static representation even if icon supports animation.</param>
        </member>
        <member name="T:JetBrains.UI.Controls.Utils.PresentableItemRenderer.Layout">
            <summary>
            The results of an <see cref="M:JetBrains.UI.Controls.Utils.PresentableItemRenderer.Arrange(System.Drawing.Graphics,JetBrains.Application.UI.Controls.Utils.IPresentableItem,System.Drawing.Size,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,JetBrains.Util.Interop.DpiResolution,JetBrains.UI.Controls.Utils.PresentableItemRenderer.Layout)"/> call. Used by rendering, hittesting, and desired size retrieval methods.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Utils.PresentableItemRenderer.Layout.DesiredSize">
            <summary>
            Desired size of the presentable item. Might be Null if the limiting size was too small at the time of Arrange.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Utils.PresentableItemRenderer.Layout.Icons">
            <summary>
            <para>Icon area rectangles, in order of appearance in the icons array, if any icons are present.</para>
            <para>This is relative to the upper-left point of the painting area.</para>
            <para>Don't prepare this field before calling <see cref="M:JetBrains.UI.Controls.Utils.PresentableItemRenderer.Arrange(System.Drawing.Graphics,JetBrains.Application.UI.Controls.Utils.IPresentableItem,System.Drawing.Size,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager,JetBrains.Util.Interop.DpiResolution,JetBrains.UI.Controls.Utils.PresentableItemRenderer.Layout)"/>, it will allocate the array of a sufficient size. Note that it won't shrink a larger array down to avoid unnecessary allocations (but will reset any excess items to collapsed rects), so care array lengths when consuming.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Utils.PresentableItemRenderer.Layout.Size">
            <summary>
            <para>Arranged size of the presentable item (the Size parameter as it was passed to Arrange).</para>
            <para>All of the rectangles should be within the rectangle of this size located at <c>(0,0)</c>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Utils.PresentableItemRenderer.Layout.Text">
            <summary>
            <para>Text area rectangle, if text is present.</para>
            <para>This is relative to the upper-left point of the painting area.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.WindowsCommonFileDialog.#ctor(JetBrains.Application.BuildScript.Application.IWindowBranding)">
            <param name="branding"></param>
            <inheritdoc />
        </member>
        <member name="M:JetBrains.UI.Controls.WindowsCommonFileDialog.JetBrains#Application#UI#Controls#FileSystem#ICommonFileDialogs#BrowseForOpenFile(System.String,JetBrains.Application.UI.Controls.FileSystem.ChooseFileType[])">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.UI.Controls.WindowsCommonFileDialog.JetBrains#Application#UI#Controls#FileSystem#ICommonFileDialogs#BrowseForOpenMultipleFiles(System.String,JetBrains.Application.UI.Controls.FileSystem.ChooseFileType[])">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.UI.Controls.WindowsCommonFileDialog.JetBrains#Application#UI#Controls#FileSystem#ICommonFileDialogs#BrowseForSaveFile(System.String,JetBrains.Application.UI.Controls.FileSystem.ChooseFileType[])">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.UI.Controls.ActionManagerToolBar">
            <summary>
            A UI element for planting the Action Manager Toolbar into the WPF UI. Does not require any components for creating an instance.
            All of the components and data are databound from the viewmodel.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.ActionManagerToolBar.ActionBarManager">
            <summary>
            Action bar manager for the toolbar.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.ActionManagerToolBar.ActionGroupId">
            <summary>
            ID of the actions group whose actions should be presented as toolbar buttons.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.ActionManagerToolBar.ContextParent">
            <summary>
            <para>Outermost control hosting the whole setup with toolbar and payload content controls.</para>
            <para>For example, in a tool window that would be your content element. In a window, that would be the window content element. Usually the returned action bar UI element is parented by the context parent.</para>
            <para>When keyboard focus is within the context parent, the focused element defines the data context (it's collected by bubbling from the focused element and collecting all the available data rules/constants).</para>
            <para>When keyboard focus is not within, the logical focus context is used for gathering data context, which is basically the most recently keyboard-focused element (or, rather, which element would get focused when keyboard focus returns to the window). This allows for keeping the window-local action buttons enabled on the toolbar even when focus is not in the window itself.</para>
            <para>To implement this, <see cref="F:System.Windows.Input.FocusManager.IsFocusScopeProperty"/> is set to <c>True</c> on <paramref name="value"/>.</para>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.ActionManagerToolBar.PresentWhenLoaded">
            <summary>
            When this decorator gets loaded into the presentation source tree, it creates the UI element with the provided functor under the loaded-state lifetime.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.Automation.AutomationProviders">
            <summary>
            See <see cref="M:JetBrains.UI.Controls.Automation.AutomationProviders.Initialize"/>.
            Also, if we're running in the mode that includes this assembly, winds up the automation providers automatically.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.AutomationProviders.Initialize">
            <summary>
            Call this method to enable all of the automation peers.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ElementProviderFromPoint(System.Double,System.Double)">
            <summary>
            Retrieves the element in this fragment that is at the specified point.
            </summary>
            <returns>
            The provider for the child element at the specified point, if one exists, or the root provider if the point is on this element but not on any child element. Otherwise returns null.
            </returns>
            <param name="x">The X coordinate,.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetEmbeddedFragmentRoots">
            <summary>
            Retrieves an array of fragment roots that are embedded in the UI Automation element tree rooted at the current element.
            </summary>
            <returns>
            An array of root fragments, or null.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetFocus">
            <summary>
            Retrieves the element in this fragment that has the input focus.
            </summary>
            <returns>
            The provider for the element in this fragment that has the input focus, if any; otherwise, a null reference (Nothing in Visual Basic).
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetRuntimeId">
            <summary>
            Retrieves the runtime identifier of an element.
            </summary>
            <returns>
            The unique run-time identifier of the element.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.Navigate(System.Windows.Automation.Provider.NavigateDirection)">
            <summary>
            Retrieves the UI Automation element in a specified direction within the tree.
            </summary>
            <returns>
            The element in the specified direction, or null if there is no element in that direction
            </returns>
            <param name="direction">The direction in which to navigate.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.SetFocus">
            <summary>
            Sets the focus to this element.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.BoundingRectangle">
            <summary>
            Gets the bounding rectangle of this element.
            </summary>
            <returns>
            The bounding rectangle, in screen coordinates.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.FragmentRoot">
            <summary>
            Retrieves the root node of the fragment.
            </summary>
            <returns>
            The root node.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider.
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.Invoke">
            <summary>
            Sends a request to activate a control and initiate its single, unambiguous action.
            </summary>
            <returns>
            </returns>
            <exception cref="T:System.Windows.Automation.ElementNotEnabledException">If the control is not enabled.</exception>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.GetEmbeddedFragmentRoots">
            <summary>
            Retrieves an array of fragment roots that are embedded in the UI Automation element tree rooted at the current element.
            </summary>
            <returns>
            An array of root fragments, or null.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.GetRuntimeId">
            <summary>
            Retrieves the runtime identifier of an element.
            </summary>
            <returns>
            The unique run-time identifier of the element.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.Navigate(System.Windows.Automation.Provider.NavigateDirection)">
            <summary>
            Retrieves the UI Automation element in a specified direction within the tree.
            </summary>
            <returns>
            The element in the specified direction, or null if there is no element in that direction
            </returns>
            <param name="direction">The direction in which to navigate.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.SetFocus">
            <summary>
            Sets the focus to this element.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.BoundingRectangle">
            <summary>
            Gets the bounding rectangle of this element.
            </summary>
            <returns>
            The bounding rectangle, in screen coordinates.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.FragmentRoot">
            <summary>
            Retrieves the root node of the fragment.
            </summary>
            <returns>
            The root node.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider.
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.ElementProviderFromPoint(System.Double,System.Double)">
            <summary>
            Retrieves the element in this fragment that is at the specified point.
            </summary>
            <returns>
            The provider for the child element at the specified point, if one exists, or the root provider if the point is on this element but not on any child element. Otherwise returns null.
            </returns>
            <param name="x">The X coordinate,.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetFocus">
            <summary>
            Retrieves the element in this fragment that has the input focus.
            </summary>
            <returns>
            The provider for the element in this fragment that has the input focus, if any; otherwise, a null reference (Nothing in Visual Basic).
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.Invoke">
            <summary>
            Sends a request to activate a control and initiate its single, unambiguous action.
            </summary>
            <returns>
            </returns>
            <exception cref="T:System.Windows.Automation.ElementNotEnabledException">If the control is not enabled.</exception>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetEmbeddedFragmentRoots">
            <summary>
            Retrieves an array of fragment roots that are embedded in the UI Automation element tree rooted at the current element.
            </summary>
            <returns>
            An array of root fragments, or null.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetRuntimeId">
            <summary>
            Retrieves the runtime identifier of an element.
            </summary>
            <returns>
            The unique run-time identifier of the element.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.Navigate(System.Windows.Automation.Provider.NavigateDirection)">
            <summary>
            Retrieves the UI Automation element in a specified direction within the tree.
            </summary>
            <returns>
            The element in the specified direction, or null if there is no element in that direction
            </returns>
            <param name="direction">The direction in which to navigate.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.SetFocus">
            <summary>
            Sets the focus to this element.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.BoundingRectangle">
            <summary>
            Gets the bounding rectangle of this element.
            </summary>
            <returns>
            The bounding rectangle, in screen coordinates.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.FragmentRoot">
            <summary>
            Retrieves the root node of the fragment.
            </summary>
            <returns>
            The root node.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider.
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.Invoke">
            <summary>
            Sends a request to activate a control and initiate its single, unambiguous action.
            </summary>
            <returns>
            </returns>
            <exception cref="T:System.Windows.Automation.ElementNotEnabledException">If the control is not enabled.</exception>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider.
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.TipControlViewAutomationProvider.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.TipControlViewAutomationProvider.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.TipControlViewAutomationProvider.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.TipControlViewAutomationProvider.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider.
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.Automation.Providers.TipControlViewAutomationProvider.SetValue(System.String)">
            <summary>
            Sets the value of a control.
            </summary>
            <returns>
            </returns>
            <param name="value">The value to set. The provider is responsible for converting the value to the appropriate data type.</param>
            <exception cref="T:System.InvalidOperationException">If locale-specific information is passed to a control in an incorrect format such as an incorrectly formatted date. </exception>
            <exception cref="T:System.ArgumentException">If a new value cannot be converted from a string to a format the control recognizes.</exception>
            <exception cref="T:System.Windows.Automation.ElementNotEnabledException">When an attempt is made to manipulate a control that is not enabled.</exception>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.TipControlViewAutomationProvider.IsReadOnly">
            <summary>
            Gets a value that specifies whether the value of a control is read-only.
            </summary>
            <returns>
            true if the value is read-only; false if it can be modified.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Controls.Automation.Providers.TipControlViewAutomationProvider.Value">
            <summary>
            Gets the value of the control.
            </summary>
            <returns>
            The value of the control as a string.
            </returns>
        </member>
        <member name="T:JetBrains.UI.Controls.AvalonStatusBarShim">
            <summary>
            Applies a list of <see cref="T:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator" />s to an Avalon <see cref="T:System.Windows.Controls.Primitives.StatusBar" />.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.AvalonStatusBarShim.OptionDevTenBeta2PlantIntoStatusDockPanel">
            <summary>
            In DevTen Beta2, the status bar itself lives on another thread, which makes it planting our controls very complicated because of the threading issues.
            That's why we prefer planting to the dock panel that hosts the status bar.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.AvalonStatusBarShim.AddItemsHostToStatusBar(JetBrains.DataFlow.Lifetime,System.Windows.DependencyObject,System.Windows.Controls.ItemsControl)">
            <summary>
            Helper for attaching to a status bar. Places a panel for our items in among its indicators.
            Must be executed on the status bar thread.
            </summary>
            <param name="lifetime"></param>
            <param name="statbar">The status bar to plant into.</param>
            <param name="panelToHostOnStatusBar">The Avalon element to put on the status bar as its item.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.AvalonStatusBarShim.ConvertIndicatorsIntoViewsLive(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator},JetBrains.DataFlow.IListEvents{JetBrains.UI.Controls.AvalonStatusBarShim.IndicatorView},JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.Application.UI.Components.Theming.ITheming)">
            <summary>
            Transforms a live collection of status bar indicator documents into a live collection of status bar indicator WPF views, which is suitable for binding to WPF items control item sources.
            </summary>
            <seealso cref="M:JetBrains.UI.Controls.AvalonStatusBarShim.CreateIndicatorViewsCollectionLive(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator},JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.Application.UI.Components.Theming.ITheming)" />
        </member>
        <member name="M:JetBrains.UI.Controls.AvalonStatusBarShim.CreateIndicatorViewsCollectionLive(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator},JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.Application.UI.Components.Theming.ITheming)">
            <summary>
            Transforms a live collection of status bar indicator documents into a live collection of status bar indicator WPF views, which is suitable for binding to WPF items control item sources.
            </summary>
            <seealso cref="M:JetBrains.UI.Controls.AvalonStatusBarShim.ConvertIndicatorsIntoViewsLive(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator},JetBrains.DataFlow.IListEvents{JetBrains.UI.Controls.AvalonStatusBarShim.IndicatorView},JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.Application.UI.Components.Theming.ITheming)" />
        </member>
        <member name="M:JetBrains.UI.Controls.AvalonStatusBarShim.CreateIndicatorsHostPanel(JetBrains.DataFlow.IListEvents{JetBrains.UI.Controls.AvalonStatusBarShim.IndicatorView})">
            <summary>
            Creates the panel into which the indicator view items will be put.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.AvalonStatusBarShim.SubclassAvalonStatusBar(JetBrains.DataFlow.Lifetime,System.Windows.Controls.Primitives.StatusBar,JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator},JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.Application.UI.Components.Theming.ITheming)">
            <summary>
              <para>If there's an Avalon status bar which belongs to some IDE which we're plugged in to (such as DevTen Beta 1), adds our indicators to that status bar.</para>
              <para>DO NOT use this for running status bars in standalone applications, because this is a very non-straightforward way of doing things.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.AvalonStatusBarShim.TryFindDevTenBeta2StatusDockPanelInHwnd(System.IntPtr)">
            <summary>
            Means the <see cref="T:System.Windows.Controls.DockPanel" /> on the bottom of the window, to which our status indicators should be added in a dock-right fashion. Usually the status bar itself sits in the same dock panel. This approach is used when we cannot deal with the status bar itself to put the items into it properly. The case in VS 10 beta 2, where the status bar control itself sits on another thread and causes a marshalling pain for us if operated directly.
            It's expected to be a <see cref="T:System.Windows.Controls.DockPanel" /> really, but we'd fallback for cases when we find ourselves in an unexpected layout and  look for just any suitable panel.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.AvalonStatusBarShim.TryFindStatusBarInHwnd(System.IntPtr)">
            <summary>
            Tries to find an Avalon status bar in the given window. The window must be fully inited by the moment.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.AvalonStatusBarShim.TrySubclassAvalonStatusBarInWindow(JetBrains.DataFlow.Lifetime,System.IntPtr,JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator},JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.Application.UI.Components.Theming.ITheming)">
            <summary>
              <para>If there's an Avalon status bar which belongs to some IDE which we're plugged in to (such as DevTen Beta 1), adds our indicators to that status bar.</para>
              <para>DO NOT use this for running status bars in standalone applications, because this is a very non-straightforward way of doing things.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.AvalonStatusBarShim.TryFindStatusBarInHwnd_UiThread(System.Windows.PresentationSource)">
            <summary>
            Take 1: find all explicit status bars in the application window.
            Workable on VS10 up to Beta2 (non-inclusive).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.AvalonStatusBarShim.TryFindStatusBarInHwnd_WorkerThread(System.Windows.PresentationSource)">
            <summary>
            Take 2: in VS 10 beta 2, the status bar is hosted in another thread. There seems to be no legal way for ripping out the nested object graph. Do some hacks.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.AvalonStatusBarShim.IndicatorView.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Components.Theming.ITheming,JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator,JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Wraps the given indicator, detaches on dispose.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.AvalonStatusBarShim.IndicatorView.Data">
            <summary>
            The data item to be presented. A property (non-readonly) because we sometimes want to explicitly detach the backend and its resources from the view (by setting <see cref="F:JetBrains.UI.Controls.AvalonStatusBarShim.IndicatorView.Data" /> to <c>Null</c>).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.AvalonStatusBarShim.IndicatorView.InitTooltips">
            <summary>
            Tooltip: if the presentation does not handle the request event by itself, relay to the indicator.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.AvalonStatusBarShim.IndicatorsItemsControl">
            <summary>
            A custom items control for the indicator. Changes the measuring layout pass logic to fir the height of the existing Visual Studio status bar (VS itself asks for the vertical-size as unbounded, we default to actual status bar size as the vertical bound, or to the scrollwidth if not calculated yet).
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.BitmapWindowlessControl">
            <summary>
            A simple windowless control that just renders a bitmap.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.BitmapWindowlessControl.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.Icons.ThemedIconLoader)">
            <summary>
            Creates a control which tracks the live themed image.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.BitmapWindowlessControl.Bitmap">
            <summary>
            Gets or sets the image to be rendered in the windowless control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.BitmapWindowlessControl.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.Application.UI.Controls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.BitmapWindowlessControl.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.BitmapWindowlessControl.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.Application.UI.Controls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.BitmapWindowlessControl.SetLayout(JetBrains.Application.UI.PopupLayout.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.Controls.BitmapWindowlessControl.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.BitmapWindowlessControl.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.BitmapWindowlessControl.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.BitmapWindowlessControl.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.BorderedPanel">
            <summary>
            A panel that has a lower border.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.BorderedPanel.BorderColor">
            <summary>
            Gets or sets the border color. <see cref="P:System.Windows.Forms.Control.ForeColor"/> is not used so that to avoid inheriting it in the child controls.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.BorderedPanel.BorderWidth">
            <summary>
            Gets or sets which borders to paint.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.BorderedPanel.FillColor">
            <summary>
            Gets or sets the fill color. <see cref="P:System.Windows.Forms.Control.BackColor"/> is not used so that to avoid inheriting it in the child controls.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.BorderedPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="T:JetBrains.UI.Controls.Browser.HtmlViewControl">
            <summary>
            A control that displays the HTML content.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.Browser.HtmlViewControl.DocumentText">
            <summary>
            Gets or sets the HTML contents of the page displayed in the System.Windows.Forms.WebBrowser control.
            Wraps the base implementation to catch the setter silly exceptions.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Browser.HtmlViewControl.OnDocumentCompleted(System.Windows.Forms.WebBrowserDocumentCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.WebBrowser.DocumentCompleted"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.Windows.Forms.WebBrowserDocumentCompletedEventArgs"></see> that contains the event data. </param>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Windows.Forms.WebBrowser"></see> instance is no longer valid.</exception>
            <exception cref="T:System.InvalidOperationException">A reference to an implementation of the IWebBrowser2http://msdn.microsoft.com/workshop/browser/webbrowser/reference/ifaces/iwebbrowser2/iwebbrowser2.asp could not be retrieved from the underlying ActiveX WebBrowserhttp://msdn.microsoft.com/library/default.asp?url=/workshop/browser/webbrowser/browser_control_node_entry.asp.</exception>
        </member>
        <member name="M:JetBrains.UI.Controls.Browser.MshtmlBrowserControl2.CreateWebBrowserSiteBase">
            <summary>
            Returns a reference to the unmanaged WebBrowser ActiveX control site, which you can extend to customize the managed <see cref="T:System.Windows.Forms.WebBrowser"></see> control.
            </summary>
            
            <returns>
            A <see cref="T:System.Windows.Forms.WebBrowser.WebBrowserSite"></see> that represents the WebBrowser ActiveX control site.
            </returns>
            
        </member>
        <member name="T:JetBrains.UI.Controls.CheckBoxDisabledNoCheck">
            <summary>
            A checkbox that gets visually unchecked when disabled.
            Use the <see cref="P:JetBrains.UI.Controls.CheckBoxDisabledNoCheck.CheckedLogically"/> property if you'd like to use the non-visual state, <see cref="P:System.Windows.Forms.CheckBox.Checked"/> to use the visual state.
            Setting <see cref="P:System.Windows.Forms.CheckBox.Checked"/> will not affect the <see cref="P:JetBrains.UI.Controls.CheckBoxDisabledNoCheck.CheckedLogically"/> value.
            The <see cref="P:JetBrains.UI.Controls.CheckBoxDisabledNoCheck.CheckedVisually"/> property reflects the visual state of the checkbox.
            Setting <see cref="F:JetBrains.UI.Controls.CheckBoxDisabledNoCheck.ShowKeyboardCuesProperty"/> to always or never show keyboard mnemonics.
            Setting <see cref="F:JetBrains.UI.Controls.CheckBoxDisabledNoCheck.ShowFocusCuesProperty" /> you can override default focus visual style.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.CheckBoxDisabledNoCheck.myFakeChange">
            <summary>
            <c>True</c> when the <see cref="P:System.Windows.Forms.CheckBox.Checked"/> property is being manipulated by this control on enable/disable.
            The <see cref="P:JetBrains.UI.Controls.CheckBoxDisabledNoCheck.CheckedLogically"/> should not change in such a case.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.CheckBoxDisabledNoCheck.CheckedLogically">
            <summary>
            Gets or sets whether the checkbox is logically checked, not only visibly.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.CheckBoxDisabledNoCheck.CheckedVisually">
            <summary>
            Gets whether the checkbox is currently visually checked, or not.
            <c>False</c> when not <see cref="!:CheckBox.Enabled"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.CheckBoxDisabledNoCheck.UpdateCheckedProperty">
            <summary>
            Recacls the checked state of the control in response to various events.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.CheckBoxDisabledNoCheck.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.Controls.CheckBoxDisabledNoCheck.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="T:JetBrains.UI.Controls.CheckBoxDisabledNoCheck2">
            <summary>
            A checkbox that gets visually unchecked when disabled.
            Use the <see cref="P:JetBrains.UI.Controls.CheckBoxDisabledNoCheck2.IsCheckedLogically"/> property if you'd like to use the non-visual state, <see cref="P:JetBrains.UI.Controls.CheckBoxDisabledNoCheck2.IsAppearingChecked"/> to use the visual state.
            The <see cref="P:JetBrains.UI.Controls.CheckBoxDisabledNoCheck2.IsAppearingChecked"/> property reflects the visual state of the checkbox.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.ColorPickerDialog.ColorFormatSelector">
            <summary>
            Interaction logic for ColorFormats.xaml
            </summary>
            <summary>
            ColorFormatSelector
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.ColorPickerDialog.ColorFormatSelector.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.ColorPickerDialog.ColorSpaceState">
            <summary>
            Interaction logic for ColorPickerDialog.xaml
            </summary>
            
        </member>
        <member name="T:JetBrains.UI.Controls.ColorPickerDialog.ColorPickerControl">
            <summary>
            ColorPickerControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.ColorPickerDialog.ColorPickerControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.ColorPickerDialog.ColorPickerDialog">
            <summary>
            Interaction logic for ColorPickerDialog.xaml
            </summary>
            <summary>
            ColorPickerDialog
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.ColorPickerDialog.ColorPickerDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.ColorPickerDialog.ContentSlider">
            <summary>
            Interaction logic for ColorAxisSlider.xaml
            </summary>
            <summary>
            ContentSlider
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.ColorPickerDialog.ContentSlider.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TabStripView.Automation.TabStripItemViewAutomationPeer">
            <summary>
            Represents an automation peer for <see cref="T:JetBrains.UI.Controls.TabStripView.TabStripItemView"/>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TabStripView.Automation.TabStripRowAutomationPeer">
            <summary>
            Represents an automation peer for <see cref="T:JetBrains.UI.Controls.TabStripView.TabStripRow"/>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TabStripView.Automation.TabStripViewAutomationPeer">
            <summary>
            Represents an automation peer for <see cref="T:JetBrains.UI.Controls.TabStripView.TabStripView"/>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TabStripView.TabStripItemView">
            <summary>
            Represents a view for TabStripItem 
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TabStripView.TabStripItemView.Item">
            <summary>
            Gets or sets TabStripItem to present
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TabStripView.TabStripItemView.Dock">
            <summary>
            Gets or sets tab's alignment
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TabStripView.TabStripRow.AllowReordering">
            <summary>
            Gets or sets whether user can reorder tabs
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TabStripView.TabStripRow.ItemsOrEmptyCollection">
            <summary>
            Gets items in fail-safe way
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TabStripView.TabStripView">
            <summary>
            Represents a view for TabStripViewModel
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TabStripView.TabStripView.AllowReordering">
            <summary>
            Gets or sets whether user can reorder tabs
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TabStripView.TabStripView.Dock">
            <summary>
            Gets or sets side where tabs should be
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TabStripView.TabStripView.AllowAnimation">
            <summary>
            Gets or sets whether animation is allowed
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TabStripView.TabStripView.AllowOverflowing">
            <summary>
            Gets or sets whether overflowing items should be hidden into drop down button
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TabStripView.TabStripView.MenuItemContainerStyle">
            <summary>
            Gets or sets style for containers in menu into this view scope
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.CustomListBoxControl`1">
            <summary>
            A list box with a custom painter.
            </summary>
            <typeparam name="T">Type of the listbox items.</typeparam>
        </member>
        <member name="F:JetBrains.UI.Controls.CustomListBoxControl`1.myItemPainter">
            <summary>
            The item painter to use.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.CustomListBoxControl`1.Scrolled">
            <summary>
            Fires when the list box is scrolled.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.DropDownButton">
            <summary>
            Represents drop down button
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.DropDownButton.DropDownMenu">
            <summary>
            Gets or sets a context menu
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.DropDownButton.OnClick">
            <summary>
            Called when a control is clicked by the mouse or the keyboard. 
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.EditboxGlyph">
            <summary>
            Places a static glyph into an editbox control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.EditboxGlyph.#ctor(System.Windows.Forms.TextBox,JetBrains.UI.Icons.IconId,JetBrains.Application.Icons.IThemedIconManager)">
            <summary>
            Places the glyph into an owning editbox.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.EditboxGlyph.Glyph">
            <summary>
            Gets the image for the glyph.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.EditboxGlyph.TooltipProvider">
            <summary>
            Gets or sets the provider that defines the tooltip for the control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.EditboxGlyph.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.Application.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="T:JetBrains.UI.Controls.OwnedForm">
            <summary>
            This class represents a form that should be owned by a Win32 window. It should be used as a base class for various dialogs, etc.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.GotoByName.GotoByNameMenu">
            <summary>
            Implements the presentation of the Goto By Name functionality that works thru a <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.GotoByName.GotoByNameMenu.MenuView">
            <summary>
            Gets the menu view, when the menu is running onscreen.
            Otherwise <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.GotoByName.GotoByNameMenu.PopupWindow">
            <summary>
            Gets the menu popup window, when the menu is running onscreen.
            Otherwise <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.GotoByName.GotoByNameMenu.#ctor(JetBrains.UI.Controls.GotoByName.GotoByNameMenuComponent,JetBrains.DataFlow.LifetimeDefinition,JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel,System.Windows.Forms.IWin32Window,JetBrains.Application.UI.Controls.GotoByName.GotoByNameDataConstants.SearchTextData,JetBrains.Application.UI.PopupLayout.IPopupWindowContext)">
            <summary>
            Spawns the Goto By Name <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu"/>-based UI upon the given model.
            Disposes of the model when done.
            </summary>
            <param name="gotoByNameMenuComponent"></param>
            <param name="lifetimeDefinition"></param>
            <param name="model">Goto-by-name model that provides data for the UI.</param>
            <param name="ownerwin"></param>
            <param name="initialSearchTextData"></param>
            <param name="customPopupWindowContext"></param>
        </member>
        <member name="M:JetBrains.UI.Controls.GotoByName.GotoByNameMenu.Init_EditboxColor(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView)">
            <summary>
            Pending / Ready / Invalid color for the editbox text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.GotoByName.GotoByNameMenu.Init_EditboxEnter(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView)">
            <summary>
            Listen for the Enter key in the editbox.
            In case it's pressed when there's no selection (eg when typed a symbol and still calculating in background), wait async for the items to appear in the list, and then execute the first one.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.GotoByName.GotoByNameMenu.Init_ExtensionControl(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView,JetBrains.Application.Threading.IThreading,JetBrains.Application.UI.Components.Fonts.IFontsManager)">
            <summary>
            Places the extension control on the menu, which is a checkbox with an optional checkmark and dynamic text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.GotoByName.GotoByNameMenu.Init_Glyph(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel,JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView)">
            <summary>
            Sets up the “busy” glyph.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.ImageListButton">
            <summary>
            A simple button which draws one of four images from the image list depending on its
            state.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.LinkLabel">
            <summary>
            A customized link label that natively supports URIs for opening in the Web browser and copying to clipboard.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.LinkLabel.#ctor(System.String,System.Uri,JetBrains.Application.StdApplicationUI.OpensUri,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus)">
            <summary>
            A Web URI link.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.LinkLabel.#ctor(System.String,System.Action,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus)">
            <summary>
            An action link.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.LinkLabel.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.Controls.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.LinkLabel.LinkClicked" /> event.
            </summary>
            <param name="args">A <see cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.Controls.LinkLabel.WndProc(System.Windows.Forms.Message@)">
            <summary>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.LinkLabel.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.Application.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="T:JetBrains.UI.Controls.PixelSnappedDecorator">
            <summary>
            Represent image control with snapping to pixel grid 
            to make icon sharp (as workaround for .NET 3.5)
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.PixelSnappedDecorator.ArrangeOverride(System.Windows.Size)">
            <summary>
            Decorator computes the position of its single child inside child's Margin and calls Arrange
            on the child. 
            </summary>
            <param name="arrangeSize">Size the Decorator will assume.</param> 
        </member>
        <member name="T:JetBrains.UI.Controls.PresentableItemTipPainter">
            <summary>
            A tooltip control painter that renders a standard presentable item on it.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.PresentableItemTipPainter.myBounds">
            <summary>
            Bounds, as assigned by the parent.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.PresentableItemTipPainter.myPresentableItem">
            <summary>
            The rendered presentable item.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.PresentableItemTipPainter.myRenderParams">
            <summary>
            The rendering aspect.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.PresentableItemTipPainter.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.PresentableItemTipPainter.#ctor(JetBrains.Application.UI.Controls.Utils.IPresentableItem,JetBrains.UI.RenderParams,JetBrains.Application.Icons.IThemedIconManager)">
            <summary>
            Creates the tip painter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.PresentableItemTipPainter.#ctor(JetBrains.Application.UI.Controls.Utils.IPresentableItem,JetBrains.Application.Icons.IThemedIconManager)">
            <summary>
            Creates the tip painter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.PresentableItemTipPainter.#ctor(JetBrains.UI.RichText.RichText,JetBrains.Application.Icons.IThemedIconManager)">
            <summary>
            Creates the tip painter.
            Note: you should rather use <see cref="T:JetBrains.Application.UI.Controls.RichTextTipPainter"/> for formatted text, because it supports reflow.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.PresentableItemTipPainter.#ctor(System.String,JetBrains.Application.Icons.IThemedIconManager)">
            <summary>
            Creates the tip painter.
            Note: you should rather use <see cref="T:JetBrains.Application.UI.Controls.RichTextTipPainter"/> for formatted text, because it supports reflow.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.PresentableItemTipPainter.PresentableItem">
            <summary>
            Gets or sets the presentable item rendered by the view.
            Can be <c>Null</c> for an empty view of zero size.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.PresentableItemTipPainter.RenderParams">
            <summary>
            Gets or sets the rendering aspect.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.PresentableItemTipPainter.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.Application.UI.Controls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.PresentableItemTipPainter.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.PresentableItemTipPainter.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The available space.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.PresentableItemTipPainter.SetLayout(JetBrains.Application.UI.PopupLayout.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.Controls.PresentableItemTipPainter.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.PresentableItemTipPainter.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.PresentableItemTipPainter.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.PresentableItemTipPainter.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.ProgressCircle">
            <summary>
            Implements a progress indication control in a circle.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.ProgressCircle.ArrangeOverride(System.Windows.Size)">
            <summary>
            Called to arrange and size the content of a <see cref="T:System.Windows.Controls.Control"></see> object. 
            </summary>
            
            <returns>
            The size of the control.
            </returns>
            
            <param name="arrangeBounds">The computed size that is used to arrange the content.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.ProgressCircle.MeasureOverride(System.Windows.Size)">
            <summary>
            Called to remeasure a control. 
            </summary>
            
            <returns>
            The size of the control.
            </returns>
            
            <param name="constraint">Measurement constraints, a control cannot return a size larger than the constraint.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.ProgressCircle.OnMaximumChanged(System.Double,System.Double)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"></see> property changes. 
            </summary>
            
            <param name="newMaximum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"></see> property.</param>
            <param name="oldMaximum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"></see> property.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.ProgressCircle.OnMinimumChanged(System.Double,System.Double)">
            <summary>
             Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"></see> property changes. 
            </summary>
            
            <param name="oldMinimum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"></see> property.</param>
            <param name="newMinimum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"></see> property.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.ProgressCircle.OnValueChanged(System.Double,System.Double)">
            <summary>
             Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"></see> property changes. 
            </summary>
            
            <param name="oldValue">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"></see> property</param>
            <param name="newValue">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"></see> property</param>
        </member>
        <member name="T:JetBrains.UI.Controls.PromptDecorator">
            <summary>
            Represents decorator which designed to show watermark over 
            any control to let user know what to enter in the editor
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.PromptDecorator.Prompt">
            <summary>
            Gets or sets promt content
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.PromptDecorator.PromtProperty">
            <summary>
            Using a DependencyProperty as the backing store for Prompt.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.PromptDecorator.ChildContentPath">
            <summary>
            Gets or sets child of the content
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.RichTextPresenter">
            <summary>
            RichText representation for WPF
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextPresenter.IsKeyAccessed">
            <summary>
            Gets or sets whether the RichTextPresenter 
            is key accessed by ALT + accesskey (access key is processed from the RichText)
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextPresenter.IsKeyAccessedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsKeyAccessed.  
            This enables styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextPresenter.IsAutoContrasted">
            <summary>
            Gets or sets whether colors will be automatically adjusted to achieve visual contrast
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextPresenter.TextWrapping">
            <summary>
            The TextWrapping property controls whether or not text wraps 
            when it reaches the flow edge of its containing block box. 
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextPresenter.TextTrimming">
            <summary>
            The TextTrimming property specifies the trimming behavior situation 
            in case of clipping some textual content caused by overflowing the line's box.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextPresenter.FontFamily">
            <summary> 
            The FontFamily property specifies the name of font family.
            </summary> 
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextPresenter.FontSize">
            <summary> 
            The FontSize property specifies the size of the font.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextPresenter.ForegroundProperty">
            <summary>
            DependencyProperty for <see cref="P:JetBrains.UI.Controls.RichTextPresenter.Foreground" /> property. 
            </summary> 
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextPresenter.Foreground">
            <summary> 
            The Foreground property specifies the foreground brush of an element's text content.
            </summary> 
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextPresenter.BackgroundProperty">
            <summary>
            DependencyProperty for <see cref="P:JetBrains.UI.Controls.RichTextPresenter.Background" /> property. 
            </summary> 
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextPresenter.Padding">
            <summary> 
            The Padding property specifies the padding of the element.
            </summary> 
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextPresenter.TextAlignmentProperty">
            <summary> 
            DependencyProperty for <see cref="P:JetBrains.UI.Controls.RichTextPresenter.TextAlignment" /> property.
            </summary> 
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextPresenter.TextAlignment">
            <summary>
            The TextAlignment property specifies horizontal alignment of the content.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextPresenter.FontWeightProperty">
            <summary>
            DependencyProperty for <see cref="P:JetBrains.UI.Controls.RichTextPresenter.FontWeight" /> property.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextPresenter.FontWeight">
            <summary>
            The FontWeight property specifies the weight of the font. 
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.RichTextHeading">
            <summary>
            Renders a multiline wrappable heading with one bold paragraph and one normal-text paragraph. 
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextHeading.myLabelBody">
            <summary>
            Normal text part.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextHeading.myLabelTitle">
            <summary>
            Bold text part.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextHeading.Body">
            <summary>
            Gets or sets the body part of the heading.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextHeading.Title">
            <summary>
            Gets or sets the title part of the heading.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.RichTextLabel">
            <summary>
            A rich text label control capable of autosizing.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextLabel.myFormattedBlock">
            <summary>
            The <see cref="P:JetBrains.UI.Controls.RichTextLabel.RichTextBlock"/> formatted to fit the width.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextLabel.myMapWidthToSize">
            <summary>
            Caches the width-to-size mappings for quick access.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextLabel.myRichTextBlock">
            <summary>
            The rich text, as set by the user.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor(JetBrains.Application.UI.Components.Fonts.IFontsManager)">
            <summary>
            Constructs a default rich text label.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor(JetBrains.Application.UI.Components.IUIApplication)">
            <summary>
            Constructs a default rich text label.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor(JetBrains.UI.RichText.RichTextBlock,System.Windows.Forms.Padding,JetBrains.Application.UI.Components.IUIApplication)">
            <summary>
            Creates a rich text label, setting the given text and changing the default margin.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor(JetBrains.UI.RichText.RichTextBlock,System.Windows.Forms.Padding,JetBrains.Application.UI.Components.Fonts.IFontsManager)">
            <summary>
            Creates a rich text label, setting the given text and changing the default margin.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor(JetBrains.UI.RichText.RichTextBlock,JetBrains.Application.UI.Components.Fonts.IFontsManager)">
            <summary>
            Creates a rich text label, setting the given text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor(JetBrains.UI.RichText.RichTextBlock,JetBrains.Application.UI.Components.IUIApplication)">
            <summary>
            Creates a rich text label, setting the given text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor(JetBrains.UI.RichText.RichText,JetBrains.Application.UI.Components.Fonts.IFontsManager)">
            <summary>
            Creates a rich text label, setting the given text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor(JetBrains.UI.RichText.RichText,JetBrains.Application.UI.Components.IUIApplication)">
            <summary>
            Creates a rich text label, setting the given text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.GetDefaultRichTextLabelRenderParams(JetBrains.Application.UI.Components.Fonts.IFontsManager,System.Windows.Forms.Control)">
            <summary>
            Gets the render params the rich text labels use by default.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.Mnemonic">
            <summary>
            Gets or sets the accelerator keystroke of the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.RenderParams">
            <summary>
            Gets or sets the rendering aspect for the text.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.RichText">
            <summary>
            Gets or sets the rich text associated with the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.RichTextBlock">
            <summary>
            Gets or sets the formatted text displayed by this label.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.UpdateTextBlock">
            <summary>
            Reflows the formatted text block to the new width.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.ProcessMnemonic(System.Char)">
            <summary>
            Processes a mnemonic character.
            </summary>
            
            <returns>
            true if the character was processed as a mnemonic by the control; otherwise, false.
            </returns>
            
            <param name="charCode">The character to process. </param>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
            
            <returns>
            A <see cref="T:System.Drawing.Color"></see> that represents the background color of the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultBackColor"></see> property.
            </returns>
            <filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.DisplayRectangle">
            <summary>
            Gets the rectangle that represents the display area of the control.
            </summary>
            
            <returns>
            A <see cref="T:System.Drawing.Rectangle"></see> that represents the display area of the control.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.Font">
            <summary>
            Gets or sets the <see cref="P:JetBrains.UI.RenderParams.Font"/> proeprty of the <see cref="P:JetBrains.UI.Controls.RichTextLabel.RenderParams"/>.
            </summary>
            
            <returns>
            The <see cref="T:System.Drawing.Font"></see> to apply to the text displayed by the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultFont"></see> property.
            </returns>
            <filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.ForeColor">
            <summary>
            Gets or sets the foreground color of the control.
            </summary>
            
            <returns>
            The foreground <see cref="T:System.Drawing.Color"></see> of the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultForeColor"></see> property.
            </returns>
            <filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
            
            <returns>
            The text associated with this control.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:JetBrains.UI.Controls.RichTextView">
            <summary>
            When a rich text string is in the datacontext, presents it with <see cref="T:JetBrains.UI.Controls.RichTextPresenter" />.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.RunBindable">
            <summary>
            A text element whose text value can be bound to a property.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RunBindable.#ctor">
            <summary>
            Initializes a new, default instance of the <see cref="T:System.Windows.Documents.Run"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RunBindable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Documents.Run"/> class, taking a specified string as the initial contents of the text run.
            </summary>
            <param name="text">A string specifying the initial contents of the <see cref="T:System.Windows.Documents.Run"/> object.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.RunBindable.GetForegroundProp">
            <summary>
            Creates and binds the property.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Separator.components">
            <summary>Required designer variable.</summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Separator.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Separator.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.Spacer">
            <summary>
            A spacer WinForms control to fill the unneeded space.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.Spacer.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            <returns>
            An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.
            </returns>
            <param name="proposedSize">The custom-sized area for a control. </param><filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.Controls.SplitedButton.DoubleClickedEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SplitedButton.AlwaysDropDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SplitedButton.AlwaysHoverChange">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SplitedButton.CalculateSplitRect">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SplitedButton.FillSplitHeight">
            <summary>
            Gets or sets a value indicating whether [fill split height].
            </summary>
            <value><c>true</c> if [fill split height]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:JetBrains.UI.Controls.SplitedButton.SplitHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SplitedButton.SplitWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SplitedButton.NormalImage">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SplitedButton.HoverImage">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SplitedButton.ClickedImage">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SplitedButton.DisabledImage">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.SplitedButton.FocusedImage">
            <summary>
            
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.SplitedButton.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.SplitedButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.SplitedButton.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.StringCollectionEdit.Caption">
            <summary>
            Caption above the strings list.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.StringCollectionEdit.ItemIcon">
            <summary>
            Icon for the items in the list.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.StringCollectionEdit.Items">
            <summary>
            Items in the editable list.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TableLayoutPanelColored">
            <summary>
            Changes the background without actually changing the backcolor, to avoid inheritance to children.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TableLayoutPanelColored.FillColor">
            <summary>
            Gets or sets the fill color that won't propagate to the children.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TableLayoutPanelColored.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the panel.
            </summary>
            
            <param name="args">A <see cref="T:System.Windows.Forms.PaintEventArgs"></see>  that contains information about the panel to paint.</param>
        </member>
        <member name="P:JetBrains.UI.Controls.TabStrip.TabStrip.PresentableItemMargin">
            <summary>
            Tab page can be drawn not directly from the rect bounds but with
            some spaces or margins. Without an account for these shifts, the
            presentable item will be drawn directly on the tab border.
            This margin shift the drawing of the presentable item and is accounted
            in the calculation of tab width;
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.ToolbarButton">
            <summary>
            Special nice button like in IDEA
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.MetroBusyIndicator">
            <summary>
            Represents light-weight control to visualize busy state of dialog or other control in its header
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.MetroBusyIndicator.IsBusy">
            <summary>
            Gets or sets whether TreeGrid is busy now
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.MetroBusyIndicator.IsBusyProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsBusy.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.MetroBusyIndicator.Delay">
            <summary>
            Gets or sets initial delay before busy indication
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.MetroBusyIndicator.BackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for Background.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.MetroBusyIndicator.IndicatorBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for IndicatorBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.MetroBusyIndicator.Velocity">
            <summary>
            Gets or sets milliseconds for the full cycle of the animation
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.MetroBusyIndicator.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. 
            The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">
            The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="T:JetBrains.UI.Controls.VirtualListBoxControl`2">
            <summary>
              Virtual list box control
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeListView.TreeListViewItemAutomationPeer">
            <summary>
            Represents UI automation peer to manupulate TreeListViewItem for testing purpose. 
            Supports ExpandCollapse, SelectionItem and ScrollItem control pattrns
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListViewItemAutomationPeer.#ctor(JetBrains.Application.UI.Controls.TreeListView.Contracts.INodeState,JetBrains.UI.Controls.TreeListView.TreeListView)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="nodeState">The node state of the item that is associated with this peer</param>
            <param name="tree">Parent tree</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListViewItemAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the <see cref="T:System.Windows.Controls.TreeViewItem"/> that is 
            associated with this <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>
            A string that contains "TreeViewItem".
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListViewItemAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the that is associated with this automation peer. This method is called by 
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType"/>.
            </summary>
            <returns>
            The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.TreeItem"/> enumeration value.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListViewItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern that is associated with this automation peer
            </summary>
            <returns>
            If <paramref name="patternInterface"/> is <see cref="F:System.Windows.Automation.Peers.PatternInterface.ScrollItem"/>, <see cref="F:System.Windows.Automation.Peers.PatternInterface.SelectionItem"/>, or <see cref="F:System.Windows.Automation.Peers.PatternInterface.ExpandCollapse"/>, this method returns the current instance; otherwise, it returns null.
            </returns>
            <param name="patternInterface">One of the enumeration values.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListViewItemAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements that is associated with this 
            <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren"/>.
            </summary>
            <returns>
            The collection of child elements.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListViewItemAutomationPeer.IsOffscreenCore">
            <summary>
            Gets a value that indicates whether the 
            control is out of screen
            </summary>
            <returns>
            true if the element is not on the screen; otherwise, false.
            </returns>
        </member>
        <member name="E:JetBrains.UI.Controls.TreeListView.TreeListView.ContextMenuRequested">
            <summary>
            Signals context menu request. Args provide coordinates for context menu location 
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeListView.TreeListView.myLastSelectedNode">
            <summary>
            Backup for <see cref="F:JetBrains.UI.Controls.TreeListView.TreeListView.SelectedItemProperty"/> because we need to compare nodes when selection changes, and object-to-node mapping is one-to-many.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListView.Select(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Selects nodes based on passed model objects    
            </summary>    
            <param name="items"></param>
            <remarks> The method is heavy weight and breaks lazy tree aceess since it invokes full model tree traversal in order to find path of objects </remarks>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListView.OnCreateAutomationPeer">
            <summary>
            Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> 
            implementations for the Windows Presentation Foundation (WPF) infrastructure.
            </summary>
            <returns>
            The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementation.
            </returns>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeListView.TreeListView.SelectedItemsDependencyProperty">
            <summary>
            A read-only dependency property which allows bind-reading selected items array. Defunct by default (because it's not very friendly with huge virtualized lists with large selections). To activate, raise <see cref="F:JetBrains.UI.Controls.TreeListView.TreeListView.IsSelectedItemsPropertyActiveProperty"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeListView.TreeListView.SelectedItemsProperty">
            <summary>
            A property for reading/writing multiselection.
            Defunct by default (because it's not very friendly with huge virtualized lists with large selections). To activate, raise <see cref="F:JetBrains.UI.Controls.TreeListView.TreeListView.IsSelectedItemsPropertyActiveProperty"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeListView.TreeListView.IsSelectedItemsPropertyActiveProperty">
            <summary>
            When <c>True</c>, <see cref="F:JetBrains.UI.Controls.TreeListView.TreeListView.SelectedItemsDependencyProperty"/> exposes the current multiselection of the list.
            <c>False</c> by default (because it's not very friendly with huge virtualized lists with large selections).
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeListView.TreeListView.IsSelectedItemsPropertyActive">
            <summary>
            When <c>True</c>, <see cref="F:JetBrains.UI.Controls.TreeListView.TreeListView.SelectedItemsDependencyProperty"/> exposes the current multiselection of the list.
            <c>False</c> by default (because it's not very friendly with huge virtualized lists with large selections).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListView.AsyncAutosizeColumns">
            <summary>
            The base grid view class fails to autosize its columns correctly when they're instantiated with templates, because this happens with a delay after the control is loaded.
            Here we help the list view measure the columns. Probably should be improved, because this way it has some, eh, visual glitches.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeListView.TreeListViewAutomationPeer">
            <summary>
            Represents UI automation peer to manupulate TreeListView for testing purpose. 
            Supports SelectionItem control patterns and child peers
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListViewAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type that is associated with this 
            <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType"/>.
            </summary>
            <returns>
            The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Custom"/> enumeration value.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListViewAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>
            An <see cref="F:System.String.Empty"/> string.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListViewAutomationPeer.GetNameCore">
            <summary>
            Gets the text label that is associated with this 
            <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer"/>.
            Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName"/>.
            </summary>
            <returns>
            The text label of the element that is associated with this automation peer.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListViewAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern that is associated with this 
            <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"/>.
            </summary>
            <returns>
            null.
            </returns>
            <param name="patternInterface">A value from the enumeration.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListViewAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements that is associated with this
            <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer"/>.
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren"/>.
            </summary>
            <returns>
            A list of child <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> elements.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Controls.TreeListView.TreeListViewAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
            <summary> 
                Returns the current selection. 
            </summary>
            <returns>The current selection.</returns> 
        </member>
        <member name="P:JetBrains.UI.Controls.TreeListView.TreeListViewColumn.DisplayMemberBinding">
            <summary>
            <para>Overrides the base <see cref="P:System.Windows.Controls.GridViewColumn.DisplayMemberBinding"/> property to fix the absence of <see cref="T:System.Windows.Controls.ContentPresenter"/> over the bound member.</para>
            <para>If you assign a binding to this property, it will be treated as an Automation Object, and the corresponding view will be applied. The base property will not be assigned, the <see cref="P:System.Windows.Controls.GridViewColumn.CellTemplate"/> will be set instead to use this binding.</para>
            <para>Do not set <see cref="P:JetBrains.UI.Controls.TreeListView.TreeListViewColumn.DisplayMemberBinding"/> together with <see cref="P:System.Windows.Controls.GridViewColumn.CellTemplate"/> or <see cref="P:System.Windows.Controls.GridViewColumn.CellTemplateSelector"/> properties, as they're mutually exclusive.</para>
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.TreeListView.TreeListViewItem.IsLocked">
            <summary>
            Gets or sets whether this item is locked from user interaction
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeListView.TreeListViewItem.IsLockedProperty">
            <summary>
            Using a DependencyProperty as the backing store for Expandable.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.TreeListView.TreeListViewWithDataContext.SelectedItem">
            <summary>
            If selection is not empty, gives out any selected item.
            Eventually, focused item should be preferred out of the selection.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.UIElementWindowlessControl">
            <summary>
            A jet windowless control to paint an UI Element.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.WindowlessControl">
            <summary>
            Helper class for various <see cref="T:JetBrains.Application.UI.Controls.IWindowlessControl"/> implementations.
            Mostly, dispatches the creation of various windowless controls for optimal performance.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.WindowlessControlElement">
            <summary>
            Renders an <see cref="T:JetBrains.Application.UI.Controls.IWindowlessControl"/>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.WindowlessControlElement.myFArrangeOverride">
            <summary>
            Switchable implementation that's activated only when we have a presentation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.WindowlessControlElement.myFMeasureOverride">
            <summary>
            Switchable implementation that's activated only when we have a presentation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.WindowlessControlElement.myFRender">
            <summary>
            Switchable implementation that's activated only when we have a presentation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.WindowlessControlElement.AlphaChannel">
            <summary>
            Gets or sets whether the windowless control will be rendered with an alpha channel or not.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.WindowlessControlElement.Presentation">
            <summary>
            Sets the presentation for the UI element. Get collapsed on <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.WindowlessControlElement.TooltipRequested">
            <summary>
            Fires when we're queried for a tooltip.
            Retranslates the WPF <see cref="F:JetBrains.UI.SrcView.Tooltips.Avalon.AvalonTooltipManagerComponent.GetJetTooltipEvent"/> event intercepted on the windowless control element level.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.WindowlessControlElement.InitTooltips">
            <summary>
            Tooltips support thru <see cref="T:JetBrains.Application.UI.Tooltips.ITooltipManager"/> and <see cref="F:JetBrains.UI.SrcView.Tooltips.Avalon.AvalonTooltipManagerComponent.GetJetTooltipEvent"/> and <see cref="F:JetBrains.UI.Controls.WindowlessControlElement.TooltipRequested"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.DefaultSupportUpdates">
            <summary>
            By default any UI application supports automatic updates, but does not show Updates option page.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Internal.TestUpdatesXsltDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Internal.TestUpdatesXsltDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Updates.Internal.TestUpdatesXsltDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.IProductModeDescriptor">
            <summary>
            Extension point for ProductMode and Version customization
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.Xslt.UpdateFilterRunner">
            <summary>
            Runs the updates filter script downloaded from the server.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdateFilterRunner.RunFilter(System.IO.Stream,System.Action{System.Xml.XmlWriter},JetBrains.UI.Updates.Xslt.UpdateXsltTestResult)">
            <summary>
            Runs the remote-received Updates filter data against the local configuration.
            Returns the list of products that pass the filter.
            </summary>
            <param name="streamFilter">XSLT filter, as received from the server.</param>
            <param name="FWriteLocalEnvironmentData">The func to write the XML DOC to run the <paramref name="streamFilter"/> against.</param>
            <param name="testResult"></param>
            <returns>The list of updates available for our instance.</returns>
        </member>
        <member name="T:JetBrains.UI.Updates.Xslt.UpdateInfo">
            <summary>
            Data about individual updates available for the current product.
            A collection of such structs is the output of the check-for-updates subsystem.
            Note: fields serialized as elements for the ease of XSLT processing, as we can add a new element to the parent scope at any time.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.RootElementName">
            <summary>
            Root element of the document containing a collection of <see cref="T:JetBrains.UI.Updates.Xslt.UpdateInfo"/> structures.
            The children of those element should be of the <see cref="T:JetBrains.UI.Updates.Xslt.UpdateInfo"/> type, in the XML Serializer sense.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.CompanyName">
            <summary>
            <para>Vendor name.</para>
            <para><see cref="F:JetBrains.Application.CompanyInfo.Name"/> for JetBrains products.</para>
            <para>MUST be present.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.Description">
            <summary>
            A freehand description of this update.
            <para>Optional.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.DownloadUri">
            <summary>
            <para>The URI from which the installation package could be download. This MUST be the direct download link, not the download HTML page (see <see cref="F:JetBrains.UI.Updates.Xslt.UpdateInfo.InformationUri"/> for that), as the updater might use it for fetching the installation package.</para>
            <para>This URI need not be unique and could point to the same versionless verbatim for any most recent release builds.</para>
            <para>Optional.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.IconData">
            <summary>
            <para>A BASE64 stream with a serialized <see cref="T:System.Drawing.Bitmap"/> to be displayed as an icon for this update.</para>
            <para>Optional.</para>
            </summary>
        </member>
        <member name="P:JetBrains.UI.Updates.Xslt.UpdateInfo.Identity">
            <summary>
            Gets the Identity of this instance, which is the <see cref="F:JetBrains.UI.Updates.Xslt.UpdateInfo.InformationUri"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.InformationUri">
            <summary>
            <para>The identity of this update. A link to the online information page for this particular update. MUST be unique among ALL updates — not only those currently available, but also any past and future ones.</para>
            <para>MUST be present.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.IsFree">
            <summary>
            <para>Whether this will be a free update.</para>
            <para>If <c>True</c>, then the customer will not have to pay for the product.</para>
            <para>If <c>False</c>, then the upgrade MIGHT require a license.</para>
            <para>Optional.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.PriceTag">
            <summary>
            <para>If the pricing information is available for the product, specifies the price tag in freehand form.</para>
            <para><see cref="F:JetBrains.UI.Updates.Xslt.UpdateInfo.IsFree"/> should be used for free upgrades instead.</para>
            <para>Optional.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.ProductFullName">
            <summary>
            <para>Full name of the product installed by this update, which includes the product name plus any marketing version. This should not include the company name.</para>
            <para><see cref="!:IApplicationDescriptor.ProductFullName"/> for JetBrains products.</para>
            <para><see cref="F:JetBrains.UI.Updates.Xslt.UpdateInfo.ProductName"/> will be used if not specified.</para>
            <para>Optional.</para>
            </summary>
            <example><c>ReSharper 2.5.1</c></example>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.ProductName">
            <summary>
            <para>Short name of the product installed by this update. This should include neither company name nor version number.</para>
            <para><see cref="!:IApplicationDescriptor.ProductName"/> for JetBrains products.</para>
            <para>MUST be present.</para>
            </summary>
            <example><c>ReSharper</c></example>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.ProductVersion">
            <summary>
            <para>The four-component technical version of the product installed by this update.</para>
            <para>MUST be present.</para>
            </summary>
            <example><c>4.5.1234.17</c></example>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.ReservedA">
            <summary>
            All custom attributes go in here.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.ReservedE">
            <summary>
            All custom elements go in here.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.Title">
            <summary>
            <para>Short title for the update.</para>
            <para>MUST be present.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.UpdateKind">
            <summary>
            <para>The kind of the update, see <see cref="T:JetBrains.UI.Updates.Xslt.UpdateInfo.PredefinedUpdateKinds"/> for recognized values.</para>
            <para>The predefined values are replaced with display text when presented, and custom values are presented as is.</para>
            <para>Optional.</para>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.Xslt.UpdateInfo.PredefinedUpdateKinds">
            <summary>
            <see cref="F:JetBrains.UI.Updates.Xslt.UpdateInfo.UpdateKind"/> recognized values.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.PredefinedUpdateKinds.Service">
            <summary>
            This is a service update and it's generally for fixing the bugs.
            </summary>
            <example><c>ReSharper 3.0.1</c> after <c>ReSharper 3.0</c></example>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.PredefinedUpdateKinds.Features">
            <summary>
            This is a new release that includes new features.
            </summary>
            <example><c>ReSharper 4.0</c> after <c>ReSharper 3.0</c></example>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfo.PredefinedUpdateKinds.Preview">
            <summary>
            This is a prerelease build, quality questionable.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.Xslt.UpdateInfoContainer">
            <summary>
            <para>While <see cref="T:JetBrains.UI.Updates.Xslt.UpdateInfo"/> is the class that's downloaded from the server, this class wraps it and stores locally, along with additional info like whether it were shown to the user, or were ignored.</para>
            <para><see cref="P:JetBrains.UI.Updates.Xslt.UpdateInfo.Identity"/> is the identity. The <see cref="T:JetBrains.UI.Updates.Xslt.UpdateInfo"/> is replaced on each new download.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.InitialSnoozeInterval">
            <summary>
            When the update is first downloaded, its <see cref="F:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.SnoozeInterval"/> is assumed to be <see cref="F:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.InitialSnoozeInterval"/>.
            On each next snooze, <see cref="M:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.Snooze"/> adjusts the <see cref="F:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.SnoozeInterval"/> to have a new value.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.AdvertiseAfter">
            <summary>
            <para>The update popup should not be displayed before this date (UTC).</para>
            <para>Used for snoozing the update notifications on the local machine.</para>
            <para>Initially <c>Null</c>, then set by <see cref="M:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.Snooze"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.Category">
            <summary>
            The owning category.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.Data">
            <summary>
            The update info, as downloaded from the server.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.DataProperty">
            <summary>
            The update info, as downloaded from the server.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.Identity">
            <summary>
            Identity for this update, as taken from <see cref="P:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.Data"/>-><see cref="P:JetBrains.UI.Updates.Xslt.UpdateInfo.Identity"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.SnoozeInterval">
            <summary>
            <para>Recommended interval for the next snooze.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.CreateViewWinForms(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus,JetBrains.Application.UI.Components.IUIApplication)">
            <summary>
            Creates a WinForms view for this update.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.Snooze">
            <summary>
            Snoozes the <see cref="F:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.AdvertiseAfter"/> value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.Snooze(System.TimeSpan)">
            <summary>
            Snoozes the <see cref="F:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.AdvertiseAfter"/> value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.ReadFromStream(JetBrains.UI.Updates.Xslt.UpdatesCategory,System.Xml.XmlReader)">
            <summary>
            Creates a category when a new one is added (by user).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdateInfoContainer.Equals(JetBrains.UI.Updates.Xslt.UpdateInfoContainer)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.UI.Updates.Xslt.UpdatesCategory">
            <summary>
            A single category of updates that manages the updates for a single product.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.CheckForUpdatesInterval">
            <summary>
            Interval between automatic check-for-update attempts.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.CustomizeLocalEnvironmentInfo">
            <summary>
            <para>When the updates manager is about to check for updates for this updates category, it collects the information about the local environment. The downloaded filter will be applied to this data. This event allows to replace or alter this information before it's used.</para>
            <para>Initially, it's of the <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> type, as gotten from the <see cref="F:JetBrains.UI.Updates.UpdatesManager.LocalEnvironmentInfo"/>. You could change it to a serializable object of an arbitrary type.</para>
            <para>This event should be advised on each shell startup.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.CustomizeQueryStringParams">
            <summary>
            <para>When the updates manager checks for updates, it downloads the XSLT filter from <see cref="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.UpdatesFilterUri"/>, plus some optional query string parameters that identify the local environment, if needed. This event allows to replace or alter this information before it's used.</para>
            <para>Initially, it's gotten from the <see cref="F:JetBrains.UI.Updates.UpdatesManager.LocalEnvironmentInfo"/> <see cref="M:JetBrains.UI.Updates.UpdatesLocalInfoManager.CollectQueryStringParams(System.Object)"/>, called of the <see cref="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.CustomizeLocalEnvironmentInfo"/> result. You could change or replace the key-value pairs dictionary.</para>
            <para>This event should be advised on each shell startup.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.IsActive">
            <summary>
            Whether the category is active, can download and display updates. This property is not persisted and must be set to <c>True</c> on each new Shell run. Otherwise, the owning code is considered unloaded (eg plugin) and the updates are suppressed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.LastActivationDate">
            <summary>
            The moment this category was activated (<see cref="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.IsActive"/> = <c>True</c>) last time.
            Will be cleaned up if unused for a long time.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.LastDownloadAttemptDate">
            <summary>
            Previous download attempt for this category.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.LastDownloadSummary">
            <summary>
            Summary on the last download attempt. Freehand text.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.LastSuccessfulDownloadDate">
            <summary>
            The moment this category could download from <see cref="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.UpdatesFilterUri"/> last time.
            Will be cleaned up if failed for a long time.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Updates.Xslt.UpdatesCategory.LastSuccessfulDownloadVersion">
            <summary>
            The build number of the product that successfully downloaded this category.
            Update notifications should not be displayed for the category until there's a successful download by the current product version, to make sure the updates list is still relevant.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.Name">
            <summary>
            The identity of the category.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.UpdateInfos">
            <summary>
            The list of available updates. Custom serialization protocol.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.UpdatesFilterUri">
            <summary>
            The URI to download the updates filter from. The filter is an XSLT sciript that's run against the collected local environment information to determine which updates are applicable and emit the list of those.  // TODO: details
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdatesCategory.CollectLocalEnvironmentInfo">
            <summary>
            <para>When the updates manager is about to check for updates for this updates category, it collects the information about the local environment. The downloaded filter will be applied to this data. Collects this data first from the <see cref="F:JetBrains.UI.Updates.UpdatesManager.LocalEnvironmentInfo"/>, then applying the <see cref="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.CustomizeLocalEnvironmentInfo"/> customizations to it.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdatesCategory.IsEligibleForNotifications">
            <summary>
            Checks if update notifications could be displayed for this cat to the end user.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdatesCategory.RegisterDownloadResult(System.Boolean,System.String,JetBrains.UI.Updates.Xslt.UpdateInfo[])">
            <summary>
            After downloading new update info for this cat, registers the success or failure.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdatesCategory.CreateByUser(JetBrains.UI.Updates.UpdatesManager,System.String,System.Uri)">
            <summary>
            Creates a category when a new one is added (by user).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdatesCategory.ReadFromStream(JetBrains.UI.Updates.UpdatesManager,System.Xml.XmlReader)">
            <summary>
            Creates a category when a new one is added (by user).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdatesCategory.WriteToStream(System.Xml.XmlWriter)">
            <summary>
            Serialzation.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdatesCategory.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.Updates.Xslt.UpdatesCategory.LocalEnvironmentInfo">
            <summary>
            Collects info about the local environment against which the updates are checked.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.LocalEnvironmentInfo.FilterableData">
            <summary>
            Filterable data that describes the product on the local machine. The XSLT received from the updates server should be run against this data (<see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> or any customizations by the <see cref="T:JetBrains.UI.Updates.Xslt.UpdatesCategory"/> owner thru the <see cref="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.CustomizeLocalEnvironmentInfo"/>) in its XML representation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.LocalEnvironmentInfo.QueryString">
            <summary>
            The query string for the URI to download the updates from, as extracted from the main data (<see cref="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.LocalEnvironmentInfo.FilterableData"/>), could be customized with <see cref="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.CustomizeQueryStringParams"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdatesCategory.LocalEnvironmentInfo.WriteFilterableData(System.Xml.XmlWriter)">
            <summary>
            Writes <see cref="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.LocalEnvironmentInfo.FilterableData"/> into XML.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.Xslt.UpdatesDownloaderSession">
            <summary>
            Manages retrieving the updates info data stream, and schedulling such updates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdatesDownloaderSession.BeginRun">
            <summary>
            Initiates the download, promises to self-dispose when done.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdatesDownloaderSession.TestRun">
            <summary>
            Sync. Runs update session
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdatesDownloaderSession.BeginRun_Worker(JetBrains.UI.Updates.Xslt.UpdatesCategory.LocalEnvironmentInfo,JetBrains.UI.Updates.Xslt.UpdateXsltTestResult)">
            <summary>
            Runs on another thread.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.Xslt.UpdatesManagerCategories">
            <summary>
            Implements <see cref="F:JetBrains.UI.Updates.UpdatesManager.Categories"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdatesManagerCategories.Add(System.String,System.Uri)">
            <summary>
            <para>Creates and adds a new category. Throws if the category already exists. A newly-created category is active by default.</para>
            <para>The use of other <c>Add</c> overloads is prohibited.</para>
            </summary>
            <param name="name">Name for the category. Must be unique.</param>
            <param name="uriUpdatesFilter">The URI to download the updates filter from. The filter is an XSLT sciript that's run against the collected local environment information to determine which updates are applicable and emit the list of those.  // TODO: details</param>
        </member>
        <member name="M:JetBrains.UI.Updates.Xslt.UpdatesManagerCategories.AddOrActivate(System.String,System.Uri)">
            <summary>
            <para>Creates and adds a new category, if it does not exist yet. If the category with such a name already exists, updates the <see cref="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.UpdatesFilterUri"/> with the given value and activates the category by setting its <see cref="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.IsActive"/> to <c>True</c>. A newly-created category is active by default.</para>
            <para>The use of other <c>Add</c> overloads is prohibited.</para>
            </summary>
            <param name="name">Name for the category. Must be unique.</param>
            <param name="uriUpdatesFilter">The URI to download the updates filter from. The filter is an XSLT sciript that's run against the collected local environment information to determine which updates are applicable and emit the list of those.  // TODO: details</param>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo">
            <summary>
            Base class for the data about the local environment against which the updates consider their applicability.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DateTimeSubInfo">
            <summary>
            Extensive date components to have them available for queries in the XML form.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DateTimeSubInfo.Date">
            <summary>
            The date only in the standard ISO 8601 format.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DateTimeSubInfo.DateTime">
            <summary>
            The date-time in the standard ISO 8601 format.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DateTimeSubInfo.Days2000">
            <summary>
            For the ease of comparison, the date as a single integer: the number of days since Jan 1, 2000.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DateTimeSubInfo.DateInt">
            <summary>
            For the ease of comparison, the date as a single integer: YYYYMMDD.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DateTimeSubInfo.Time">
            <summary>
            The time only in the standard ISO 8601 format.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo">
            <summary>
            Extensive version components to have them available for queries in the XML form.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo.Build">
            <summary>
            The single version component.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo.Dot2">
            <summary>
            Four-component version string, <c>Major.Minor</c> format, eg <c>1.2</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo.Dot3">
            <summary>
            Four-component version string, <c>Major.Minor.Build</c> format, eg <c>1.2.3</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo.Dot4">
            <summary>
            Four-component version string, <c>Major.Minor.Build.Revision</c> format, eg <c>1.2.3.4</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo.Major">
            <summary>
            The single version component.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo.Minor">
            <summary>
            The single version component.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo.Revision">
            <summary>
            The single version component.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesLocalInfoManager">
            <summary>
            Child of <see cref="T:JetBrains.UI.Updates.UpdatesManager"/>.
            Manages the local environment info that takes part in the Update process.
            Collects <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/>, forms the Web request query string.
            Override this component to add more data to the collected local info.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesLocalInfoManager.CollectLocalEnvironmentInfo">
            <summary>
            Collects the info about the local environment.
            Updates are conditional against its properties, such as the product version.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesLocalInfoManager.CollectQueryStringParams">
            <summary>
            Out of the <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> for the current environment, collects those parameters that should go into the query string on the server requests.
            </summary>
            <returns>Name-value pairs collection.</returns>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesLocalInfoManager.CollectQueryStringParams(System.Object)">
            <summary>
            Out of the given <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> variation for the current environment, collects those parameters that should go into the query string on the server requests.
            </summary>
            <returns>Name-value pairs collection.</returns>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesLocalInfoManager.CollectQueryStringParams_Walk(System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Walks the <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> structs with reflection.
            Picks <see cref="T:JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute"/>-ed fields as params, recurses into <see cref="T:JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringContainerAttribute"/> fields only. Param names are container names plus field name.
            </summary>
            <param name="container">The current container to walk.</param>
            <param name="bag">Target bag.</param>
            <param name="sPrefixWithDot">Container-induced prefix for the field names, eg <c>Product.Version.</c> in <c>Product.Version.Major</c> param name.</param>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringContainerAttribute">
            <summary>
            In the <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> and alike, denotes the fields whose members we should check for <see cref="T:JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute">
            <summary>
            Specifies that this field of <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> should be included with the UpdateInfo Web request query string.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesManager.ShellProductCategoryName">
            <summary>
            <para>Name of the default category in which the Shell product updates are listed.</para>
            <para>Plugins should use categories with different names.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesManager.Categories">
            <summary>
            <para>Gets the list of update categories. Each one downloads its own list of available updates, and supports a single product.</para>
            <para>The default category, <see cref="F:JetBrains.UI.Updates.UpdatesManager.Categories"/>.<see cref="P:JetBrains.UI.Updates.UpdatesManager.ShellProductCategory"/>, is guaranteed to exist. Other categories could be added by plugins, as needed. They're persisted by the manager in the product settings, so normally you do not have to create it each time. However, it could be deleted if the settings are lost, if the updates URI is dead for some time, or if it is not activated for some time.</para>
            <para>On startup, you should activate your category with <see cref="F:JetBrains.UI.Updates.Xslt.UpdatesCategory.IsActive"/> for it to check for new updates and report them, otherwise it will consider the owner to be inactive or unloaded, hibernate, and expire after some time.</para>
            <para>To create a new category</para>
            </summary>
        </member>
        <member name="P:JetBrains.UI.Updates.UpdatesManager.ShellProductCategory">
            <summary>
            <para>Gets the default <see cref="T:JetBrains.UI.Updates.UpdatesManager"/> <see cref="T:JetBrains.UI.Updates.Xslt.UpdatesCategory"/> for the product currently running the Shell.</para>
            <para>May be missing if there are no updates for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesManager.IsDownloadUpdateDataAllowed">
            <summary>
            Whether to download the data for new updates.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesManager.LocalEnvironmentInfo">
            <summary>
            Child of <see cref="T:JetBrains.UI.Updates.UpdatesManager"/>.
            Manages the local environment info that takes part in the Update process.
            Collects <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/>, forms the Web request query string.
            Override this component to add more data to the collected local info.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesManager.RunUpdatesFilter(System.IO.Stream,System.Action{System.Xml.XmlWriter},JetBrains.UI.Updates.Xslt.UpdateXsltTestResult)">
            <summary>
            Runs the remote-received Updates filter data against the local configuration.
            Returns the list of update products that pass the filter.
            </summary>
            <param name="streamFilter">XSLT filter, as received from the server.</param>
            <param name="FWriteLocalEnvironmentData">The func to write the XML DOC to run the <paramref name="streamFilter"/> against.</param>
            <param name="result"></param>
            <returns>The list of updates available for our instance.</returns>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesManager.Init_Download_Deferred(JetBrains.Application.Communication.WebProxySettingsReader)">
            <summary>
            Called from <see cref="M:JetBrains.UI.Updates.UpdatesManager.Init_Download(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Communication.WebProxySettingsReader)"/>, after some time passes. Let plugins reg/activate their categories, and let the startup activities ceise.
            </summary>
            <param name="webProxySettingsReader"></param>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesPage">
            <summary>
            Options page for product updates.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesOptionsPageProvider">
            <summary>
            Adds the “Updates” page to the Options dialog if updates are supported.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesOptionsPageProvider.IsEnabled">
            <summary>
            Allows to disable the auto-adding of the options page.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindingsFactoryUiInteractive">
            <summary>
            Interactive impl for Avalon.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindings">
            <summary>
              <para>Viewmodel object which backs attaching <see cref="P:System.Windows.UIElement.CommandBindings">WPF Command Bindings</see> for <see cref="T:JetBrains.Application.UI.Actions.ActionManager.IActionManager">Action Manager</see> <see cref="T:JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction">actions</see>.</para>
              <para>Expose this object from the view model to fulfil the seps described in <see cref="T:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindingsBehavior" /> docs.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindings.myAttachedViews">
            <summary>
            NOTE: because the behavior uses attached proeprties, it's hard to implement proper lifetiming in there. We'd just keep track of views without holding them on hard references.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindings.GetCommand(JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithId)">
            <summary>
              <para>Creates a new command corresponding to the action, and registers the command bindings on the view element to which the <see cref="T:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindingsBehavior" /> is applied.</para>
              <para>Safe to call multiple times.</para>
            </summary>
        </member>
        <member name="T:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindingsBehavior">
            <summary>
            <para>Sets up the view element which attaches <see cref="P:System.Windows.UIElement.CommandBindings">WPF Command Bindings</see> for <see cref="T:JetBrains.Application.UI.Actions.ActionManager.IActionManager">Action Manager</see> <see cref="T:JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction">actions</see>.</para>
            <para>To set up the infrastructure for handling Action Manager actions as WPF Commands:</para>
            <para>• In the viewmodel, create and expose an instance of <see cref="T:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindings"/>.</para>
            <para>• On the view element which should define the bindings (one parenting all of the command-using elements), set the <see cref="T:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindingsBehavior"/> behavior's <see cref="F:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindingsBehavior.DefineProperty"/> attached dependency property.</para>
            <para>• In the viewmodel, get a command for each action you need and expose to the view.</para>
            <para>• In the view, use the command as usual (must be within the element with the behavior).</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindingsBehavior.DefineProperty">
            <summary>
            <para>Takes part in attaching <see cref="P:System.Windows.UIElement.CommandBindings">WPF Command Bindings</see> for <see cref="T:JetBrains.Application.UI.Actions.ActionManager.IActionManager">Action Manager</see> <see cref="T:JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction">actions</see>.</para>
            <para>Set this attached dependency property on a view element to fulfil the steps described in <see cref="T:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindingsBehavior"/> docs.</para>
            </summary>
        </member>
        <member name="T:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerContextMenuBehavior">
            <summary>
            <para>Sets up a WPF element to show a context menu based on a specific <see cref="T:JetBrains.Application.UI.Actions.ActionManager.IActionManager">Action Manager</see> action group.</para>
            <para>The menu is populated with actions from the group, whose presentation and availability are updated based on the current context.</para>
            <para>To set up the infrastructure, fulfil the following steps:</para>
            <para>• In the view model, create and expose an instance of <see cref="T:JetBrains.Application.UI.Actions.ActionManager.ActionManagerContextMenu"/>.</para>
            <para>• On the view element which should show the menu (i.e. on which you would have defined the <see cref="F:System.Windows.FrameworkElement.ContextMenuProperty"/> property), set the <see cref="T:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerContextMenuBehavior"/> behavior's </para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerContextMenuBehavior.StateProperty">
            <summary>
            Service property to support lifetiming of the view
            </summary>
        </member>
        <member name="T:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerRoutedUICommand">
            <summary>
              <para>Exposes an <see cref="T:JetBrains.Application.UI.Actions.ActionManager.IActionManager" />'s <see cref="T:JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction" /> as a <see cref="T:System.Windows.Input.RoutedUICommand" /> for Avalon bindings.</para>
              <para>See <see cref="T:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindingsBehavior" /> for instructions on how to wire up WPF commands over Action Manager actions.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerRoutedUICommand.Create(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithId,JetBrains.Application.UI.ActionsRevised.Shortcuts.IActionShortcuts,JetBrains.Application.UI.Actions.ActionManager.IActionManager,JetBrains.Application.Threading.IThreading)">
            <summary>
              <para>Helper method. Internal use only.</para>
              <para>See <see cref="T:JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindingsBehavior" /> for instructions on how to wire up WPF commands over Action Manager actions.</para>
            </summary>
            <param name="lifetime"></param>
            <param name="action"></param>
            <param name="shortcutman"></param>
            <param name="actionManager"></param>
            <param name="threading"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.UI.ActionSystem.Actions.ExpandCollapse.IExpandCollapseProvider">
            <summary>
            Implement this interface to use standard expand/collapse actions
            </summary>
        </member>
        <member name="T:JetBrains.UI.ActionSystem.Actions.Internal.ThrowManyExceptionsView">
            <summary>
            ThrowManyExceptionsView
            </summary>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.Actions.Internal.ThrowManyExceptionsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionBarWinForms.JetBrains#UI#Theming#IHaveResolution#Resolution">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionStripSplitButton.Checked">
            <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripButton"></see> is pressed or not pressed.</summary>
            <returns>true if the <see cref="T:System.Windows.Forms.ToolStripButton"></see> is pressed in or not pressed in; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionStripSplitButton.CheckOnClick">
            <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripButton"></see> should automatically appear pressed in and not pressed in when clicked.</summary>
            <returns>true if the <see cref="T:System.Windows.Forms.ToolStripButton"></see> should automatically appear pressed in and not pressed in when clicked; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionStripSplitButton.CheckState">
            <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripButton"></see> is in the pressed or not pressed state by default, or is in an indeterminate state.</summary>
            <returns>One of the <see cref="T:System.Windows.Forms.CheckState"></see> values. The default is Unchecked.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="T:System.Windows.Forms.CheckState"></see> values. </exception>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionStripSplitButton.OnClick(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.Click"></see> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionStripSplitButton.OnCheckedChanged(System.EventArgs)">
            <summary>Raises the <see cref="!:CheckedChanged"></see> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionStripSplitButton.OnCheckStateChanged(System.EventArgs)">
            <summary>Raises the <see cref="!:CheckStateChanged"></see> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.UI.ActionSystem.ActionBar.Legacy.ThemedStripComboBox.InternalCustomComboBox.ColorTheme">
            <summary>
            Gets or sets used Color Theme
            </summary>
        </member>
        <member name="T:JetBrains.UI.ActionSystem.ActionBar.Legacy.IThemedStripItem">
            <summary>
            Interface for item which supports theming
            </summary>
        </member>
        <member name="T:JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerAvalonEx">
            <summary>
            WPF-related helpers for <see cref="T:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager"/>.
            </summary>
            <seealso cref="T:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManagerEx"/>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerAvalonEx.AttachPopupMenuToAvalonElement(JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager,JetBrains.DataFlow.Lifetime,System.Windows.FrameworkElement,System.String,JetBrains.Application.Threading.IThreading)">
            <summary>
            Starts listening for the context menu event, shows the menu when requested.
            </summary>
            <param name="thіs">Object.</param>
            <param name="lifetime"></param>
            <param name="element">The WPF element originating the menu and providing the data context.</param>
            <param name="sActionGroupId">ID of the action group of the menu.</param>
            <param name="threading"></param>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerAvalonEx.AttachPopupMenuToAvalonElement_AutomaticScoping(JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager,JetBrains.DataFlow.Lifetime,System.Windows.FrameworkElement,System.String,JetBrains.Application.Threading.IThreading)">
            <summary>
            Starts listening for the context menu event, shows the menu when requested .
            </summary>
            <param name="thіs">Object.</param>
            <param name="lifetime"></param>
            <param name="element">The WPF element originating the menu.</param>
            <param name="sActionGroupId">ID of the action group of the menu.</param>
            <param name="threading"></param>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerAvalonEx.ShowPopupMenuInAvalonElement(JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager,JetBrains.DataFlow.Lifetime,JetBrains.Application.Threading.IThreading,System.Windows.UIElement,System.String,System.Windows.Point,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule}})">
            <summary>
            WPF specific overload.
            </summary>
            <param name="thіs">Object.</param>
            <param name="lifetime"></param>
            <param name="threading"></param>
            <param name="element">The WPF element originating the menu. It's used for (1) populating the data context for query-statusing and executing the actions and (2) calculating screen point from <paramref name="ptClient">client point</paramref> relatively to the control.</param>
            <param name="sActionGroupId">ID of the action group of the menu.</param>
            <param name="ptClient">Menu position, in client coordinates of the <paramref name="element"/>.</param>
            <param name="overridedFGetDataRule">Optional, to customize which data rules to use to create data context</param>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerAvalonEx.ShowPopupMenuInAvalonElement(JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager,JetBrains.DataFlow.Lifetime,JetBrains.Application.Threading.IThreading,System.Windows.UIElement,System.Type,System.Windows.Point,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule}})">
            <summary>
            WPF specific overload.
            </summary>
            <param name="thіs">Object.</param>
            <param name="lifetime"></param>
            <param name="threading"></param>
            <param name="element">The WPF element originating the menu. It's used for (1) populating the data context for query-statusing and executing the actions and (2) calculating screen point from <paramref name="ptClient">client point</paramref> relatively to the control.</param>
            <param name="sActionGroupType">Type of the action group of the menu.</param>
            <param name="ptClient">Menu position, in client coordinates of the <paramref name="element"/>.</param>
            <param name="overridedFGetDataRule">Optional, to customize which data rules to use to create data context</param>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerAvalonEx.CreateActionBarForAvalonControl(JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager,JetBrains.DataFlow.Lifetime,System.String,System.Windows.UIElement)">
            <summary>
            <para>Creates an <see cref="T:JetBrains.Application.UI.Actions.ActionManager.IActionManager"/>-driven toolbar to be hosted in Avalon controls with <see cref="T:JetBrains.Application.DataContext.IDataContext">data contexts</see> collected from Avalon controls.</para>
            </summary>
            <param name="thіs">Creator.</param>
            <param name="lifetime">Limiting lifetime for toolbar activities.</param>
            <param name="sActionGroupId">ID of the actions group whose actions should be presented as toolbar buttons.</param>
            <param name="contextparent">
            <para>Outermost control hosting the whole setup with toolbar and payload content controls.</para>
            <para>For example, in a tool window that would be your content element. In a window, that would be the window content element. Usually the returned action bar UI element is parented by the context parent.</para>
            <para>When keyboard focus is within the context parent, the focused element defines the data context (it's collected by bubbling from the focused element and collecting all the available data rules/constants).</para>
            <para>When keyboard focus is not within, the logical focus context is used for gathering data context, which is basically the most recently keyboard-focused element (or, rather, which element would get focused when keyboard focus returns to the window). This allows for keeping the window-local action buttons enabled on the toolbar even when focus is not in the window itself.</para>
            <para>To implement this, <see cref="F:System.Windows.Input.FocusManager.IsFocusScopeProperty"/> is set to <c>True</c> on <paramref name="contextparent"/>.</para>
            </param>
            <returns>The toolbar as a UI element.</returns>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerAvalonEx.CreateActionBarForAvalonControl_AutomaticScoping(JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager,JetBrains.DataFlow.Lifetime,System.String)">
            <summary>
            <para>Creates an <see cref="T:JetBrains.Application.UI.Actions.ActionManager.IActionManager"/>-driven toolbar to be hosted in Avalon controls with <see cref="T:JetBrains.Application.DataContext.IDataContext">data contexts</see> collected from Avalon controls.</para>
            <para>The UI element to collect data rules again is chosen with the <see cref="T:System.Windows.Input.FocusManager"/>: it is the focused element in the focus scope which contains the toolbar itself. Normally, it would be a window, or a toolwindow, etc.</para>
            <para>When keyboard focus is actually within this scope, the focused element defines the data context (it's collected by bubbling from the focused element and collecting all the available data rules/constants).</para>
            <para>When keyboard focus is not within, the logical focus context is used for gathering data context, which is basically the most recently keyboard-focused element (or, rather, which element would get focused when keyboard focus returns to the window). This allows for keeping the window-local action buttons enabled on the toolbar even when focus is not in the window itself.</para>
            <para>If you want to limit the scope, set <see cref="F:System.Windows.Input.FocusManager.IsFocusScopeProperty"/> to <c>True</c> on the appropriate container.</para>
            </summary>
            <param name="thіs">Creator.</param>
            <param name="lifetime">Limiting lifetime for toolbar activities.</param>
            <param name="sActionGroupId">ID of the actions group whose actions should be presented as toolbar buttons.</param>
            <returns>The toolbar as a UI element.</returns>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerAvalonEx.CreateActionMenuForAvalonControl_AutomaticScoping(JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager,JetBrains.DataFlow.Lifetime,System.String)">
            <summary>
            <para>Creates an <see cref="T:JetBrains.Application.UI.Actions.ActionManager.IActionManager"/>-driven menu to be hosted in Avalon controls with <see cref="T:JetBrains.Application.DataContext.IDataContext">data contexts</see> collected from Avalon controls.</para>
            <para>The UI element to collect data rules again is chosen with the <see cref="T:System.Windows.Input.FocusManager"/>: it is the focused element in the focus scope which contains the toolbar itself. Normally, it would be a window, or a toolwindow, etc.</para>
            <para>When keyboard focus is actually within this scope, the focused element defines the data context (it's collected by bubbling from the focused element and collecting all the available data rules/constants).</para>
            <para>When keyboard focus is not within, the logical focus context is used for gathering data context, which is basically the most recently keyboard-focused element (or, rather, which element would get focused when keyboard focus returns to the window). This allows for keeping the window-local action buttons enabled on the toolbar even when focus is not in the window itself.</para>
            <para>If you want to limit the scope, set <see cref="F:System.Windows.Input.FocusManager.IsFocusScopeProperty"/> to <c>True</c> on the appropriate container.</para>
            </summary>
            <param name="thіs">Creator.</param>
            <param name="lifetime">Limiting lifetime for toolbar activities.</param>
            <param name="sActionGroupId">ID of the actions group whose actions should be presented as toolbar buttons.</param>
            <returns>The toolbar as a UI element.</returns>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerAvalonEx.CreateBarForAvalonControlCore_AutomaticScoping(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Actions.ActionManager.IActionManager,JetBrains.Util.dataStructures.Boxed{System.Windows.UIElement},JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
            <summary>
            <para>Creates an <see cref="T:JetBrains.Application.UI.Actions.ActionManager.IActionManager"/>-driven toolbar to be hosted in Avalon controls with <see cref="T:JetBrains.Application.DataContext.IDataContext">data contexts</see> collected from Avalon controls.</para>
            <para>The UI element to collect data rules again is chosen with the <see cref="T:System.Windows.Input.FocusManager"/>: it is the focused element in the focus scope which contains the toolbar itself. Normally, it would be a window, or a toolwindow, etc.</para>
            <para>When keyboard focus is actually within this scope, the focused element defines the data context (it's collected by bubbling from the focused element and collecting all the available data rules/constants).</para>
            <para>When keyboard focus is not within, the logical focus context is used for gathering data context, which is basically the most recently keyboard-focused element (or, rather, which element would get focused when keyboard focus returns to the window). This allows for keeping the window-local action buttons enabled on the toolbar even when focus is not in the window itself.</para>
            <para>If you want to limit the scope, set <see cref="F:System.Windows.Input.FocusManager.IsFocusScopeProperty"/> to <c>True</c> on the appropriate container.</para>
            </summary>
            <param name="lifetime">Limiting lifetime for toolbar activities.</param>
            <param name="actionman"> </param>
            <param name="boxedToolbar">Pass an empty box here, and fill it with the actual toolbar element when you create it.</param>
            <param name="tokenOwnerIdentity">Identifies the owner of this auto-scoping setup, for diagnostics.</param>
            <returns>The functor to use with actionbarman.</returns>
        </member>
        <member name="T:JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerWinFormsEx">
            <summary>
            WinForms-related helpers for <see cref="T:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager"/>. 
            </summary>
            <seealso cref="T:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManagerEx"/>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerWinFormsEx.CreateActionBarForWinFormsControl(JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager,JetBrains.DataFlow.Lifetime,System.String,System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Wraps <see cref="M:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.CreateActionBar(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.ActionsRevised.Loader.IActionGroupDef,System.Boolean,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule}})"/> for simple use on WinForms controls.
            </summary>
            <param name="thіs">Object.</param>
            <param name="lifetime"></param>
            <param name="sActionGroupId">String ID of the action group.</param>
            <param name="controlDataProviding">This control will be asked for data providers each time a data context is to be created for updating or executing the actions.</param>
            <param name="isAutoUpdate">Whether to auto-update the bar periodically.</param>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerWinFormsEx.ShowPopupMenuInWinFormsControl(JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager,JetBrains.DataFlow.Lifetime,JetBrains.Application.Threading.IThreading,System.Windows.Forms.Control,System.Windows.Forms.Control,System.String,System.Drawing.Point)">
            <summary>
            WinForms control specific overload.
            </summary>
            <param name="thіs">Object.</param>
            <param name="lifetime"></param>
            <param name="threading"></param>
            <param name="control">The WinForms control originating the menu. It's used for calculating screen point from <paramref name="ptClient">client point</paramref> relatively to the control.</param>
            <param name="dataContextControl">The WinForms control owning the menu. It's used for populating the data context for query-statusing and executing the actions.</param>
            <param name="sActionGroupId">ID of the action group of the menu.</param>
            <param name="ptClient">Menu position, in client coordinates of the <paramref name="control"/>.</param>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerWinFormsEx.ShowPopupMenuInWinFormsControl``1(JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager,JetBrains.DataFlow.Lifetime,JetBrains.Application.Threading.IThreading,System.Windows.Forms.Control,System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            WinForms control specific overload.
            </summary>
            <param name="thіs">Object.</param>
            <param name="lifetime"></param>
            <param name="threading"></param>
            <param name="control">The WinForms control originating the menu. It's used for calculating screen point from <paramref name="ptClient">client point</paramref> relatively to the control.</param>
            <param name="dataContextControl">The WinForms control owning the menu. It's used for populating the data context for query-statusing and executing the actions.</param>
            <param name="ptClient">Menu position, in client coordinates of the <paramref name="control"/>.</param>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.DataContext.FindWinFormsDataRules.FindDataRulesInControl(System.Windows.Forms.Control)">
            <summary>
            Control's data provider goes first, then parents are tried.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Components.InteractiveMessageBoxHandler">
            <summary>
            In interactive environments, sets up the interactive message box handler.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.InteractiveMessageBoxHandler.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Util.ILogger)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.UI.Components.Theming.ThemingResourceKey">
            <summary>
            You can get the <see cref="T:JetBrains.Application.UI.Components.Theming.ITheming"/> instance from <see cref="T:JetBrains.UI.Wpf.IPlatformResourceDictionary"/> (which is universally available in WPF UI) with this resource key. All instances of this class are equal to each other.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Components.Theming.ThemingResourceKey.Key">
            <summary>
            An example key instance. All instances of this key are equal to each other.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.IWindowBrandingEx.SetIcon(JetBrains.Application.BuildScript.Application.IWindowBranding,System.Windows.Forms.Form)">
            <summary>
              Applies the product-branded icon to a Windows Forms form.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.IWindowBrandingEx.SetIcon(JetBrains.Application.BuildScript.Application.IWindowBranding,System.Windows.Window)">
            <summary>
              Applies the product-branded icon to a Windows Forms form.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.IWindowBrandingEx.SetIcon(System.Windows.Forms.Form,JetBrains.Application.BuildScript.Application.IWindowBranding)">
            <summary>
              Applies the product-branded icon to a Windows Forms form.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.IWindowBrandingEx.SetIcon(System.Windows.Window,JetBrains.Application.BuildScript.Application.IWindowBranding)">
            <summary>
              Applies the product-branded icon to a Windows Forms form.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.IWindowBrandingEx.SetIconAndCaption(JetBrains.Application.BuildScript.Application.IWindowBranding,System.Windows.Forms.Form,System.String)">
            <summary>
              Applies the product-branded icon to a Windows Forms form.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.IWindowBrandingEx.SetIconAndCaption(JetBrains.Application.BuildScript.Application.IWindowBranding,System.Windows.Window,System.String)">
            <summary>
              Applies the product-branded icon to a Windows Forms form.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.IWindowBrandingEx.SetIconCaptionAndHelp(JetBrains.Application.BuildScript.Application.IWindowBranding,System.Windows.Forms.Form,System.String,JetBrains.Application.UI.Help.HelpSystem,System.String)">
            <summary>
              Applies the product-branded icon, caption, help button, and F1 handler to a Windows Forms form.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.IWindowBrandingEx.SetIconCaptionAndHelp(JetBrains.Application.BuildScript.Application.IWindowBranding,System.Windows.Window,System.String,JetBrains.Application.UI.Help.HelpSystem,System.String)">
            <summary>
              Applies the product-branded icon, caption, help button, and F1 handler to a WPF window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.IWindowBrandingEx.SetIconAndHelp(JetBrains.Application.BuildScript.Application.IWindowBranding,System.Windows.Forms.Form,JetBrains.Application.UI.Help.HelpSystem,System.String)">
            <summary>
              Applies the product-branded icon, help button, and F1 handler to a Windows Forms form.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.IWindowBrandingEx.SetHelpButton(JetBrains.Application.UI.Help.HelpSystem,System.Windows.Forms.Form,System.String)">
            <summary>
              Applies help button and F1 handler to a Windows Forms form.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.IWindowBrandingEx.SetHelpButton(JetBrains.Application.UI.Help.HelpSystem,System.Windows.Window,System.String)">
            <summary>
              Applies help button and F1 handler to a WPF window.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Components.Interop.DwmStatus">
            <summary>
            DWM Status properties.
            The properties are statically available, but their values are tracked only within the component's lifetime.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Components.Interop.DwmStatus.IsDwmCompositionEnabled">
            <summary>
            Gets whether the Desktop Window Manager composition is currently enabled.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.Interop.DwmStatus.UpdateIsDwmCompositionEnabled">
            <summary>
            Updates the <see cref="P:JetBrains.UI.Components.Interop.DwmStatus.IsDwmCompositionEnabled" /> property value.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Components.Interop.DwmStatus.ReadonlyToken">
            <summary>
            A separate class to ensure initorder, otherwise csc3 fails to arrange static fields properly.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Components.MouseWheelRedirector">
            <summary>
            Fixes the mouse wheel behavior so that it were redirected to the hovered window, not the focused one.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Components.TrackFocusInteractive.WM_GIMMEFOCUS">
            <summary>
            A special Visual Studio message that sets focus to its window in a deferred manner. Nice to track too.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.TrackFocusInteractive.GetHwndOfUia(System.Windows.Automation.AutomationElement)">
            <summary>
            Gets the HWND of an UIA.
            Throws if the latter is not a window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.TrackFocusInteractive.IsEnabled_FocusChanged_WinApiFocus_TrackFocusEntryPoint(JetBrains.DataFlow.Lifetime)">
            <summary>
            Tracks <c>WM_SETFOCUS</c>, <c>WM_KILLFOCUS</c> as it's applied to <see cref="M:JetBrains.Interop.WinApi.User32Dll.GetFocus"/>.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.UI.Components.TrackFocusInteractive.LogFocusedWindow(JetBrains.Application.UI.Components.TrackFocus.FocusedItem)">
            <summary>
            Adds details about a window, like its depth, title, netfx class, hwnd path from owner.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.TrackFocusInteractive.InitDevenvGimmeFocus(JetBrains.DataFlow.Lifetime,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Special case for DEVENV and its <see cref="F:JetBrains.UI.Components.TrackFocusInteractive.WM_GIMMEFOCUS"/> messages.
            </summary>
            <param name="lifetime"></param>
            <param name="hookman"></param>
        </member>
        <member name="M:JetBrains.UI.Components.TrackFocusInteractive.InitUiaFocus(JetBrains.DataFlow.Lifetime)">
            <summary>
            Listens to UIA events on focus change.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Components.InteractiveMessageBoxHandlerShell">
            <summary>
            Message box: show real UI message boxes when in UI shell mode, use Descriptor for info, and such.
            Hides <see cref="T:JetBrains.UI.Components.InteractiveMessageBoxHandler"/> when Shell runs to this point.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.InteractiveMessageBoxHandlerShell.UiApplicationMessageBox(System.Void*,System.String,System.String,JetBrains.Interop.WinApi.MessageBoxFlags)">
            <summary>
            Implements the MessageBox that is owned by the main window and supplies the product name correctly.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.EditboxCueBanner">
            <summary>
            Places a static cue banner text on textbox
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.EditboxCueBanner.#ctor(System.Windows.Forms.TextBox,System.String,System.Windows.Forms.DockStyle)">
            <summary>
            Places the glyph into an owning editbox.
            </summary>
        </member>
        <member name="T:JetBrains.UI.DataContext.FindAvalonAndWinFormsDataRules">
            <summary>
            A data rule finder to traverse thru both worlds (Avalon &amp; WinForms) crossing the boundaries successfully and gathering rules from the whole chain. 
            </summary>
            <remarks>
            Required for correct operation on mixed content. E.g. at this moment (Fall'11) tool window frame is WinForms while it content is Avalon at times (e.g. Stack Trace Explorer), which causes data rules collection to stop within WPF and fail with collecting the CloseAll data rules on its WinForms parent.
            </remarks>
        </member>
        <member name="M:JetBrains.UI.DataContext.FindAvalonAndWinFormsDataRules.FindInAvalonElementAndAvalonParents(System.Windows.IInputElement)">
            <summary>
            Queries elements for context by bubbling an event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.DataContext.FindAvalonAndWinFormsDataRules.FindInThisControl(System.Windows.Forms.Control)">
            <summary>
            Control's data provider, no parents asked.
            </summary>
        </member>
        <member name="M:JetBrains.UI.DataContext.FindAvalonAndWinFormsDataRules.FindInParentHwndAndParents(System.IntPtr)">
            <summary>
            Assuming the current HWND is processed, initiates processing of data rules in its parents chain (including any possible Avalon element trees).
            </summary>
        </member>
        <member name="M:JetBrains.UI.DataContext.FindAvalonAndWinFormsDataRules.FindInThisHwndAndParents(System.IntPtr,System.Drawing.Point)">
            <summary>
            Looks for data rules in this HWND (incl Avalon element tree possibly hosted in it), and then proceeds with parent HWNDs chain.
            </summary>
            <param name="hwnd">The HWND to start with. Its data rules will be returned too.</param>
            <param name="ptScreenReference">Specifies the context of the child window within this window. This is required to process Avalon trees correctly.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.DataContext.FindAvalonAndWinFormsDataRules.FindInHwndSource(System.Windows.Interop.HwndSource,System.Drawing.Point)">
            <summary>
            Hit-tests HWND-source by the given point in screen coords, and bubbles the rules request up to the HWNDS root element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.DataContext.FindAvalonAndWinFormsDataRules.FindInThisHwndNonAvalon(System.IntPtr)">
            <summary>
            Looks for data rules registered with WinForms on this HWND only.
            NOTE: if you ever want to register rules on native windows (or non-WinForms HWNDs), register an object ID to use with <see cref="F:JetBrains.Interop.WinApi.WindowsMessages.WM_GETOBJECT"/> and call for it here.
            </summary>
        </member>
        <member name="M:JetBrains.UI.DataContext.FindAvalonDataRules.FindDataRulesInElement(System.Windows.IInputElement)">
            <summary>
            Queries elements for context by bubbling an event.
            </summary>
        </member>
        <member name="T:JetBrains.UI.DataContext.GetDataRulesEventArgs">
            <summary>
            Arguments to the <see cref="F:JetBrains.UI.DataContext.GetDataRulesEventArgs.GetDataRulesEvent"/> routed event.
            </summary>
        </member>
        <member name="F:JetBrains.UI.DataContext.GetDataRulesEventArgs.GetDataRulesEvent">
            <summary>
            Fires when the a <see cref="T:JetBrains.Application.DataContext.IDataContext">Data Context</see> is about to be created and looks for <see cref="T:JetBrains.Application.DataContext.IDataRule"/>s on Avalon UI elements to query for data.
            This event will fire when you call <see cref="T:JetBrains.Application.DataContext.IFindDataRules"/> interface members on <see cref="P:JetBrains.Application.UI.Actions.ActionManager.IActionManager.DataContexts"/>, or the <see cref="M:JetBrains.Application.DataContext.DataContexts.CreateOnActiveControl(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})"/> method and its siblings.
            When you sink the event, add your data rules to the <see cref="F:JetBrains.UI.DataContext.GetDataRulesEventArgs.DataRules"/> list. Do not set <see cref="P:System.Windows.RoutedEventArgs.Handled"/> to <c>True</c> so that the event could bubble up and collect all of the data providers in the UI tree. Add your data rules to the end, which will make sure the deepest controls take precedence with their most concrete data (unless data rule priority is specifically overridden).
            </summary>
        </member>
        <member name="F:JetBrains.UI.DataContext.GetDataRulesEventArgs.DataRules">
            <summary>
            Add your data rules to the end of this collection. See <see cref="F:JetBrains.UI.DataContext.GetDataRulesEventArgs.GetDataRulesEvent"/> documentation for details.
            </summary>
        </member>
        <member name="T:JetBrains.UI.DataContext.GetDataRulesEventArgs.GetDataRulesEventHandler">
            <summary>
            Delegate type for the <see cref="F:JetBrains.UI.DataContext.GetDataRulesEventArgs.GetDataRulesEvent"/> routed event.
            </summary>
        </member>
        <member name="F:JetBrains.UI.DataContext.GetDataRulesEventArgs.GetDataRulesBehaviorProperty">
            <summary>
            If you want a control to publish data rules, set this property on the view to the handler defined in the viewmodel, and it will be attached to sink the event.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Effects.RichTextEffects">
            <summary>
            Attached properties describing a propogating via visual tree monochrome.
            Components, which are supported 'attached monochrome', should invoke AddOwner in their constructor
            </summary>
        </member>
        <member name="T:JetBrains.UI.Effects.TransitionDirection">
            <summary>
            Direction of transition
            </summary>
        </member>
        <member name="T:JetBrains.UI.Effects.Transition">
            <summary>
            Transition effects
            </summary>
        </member>
        <member name="M:JetBrains.UI.Effects.Transition.Slide(System.Windows.UIElement,System.Nullable{JetBrains.UI.Effects.TransitionDirection},System.Int32)">
            <summary>
            Slides the target <see cref="T:System.Windows.UIElement"/> a little 
            (usually, to accent visual changing or update of content)
            </summary>
            <param name="uiElement"></param>
            <param name="direction"></param>
            <param name="holdback"></param>
        </member>
        <member name="T:JetBrains.UI.Effects.Transition.ObjectAnimation">
            <summary>
            Required to hack DependencyProperty's mechanic and set temporary values.
            NOTE: it's due to we are bond to .NET 3.5, .NET 4.0 has SetCurrentValue
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowUtil.LoadChildDialogPosition(System.Drawing.Rectangle,System.Windows.Forms.Form,System.Windows.Forms.IWin32Window)">
            <summary>
            Loads the child dialog position from the persisted settings, and applies it to the form.
            The position is stored in a relative form, against the center of the owner window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowUtil.SaveChildDialogPosition(System.Windows.Forms.Form,System.Windows.Forms.IWin32Window)">
            <summary>
            Prepares the child dialog position for persisting in the settings.
            The position is stored in a relative form, against the center of the owner window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowUtil.PushDisableWindowsButOne(JetBrains.DataFlow.Lifetime,System.IntPtr)">
            <summary>
            To enter a modal state for the given window, disables all of the other top-level windows on the same thread, plus the window owner.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowUtil.PushFocusedWindowState(JetBrains.DataFlow.Lifetime,System.Windows.Forms.IWin32Window)">
            <summary>
            Stores the focused window, restores in a reliable manner later.
            </summary>
            <param name="lifetime"></param>
            <param name="mainwin"></param>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowUtil.PushModalWindowEnabledState(JetBrains.DataFlow.Lifetime,System.IntPtr,System.Windows.Forms.IWin32Window)">
            <summary>
            To enter a modal state for the given window, disables all of the other top-level windows on the same thread, plus the window owner.
            If you haven't shown the modal window yet, you may pass <c>Null</c>.
            </summary>
            <param name="lifetime"></param>
            <param name="hwndModalWindow">Optional. The window to become modal that will not be disabled. <c>Null</c> if n/a.</param>
            <param name="mainWindow"></param>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowUtil.TryGetWpfWindow(System.Void*)">
            <summary>
            Gets WPF window for HWND, returns null if HWND is not a WPF window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowUtil.GetWin32Window(System.Windows.Window)">
            <summary>
            Get <see cref="T:System.Windows.Forms.IWin32Window"/> for WPF window. If the HWND has not been created yet, the <see cref="P:System.Windows.Forms.IWin32Window.Handle"/> will be IntPtr.Zero.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowUtil.GetWin32WindowForced(System.Windows.Window)">
            <summary>
            Get <see cref="T:System.Windows.Forms.IWin32Window"/> for WPF window. If the HWND has not been created yet, it will be created.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowUtil.SetOwnerReliable(System.Windows.Forms.Form,System.Windows.Forms.IWin32Window)">
            <summary>
            Sets an owner for the form in a reliable manner.
            The problem with reliability is that if the owner is not another <see cref="T:System.Windows.Forms.Form"/> (ie <see cref="P:System.Windows.Forms.Form.Owner"/> cannot be used), and form-to-be-owned is not <see cref="P:System.Windows.Forms.Form.ShowInTaskbar"/>, then the netfx implementation will drop the owner assigned with WinAPI calls and replace it with its own parking window (kinda to prevent it from showing up in the taskbar).
            This is done after the handle is created and after all of the notifications, so we should wait some more and then reapply the desired parent.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowUtil.ShowDialogWithGuardedCreation(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Automation.WindowModality,System.Func{JetBrains.DataFlow.LifetimeDefinition,JetBrains.DataFlow.Lifetime,System.Windows.Window},JetBrains.Application.Threading.IThreading,System.Object,JetBrains.Application.UI.Components.UIApplication.IApplicationModalState)">
            <summary>
            <para>Shows the dialog either modally or nonmodally, so that its <paramref name="FCreateView">creation function</paramref> were guarded, but its execution were not wholy guarded.</para>
            <para>Guarding the creation is needed to process modal functions correctly.</para>
            <para>Non-guarding the body of execution is required for controls which would be queueing smth guarded to function correctly: if the dialog is guarded throughout its whole lifetime, their activities would not have a chance to execute before it's closed.</para>
            <para>If you're calling this method for modal execution, the <see cref="T:JetBrains.Threading.ReentrancyGuard"/> obviously must not be held at the moment, otherwise it's not possible to fulfil the conditions.</para>
            </summary>
            <param name="lifetime">Limiting lifetime for the whole activity.</param>
            <param name="modality">Whether to show modally or non-modally.</param>
            <param name="FCreateView">Dialog creation function.</param>
            <param name="threading"><see cref="T:JetBrains.Threading.ReentrancyGuard"/> instance.</param>
            <param name="ownerwindow">Optional. Owner window — either a WPF <see cref="T:System.Windows.Window"/> object, or an <see cref="T:System.Windows.Forms.IWin32Window"/> implementation over a Win32 HWND or WinForms window, or <c>NULL</c> to let WPF decide for choosing an owner on its own.</param>
            <param name="applicationModalState">Optional. Used to inform VS about modal dialogs.</param>
            <returns>If executing modally, the execution result. Otherwise, <c>NULL</c>.</returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowUtil.ShowFocusCatcher(System.Void*)">
            <summary>
            Shows a window that catches focus and then returns it back immediately, so that the <paramref name="hwndTopmost"/> window could process the activation message consistently and place focus on the proper child window. Without that it could happen that focus sits directly on the main window and no child is active.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.MarkupExtensionBase">
            <summary>
            Base class for MarkupExtension implementations. Simplifies XAML markup implementation, 
            handles such special cases as intermediate objects, Setters and other ill cases. 
            Also, the result of the XAML extension is live (via internal binding creation).
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.DataTemplateCollectionSelector">
            <summary>
            Chooses a data template based on the type of the item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowsPresentaionTreeHelper.FindVisualAncestor(System.Windows.DependencyObject,System.Type,System.Windows.Controls.ItemsControl)">
            <summary>
            find the visual ancestor by type and go through the visual tree until the given itemsControl will be found
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowsPresentaionTreeHelper.TransferFocusInto(System.Windows.DependencyObject)">
            <summary>
            Transfers focus into element or one of its children. It is seeking first Focusable element down to the visual and logical children and tries to focus it
            </summary>
            <param name="reference"></param>
            <returns>True if element is found and focused, false in case no focusable elements are found</returns>
        </member>
        <member name="T:JetBrains.UI.Extensions.Bindings">
            <summary>
            Extensions to Avalon data bindings (<see cref="T:System.Windows.Data.BindingBase"/> and so on).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.Bindings.Create``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a binding on a property path.
            Only normal CLR properties and <see cref="T:JetBrains.DataFlow.IProperty`1"/>-properties are supported, as well as their chains.
            <see cref="T:System.Windows.DependencyProperty"/> cannot be used because it's not possible to get property ID out of the CLR property accessor without reflection.
            </summary>
            <typeparam name="TContainingType">Datacontext type.</typeparam>
            <typeparam name="TMemberValue">Resulting value type.</typeparam>
            <param name="lambdaexpression">Lambda expression which gives the property identifiers (it's never executed).</param>
            <returns>Binding.</returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.Bindings.Path``2(System.Windows.Data.Binding,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Assigns property path to the binding by reading a lambda expression (which is fake and is not actually executed).
            Only normal CLR properties and <see cref="T:JetBrains.DataFlow.IProperty`1"/>-properties are supported, as well as their chains.
            <see cref="T:System.Windows.DependencyProperty"/> cannot be used because it's not possible to get property ID out of the CLR property accessor without reflection.
            Fluent.
            </summary>
            <typeparam name="TContainingType">Datacontext type.</typeparam>
            <typeparam name="TMemberValue">Resulting value type.</typeparam>
            <param name="lambdaexpression">Lambda expression which gives the property identifiers (it's never executed).</param>
            <param name="thіs"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.Bindings.Path(System.Windows.Data.Binding,System.Windows.DependencyProperty)">
            <summary>
            Sets the binding path to contain a single dependency property.
            </summary>
            <param name="thіs"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.Bindings.Converter``2(System.Windows.Data.Binding,System.Func{``0,``1})">
            <summary>
            Assigns a one-way converter to an existing binding.
            Fluent.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="thіs"></param>
            <param name="FConverter"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.Bindings.Converter``2(System.Windows.Data.Binding,System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
            Assigns a bidirectional converter to an existing binding. Node: you must set <see cref="M:JetBrains.UI.Extensions.Bindings.Mode(System.Windows.Data.Binding,System.Windows.Data.BindingMode)"/> to something not-one-way with a separate call.
            Fluent.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.Bindings.Mode(System.Windows.Data.Binding,System.Windows.Data.BindingMode)">
            <summary>
            Changes binding mode.
            Fluent.
            </summary>
            <param name="thіs"></param>
            <param name="bindingMode"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.Bindings.Source(System.Windows.Data.Binding,System.Object)">
            <summary>
            Assigns binding source.
            Fluent.
            </summary>
            <param name="thіs"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.Bindings.IProperty``1(System.Windows.Data.Binding,JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Assigns binding source.
            Fluent.
            </summary>
            <param name="thіs"></param>
            <param name="propertySource">The source of a property type.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.UI.Extensions.DataTemplateSelectorDelegate">
            <summary>
            Supports selectding between Avalon data templates per specific data object which should be templated.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.ListViewColumn">
            <summary>
            ListViewColumnStretch
            </summary>
        </member>
        <member name="F:JetBrains.UI.Extensions.ListViewColumn.IsStretchedProperty">
            <summary>
            IsStretched Dependancy property which can be attached to gridview columns.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.ListViewColumn.GetIsStretched(System.Windows.DependencyObject)">
            <summary>
            Gets the stretch.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.ListViewColumn.SetIsStretched(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the stretch.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:JetBrains.UI.Extensions.ListViewColumn.OnCoerceStretch(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerce stretch
            </summary>
            <param name="source">The source.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.ListViewColumn.OnListViewSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the SizeChanged event of the lv control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:JetBrains.UI.Extensions.ListViewColumn.OnListViewLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Loaded event of the ListView control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:JetBrains.UI.Extensions.ListViewColumn.SetColumnWidths(System.Windows.Controls.ListView)">
            <summary>
            Sets the column widths
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.StyleSelectorDelegate">
            <summary>
            Provides a way to apply styles defined in a delegate
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.WindowStyles">
            <summary>
            Helps to manage differrent native window styles. 
            For example to show or hide control buttons
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.AvalonEx">
            <summary>
            Extension methods for Avalon.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.AddChild``1(``0,System.Windows.UIElement)">
            <summary>
            Adds a new child to the panel control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.AddColumnChild(System.Windows.Controls.Grid,System.String,System.Windows.UIElement)">
            <summary>
            Adds a new column to the grid, placing a child in the newly-added column.
            </summary>
            <param name="grid">Grid to add to.</param>
            <param name="size">A string representation of a <see cref="T:System.Windows.GridLength"/> value (just as in XAML), or <c>Null</c>/empty for an auto-sized child (<see cref="F:System.Windows.GridUnitType.Auto"/>).</param>
            <param name="child">The child to add into a grid cell.</param>
            <returns>Same grid (for fluent calls).</returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.AddColumnChild(System.Windows.Controls.Grid,System.Windows.GridUnitType,System.Windows.UIElement,System.Double)">
            <summary>
            Adds a new column to the grid, placing a child in the newly-added column.
            </summary>
            <param name="grid">Grid to add to.</param>
            <param name="sizing">Autosizing or star-sizing, for the <see cref="T:System.Windows.GridLength" /> of the cell.</param>
            <param name="child">The child to add into a grid cell.</param>
            <param name="factor">Adjusts the value of the <see cref="T:System.Windows.GridLength" />: ignored for <see cref="F:System.Windows.GridUnitType.Auto" /> (will be overriden with <c>0</c> by the implementation), the star-size (<c>1</c> by default) for <see cref="F:System.Windows.GridUnitType.Star" />, same for pixels.</param>
            <returns>Same grid (for fluent calls).</returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.AddColumnChild(System.Windows.Controls.Grid,System.Windows.GridUnitType,JetBrains.Application.UI.UIAutomation.IAutomation,System.Double)">
            <summary>
            Adds a new column to the grid, placing a child in the newly-added column.
            </summary>
            <param name="grid">Grid to add to.</param>
            <param name="sizing">Autosizing or star-sizing, for the <see cref="T:System.Windows.GridLength" /> of the cell.</param>
            <param name="child">The child to add into a grid cell.</param>
            <param name="factor">Adjusts the value of the <see cref="T:System.Windows.GridLength" />: ignored for <see cref="F:System.Windows.GridUnitType.Auto" /> (will be overriden with <c>0</c> by the implementation), the star-size (<c>1</c> by default) for <see cref="F:System.Windows.GridUnitType.Star" />, same for pixels.</param>
            <returns>Same grid (for fluent calls).</returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.AddColumnChild``1(System.Windows.Controls.Grid,System.Windows.GridUnitType,JetBrains.DataFlow.IProperty{``0},System.Double)">
            <summary>
            Adds a new column to the grid, placing a child in the newly-added column.
            </summary>
            <param name="grid">Grid to add to.</param>
            <param name="sizing">Autosizing or star-sizing, for the <see cref="T:System.Windows.GridLength" /> of the cell.</param>
            <param name="child">The child to add into a grid cell.</param>
            <param name="factor">Adjusts the value of the <see cref="T:System.Windows.GridLength" />: ignored for <see cref="F:System.Windows.GridUnitType.Auto" /> (will be overriden with <c>0</c> by the implementation), the star-size (<c>1</c> by default) for <see cref="F:System.Windows.GridUnitType.Star" />, same for pixels.</param>
            <returns>Same grid (for fluent calls).</returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.AddRowChild(System.Windows.Controls.Grid,System.String,System.Windows.UIElement)">
            <summary>
            Adds a new row to the grid, placing a child in the newly-added row.
            </summary>
            <param name="grid">Grid to add to.</param>
            <param name="size">A string representation of a <see cref="T:System.Windows.GridLength"/> value (just as in XAML), or <c>Null</c>/empty for an auto-sized child (<see cref="F:System.Windows.GridUnitType.Auto"/>).</param>
            <param name="child">The child to add into a grid cell.</param>
            <returns>Same grid (for fluent calls).</returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.AddRowChild(System.Windows.Controls.Grid,System.Windows.GridUnitType,System.Windows.UIElement,System.Double)">
            <summary>
            Adds a new row to the grid, placing a child in the newly-added row.
            </summary>
            <param name="grid">Grid to add to.</param>
            <param name="sizing">Autosizing or star-sizing, for the <see cref="T:System.Windows.GridLength" /> of the cell.</param>
            <param name="child">The child to add into a grid cell.</param>
            <param name="factor">Adjusts the value of the <see cref="T:System.Windows.GridLength" />: ignored for <see cref="F:System.Windows.GridUnitType.Auto" /> (will be overriden with <c>0</c> by the implementation), the star-size (<c>1</c> by default) for <see cref="F:System.Windows.GridUnitType.Star" />, same for pixels.</param>
            <returns>Same grid (for fluent calls).</returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.AddRowChild(System.Windows.Controls.Grid,System.Windows.GridUnitType,JetBrains.Application.UI.UIAutomation.IAutomation,System.Double)">
            <summary>
            Adds a new row to the grid, placing a child in the newly-added row.
            </summary>
            <param name="grid">Grid to add to.</param>
            <param name="sizing">Autosizing or star-sizing, for the <see cref="T:System.Windows.GridLength" /> of the cell.</param>
            <param name="child">The child to add into a grid cell.</param>
            <param name="factor">Adjusts the value of the <see cref="T:System.Windows.GridLength" />: ignored for <see cref="F:System.Windows.GridUnitType.Auto" /> (will be overriden with <c>0</c> by the implementation), the star-size (<c>1</c> by default) for <see cref="F:System.Windows.GridUnitType.Star" />, same for pixels.</param>
            <returns>Same grid (for fluent calls).</returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.AddRowChild``1(System.Windows.Controls.Grid,System.Windows.GridUnitType,JetBrains.DataFlow.IProperty{``0},System.Double)">
            <summary>
            Adds a new row to the grid, placing a child in the newly-added row.
            </summary>
            <param name="grid">Grid to add to.</param>
            <param name="sizing">Autosizing or star-sizing, for the <see cref="T:System.Windows.GridLength" /> of the cell.</param>
            <param name="child">The child to add into a grid cell.</param>
            <param name="factor">Adjusts the value of the <see cref="T:System.Windows.GridLength" />: ignored for <see cref="F:System.Windows.GridUnitType.Auto" /> (will be overriden with <c>0</c> by the implementation), the star-size (<c>1</c> by default) for <see cref="F:System.Windows.GridUnitType.Star" />, same for pixels.</param>
            <returns>Same grid (for fluent calls).</returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Append(System.Windows.Controls.TextBlock,System.String)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Append(System.Windows.Documents.Span,System.String)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Documents.Span"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.AppendLine(System.Windows.Documents.Span,System.String)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Documents.Span"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Append(System.Windows.Documents.Span,System.Windows.Documents.Inline)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Inline"/> to the <see cref="T:System.Windows.Documents.Span"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Append(System.Windows.Controls.TextBlock,System.String,System.Windows.FontStyle)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Append(System.Windows.Controls.TextBlock,System.String,System.Windows.FontWeight)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Append(System.Windows.Controls.TextBlock,System.Windows.Documents.Run)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Append(System.Windows.Controls.TextBlock,System.Windows.Documents.Inline)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Inline"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Append(System.Windows.Controls.TextBlock,System.String,System.Windows.FontStyle,System.Windows.FontWeight,System.Windows.Media.Brush)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Append(System.Windows.Documents.Span,System.String,System.Windows.FontStyle,System.Windows.FontWeight,System.Windows.Media.Brush)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Documents.Span"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Append(System.Windows.Documents.Paragraph,System.String)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Documents.Paragraph"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Append(System.Windows.Documents.Paragraph,System.String,System.Windows.FontStyle,System.Windows.FontWeight,System.Windows.Media.Brush)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Documents.Paragraph"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.AppendLine(System.Windows.Documents.Span)">
            <summary>
            Adds a line break to the <see cref="T:System.Windows.Documents.Span"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Bind``1(``0,System.Windows.DependencyProperty,System.String)">
            <summary>
            Establishes a two-way property binding on the element.
            The “Update Source” is triggered according to the default scenario (ie on focus loss for an edit box).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Bind``1(``0,System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
            <summary>
            Establishes a two-way property binding on the element.
            The “Update Source” is triggered according to the default scenario (ie on focus loss for an edit box).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.BindOnChange``1(``0,System.Windows.DependencyProperty,System.String)">
            <summary>
            Establishes a two-way property binding on the element.
            The “Update Source” is triggered immediately when the property changes (ie on typing for an edit box).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Cols(System.Windows.Controls.Grid,System.String[])">
            <summary>
            Adds columns to the grid. Each sizes element is a Star grid-length value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Dock``1(``0,System.Windows.Controls.Dock)">
            <summary>
            Sets the <see cref="F:System.Windows.Controls.DockPanel.DockProperty"/> extension property on the specified UI element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.InGrid``1(``0,System.Int32,System.Int32)">
            <summary>
            Sets the <see cref="F:System.Windows.Controls.Grid.ColumnProperty"/> and <see cref="F:System.Windows.Controls.Grid.RowProperty"/> extension properties on the specified UI element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.InGrid``1(``0,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the <see cref="F:System.Windows.Controls.Grid.ColumnProperty"/> and <see cref="F:System.Windows.Controls.Grid.RowProperty"/> extension properties on the specified UI element.
            In addition, specifies the <see cref="F:System.Windows.Controls.Grid.ColumnSpanProperty"/> and <see cref="F:System.Windows.Controls.Grid.RowSpanProperty"/> extension properties.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Name``1(``0,System.Windows.FrameworkElement,System.String)">
            <summary>
            Registers a name for the object in the host's name scope.
            The name scope must first be registered for the host or one of its parents.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.OnEvent``1(``0,System.Windows.RoutedEvent,System.Windows.RoutedEventHandler)">
            <summary>
            Sinks the specified <paramref name="event"/> on the <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.OnEvent``1(``0,System.Windows.RoutedEvent,System.Action)">
            <summary>
            Sinks the specified <paramref name="event"/> on the <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.OnEventC``1(``0,System.Windows.RoutedEvent,System.Windows.RoutedEventHandler)">
            <summary>
            Sinks the specified <paramref name="event"/> on the <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.RectFromScreen(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Like <see cref="M:System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)"/>, but for a <see cref="T:System.Windows.Rect"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.RectToScreen(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Like <see cref="M:System.Windows.Media.Visual.PointToScreen(System.Windows.Point)"/>, but for a <see cref="T:System.Windows.Rect"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Rows(System.Windows.Controls.Grid,System.String[])">
            <summary>
            Adds rows to the grid. Each sizes element is a Star grid-length value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Scale``1(``0,System.Double)">
            <summary>
            Applies a scale layout transformation to the element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Set``1(``0,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Sets a dependency property on a dependency object, allows to pipe such settings.
            Especially useful for setting extension properties.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.SetDialogFont``1(``0)">
            <summary>
            Applies dialog font to a control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.SetDialogFontD(System.Windows.Documents.FlowDocument)">
            <summary>
              Applies dialog font to a control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.SetEditorFont``1(``0)">
            <summary>
            Applies editor font to a control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.SetEditorFontC``1(``0)">
            <summary>
            Applies editor font to a control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.SetEditorFontT``1(``0)">
            <summary>
            Applies editor font to a control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.SetEditorFont(System.Windows.Documents.FlowDocument)">
            <summary>
            Applies editor font to a control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.SetDialogFont(System.Windows.Documents.FlowDocument)">
            <summary>
            Applies dialog font to a control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.SetSystemFont(System.Windows.Documents.FlowDocument)">
            <summary>
            By default, a document has some large serif font applied.
            Makes the document follow the system font family and sizes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.WhenLoaded(System.Windows.FrameworkElement,System.Action{JetBrains.DataFlow.Lifetime})">
            <summary>
            <para>Creates a lifetime each time the control gets loaded into the tree of loaded elements.</para>
            <para>This emulates a deterministic lifetime for WPF elements.</para>
            <para>This overload does not take an outer lifetime and is suitable for use in purely-view controls that do not know any external lifetime.</para>
            <para>Note that it's not technically guaranteed that the lifetime is ever terminated.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.WhenLoaded(System.Windows.FrameworkElement,JetBrains.DataFlow.Lifetime,System.Action{JetBrains.DataFlow.Lifetime})">
            <summary>
            <para>Creates a lifetime each time the control gets loaded into the tree of loaded elements.</para>
            <para>This emulates a deterministic lifetime for WPF elements.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.FlowIntoVisibility(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.Lifetime,System.Windows.UIElement)">
            <summary>
            When the boolean property is <c>True</c>, the target element is made visible; otherwise, it's hidden and collapsed.
            Usage: <c>isVisibleBoolProp.FlowIntoVisibility(control);</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.TryPointFromScreen(System.Windows.Media.Visual,System.Windows.Point)">
            <summary>
            Converts a <see cref="T:System.Windows.Point"/> in screen coordinates into a <see cref="T:System.Windows.Point"/> that represents the current coordinate system of the <see cref="T:System.Windows.Media.Visual"/>.
            Reimplements <see cref="M:System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)"/> but without throwing any exceptions.
            </summary>
            <param name="thіs"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.SetValueFluent(System.Windows.FrameworkElementFactory,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Sets the value of a dependency property. Fluent.
            Just calls <see cref="M:System.Windows.FrameworkElementFactory.SetValue(System.Windows.DependencyProperty,System.Object)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.Add(System.Windows.ResourceDictionary,JetBrains.DataFlow.Lifetime,System.Object,System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Windows.ResourceDictionary"/> for a limited lifetime.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.SetDynamicResourceValue``1(``0,System.Windows.DependencyProperty,System.Windows.ResourceKey)">
            <summary>
            Sets the value of the property to point to a WPF Dynamic Resource, just like <c>{DynamicResource resourcekey}</c> in XAML.
            </summary>
            <remarks>Theoretically, the resource key could also be a string or just any object, but too free a constraint makes compile-time validation worse (and at runtime it just silently skips), so let's limit to <see cref="T:System.Windows.ResourceKey"/>.</remarks>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.CreateView(JetBrains.Application.UI.UIAutomation.IAutomation)">
            <summary>
              <para>Creates a new instance of a UI control representing the given Automation Object.</para>
              <para>The <see cref="T:JetBrains.UI.Wpf.IPlatformResourceDictionary" /> must be reachable, and a view must be <see cref="T:JetBrains.Application.UI.Automation.IAutomationViewsRegistry">registered</see> for this to work.</para>
              <para>Note that you should NOT use this method where content object is expected (like in <see cref="T:System.Windows.Controls.Button" />'s <see cref="P:System.Windows.Controls.ContentControl.Content" /> property, or any <see cref="T:System.Windows.Controls.ItemsControl" /> items). Pass the automation object directly instead, because this method uses the same technique for presenting the content as they would.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.CreateView``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,JetBrains.UI.Extensions.AvalonEx.WhenNull)">
            <summary>
              <para>Creates a new instance of a UI control representing the given Automation Object.</para>
              <para>The <see cref="T:JetBrains.UI.Wpf.IPlatformResourceDictionary" /> must be reachable, and a view must be <see cref="T:JetBrains.Application.UI.Automation.IAutomationViewsRegistry">registered</see> for this to work.</para>
              <para>Note that you should NOT use this method where content object is expected (like in <see cref="T:System.Windows.Controls.Button" />'s <see cref="P:System.Windows.Controls.ContentControl.Content" /> property, or any <see cref="T:System.Windows.Controls.ItemsControl" /> items). Pass the automation object directly instead, because this method uses the same technique for presenting the content as they would.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.SetSource(System.Windows.Controls.Image,JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{System.Windows.Media.ImageSource})">
            <summary>
            Fluent. Sets the image source to flow from the property.
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="propSource"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonEx.SetSource(System.Windows.Controls.Image,System.Windows.ResourceKey)">
            <summary>
            Fluent. Sets the image to retrieve its source from its parent context's Resource Dictionary on the given resource key.
            </summary>
            <param name="thіs"></param>
            <param name="resourcekey"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.UI.Extensions.AvalonEx.WhenNull">
            <summary>
            What to do if the automation object value is NULL, and a view is about to be rendered for it.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Extensions.AvalonEx.WhenNull.ErrorBanner">
            <summary>
            If the automation object value is suddenly NULL, renders an error banner for the view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Extensions.AvalonEx.WhenNull.EmptyView">
            <summary>
            If the automation object value is NULL, this means the view should be empty and collapsed.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.AvalonTemplates">
            <summary>
            Whenever an Avalon template is required, allows to supply a delegate to produce the object graph in runtime instead.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTemplates.CreateControlTemplate(System.Func{System.Windows.UIElement})">
            <summary>
            Whenever an Avalon template is required, allows to supply a delegate to produce the object graph in runtime instead.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTemplates.CreateDataTemplate(System.Func{System.Windows.UIElement})">
            <summary>
            Whenever an Avalon template is required, allows to supply a delegate to produce the object graph in runtime instead.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTemplates.SetTemplate``1(``0,System.Func{System.Windows.UIElement})">
            <summary>
            A fluent method for setting up a template to be populated with a delegate.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTemplates.SetTemplate``2(System.Windows.Controls.ControlTemplate,System.Func{JetBrains.DataFlow.Lifetime,``0,``1,System.Windows.UIElement})">
            <summary>
            A fluent method for setting up a control template to be populated with a delegate when it's loaded and when its datacontext is assigned to the expected viewmodel type.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTemplates.OverrideTemplate``2(System.Windows.DependencyProperty,System.Func{JetBrains.DataFlow.Lifetime,``0,``1,System.Windows.UIElement})">
            <summary>
            A method for setting up a control template to be populated with a delegate when it's loaded and when its datacontext is assigned to the expected viewmodel type.
            To be called in the static constructor on the <see cref="F:System.Windows.Controls.Control.TemplateProperty"/> or alike.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTemplates.SetTemplate``2(System.Windows.DataTemplate,System.Func{JetBrains.DataFlow.Lifetime,``0,``1,System.Windows.UIElement})">
            <summary>
            A fluent method for setting up a data template to be populated with a delegate when it's loaded and when its datacontext is assigned to the expected viewmodel type.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTemplates.SetTemplate``2(``1,System.Func{JetBrains.DataFlow.Lifetime,``0,``1,System.Windows.UIElement})">
            <summary>
            A fluent method for setting up window content to be populated with a delegate when the window is created and when its data context is assigned to the expected viewmodel type.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTemplates.WithAutomationObject``2(``1,System.Action{JetBrains.DataFlow.Lifetime,``0,``1})">
            <summary>
            Watches the view control for an assigned automation object of the valid type, and invokes the callback when it's available.
            Reports type mismatch errors.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTemplates.SetTemplateWithDataContext``1(``0,System.Func{System.Windows.UIElement})">
            <summary>
            A fluent method for setting up a template to be populated with a delegate.
            Sets the DataContext of the template to point to the templated parent.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTemplates.SetTemplateManually``1(``0,System.Action{System.Windows.FrameworkElementFactory})">
            <summary>
            A fluent method for setting up a template and filling its object graph data manually.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTemplates.RegisterView``2(System.Windows.ResourceDictionary)">
            <summary>
            Creates a data template which simply creates a view of the specified type as a content presentation for the given viewmodel type, and registers it with the resource dictionary.
            </summary>
            <typeparam name="TViewModel"></typeparam>
            <typeparam name="TView"></typeparam>
            <param name="thіs"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTemplates.RegisterView``1(System.Windows.ResourceDictionary,System.Windows.FrameworkElementFactory)">
            <summary>
            Creates a data template which simply sets the given view of the specified type as a content presentation 
            for the given viewmodel type, and registers it with the resource dictionary.
            </summary>
            <typeparam name="TViewModel"></typeparam>
            <param name="thіs"></param>
            <param name="frameworkElementFactory"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTemplates.CreateBrokenViewCueBanner(JetBrains.UI.RichText.RichText)">
            <summary>
            Creates a standard cue banner to be used to indicate a broken/disconnected view etc.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.UI.Extensions.AvalonTreeHelpers">
            <summary>
            Helps with navigating Avalon trees.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Extensions.AvalonTreeHelpers.AddAvalonTreeData">
            <summary>
            Traverses logical and visual trees to the root and reports object types to the exception data, root to given element.
            </summary>
            <remarks>A delegate to enable <see cref="M:JetBrains.Util.FEx.BetaY``2(System.Action{``0,``1},``1)"/>.</remarks>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTreeHelpers.GetLogicalDescendantsBreadthFirst(System.Windows.DependencyObject)">
            <summary>
            Does BFS on logical children.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTreeHelpers.GetVisualDescendantsBreadthFirst(System.Windows.DependencyObject)">
            <summary>
            Does BFS on visual children.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.AvalonTreeHelpers.GetLogicalOrVisualParent(System.Windows.DependencyObject)">
            <summary>
            <para>Walks up the element tree of whatever kind available, preferring the logical tree wherever possible.</para>
            <para>This mostly corresponds to the FocusManager focus scope lookup behavior.</para>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.CreateOrReuseWindow">
            <summary>
            Allows to show popup UI when the user clicks a button. Shows the old window if not closed yet, or creates a new one if not shown yet or already closed.
            </summary>
            <remarks>
            Usually, in Avalon, the window would be created initially, and show-hidden on user actions without actually destroying and recreating it. In our case there're usually complex bindings running in the window, so we would not like them to be running in the hidden mode.
            </remarks>
        </member>
        <member name="M:JetBrains.UI.Extensions.CreateOrReuseWindow.#ctor(JetBrains.DataFlow.Lifetime,System.Windows.Forms.IWin32Window,System.Action{JetBrains.DataFlow.Lifetime,System.Windows.Window})">
            <summary>
            Allows to show popup UI when the user clicks a button. Shows the old window if not closed yet, or creates a new one if not shown yet or already closed.
            </summary>
            <param name="lifetime">Limiting lifetime of the window.</param>
            <param name="owner">Owner window.</param>
            <param name="FCreateNew">This function will be called to fill in the given window whenever a new one needs to be created.</param>
        </member>
        <member name="M:JetBrains.UI.Extensions.CreateOrReuseWindow.Show">
            <summary>
            Focuses the running window, or creates and shows the new one if already created and still not closed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.CreateOrReuseWindow.Close">
            <summary>
            Close the window.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.DataTemplateDelegate">
            <summary>
            Supports a data template that executes some code to create the object graph.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.DataTemplateDelegate.#ctor(System.Func{System.Windows.UIElement})">
            <summary>
            Creates a Data Template that produces the object graph at runtime.
            </summary>
            <param name="funcObjectGraphCreator">The function to create the object graph.</param>
        </member>
        <member name="T:JetBrains.UI.Extensions.DataTemplateSwitchSelector">
            <summary>
            Chooses a data template based on the type of the item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.DataTemplateSwitchSelector.Add``1(System.Windows.DataTemplate)">
            <summary>
            Registers a <paramref name="template">data template</paramref> to be returned for the objects of the given <typeparamref name="TType"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.DataTemplateSwitchSelector.Add(System.Type,System.Windows.DataTemplate)">
            <summary>
            Registers a <paramref name="template">data template</paramref> to be returned for the objects of the given <paramref name="type"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.Helpers">
            <summary>
            Avalon-related helper routines.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.Helpers.Glassify(System.Windows.Window,System.Boolean,JetBrains.UI.Extensions.Helpers.NoWindowHandleAction)">
            <summary>
            Applies the aeroglass effect to the whole window, if possible.
            Returns whether the effect is supported in the current environment and was applied successfully.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.Helpers.Glassify(System.Void*,System.Boolean)">
            <summary>
            Applies the aeroglass effect to the whole window, if possible.
            Returns whether the effect is supported in the current environment and was applied successfully.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.Helpers.NoWindowHandleAction">
            <summary>
            What to do if the window has no handle.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.HwndSourceEx">
            <summary>
            Things related to treating Avalon UI elements as Windows desktop citizens, in which case they end up being hosted in an <see cref="T:System.Windows.Interop.HwndSource"/> of some kind, we can track their screen pixel position, etc.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.HwndSourceEx.GetElementBoundsInScreenPixels(System.Windows.UIElement)">
            <summary>
            For an UI Element hosted in an HWND render target, gets its pixel bounds on screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.HwndSourceEx.GetHwndSourceLive(JetBrains.DataFlow.Lifetime,System.Windows.UIElement)">
            <summary>
            Tracks the HWND presentation source the element is placed onto.
            This defines which HWND the element ends up hosted in.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.MultiValueConverter">
            <summary>
            A factory for <see cref="T:JetBrains.UI.Extensions.MultiValueConverter"/>, the universal Avalon Value Converter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.MultiValueConverter.System#Windows#Data#IMultiValueConverter#Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty" />.<see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding" />.<see cref="F:System.Windows.Data.Binding.DoNothing" /> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> or the default value.
            </returns>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JetBrains.UI.Extensions.MultiValueConverter.System#Windows#Data#IMultiValueConverter#ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:JetBrains.UI.Extensions.SizeEx">
            <summary>
            Ext for <see cref="T:System.Windows.Size"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.TemplateBorder">
            <summary>
            A border-derived control that supports runtime delegate-based data templates.
            On creation, exeutes the supplied code to build the nested objects.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.TemplateBorder.ApplyObjectGraphCreatorProperty(System.Func{System.Windows.UIElement})">
            <summary>
            Creates the new object graph whenever <see cref="F:JetBrains.UI.Extensions.TemplateBorder.ObjectGraphCreatorProperty"/> changes its value.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.ControlTemplateBorder`2">
            <summary>
            A border-derived control that supports runtime delegate-based data templates.
            On creation, exeutes the supplied code to build the nested objects.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.ThicknessEx.ToTotalSize(System.Windows.Thickness)">
            <summary>
            Sums up total thickness along each axis.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.ValueConverter`2">
            <summary>
            The universal Avalon Value Converter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.ValueConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding source to the binding target.
            </summary>
            
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            
            <param name="culture">The culture to use in the converter.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="value">The value produced by the binding source.</param>
        </member>
        <member name="M:JetBrains.UI.Extensions.ValueConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding target to the binding source.
            </summary>
            
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that to the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            
            <param name="culture">The culture to use in the converter.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="value">The value that is produced by the binding target.</param>
        </member>
        <member name="T:JetBrains.UI.Extensions.ValueConverter">
            <summary>
            A factory for <see cref="T:JetBrains.UI.Extensions.ValueConverter`2"/>, the universal Avalon Value Converter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowsFormsUtil.KeepElementHostFocus(System.Windows.Forms.Form,JetBrains.UI.CrossFramework.JetElementHost)">
            <summary>
            If a modeless WinForms form hosts WPF content, WPF focus is not handled properly (see RSRP-459251).
            </summary>
            <remarks>Most probably it's caused by MSO component main message loop (wpf doesn't receive messages.)</remarks>
        </member>
        <member name="M:JetBrains.UI.Extensions.WindowsFormsUtil.HackExitModalMenuMode">
            <summary>
            Force exit modal menu message loop. Fixes a WinForms bug in ToolStripDropDownButton.
            </summary>
            <remarks>
            We need reflection as the API is internal.
            </remarks>
        </member>
        <member name="T:JetBrains.UI.FeaturesPage.LanguagesPageView">
            <summary>
            Represents UI part of the plugins options page
            </summary>
            <summary>
            LanguagesPageView
            </summary>
        </member>
        <member name="M:JetBrains.UI.FeaturesPage.LanguagesPageView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:JetBrains.UI.FeaturesPage.LanguagesPageView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.UI.UserIdentificatorWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            UserIdentificatorWindow
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.UserIdentificatorWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.UI.AccountControl">
            <summary>
            Interaction logic for AccountControl.xaml
            </summary>
            <summary>
            AccountControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.AccountControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.UI.Attachment">
            <summary>
            Interaction logic for Attachment.xaml
            </summary>
            <summary>
            Attachment
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.Attachment.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.UI.AttachmentsControl">
            <summary>
            Interaction logic for AttachmentsControl.xaml
            </summary>
            <summary>
            AttachmentsControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.AttachmentsControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:JetBrains.UI.Feedback.UI.FeedbackCenterHost.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.FeedbackCenterHost.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.FeedbackCenterHost.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.UI.FeedbackCenterControl">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            FeedbackCenterControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.FeedbackCenterControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.UI.ReportControlBase">
            <summary>
              Interaction logic for ReportControlBase.xaml
            </summary>
            <summary>
            ReportControlBase
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.ReportControlBase.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.UI.ResultControl">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            ResultControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.ResultControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:JetBrains.UI.Feedback.UI.ResultHost.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.ResultHost.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.ResultHost.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.UI.UserIdentificatorControl">
            <summary>
            Interaction logic for UserIdentificatorControl2.xaml
            </summary>
            <summary>
            UserIdentificatorControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.UserIdentificatorControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.UI.ProgressControl">
            <summary>
            Interaction logic for ProgressControl.xaml
            </summary>
            <summary>
            ProgressControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.ProgressControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.UI.UserNameAccountControl">
            <summary>
            Interaction logic for UserNameAccountControl.xaml
            </summary>
            <summary>
            UserNameAccountControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.UserNameAccountControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.UI.YouTrackAccountControl">
            <summary>
            Interaction logic for YouTrackAccountControl.xaml
            </summary>
            <summary>
            YouTrackAccountControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.UI.YouTrackAccountControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.Pages.BugReportControl">
            <summary>
              Interaction logic for BugReportControl.xaml
            </summary>
            <summary>
            BugReportControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.Pages.BugReportControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.Pages.FeedbackReportControl">
            <summary>
              Interaction logic for FeedbackReportControl.xaml
            </summary>
            <summary>
            FeedbackReportControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.Pages.FeedbackReportControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.Pages.PerformanceReportControl">
            <summary>
            Interaction logic for PerformanceReportControl.xaml
            </summary>
            <summary>
            PerformanceReportControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.Pages.PerformanceReportControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Feedback.Pages.ProblemReportControl">
            <summary>
            Interaction logic for ProblemReportControl.xaml
            </summary>
            <summary>
            ProblemReportControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.Pages.ProblemReportControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.UI.Feedback.AttachmentProviders.FileAttachmentProvider.#ctor(JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.UI.Icons.RotatedIconIdViewHelper.GdipBitmapFrames">
            <summary>
            Supports getting individual animation frames as GDI+ bitmaps.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Icons.RotatedIconIdViewHelper.GdipBitmapFrames.myFrameCache96">
            <summary>
            Caches rendered GDI+ frames for icons.
            Stores the theme to reset the whole cache on theme change.
            NOTE: don't watch theme changes live to aviod holding icon manager.
            NOTE: can't think up any reasonable cleanup policy, e.g. weakrefs will never be held because the bitmap object is released just after painting it onscreen.
            NOTE: Bitmap array size is to have <see cref="F:JetBrains.UI.Icons.RotatedIconIdViewHelper.GdipBitmapFrames.FrameCount"/> frames in it.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Icons.RotatedIconIdViewHelper.GdipBitmapFrames.myFrameCacheScreenDpi">
            <summary>
            Caches rendered GDI+ frames for icons.
            Stores the theme to reset the whole cache on theme change.
            NOTE: don't watch theme changes live to aviod holding icon manager.
            NOTE: can't think up any reasonable cleanup policy, e.g. weakrefs will never be held because the bitmap object is released just after painting it onscreen.
            NOTE: Bitmap array size is to have <see cref="F:JetBrains.UI.Icons.RotatedIconIdViewHelper.GdipBitmapFrames.FrameCount"/> frames in it.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Icons.RotatedIconIdViewHelper.GdipBitmapFrames.GetAnimationFrameGdipBitmap(JetBrains.Application.Icons.Animation.RotatedIconId,System.Double,JetBrains.Application.Icons.IThemedIconManager,JetBrains.Util.Interop.DpiResolution)">
            <summary>
              <para>Gets the GDI+ bitmap for the specified frame of the animated icon animation sequence.</para>
              <para>The bitmap is cached, so you don't need to cache it on callsite.</para>
            </summary>
            <param name="id">Animated icon.</param>
            <param name="fFramePercentage">Percent of the frame within the animation sequence, in [0..1) range or its multiple. Due to caching, it will be rounded to the resolution assumed by the cache.</param>
            <param name="themedIconManager">Icon renderer.</param>
            <param name="resolution"></param>
            <returns>The frame.</returns>
        </member>
        <member name="M:JetBrains.UI.Icons.RotatedIconIdViewHelper.GdipBitmapFrames.EnsureFramesFor(JetBrains.Application.Icons.Animation.RotatedIconId,JetBrains.Application.Icons.IThemedIconManager,JetBrains.Util.Interop.DpiResolution)">
            <summary>
            Looks up the cache, invalidates/fills as needed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Icons.RotatedIconIdViewHelper.GdipBitmapFrames.EnsureFramesFor_FillFrames(JetBrains.Application.Icons.Animation.RotatedIconId,JetBrains.Application.Icons.IThemedIconManager,JetBrains.Application.UI.Icons.RasterizationResolution)">
            <summary>
            Renders an icon into frames (no cache lookup).
            </summary>
        </member>
        <member name="T:JetBrains.UI.Icons.ThemedIconExtension">
            <summary>
            <para>An extension which takes the type of the icon's generated Typeof identification class, and returns an expression which fetches the icon as an <see cref="T:System.Windows.Media.ImageSource"/> from the global resource dictionary.</para>
            <para>Warning: this extension can only be used on one property of an object, otherwise two extensions will clash.</para>
            </summary>
        </member>
        <member name="P:JetBrains.UI.Icons.ThemedIconExtension.TypeofIcon">
            <summary>
            The type of the icon's generated Typeof class. This class uniquely identifies an icon and allows to produce a resource key to the global dictionary which will fetch the icon image.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Icons.ThemedIconExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Implements the Markup Extension. Requires the <see cref="T:System.Windows.Markup.IProvideValueTarget"/> service.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Icons.ThemedIconExtension.ProvideValue(JetBrains.UI.Icons.IconId,System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.IServiceProvider)">
            <summary>
            <para>An overload which does not need the <see cref="T:System.Windows.Markup.IProvideValueTarget"/> service, but takes the target element and its property explicitly.</para>
            <para>The <paramref name="serviceProvider"/> is optional and is only passed to the <see cref="M:System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)"/> method.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Icons.ThemedIconExtension.ApplyTo(System.Windows.FrameworkElement,System.Windows.DependencyProperty,JetBrains.UI.Icons.IconId,System.IServiceProvider)">
            <summary>
            Calls <see cref="M:JetBrains.UI.Icons.ThemedIconExtension.ProvideValue(System.IServiceProvider)"/> and applies the result to the target object/property.
            </summary>
            <param name="elemTarget"></param>
            <param name="propTarget"></param>
            <param name="iconid"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="F:JetBrains.UI.Icons.ThemedIconExtension.ThemedIconExtensionAppliedProperty">
            <summary>
            Marker property to avoid co-using the same object.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Icons.ThemedIconManagerResourceKey">
            <summary>
            You can get the <see cref="T:JetBrains.Application.Icons.IThemedIconManager"/> instance from <see cref="T:JetBrains.UI.Wpf.IPlatformResourceDictionary"/> (which is universally available in WPF UI) with this resource key. All instances of this class are equal to each other.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Icons.ThemedIconManagerResourceKey.Key">
            <summary>
            An example key instance. All instances of this key are equal to each other.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Icons.ThemedIconViewImage">
            <summary>
            <para>A view control which works as a DataTemplate for the <see cref="T:JetBrains.UI.Icons.IconId"/> type.</para>
            <para>As it is registered with <see cref="T:JetBrains.UI.Wpf.PlatformResourceDictionary"/>, you can use <see cref="T:JetBrains.UI.Icons.IconId"/> as content across the product's UI, and it will be presented automatically.</para>
            <para>You can also use this control when you need to have fine-grained control over the resulting <see cref="T:System.Windows.Controls.Image"/> object and access to its properties. In this case, set the <see cref="T:JetBrains.UI.Icons.IconId"/> to its <see cref="P:System.Windows.FrameworkElement.DataContext"/> property (as would applying a Data Template do), or use the special <see cref="P:JetBrains.UI.Icons.ThemedIconViewImage.IconId"/> property which exposes the typed data context (for binding, you should still be using the <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/>).</para>
            </summary>
        </member>
        <member name="P:JetBrains.UI.Icons.ThemedIconViewImage.IconId">
            <summary>
            <para>Exposes the <see cref="P:System.Windows.FrameworkElement.DataContext"/> property typed to <see cref="T:JetBrains.UI.Icons.IconId"/>.</para>
            <para>As this object is primarily intended to be used as a data template, it receives the Icon ID in the <see cref="P:System.Windows.FrameworkElement.DataContext"/> property. This is a typed facade.</para>
            </summary>
        </member>
        <member name="P:JetBrains.UI.Icons.ThemedIconViewImage.UseCustomPixelSnapping">
            <summary>
            <para>Enables custom snapping offset computation used to increase icon sharpness.</para>
            <para>Default value is <value>true</value>.</para>
            <remarks>
            <para>Custom snapping sometimes conflicts with <see cref="P:System.Windows.UIElement.SnapsToDevicePixels"/> property, which is the only known reason why one would want to disable it.</para>
            </remarks>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Icons.ThemedIconViewImage.CombineManagerAndIcon(System.Object[])">
            <summary>
            Converter's function which joins together icon manager with icon id to get the live image source.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Icons.PublishThemedIconManagerToPlatformResources">
            <summary>
            <para>Mounts <see cref="T:JetBrains.Application.Icons.IThemedIconManager"/> into the common <see cref="T:JetBrains.UI.Wpf.IPlatformResourceDictionary"/> for getting the value in UI controls.</para>
            <para>NOTE: individual icons are not added anymore because each resource dictionary modification has a performance impact, and we got some dynamic icons. In WPF, use <see cref="T:JetBrains.UI.Icons.IconId"/> as content, or create a <see cref="T:JetBrains.UI.Icons.ThemedIconViewImage"/> control directly, or use the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> in XAML.</para>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Icons.RegisterThemedIconDefaultViews">
            <summary>
            Allows the use of themed icon IDs as automation objects.
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.Common.TextBlockWithHyperlinksUtils.ParseStringWithABandLinks(System.String)">
            <summary>
            Creates hyperlinks from HTML-formatted links. Call <see cref="M:JetBrains.UI.License2.Common.TextBlockWithHyperlinksUtils.ParseStringWithBandLinks(System.String)"/> for plain text pieces
            </summary>
            <param name="text">Input text</param>
            <returns>List of inline for <see cref="T:JetBrains.UI.License2.Common.TextBlockWithHyperlinks"/></returns>
        </member>
        <member name="M:JetBrains.UI.License2.Common.TextBlockWithHyperlinksUtils.ParseStringWithBandLinks(System.String)">
            <summary>
            Creates bold inlines from text pieces in b tags. Calls <see cref="M:JetBrains.UI.License2.Common.TextBlockWithHyperlinksUtils.ParseStringWithLinks(System.String)"/> for plain text pieces
            </summary>
            <param name="text">Input text</param>
            <returns>List of inline for <see cref="T:JetBrains.UI.License2.Common.TextBlockWithHyperlinks"/></returns>
        </member>
        <member name="M:JetBrains.UI.License2.Common.TextBlockWithHyperlinksUtils.ParseStringWithLinks(System.String)">
            <summary>
            Creates hyperlinks from text pieces starting with http and inlines for plain text pieces
            </summary>
            <param name="value">Input text</param>
            <returns>List of inline for <see cref="T:JetBrains.UI.License2.Common.TextBlockWithHyperlinks"/></returns>
        </member>
        <member name="T:JetBrains.UI.License2.Common.EnabledEntitiesControl">
            <summary>
            Interaction logic for EnabledEntitiesControl.xaml
            </summary>
            <summary>
            EnabledEntitiesControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.Common.EnabledEntitiesControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.Common.FooterControl">
            <summary>
            Interaction logic for FooterControl.xaml
            </summary>
            <summary>
            FooterControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.Common.FooterControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.Common.StatusIndicatorControl">
            <summary>
            Interaction logic for StateControl.xaml
            </summary>
            <summary>
            StatusIndicatorControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.Common.StatusIndicatorControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.ConsentOptionsControl">
            <summary>
            ConsentOptionsControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.ConsentOptionsControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.AcceptDocumentControl">
            <summary>
            Interaction logic for AcceptDocumentControl.xaml
            </summary>
            <summary>
            AcceptDocumentControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.AcceptDocumentControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.EntityControl">
            <summary>
            EntityControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.EntityControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.JBAccount.AssetControl">
            <summary>
            Interaction logic for AssetControl.xaml
            </summary>
            <summary>
            AssetControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.JBAccount.AssetControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.JBAccount.JBAccountInfoControl">
            <summary>
            Interaction logic for JBAccountInfoControl.xaml
            </summary>
            <summary>
            JBAccountInfoControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.JBAccount.JBAccountInfoControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.JBAccount.ManageJBAccountControl">
            <summary>
            Interaction logic for ManageJBAccountControl.xaml
            </summary>
            <summary>
            ManageJBAccountControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.JBAccount.ManageJBAccountControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.JBAccount.ManageJBAccountWindow">
            <summary>
            Interaction logic for ManageJBAccountWindow.xaml
            </summary>
            <summary>
            ManageJBAccountWindow
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.JBAccount.ManageJBAccountWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.LicenseInformationControl">
            <summary>
            Interaction logic for LicenseInformationWindow.xaml
            </summary>
            <summary>
            LicenseInformationControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.LicenseInformationControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.LicenseInformationWindow">
            <summary>
            Interaction logic for LicenseInformationWindow2.xaml
            </summary>
            <summary>
            LicenseInformationWindow
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.LicenseInformationWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.LicenseKeys.UserContactsControl">
            <summary>
            Interaction logic for UserContactsControl.xaml
            </summary>
            <summary>
            UserContactsControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.LicenseKeys.UserContactsControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.LicenseKeys.UserContactsWindow">
            <summary>
            Interaction logic for UserContactsWindow.xaml
            </summary>
            <summary>
            UserContactsWindow
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.LicenseKeys.UserContactsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.LicenseKeys.UserLicenseControl">
            <summary>
            UserLicenseControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.LicenseKeys.UserLicenseControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.LicenseServer.LicenseServerControl">
            <summary>
            Interaction logic for LicenseServerControl.xaml
            </summary>
            <summary>
            LicenseServerControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.LicenseServer.LicenseServerControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.LicenseServer.LicenseServerInfoControl">
            <summary>
            Interaction logic for LicenseServerInfoControl.xaml
            </summary>
            <summary>
            LicenseServerInfoControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.LicenseServer.LicenseServerInfoControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.ManageWindow.ManageControl">
            <summary>
            Interaction logic for ManageControl.xaml
            </summary>
            <summary>
            ManageControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.ManageWindow.ManageControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.ManageWindow.ManageItemControl">
            <summary>
            Interaction logic for ManageItemControl.xaml
            </summary>
            <summary>
            ManageItemControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.ManageWindow.ManageItemControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.ManageWindow.ManageWindow">
            <summary>
            Interaction logic for ManageWindow.xaml
            </summary>
            <summary>
            ManageWindow
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.ManageWindow.ManageWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.License2.TextBoxInfoControl">
            <summary>
            Interaction logic for LicenseKeysInfoControl.xaml
            </summary>
            <summary>
            TextBoxInfoControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.License2.TextBoxInfoControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage3">
            <summary>
            A base options page that features a vertical stack panel and maintains the bindings list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage3.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Components.IUIApplication,System.String)">
            <summary>
            Inits the base, sets the PID that will be given out thru <see cref="P:JetBrains.Application.UI.Options.IOptionsPage.Id"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage3.Stack">
            <summary>
            Gets the stack panel that is the body of this page.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage3.Controls">
            <summary>
            Gets the <see cref="P:System.Windows.Forms.Control.Controls"/> collection of the <see cref="P:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage3.Stack"/> panel that is the body of this page.
            Basically, you should be adding presentaiton controls to this collection.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage">
            <summary>
            A base options page that features a vertical stack panel and maintains the bindings list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.Components.IUIApplication,System.String)">
            <summary>
            Inits the base, sets the PID that will be given out thru <see cref="P:JetBrains.Application.UI.Options.IOptionsPage.Id"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Bind``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Adds a one-way binding that is executed backwards on OK.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Bind(JetBrains.DataFlow.IPropertyBinding)">
            <summary>
            Adds a one-way binding that is executed backwards on OK.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control"></see> and its child controls and optionally releases the managed resources.
            </summary>
            
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.ValidatePage">
            <summary>
            Check if the settings on the page are consistent, and page could be closed.
            </summary>
            <returns><c>true</c> if page data is consistent.</returns>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Control">
            <summary>
            Control to be shown as page.
            May be <c>Null</c> if the page does not have any UI.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Id">
            <summary>
            Gets the ID of this option page.
            <see cref="T:JetBrains.UI.Options.IOptionsDialog"/> or <see cref="T:JetBrains.Application.UI.Options.OptionsPageDescriptor"/> could be used to retrieve the <see cref="T:JetBrains.Application.UI.Options.OptionsDialog.OptionsManager"/> out of it.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls">
            <summary>
            Pre-styled controls for the option pages.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.Helpers.Controls.IndentF">
            <summary>
            Padding for the inner level of controls (to be laid out under the logically parenting controls)
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.Helpers.Controls.IndentA">
            <summary>
            Padding for the inner level of controls (to be laid out under the logically parenting controls)
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.AddColumnChild(System.Windows.Forms.TableLayoutPanel,System.Int32,System.Windows.Forms.Control)">
            <summary>
            Adds a child control to the next column of the grid.
            </summary>
            <param name="grid">Grid.</param>
            <param name="child">The control to be added.</param>
            <param name="percent">Percent size, if <c>1</c> to <c>100</c>. AutoSize, if <c>0</c>.</param>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.AddRowChild(System.Windows.Forms.TableLayoutPanel,System.Int32,System.Windows.Forms.Control)">
            <summary>
            Adds a child control to the next row of the grid.
            </summary>
            <param name="grid">Grid.</param>
            <param name="child">The control to be added.</param>
            <param name="percent">Percent size, if <c>1</c> to <c>100</c>. AutoSize, if <c>0</c>.</param>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.AddRowChildAbsolute(System.Windows.Forms.TableLayoutPanel,System.Windows.Forms.Control,System.Single)">
            <summary>
            Adds a child control to the next row of the grid.
            </summary>
            <param name="grid">Grid.</param>
            <param name="child">The control to be added.</param>
            <param name="height">The height in pixels.</param>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.CreateGrid">
            <summary>
            Creates a grid, pre-set with auto-sizing modes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.CreateNoSolutionCueBanner(JetBrains.Application.UI.Components.IUIApplication)">
            <summary>
            In case we have to disable all the controls on the page without a solution, this function creates a control that should be placed on the page instead of them all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.PushOrigin(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
            Pushes the graphics context origin shift so that painting at (0,0) rendered at the location specified.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.PushState(System.Drawing.Graphics)">
            <summary>
            Pushes the graphics state until the return value is disposed of, using the <see cref="M:System.Drawing.Graphics.Save"/> and <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)"/> functions.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.PushSuspendLayout(System.Windows.Forms.Control)">
            <summary>
            Pushes the <see cref="M:System.Windows.Forms.Control.SuspendLayout"/> operation, to be popped on disposal.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.SetupGrid(System.Windows.Forms.TableLayoutPanel)">
            <summary>
            Sets up a grid, with docking and auto-sizing modes.
            Returns the same instance.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.Button">
            <summary>
            A pre-setup auto-sizing button.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.EditBox">
            <summary>
            An edit box.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.HorzStackPanel">
            <summary>
            A pre-setup horizontal stack panel for use on the dialogs.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.Label">
            <summary>
            A pre-setup label for use on the dialogs.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.Label.#ctor(System.String,System.Windows.Forms.Padding)">
            <param name="text"></param>
            <param name="marginPlus">Added to the default margin.</param>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.SectionHeading">
            <summary>
            A heading for the options section.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.Separator">
            <summary>
            Adds vertical space to the vertical stack.
            Makes the stack occupy the whole width.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.Controls.Separator.DefaultHeight">
            <summary>
            Gets the default empty separator of the default height.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.Separator.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            
            <returns>
            An ordered pair of type <see cref="T:System.Drawing.Size"></see> representing the width and height of a rectangle.
            </returns>
            
            <param name="proposedSize">The custom-sized area for a control. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.Separator.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.Spin">
            <summary>
            A spin control with an integer property mirroring the <see cref="P:System.Windows.Forms.NumericUpDown.Value"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.Helpers.Controls.Spin.IntegerValue">
            <summary>
            The integer value of the control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.Helpers.Controls.Timer.IsFiredOnEnable">
            <summary>
            Gets or sets whether the timer will fire the signal immediately when it gets enabled.
            On <c>False</c>: first fires <see cref="P:System.Windows.Forms.Timer.Interval"/> ms after enabling.
            On <c>True</c>: first fires right when it is enabled.
            Default is <c>False</c>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.VertStackPanel">
            <summary>
            A pre-setup horizontal stack panel for use on the dialogs.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.Tutorial.TutorialOptionsPage">
            <summary>
            It's tutorial page. howto use options page' dsl.
            Keep attribute OptionsPage commented in VCS.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.BoolOptionView">
            <summary>
            BoolOptionView
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.BoolOptionView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.FileChooserView">
            <summary>
            FileChooserView
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.FileChooserView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.ButtonOptionView">
            <summary>
            ButtonOptionView
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.ButtonOptionView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.ComboEnumWithCaptionView">
            <summary>
            ComboEnumWithCaptionView
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.ComboEnumWithCaptionView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.ComboOptionView">
            <summary>
            ComboOptionView
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.ComboOptionView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.HeaderOptionView">
            <summary>
            HeaderOptionView
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.HeaderOptionView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.IntOptionView">
            <summary>
            IntOptionView
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.IntOptionView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.RadioOptionView">
            <summary>
            RadioOptionView
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.RadioOptionView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.RichTextOptionView">
            <summary>
            RichTextOptionView
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.RichTextOptionView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.SingleRadioView">
            <summary>
            SingleRadioView
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.SingleRadioView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.StringOptionView">
            <summary>
            StringOptionView
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.StringOptionView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.Search.SearchHelpOptionView">
            <summary>
            SearchHelpOptionView
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.Search.SearchHelpOptionView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.OptionsPageList">
            <summary>
            Represents a control to show list of pages
            </summary>
            <summary>
            OptionsPageList
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsDialog2.OptionsPageList.Pages">
            <summary>
            Gets or sets list of pages to show
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog2.OptionsPageList.PagesProperty">
            <summary>
            Using a DependencyProperty as the backing store for Pages.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="E:JetBrains.UI.Options.OptionsDialog2.OptionsPageList.PageRequested">
            <summary>
            Occurs when user clicks on page in the list
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.OptionsPageList.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.CopySettingsDialog">
            <summary>
            Represents dialog for selection particular 
            settings to copy/import/export them
            </summary>
            <summary>
            CopySettingsDialog
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.CopySettingsDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.SettingsLayersDialog">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            SettingsLayersDialog
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.SettingsLayersDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeView">
            <summary>
            A tree visualizing a part of the settings schema corresponding to the current context, with hierarchical checkbox.
            </summary>
            <summary>
            SettingsSnapshotTreeView
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeView.ListenKeyboardOn">
            <summary>
            Gets or sets what element we should use to listen hot key for search box
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeView.ListenKeyboardOnProperty">
            <summary>
            Using a DependencyProperty as the backing store for ListenKeyboardOn.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog2.OptionsDialogView">
            <summary>
            Represent the main settings dialog
            </summary>
            <summary>
            OptionsDialogView
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog2.OptionsDialogView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionPages.OptionsDialogViewOwnerInteractive">
            <summary>
            Gives lifetime and components to the option dialog instances it creates.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionPages.OptionsDialogViewOwnerInteractive.myFShow">
            <summary>
            We require that the guard is not held when this method is called.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionPages.OptionsDialogViewOwnerInteractive.Show(JetBrains.Application.UI.Automation.WindowModality,System.String,JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity,JetBrains.DataFlow.LifetimeDefinition,JetBrains.Application.UI.Options.OptionPagesDiagnostics)">
            <summary>
            Shows the Options dialog.
            We require that the guard is not held when this method is called.
            </summary>
            <param name="modality">Modal or not.</param>
            <param name="page">Page to select. <c>NULL</c> for MRU.</param>
            <param name="layer">Settings layer to edit in the dialog. <c>NULL</c> for Smart context (default Options dialog mode).</param>
            <param name="lifetimeDefinition">Limits the window lifetime and reports when the window closes.</param>
        </member>
        <member name="T:JetBrains.UI.Options.OptionPages.PlatformEnvironmentGeneralPageCheckboxes">
            <summary>
              The checkboxes inside Platform Environment General Page
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.IOptionsDialog">
            <summary>
            The options dialog interface.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.IOptionsDialog.CurrentPage">
            <summary>
            Gets or sets the current page in the options dialog.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.IOptionsDialog.GetOptionsPageWindowFrame(JetBrains.Application.UI.Options.IOptionsPage)">
            <summary>
            Gets a window frame that represents the given Options Page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.IOptionsDialog.GetPage(System.String)">
            <summary>
            Fetches <see cref="T:JetBrains.Application.UI.Options.IOptionsPage"/> instance by id.
            This method can be used for fetching values from another page (for dependent pages).
            As this method might cause creating the other page, must be called in a guarded context only.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.IOptionsDialog.SettingsStoreSmartContext">
            <summary>
            <para>Gets the Settings Store context for saving your Options Page settings.</para>
            <para>Use this for binding your Options Page settings controls in real time.</para>
            <para>In case you need to manually control the context your settings go to (like when they reference solution information and thus have no meaning in the global context), take <see cref="T:JetBrains.Application.Settings.ISettingsStore"/> and operate it directly. In default cases, use this context (which is a context in the same Settings Store).</para>
            <para>This context belongs to a <see cref="T:JetBrains.Application.Settings.ISettingsStoreInTransaction">Settings Store transaction</see>, so you can freely modify it in Options UI and access this data across pages. The choice of the context depends on the user's settings editing mode: either Smart Save by default, or writing to a specific storage in Advanced mode.</para>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionPageViewStore">
            <summary>
            Creates and caches the views of the pages.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionPageViewStore.Views">
            <summary>
            Gets the collection of the views currently in the cache.
            Those are all the pages to take part in the current Options dialog run.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionPageViewStore.GetPageView(JetBrains.Application.UI.Options.OptionsPageDescriptor)">
            <summary>
            Gets cached or creates new page view.
            The factory function must operate in the guarded context.
            </summary>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialogViewSettings">
            <summary>
            Settings for <see cref="T:JetBrains.UI.Options.OptionsDialog2.OptionsDialogView" />.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Settings.ImportExport.Automation.SourceDataFilterAutomation.LoadedFromSource">
            <summary>
            Exposes the settings loaded from source, when they are ready, for binding to the display lists.
            Each value lifetimed under <see cref="F:JetBrains.UI.Settings.ImportExport.Model.SourceDataFilterModel.mySequenceCalculatedPreviews"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Settings.ImportExport.Automation.SourceDataFilterAutomation.FilteringModes.Storage">
            <summary>
            Filtering on the physical tree over the storage.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Settings.ImportExport.Automation.SourceDataFilterAutomation.FilteringModes.Store">
            <summary>
            Filtering on the logical tree on the settings schema.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Settings.ImportExport.Model.SourceDataFilterModel.LoadedFromSource">
            <summary>
            Exposes the settings loaded from source, when they are ready, for binding to the display lists.
            Each value lifetimed under <see cref="F:JetBrains.UI.Settings.ImportExport.Model.SourceDataFilterModel.mySequenceCalculatedPreviews"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.OwnedDialogPositionSettings">
            <summary>
            Settings for saved window positions managed by <see cref="T:JetBrains.UI.Settings.SaveWindowPositionBehavior" />.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.SaveWindowPositionAutomation">
            <summary>
            Backend for <see cref="T:JetBrains.UI.Settings.SaveWindowPositionBehavior" />.
            Supply with components in your ViewModel and expose for binding in the view.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.SaveWindowPositionBehavior">
            <summary>
            Apply to a window whose position should be saved and restored, relatively to the owner window, DPI-aware, preventing falling out of the screen or between monitors.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.IconsForDefaultSettingsStorages">
            <summary>
            Base settings layers are registered in the Shell project which is not capable of operating the icons.
            Add to the layers presentation by setting up their icons.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.OwnedDialogPosition">
            <summary>
            Stores position (location + size) of owned dialogs relatively to the center of their owning window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Settings.OwnedDialogPosition.CenterLocation">
            <summary>
            The distance of the child window center from the main/parent window center, in Avalon units.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Settings.OwnedDialogPosition.Size">
            <summary>
            The size of the child window, in Avalon units.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.OwnedDialogPosition.ApplyToWindow(System.Windows.Window,System.Windows.Forms.IWin32Window)">
            <summary>
            Converts to absolute screen coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.OwnedDialogPosition.BindToSettings(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{JetBrains.UI.Settings.OwnedDialogPosition},System.Windows.Window,System.Windows.Forms.IWin32Window)">
            <summary>
            Reads window position from settings and applies; does the reverse upon the end of the lifetime.
            Make sure that the <paramref name="propSettings" /> lifetime is still alive when the main <paramref name="lifetime" /> terminates, of when the window closes, otherwise the settings will fail to get written.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.OwnedDialogPosition.FromScreen(System.Windows.Rect,System.Windows.Forms.IWin32Window)">
            <summary>
            Creates from absolute screen coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.OwnedDialogPosition.FromScreen(System.Drawing.Rectangle,System.Windows.Forms.IWin32Window)">
            <summary>
            Creates from absolute screen coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.OwnedDialogPosition.FromWindow(System.Windows.Window,System.Windows.Forms.IWin32Window)">
            <summary>
            Creates from absolute screen coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.OwnedDialogPosition.ToScreen(System.Windows.Forms.IWin32Window)">
            <summary>
            Converts to absolute screen coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.OwnedDialogPosition.ToScreen2(System.Windows.Forms.IWin32Window)">
            <summary>
            Converts to absolute screen coordinates.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.PointRelativeToMainWindow">
            <summary>
            A screen point relative to the application main window. Wraps the <see cref="T:System.Windows.Point" /> type, but with some additional semantic.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Settings.PointRelativeToMainWindow.Value">
            <summary>
            The distance of the child window center from the main/parent window center, in Avalon units.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.PointRelativeToMainWindow.FromScreen(System.Windows.Point,System.Windows.Forms.IWin32Window)">
            <summary>
            Creates from absolute screen coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.PointRelativeToMainWindow.ToScreen(System.Windows.Forms.IWin32Window)">
            <summary>
            Converts to absolute screen coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.StorageView.StorageViewEntryFactory.FireContentChanged(System.String)">
            <summary>
            Actually notifies entries specified.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Settings.StorageView.StorageViewEntryFactory.IsHierarchical">
            <summary>
            Gets whether the tree should display storage keys as a tree (slash-separated subkeys are children) [<c>True</c>], or all of the keys in the storage should be given out as a flat list [<c>False</c>].
            </summary>
        </member>
        <member name="P:JetBrains.UI.Settings.StorageView.StorageViewEntryFactory.RootItems">
            <summary>
            Tree root items live list you should bind your tree to.
            Then get children from <see cref="P:JetBrains.UI.Settings.StorageView.StorageViewEntry.Children"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Settings.StorageView.StorageViewEntry.Key">
            <summary>
            Storage key to the entry. <c>Null</c> means it's <see cref="P:JetBrains.UI.Settings.StorageView.StorageViewEntry.IsFakeRootEntry"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Settings.StorageView.StorageViewEntry.KeyNotNull">
            <summary>
            Retuns the <see cref="P:JetBrains.UI.Settings.StorageView.StorageViewEntry.Key"/> if a non-<see cref="P:JetBrains.UI.Settings.StorageView.StorageViewEntry.IsFakeRootEntry"/> in a guaranteed-non-<c>Null</c> fashion.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Settings.StorageView.StorageViewEntry.DisplayName">
            <summary>
            What should be displayed in the tree.
            Depends on <see cref="F:JetBrains.UI.Settings.StorageView.StorageViewEntryFactory.IsHierarchical"/>: just the key local name in hierarchy, or the full name in flat mode.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Settings.StorageView.StorageViewEntry.IsFakeRootEntry">
            <summary>
            The fake root entry is not actually displayed in the tree, but instead its children live collection is used as the tree root-level items source.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.StorageView.StorageViewEntry.EnumCurrentChildren">
            <summary>
            Gets the list of the current children (order important).
            When we're first asked of the child list, just dump it into a live collection.
            Later on, update the collection live when settings under our key change.
            </summary>
            <returns>Nonempty if there're chldren, empty but non-<c>Null</c> when children are possible but not at this moment, <c>Null</c> if this node cannot have children even in theory (to save on the childlist-keeping infrastructure).</returns>
        </member>
        <member name="F:JetBrains.UI.Settings.StorageView.StorageViewEntry.ContentChanged">
            <summary>
            Fired externally by the factory so that we updated the value and children list.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeNodeFactory">
            <summary>
            Creates nodes, tracks their change notifications and changes in the settings store context.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeNode.IsSchemaOnlyInstance">
            <summary>
            Whether this indexed key instance is not bound to a particular index value, but only exists to expose the settings schema under those indexed keys which do not have any index values defined to show in the tree.
            </summary>// TODO: indicate in preview area that this is a schema-only instance
        </member>
        <member name="F:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeNode.ValueTypes.myMappingKeyType">
            <summary>
            <c>NULL</c> on non-mapped keys and entries.
            Mapped key type for mapped things.
            <c>NULL</c> on synthetic nodes.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeNode.ValueTypes.myValueType">
            <summary>
            <c>NULL</c> on a <see cref="T:JetBrains.Application.Settings.SettingsKey"/>.
            Type of the entry value on a <see cref="T:JetBrains.Application.Settings.SettingsScalarEntry"/>.
            Type of the mapped value on a <see cref="T:JetBrains.Application.Settings.SettingsIndexedEntry"/>.
            On synthetic nodes, the type of the node (key/value/etc).
            </summary>
        </member>
        <member name="P:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeNode.ValueTypes.MappingKeyType">
            <summary>
            <c>NULL</c> on non-mapped keys and entries.
            Mapped key type for mapped things.
            <c>NULL</c> on synthetic nodes.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeNode.ValueTypes.ValueType">
            <summary>
            <c>NULL</c> on a <see cref="T:JetBrains.Application.Settings.SettingsKey"/>.
            Type of the entry value on a <see cref="T:JetBrains.Application.Settings.SettingsScalarEntry"/>.
            Type of the mapped value on a <see cref="T:JetBrains.Application.Settings.SettingsIndexedEntry"/>.
            On synthetic nodes, the type of the node (key/value/etc).
            </summary>
        </member>
        <member name="P:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeNode.ValueTypes.TipText">
            <summary>
            Meaningful part of the tooltip text.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeNode.SettingsChanged">
            <summary>
            Fired externally when settings under this key/entry change. This includes the case when we're re-attached to another settings store.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeNode.UpdateLiveList``1(JetBrains.DataFlow.ListEvents{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Updates <paramref name="livelist"/> to match <paramref name="currentitems"/> in set and order by applying the diff so that to minimize changes to the list (and to the tree bound to it).
            </summary>
            <param name="livelist">The live list to be updated with minimum changes.</param>
            <param name="currentitems">The current snapshot of the items. <paramref name="livelist"/> must be this way after the call.</param>
        </member>
        <member name="M:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeKey.CreateKeyOuterNode(JetBrains.Application.Settings.SettingsKey,JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeNodeFactory,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Creates one of the key kinds: for a non-indexed key, this is the one and only key node; for an indexed key, this is the root node for the indexed key.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeKey.CreateKeyInnerNode(JetBrains.Application.Settings.SettingsIndexedKey,JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeNodeFactory,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},System.Object)">
            <summary>
            Creates one of the key kinds: for a non-indexed key, this is the one and only key node; for an indexed key, this is the root node for the indexed key.
            </summary>
            
        </member>
        <member name="M:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeKey.EnumSubkeysAndEntriesChildren">
            <summary>
            Children when we're listing key contents. In use by non-indexed keys and by per-index instances of an indexed key.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeKey.GetSubkeysAndEntriesChildrenList">
            <summary>
            Children when we're listing key contents. In use by non-indexed keys and by per-index instances of an indexed key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeKey.SetDictionaryItemCow(System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.SettingsKey,System.Object)">
            <summary>
            Modifies the dictionary copy-on-write style.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeKeyIndexed">
            <summary>
            Base class for all indexed keys.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeKeyNonIndexed">
            <summary>
            The one and only node of a non-indexed key.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeKeyIndexedRoot">
            <summary>
            The root node of a subtree of nodes related to an indexed key.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeKeyIndexedRoot.EnumCurrentChildren">
            <summary>
            Gets the list of the current children (order important).
            When we're first asked of the child list, just dump it into a live collection.
            Later on, update the collection live when settings under our key change.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeKeyIndexedInstanceReal">
            <summary>
            Parented under <see cref="T:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeKeyIndexedRoot"/>, represents a particular instance of an indexed key. Its index is in parent-key-indices.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeKeyIndexedInstanceSchemaOnly">
            <summary>
            Parented under <see cref="T:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeKeyIndexedRoot"/>, represents a particular instance of an indexed key. Its index is in parent-key-indices.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeEntry.IconBrushes">
            <summary>
            Render icons for all possible entry uses.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeEntry.CreateEntryOuterNode(JetBrains.Application.Settings.SettingsEntry,JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeNodeFactory,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Creates one of the key kinds: for a non-indexed key, this is the one and only key node; for an indexed key, this is the root node for the indexed key.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeIndexedEntryRoot.EnumCurrentChildren">
            <summary>
            Gets the list of the current children (order important).
            When we're first asked of the child list, just dump it into a live collection.
            Later on, update the collection live when settings under our key change.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeIndexedEntryInstance">
            <summary>
            Innermost indexed entry node, holds the value per specific index.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.SettingsSchemaView.SchemaTreeIndexedEntryIndex">
            <summary>
            A node under the indexed entry outer node, holds the value of the index.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.About.AboutBoxView.MinPictureWidth">
            <summary>
            Min width of the image.
            Dialog is sized to fit the image, too small a width will give trouble to the text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.About.AboutBoxView.InitView_Image">
            <summary>
            Properly-sized image control. <c>Null</c> if not available for this product.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.About.AboutBoxView.SwitchIntoCopyClipboardMode(System.String,JetBrains.Application.UI.Components.IUIApplication)">
            <summary>
            Enables copying the textual About data to the clipboard.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StdApplicationUI.StatusBar.Indicators.MemoryUsageIndicator">
            <summary>
            Displays memory usage in the status bar.
            Shows and hides based on the options.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.Indicators.MemoryUsageIndicator.OnHide">
            <summary>
            Hides the indicator, hints on bringing it back.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.Indicators.MemoryUsageIndicator.ShowPopupMessage(JetBrains.UI.RichText.RichText)">
            <summary>
            Shows a message in a popup tooltip somewhere near the indicator.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StdApplicationUI.StatusBar.Indicators.TrefoilIndicator">
            <summary>
            A test status bar indicator that renders a trefoil.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.Indicators.TrefoilIndicator.CreateIndicatorInStatusBar(JetBrains.DataFlow.Lifetime,JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar)">
            <summary>
            Creates a ready-for-use status-bar indicator.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView">
            <summary>
            Represents the window that hosts the <see cref="T:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.myData">
            <summary>
            <see cref="P:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.Data"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.myIsHovered">
            <summary>
            <c>True</c> whenif mouse is over the control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.myPadding">
            <summary>
            Padding of the indicator, as reflected from the data.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.myWindowlessControl">
            <summary>
            The effective Windowless Control value, coming from the <see cref="P:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.Data"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.#ctor(JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext,JetBrains.Application.Components.IComponentContainer,JetBrains.Application.UI.Automation.IAutomationViewsRegistry)">
            <summary>
            Creates a new view and attaches it to its data.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.Bounds">
            <summary>
            Gets or sets the window bounds, in parent's client coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.Data">
            <summary>
            Gets or sets the document this view represents.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.GottenDirty">
            <summary>
            Fires when the indicator must repaint itself.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.Visible">
            <summary>
            Gets or sets whether the window is visible.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.CreateControl(System.Windows.Forms.IWin32Window,System.Drawing.Rectangle)">
            <summary>
            Creates the control.
            If the rectangle is non-empty, makes the control visible.
            </summary>
            <param name="parent">Handle to the parent window.</param>
            <param name="bounds">Bounds of the control, in parent client coords.</param>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.CreateControl(System.Windows.Forms.IWin32Window)">
            <summary>
            Creates the control, does not assign it any meaningful size, does not make it visible.
            </summary>
            <param name="parent">Handle to the parent window.</param>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.OnButtonDblClk(System.Windows.Forms.Message@,System.Windows.Forms.MouseButtons)">
            <summary>
            Generates the mouse double-clicks when the mouse button is doubleclicked.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.OnButtonUp(System.Windows.Forms.Message@,System.Windows.Forms.MouseButtons)">
            <summary>
            Generates the mouse clicks when the mouse button is released.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.OnContextMenu(System.Windows.Forms.Message@)">
            <summary>
            Causes the context-menu event to fire.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.OnPaint">
            <summary>
            WM_PAINT.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.PaintBackground(System.Drawing.Graphics)">
            <summary>
            Paints the appropriately styled background for the status bar control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.OnHandleChange">
            <summary>
            Specifies a notification method that is called when the handle for a window is changed. 
            </summary>
            
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window. 
            </summary>
            
            <param name="m">A <see cref="T:System.Windows.Forms.Message"></see> that is associated with the current Windows message. </param>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.Application.UI.Controls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.SetLayout(JetBrains.Application.UI.PopupLayout.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.Application.UI.Tooltips.ITooltipInfo" />, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="T:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim">
            <summary>
            <para>Does subclassing of the standard WinAPI Status Bar control to attach it to the application's <see cref="T:JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar"/>.</para>
            <para>Suitable for Visual Studio 7–9 and WinForms standalone applications like DT.</para>
            <para>This only implements insering the indicators. Text and emphasis must be handled elsewhere (the reason is that e.g. in VS text is handled with std api while indicators have to be hacked in with subclassing).</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.myStatusbarMessagesAll">
            <summary>
            All of the statusbar-specific messages.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.myStatusbarMessagesExpected">
            <summary>
            Those of the statusbar-specific messages that we expect to come from VS to our statusbar.
            It's not that we handle them all, but we're aware of what they could do.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.myStatusbarMessagesUnexpected">
            <summary>
            Those of the statusbar-specific messages that are not expected to come from VS to our statusbar.
            If such are discovered, it may be needed to think of how to manage them.
            For example, seeing <see cref="F:JetBrains.Interop.WinApi.WindowsMessages.SB_GETPARTS"/> would be some kind of a small f***-up.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.myIndicatorViews">
            <summary>
            The list of the indicator windows we place in the status bar parts.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.myLastHandle">
            <summary>
            Persists the MRU attached handle, so that we could kick it into recalculating even after we fully detach
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.myPaddingAroundEachPart">
            <summary>
            Padding around each of the indicator parts placed in the status bar.
            The value is updated when we intercept the Devenv's queries for the status bar extents. NOTE: updated no more
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.myRemappedPartsBuffer">
            <summary>
            When we change the status bar parts layout, this is the buffer that is passed around to the unmanaged code.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.myVisibilityUpdatesWaiting">
            <summary>
            Whether there are pending visibility updates, and no new should be added (see <see cref="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.OnPingStatusBar"/>).
            </summary>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.MinFirstPartWidth">
            <summary>
            Specifies the minimum width of the first statusbar part.
            We won't insert our content if the resulting first part (one with the meaningful text) is smaller than that. 
            </summary>
        </member>
        <member name="P:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.IndicatorData">
            <summary>
            Gets the list of indicator datas belonging to the indicator views this status bar hosts.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.IsVisible">
            <summary>
            Gets whether the status bar window is currently visible.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.Attach(System.IntPtr)">
            <summary>
            Looks up a status bar on the given window, and attaches to it.
            Note: the status bar window always exists, even if the status bar is not shown in DEVENV.
            Throws on failure.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.GetUnexpectedStatusBarMessages">
            <summary>
            Produces an “all but expected” statusbar messages collection.
            Useful for logging, but we'd like to rather manually enter an array of the things we do expect.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.InvalidateSizeOf(System.IntPtr)">
            <summary>
            Forces the window to invalidate its size.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.IndicatorViews">
            <summary>
            Gets the list of indicator views this status bar hosts.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.InvalidateSize">
            <summary>
            Makes the statusbar owner reapply the layout, so that we could remap its parts and inject our indicators.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.OnPingStatusBar">
            <summary>
            Executed periodically.
            Syncs to the status bar properties.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.OnSbGetBorders(System.Windows.Forms.Message@)">
            <summary>
            When Devenv is requesting the statusbar borders, store this info for our use.
            Those are various paddings in the status bar window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.OnSbSetParts(System.Windows.Forms.Message@)">
            <summary>
            Devenv is trying to assign parts to the status bar.
            This is the place where we modify them to make room for our own, and add new parts.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.OnSbSetParts_Apply(System.Collections.Generic.IList{System.Drawing.Rectangle})">
            <summary>
            After all the parts' sizes are measured, apply them.
            </summary>
            <param name="rectBounds">Indicator bounds, in statusbar client coords.</param>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.OnSbSetParts_Measure(System.Windows.Forms.Message@,System.Collections.Generic.IList{System.Drawing.Rectangle},JetBrains.UI.IGraphicsContainer)">
            <summary>
            Measures the statusbar and determines the placing of all the registered indicators.
            </summary>
            <param name="m">The message being processed.</param>
            <param name="rectBounds">Indicator bounds, in statusbar client coords.</param>
            <param name="gc">Provides graphics for measuring against.</param>
            <returns>Whether the base <see cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)"/> has been called in the course of action.</returns>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.OnHandleChange">
            <summary>
            Specifies a notification method that is called when the handle for a window is changed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window. 
            </summary>
            
            <param name="m">A <see cref="T:System.Windows.Forms.Message"></see> that is associated with the current Windows message. </param>
        </member>
        <member name="F:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.StatusBarWindowClassName">
            <summary>
            Name of the common controls Windows class of the statusbar control window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim.FindStatusBarInMainWindow(System.IntPtr)">
            <summary>
            In an application window, looks up all of the child windows to find the status bar window. Throws on a failure.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StdApplicationUI.NullMainWindow">
            <summary>
            The base fallback implementation of the main window interface. Overridden with the real window in all interactive environments.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StdApplicationUI.StaticMainWindow">
            <summary>
            A main window whose handle does not change with time.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StaticMainWindow.#ctor(JetBrains.DataFlow.Lifetime,System.IntPtr)">
            <summary>
            Wraps a native window handle. Can be <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StaticMainWindow.#ctor(JetBrains.DataFlow.Lifetime,System.Windows.Forms.IWin32Window)">
            <summary>
            Wraps a window interface. Can be <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StdApplicationUI.StaticMainWindow.#ctor(JetBrains.DataFlow.Lifetime,System.Void*)">
            <summary>
            Wraps a native window handle. Can be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskBar.THUMBBUTTON.THBN_CLICKED">
            <summary>
            WPARAM value for a THUMBBUTTON being clicked.
            </summary>
        </member>
        <member name="T:JetBrains.UI.TextHighlighting.Attached.Highlighting">
            <summary>
            Attached properties describing a propogating via visual tree highlighting definition.
            Components, which are supported 'attached highlighting', should invoke AddOwner in their constructor
            </summary>
        </member>
        <member name="T:JetBrains.UI.Theming.IHaveResolution">
            <summary>
            A control (mostly WinForms-related, because WPF works with logical pixels) which knows and maintains its resolution.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Theming.IThemingEx.PopulateResourceDictionary(JetBrains.Application.UI.Components.Theming.ITheming,JetBrains.DataFlow.Lifetime,System.Windows.ResourceDictionary)">
            <summary>
              <para>Populates the resource dictionaty with applicable resources required for WPF theming.</para>
              <para>This includes the icon manager resources and color constants.</para>
              <para>The lifetime is required to have the live colors in resource dictionary. To get non-live, terminate the lifetime — the dictionary is not cleaned up.</para>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Theming.Accent">
            <summary>
            Accents set designed to simplify contols and views theming.
            Accents are semantic colors with strongly limited number (in contrast to large special color sets concept).
            For example, ComboBoxBorder themed color maps Shade accent.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Theming.Accent.Background">
            <summary>
            Primarily neutral background. 
            </summary>
        </member>
        <member name="F:JetBrains.UI.Theming.Accent.Foreground">
            <summary>
            Primarily neutral foreground
            </summary>
        </member>
        <member name="F:JetBrains.UI.Theming.Accent.Selection">
            <summary>
            Designates selected part of UI 
            (can be used for text over neutral background and as background with neutral foreground over it)
            </summary>
        </member>
        <member name="F:JetBrains.UI.Theming.Accent.Highlight">
            <summary>
            Designates highlighed part of UI 
            (can be used for text over neutral background and as background with neutral foreground over it)
            </summary>
        </member>
        <member name="F:JetBrains.UI.Theming.Accent.Lighter">
            <summary>
            Semitransparent color designed to be used to light up some part of UI
            </summary>
        </member>
        <member name="F:JetBrains.UI.Theming.Accent.Darker">
            <summary>
            Semitransparent color designed to be used to shadow some part of UI
            </summary>
        </member>
        <member name="F:JetBrains.UI.Theming.Accent.Shade">
            <summary>
            Semitransparent color designed to be used to light up or obscure some 
            part of UI depending of what the main tone of the theme
            </summary>
        </member>
        <member name="F:JetBrains.UI.Theming.Accent.Accent">
            <summary>
            Call for action color. Should be used to attract the attention of user
            </summary>
        </member>
        <member name="T:JetBrains.UI.Theming.PublishAccentColors">
            <summary>
            Applies right accent brushes to the platform resources
            </summary>
        </member>
        <member name="T:JetBrains.UI.Theming.LinkExtension">
            <summary>
            Markup extension is used to provide knowledge about how to bind the value
            </summary>
        </member>
        <member name="T:JetBrains.UI.Utils.DpiResolutions">
            <summary>
            Static accessors for <see cref="T:JetBrains.Util.Interop.DpiResolution" />.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Utils.DpiResolutions.FromHWndLive(JetBrains.DataFlow.Lifetime,System.Void*,JetBrains.Application.Threading.IThreading,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Gets the screen DPI for a window dynamically, from the monitor on which it's currently shown.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Utils.DpiResolutions.ScaleWindowsFormsControlLive(JetBrains.DataFlow.Lifetime,System.Windows.Forms.Control,JetBrains.Application.UI.Components.IUIApplication)">
            <summary>
            NOTE: needs investigation, but it looks like Scale only works once when loading the control (?)
            </summary>
        </member>
        <member name="T:JetBrains.UI.Utils.DpiUtil">
            <summary>
            The DPI Utility class which knows about the dynamic DPI.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Utils.DpiUtil.DpiMightHaveChanged">
            <summary>
            Fires when any of the system DPI-related settings might have changed.
            For a window, this does not cover all cases because the window could have been moved to another display.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Utils.DpiUtil.HighestResolutionScreenDpi">
            <summary>
            Of all the current screen DPIs, the highest one.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Utils.DpiUtil.IsDynamicDpi">
            <summary>
            Gets whether the current environment supports dynamic DPI (as opposed to having it statically defined at boot / logon time).
            </summary>
        </member>
        <member name="F:JetBrains.UI.Utils.DpiUtil.LowestResolutionScreenDpi">
            <summary>
            Of all the current screen DPIs, the lowest one.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Utils.DpiUtil.DpiHorizontalFactor">
            <summary>
            It is DpiX / 96. (96 is default value of DPI in Windows)
            This factor can be used to multiply your size to scale it to user DPI settings
            </summary>
        </member>
        <member name="P:JetBrains.UI.Utils.DpiUtil.DpiVerticalFactor">
            <summary>
            It is DpiY / 96. (96 is default value of DPI in Windows)
            This factor can be used to multiply your size to scale it to user DPI settings
            </summary>
        </member>
        <member name="P:JetBrains.UI.Utils.DpiUtil.ScreenDpi">
            <summary>
            Gets the screen DPI along X and Y axes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Utils.DpiUtil.ApplyWindowBoundsWhenSuggested(JetBrains.UI.Utils.DpiUtil.TopLevelWindowDpiTracker,JetBrains.DataFlow.Lifetime)">
            <summary>
            OS suggests a change in window size when a window is moved between areas with different DPI, or when the DPI changes dynamically. This function listens to suggestions and applies them to the HWND.
            As the suggestions are in absolute values, it is not a problem to apply them multiple times.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Utils.DpiUtil.EnableNonClientDpiScaling(System.Void*)">
            <summary>
            Should be called on OSes which support per-monitor DPI v1 not v2 (that's 8.1 and up to 10.0.15063).
            </summary>
            <param name="hwnd"></param>
        </member>
        <member name="M:JetBrains.UI.Utils.DpiUtil.GetElementScreenDpiCurrent(System.Windows.UIElement)">
            <summary>
            Gets the screen DPI for an Avalon UI element at this moment, based on the monitor DPI of the monitor on which its window is currently rendered, or the defautl device-independent DPI if it's not rendered at the moment.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Utils.DpiUtil.GetElementScreenDpiLive(JetBrains.DataFlow.Lifetime,System.Windows.UIElement,JetBrains.Application.UI.Components.IUIApplication)">
            <summary>
            Gets the screen DPI for an Avalon UI element dynamically, based on the monitor DPI of the monitor on which its window is currently rendered, or the defautl device-independent DPI if it's not rendered at the moment.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Utils.DpiUtil.GetElementScreenDpiLive(JetBrains.DataFlow.Lifetime,System.Windows.UIElement,JetBrains.Application.Threading.IThreading,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Gets the screen DPI for an Avalon UI element dynamically, based on the monitor DPI of the monitor on which its window is currently rendered, or the defautl device-independent DPI if it's not rendered at the moment.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Utils.DpiUtil.GetMonitorCurrentDpi(System.Void*)">
            <summary>
            Gets the current DPI resolution of the given monitor. Favors the per-monitor dynamic DPI, if applicable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Utils.DpiUtil.GetWindowScreenDpiCurrent(System.Void*)">
            <summary>
            Gets the screen DPI for a window at this moment, from the monitor on which it's currently shown.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Utils.DpiUtil.GetWindowScreenDpiLive(JetBrains.DataFlow.Lifetime,System.Void*,JetBrains.Application.Threading.IThreading,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Gets the screen DPI for a window dynamically, from the monitor on which it's currently shown.
            </summary>
            <remarks>The components are required for handling the non-top-level windows. Toplevels can be handled without them, see implementation for the direct call.</remarks>
        </member>
        <member name="M:JetBrains.UI.Utils.DpiUtil.SetProcessAsDpiAware">
            <summary>
            Sets the current process as fully aware of per-monitor DPI.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Utils.DpiUtil.TrackTopLevelWindowScreenDpiLive(JetBrains.DataFlow.Lifetime,System.Void*)">
            <summary>
            For a top-level window, tracks LIVE its DPI resolution.
            A top-level window receives a DPI change message from the OS, and does not need the Windows Hook Manager for tracking.
            Also it receives the suggested window bounds change message, see returned class.
            Must not pass a child window in here.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Utils.DpiUtil.CollectCurrentMonitorDpis">
            <summary>
            Gets the min/max resolution of the displays currently available.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Utils.DpiUtil.GetBootTimeScreenDpi">
            <summary>
            Gets the system-wide boot-time (or logon-time) screen DPI which does not reflect dynamic and per-monitor DPI changes.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Utils.DpiUtil.TopLevelWindowDpiTracker">
            <summary>
            For the case when we are tracking a top-level window, we can do away without a Windows Hook Manager by just subclassing the window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Utils.DpiUtil.TopLevelWindowDpiTracker.myAttachments">
            <summary>
            Detaches when the last client goes, allows for reuse until that — don't add multiple managed window subclasses because this would cause multiple native/managed transitions.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Utils.DpiUtil.TopLevelWindowDpiTracker.WmDpiChanged">
            <summary>
            Fires when we get the subclassed message.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Utils.DpiUtil.TopLevelWindowDpiTracker.WindowDpiResolution">
            <summary>
            The live window resolution.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Utils.DpiUtil.TopLevelWindowDpiTracker.WindowSuggestedBoundsChange">
            <summary>
            Fires when OS suggests that we change window bounds due to resolution change.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Utils.ExceptionViewer">
            <summary>
            Window to show exception details
            </summary>
        </member>
        <member name="M:JetBrains.UI.Utils.ExceptionViewer.Show(System.Exception,System.String,System.Boolean)">
            <summary>
            Show exception details
            </summary>
            <param name="exception"></param>
            <param name="title"></param>
            <param name="expanded"></param>
        </member>
        <member name="T:JetBrains.UI.Wpf.Converters.BooleanToSomethingConverter">
            <summary>
            Converts System.Boolean to any type
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.Converters.BooleanToSomethingConverter.NullableSubstitution">
            <summary>
            Gets or sets a value used in case of null (useful in bindings to Nullable)
            </summary>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.BrushToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.BrushToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:JetBrains.UI.Wpf.Converters.NullToSomethingConverter">
            <summary>
            Converts System.Boolean to any type
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.Converters.EnumValueConverter">
            <summary>
            Enum member to its member description. Descriptions are taken from Description attribute of enum's option.
            Useful to populate combobox with enum members.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.Converters.EnumValuesConverter">
            <summary>
            Enum to array of its members descriptions. Descriptions are taken from Description attribute of enum's option.
            Useful to populate combobox with enum members.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.Converters.MarkupConverterBase">
            <summary>
            XAML value converters should be inhereted from MarkupConverterBase to be allowed to use it as MarkupExtension without placing in resources
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.Converters.BooleanToVisibilityConverter">
            <summary>
            Converts System.Boolean to System.Windows.Visibility. 
            Additionally it has support to invert value during converting 
            and to select System.Windows.Visibility value for hidden state
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.Converters.BooleanToVisibilityConverter.Inverted">
            <summary>
            Gets or sets whether bool value should be inverted before convering
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.Converters.BooleanToVisibilityConverter.NullableSubstitution">
            <summary>
            Gets or sets a value used in case of null (useful in bindings to Nullable)
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.Converters.BooleanToVisibilityConverter.NonVisibleValue">
            <summary>
            Gets or sets a value used for hidden case
            </summary>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:JetBrains.UI.Wpf.Converters.BitmapToImageSourceConverter">
            <summary>
            Converts System.Drawing.Bitmap to System.Windows.Media.ImageSource.
            NOTE: example of using: 
            ... Source="{Binding Source={x:Static ....MyResources.Bitmap1}, 
            Converter={StaticResource bitmapToImageSourceConverter}}" ...
            </summary>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.BitmapToImageSourceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.BitmapToImageSourceConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:JetBrains.UI.Wpf.Converters.MultiplyByConverter">
            <summary>
            Converts the given value with additional mul by the parameter (or property Factor if parameter is not set).
            Useful to get relatively larger or smaller values in XAML
            </summary>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.MultiplyByConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.MultiplyByConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:JetBrains.UI.Wpf.Converters.EnumToVisibilityConverter">
            <summary>
            Enum to visibility converter. Especially useful to change visibility according to enum option
            Use it like {Binding Path=YourEnumProperty, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static local:EnumType.Enum1}}
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.Converters.EnumToVisibilityConverter.Inverted">
            <summary>
            Gets or sets whether bool value should be inverted before convering
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.Converters.EnumToVisibilityConverter.NonVisibleValue">
            <summary>
            Gets or sets a value used for hidden case
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.Converters.EnumDescriptionConverter">
            <summary>
            Enum to its description. It is being taken from Description attribute of enum's option.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.Converters.EnumBooleanConverter">
            <summary>
            Enum to boolean converter. Especially useful to convert enum to several radiobuttons or checkbox. 
            Use it like {Binding Path=YourEnumProperty, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static local:EnumType.Enum1}} or
            {Binding Path=YourEnumProperty, Converter={C:EnumToBooleanConverter True={x:Static local:EnumType.Enum1}, False={x:Static local:EnumType.Enum2}}}
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.Converters.NullableConverter.NullableSubstitution">
            <summary>
            Gets or sets a value used in case of null (useful in bindings to Nullable)
            </summary>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.NullableConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.NullableConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:JetBrains.UI.Wpf.Converters.NullToVisibilityConverter">
            <summary>
            Converts reference to System.Windows.Visibility ('null' means hidden state)
            Additionally it has support to invert value during converting 
            and to select System.Windows.Visibility value for hidden state
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.Converters.NullToVisibilityConverter.Inverted">
            <summary>
            Gets or sets whether bool value should be inverted before convering
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.Converters.NullToVisibilityConverter.NonVisibleValue">
            <summary>
            Gets or sets a value used for hidden case
            </summary>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.NullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.NullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:JetBrains.UI.Wpf.Converters.InversionConverter">
            <summary>
            Converts the given value to an inverted value the same type
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.Converters.InversionConverter.NullableSubstitution">
            <summary>
            Gets or sets a value used in case of null (useful in bindings to Nullable)
            </summary>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.InversionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JetBrains.UI.Wpf.Converters.InversionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:JetBrains.UI.Wpf.Effects.RecolorEffect">
            <summary>
            An effect that makes pixels of a particular color target preserving original transparency.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.Effects.RecolorEffect.Color">
            <summary>
            The color that will be applied
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.Effects.RecolorEffect.Snapping">
            <summary>
            Value from 0..1, which denotes how many lightness of target color should take into account
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.Controls.Paging.Impl.PagedContainer">
            <summary>
            Interaction logic for PagedContainer.xaml
            </summary>
            <summary>
            PagedContainer
            </summary>
        </member>
        <member name="M:JetBrains.UI.Wpf.Controls.Paging.Impl.PagedContainer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.Controls.StringCollectionEdit.Impl.Items.CollectionEditItemView">
            <summary>
            CollectionEditItemView
            </summary>
        </member>
        <member name="M:JetBrains.UI.Wpf.Controls.StringCollectionEdit.Impl.Items.CollectionEditItemView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:JetBrains.UI.Wpf.DragDrop.DragDrop.DragMouseAnchorPointProperty">
            <summary>
            DragMouseAnchorPoint defines the horizontal and vertical proportion at which the pointer will anchor on the DragAdorner.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.DragDrop.DragInfo">
            <summary>
            Holds information about a the source of a drag drop operation.
            </summary>
            
            <remarks>
            The <see cref="T:JetBrains.UI.Wpf.DragDrop.DragInfo"/> class holds all of the framework's information about the source
            of a drag. It is used by <see cref="M:JetBrains.UI.Wpf.DragDrop.IDragSource.StartDrag(JetBrains.UI.Wpf.DragDrop.IDragInfo)"/> to determine whether a drag 
            can start, and what the dragged data should be.
            </remarks>
        </member>
        <member name="M:JetBrains.UI.Wpf.DragDrop.DragInfo.#ctor(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Initializes a new instance of the DragInfo class.
            </summary>
            
            <param name="sender">
            The sender of the mouse event that initiated the drag.
            </param>
            
            <param name="e">
            The mouse event that initiated the drag.
            </param>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DragInfo.Data">
            <summary>
            Gets or sets the drag data.
            </summary>
            
            <remarks>
            This must be set by a drag handler in order for a drag to start.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DragInfo.DragStartPosition">
            <summary>
            Gets the position of the click that initiated the drag, relative to <see cref="P:JetBrains.UI.Wpf.DragDrop.DragInfo.VisualSource"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DragInfo.PositionInDraggedItem">
            <summary>
            Gets the point where the cursor was relative to the item being dragged when the drag was started.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DragInfo.Effects">
            <summary>
            Gets or sets the allowed effects for the drag.
            </summary>
            
            <remarks>
            This must be set to a value other than <see cref="F:System.Windows.DragDropEffects.None"/> by a drag handler in order 
            for a drag to start.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DragInfo.MouseButton">
            <summary>
            Gets the mouse button that initiated the drag.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DragInfo.SourceCollection">
            <summary>
            Gets the collection that the source ItemsControl is bound to.
            </summary>
            
            <remarks>
            If the control that initated the drag is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DragInfo.SourceIndex">
            <summary>
            Gets the position from where the item was dragged.
            </summary>
            <value>The index of the source.</value>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DragInfo.SourceItem">
            <summary>
            Gets the object that a dragged item is bound to.
            </summary>
            
            <remarks>
            If the control that initated the drag is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DragInfo.SourceItems">
            <summary>
            Gets a collection of objects that the selected items in an ItemsControl are bound to.
            </summary>
            
            <remarks>
            If the control that initated the drag is unbound or not an ItemsControl, this will be empty.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DragInfo.VisualSource">
            <summary>
            Gets the control that initiated the drag.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DragInfo.VisualSourceItem">
            <summary>
            Gets the item in an ItemsControl that started the drag.
            </summary>
            
            <remarks>
            If the control that initiated the drag is an ItemsControl, this property will hold the item
            container of the clicked item. For example, if <see cref="P:JetBrains.UI.Wpf.DragDrop.DragInfo.VisualSource"/> is a ListBox this
            will hold a ListBoxItem.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DragInfo.VisualSourceFlowDirection">
            <summary>
            Gets the FlowDirection of the current drag source.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DragInfo.DataObject">
            <summary>
            Gets the <see cref="T:System.Windows.IDataObject"/> which is used by the drag and drop operation. Set it to
            a custom instance if custom drag and drop behavior is needed.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.DragDrop.DropInfo">
            <summary>
              Holds information about a the target of a drag drop operation.
            </summary>
            <remarks>
              The <see cref="T:JetBrains.UI.Wpf.DragDrop.DropInfo" /> class holds all of the framework's information about the current
              target of a drag. It is used by <see cref="M:JetBrains.UI.Wpf.DragDrop.IDropTarget.DragOver(JetBrains.UI.Wpf.DragDrop.IDropInfo)" /> method to determine whether
              the current drop target is valid, and by <see cref="M:JetBrains.UI.Wpf.DragDrop.IDropTarget.Drop(JetBrains.UI.Wpf.DragDrop.IDropInfo)" /> to perform the drop.
            </remarks>
        </member>
        <member name="M:JetBrains.UI.Wpf.DragDrop.DropInfo.#ctor(System.Object,System.Windows.DragEventArgs,JetBrains.UI.Wpf.DragDrop.DragInfo)">
            <summary>
              Initializes a new instance of the DropInfo class.
            </summary>
            <param name="sender">
              The sender of the drag event.
            </param>
            <param name="e">
              The drag event.
            </param>
            <param name="dragInfo">
              Information about the source of the drag, if the drag came from within the framework.
            </param>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.Data">
            <summary>
              Gets the drag data.
            </summary>
            <remarks>
              If the drag came from within the framework, this will hold:
              - The dragged data if a single item was dragged.
              - A typed IEnumerable if multiple items were dragged.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.DragInfo">
            <summary>
              Gets a <see cref="P:JetBrains.UI.Wpf.DragDrop.DropInfo.DragInfo" /> object holding information about the source of the drag,
              if the drag came from within the framework.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.DropPosition">
            <summary>
              Gets the mouse position relative to the VisualTarget
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.DropTargetAdorner">
            <summary>
              Gets or sets the class of drop target to display.
            </summary>
            <remarks>
              The standard drop target adorner classes are held in the <see cref="T:JetBrains.UI.Wpf.DragDrop.DropTargetAdorners" />
              class.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.Effects">
            <summary>
              Gets or sets the allowed effects for the drop.
            </summary>
            <remarks>
              This must be set to a value other than <see cref="F:System.Windows.DragDropEffects.None" /> by a drop handler in order
              for a drop to be possible.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.InsertIndex">
            <summary>
              Gets the current insert position within <see cref="P:JetBrains.UI.Wpf.DragDrop.DropInfo.TargetCollection" />.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.TargetCollection">
            <summary>
              Gets the collection that the target ItemsControl is bound to.
            </summary>
            <remarks>
              If the current drop target is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.TargetItem">
            <summary>
              Gets the object that the current drop target is bound to.
            </summary>
            <remarks>
              If the current drop target is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.TargetGroup">
            <summary>
              Gets the current group target.
            </summary>
            <remarks>
              If the drag is currently over an ItemsControl with groups, describes the group that
              the drag is currently over.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.VisualTarget">
            <summary>
              Gets the control that is the current drop target.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.VisualTargetItem">
            <summary>
              Gets the item in an ItemsControl that is the current drop target.
            </summary>
            <remarks>
              If the current drop target is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.VisualTargetOrientation">
            <summary>
              Gets the orientation of the current drop target.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.VisualTargetFlowDirection">
            <summary>
              Gets the orientation of the current drop target.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.DestinationText">
            <summary>
              Gets and sets the text displayed in the DropDropEffects adorner.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.InsertPosition">
            <summary>
              Gets the relative position the item will be inserted to compared to the TargetItem
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.DropInfo.KeyStates">
            <summary>
              Gets a flag enumeration indicating the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the
              mouse buttons.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.Data">
            <summary>
            Gets or sets the drag data.
            </summary>
            
            <remarks>
            This must be set by a drag handler in order for a drag to start.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.DragStartPosition">
            <summary>
            Gets the position of the click that initiated the drag, relative to <see cref="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.VisualSource"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.PositionInDraggedItem">
            <summary>
            Gets the point where the cursor was relative to the item being dragged when the drag was started.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.Effects">
            <summary>
            Gets or sets the allowed effects for the drag.
            </summary>
            
            <remarks>
            This must be set to a value other than <see cref="F:System.Windows.DragDropEffects.None"/> by a drag handler in order 
            for a drag to start.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.MouseButton">
            <summary>
            Gets the mouse button that initiated the drag.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.SourceCollection">
            <summary>
            Gets the collection that the source ItemsControl is bound to.
            </summary>
            
            <remarks>
            If the control that initated the drag is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.SourceIndex">
            <summary>
            Gets the position from where the item was dragged.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.SourceItem">
            <summary>
            Gets the object that a dragged item is bound to.
            </summary>
            
            <remarks>
            If the control that initated the drag is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.SourceItems">
            <summary>
            Gets a collection of objects that the selected items in an ItemsControl are bound to.
            </summary>
            <remarks>
            If the control that initated the drag is unbound or not an ItemsControl, this will be empty.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.VisualSource">
            <summary>
            Gets the control that initiated the drag.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.VisualSourceItem">
            <summary>
            Gets the item in an ItemsControl that started the drag.
            </summary>
            <remarks>
            If the control that initiated the drag is an ItemsControl, this property will hold the item
            container of the clicked item. For example, if <see cref="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.VisualSource"/> is a ListBox this
            will hold a ListBoxItem.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.VisualSourceFlowDirection">
            <summary>
            Gets the FlowDirection of the current drag source.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDragInfo.DataObject">
            <summary>
            Gets the <see cref="T:System.Windows.IDataObject"/> which is used by the drag and drop operation. Set it to
            a custom instance if custom drag and drop behavior is needed.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.DragDrop.IDragSource">
            <summary>
            Interface implemented by Drag Handlers.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Wpf.DragDrop.IDragSource.StartDrag(JetBrains.UI.Wpf.DragDrop.IDragInfo)">
            <summary>
            Queries whether a drag can be started.
            </summary>
            
            <param name="dragInfo">
            Information about the drag.
            </param>
            
            <remarks>
            To allow a drag to be started, the <see cref="P:JetBrains.UI.Wpf.DragDrop.DragInfo.Effects"/> property on <paramref name="dragInfo"/> 
            should be set to a value other than <see cref="F:System.Windows.DragDropEffects.None"/>. 
            </remarks>
        </member>
        <member name="M:JetBrains.UI.Wpf.DragDrop.IDragSource.Dropped(JetBrains.UI.Wpf.DragDrop.IDropInfo)">
            <summary>
            Notifies the drag handler that a drop has occurred.
            </summary>
            
            <param name="dropInfo">
              Information about the drop.
            </param>
        </member>
        <member name="M:JetBrains.UI.Wpf.DragDrop.IDragSource.DragCancelled">
            <summary>
            Notifies the drag handler that a drag has been aborted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.Data">
            <summary>
            Gets the drag data.
            </summary>
            
            <remarks>
            If the drag came from within the framework, this will hold:
            
            - The dragged data if a single item was dragged.
            - A typed IEnumerable if multiple items were dragged.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.DragInfo">
            <summary>
            Gets a <see cref="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.DragInfo"/> object holding information about the source of the drag, 
            if the drag came from within the framework.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.DropPosition">
            <summary>
            Gets the mouse position relative to the VisualTarget
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.DropTargetAdorner">
            <summary>
            Gets or sets the class of drop target to display.
            </summary>
            
            <remarks>
            The standard drop target adorner classes are held in the <see cref="T:JetBrains.UI.Wpf.DragDrop.DropTargetAdorners"/>
            class.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.Effects">
            <summary>
            Gets or sets the allowed effects for the drop.
            </summary>
            
            <remarks>
            This must be set to a value other than <see cref="F:System.Windows.DragDropEffects.None"/> by a drop handler in order 
            for a drop to be possible.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.InsertIndex">
            <summary>
            Gets the current insert position within <see cref="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.TargetCollection"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.TargetCollection">
            <summary>
            Gets the collection that the target ItemsControl is bound to.
            </summary>
            
            <remarks>
            If the current drop target is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.TargetItem">
            <summary>
            Gets the object that the current drop target is bound to.
            </summary>
            
            <remarks>
            If the current drop target is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.TargetGroup">
            <summary>
            Gets the current group target.
            </summary>
            
            <remarks>
            If the drag is currently over an ItemsControl with groups, describes the group that
            the drag is currently over.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.VisualTarget">
            <summary>
            Gets the control that is the current drop target.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.VisualTargetItem">
            <summary>
            Gets the item in an ItemsControl that is the current drop target.
            </summary>
            
            <remarks>
            If the current drop target is unbound or not an ItemsControl, this will be null.
            </remarks>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.VisualTargetOrientation">
            <summary>
            Gets the orientation of the current drop target.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.VisualTargetFlowDirection">
            <summary>
            Gets the FlowDirection of the current drop target.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.DestinationText">
            <summary>
            Gets and sets the text displayed in the DropDropEffects adorner.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.InsertPosition">
            <summary>
            Gets the relative position the item will be inserted to compared to the TargetItem
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.KeyStates">
            <summary>
            Gets a flag enumeration indicating the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.DragDrop.IDropInfo.NotHandled">
            <summary>
            Indicates if the drop info should be handled by itself (useful for child elements)
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.DragDrop.IDropTarget">
            <summary>
            Interface implemented by Drop Handlers.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Wpf.DragDrop.IDropTarget.DragOver(JetBrains.UI.Wpf.DragDrop.IDropInfo)">
            <summary>
            Updates the current drag state.
            </summary>
            
            <param name="dropInfo">
              Information about the drag.
            </param>
            
            <remarks>
            To allow a drop at the current drag position, the <see cref="P:JetBrains.UI.Wpf.DragDrop.DropInfo.Effects"/> property on 
            <paramref name="dropInfo"/> should be set to a value other than <see cref="F:System.Windows.DragDropEffects.None"/>
            and <see cref="P:JetBrains.UI.Wpf.DragDrop.DropInfo.Data"/> should be set to a non-null value.
            </remarks>
        </member>
        <member name="M:JetBrains.UI.Wpf.DragDrop.IDropTarget.Drop(JetBrains.UI.Wpf.DragDrop.IDropInfo)">
            <summary>
            Performs a drop.
            </summary>
            
            <param name="dropInfo">
              Information about the drop.
            </param>
        </member>
        <member name="T:JetBrains.UI.Wpf.IPlatformResourceDictionary">
            <summary>
            <para>Exposes the central Resource Dictionary whch should be available to every piece of WPF UI within the platform-based product.</para>
            <para>Some of the UI controls rely on theming colors, icons, automation object views and other resources which must be externally applied to them thru this dictionary.</para>
            <para>If you would like to publish a resource to make it universally available:</para>
            <para>(1) Look for an existing subsystem for registering your kind of resources, such as an icon or a color. Thus subsystem will expose them for you through this dictionary.</para>
            <para>(2) If this is a new kind of resources, add a new <see cref="T:System.Windows.ResourceDictionary"/> to the <see cref="P:System.Windows.ResourceDictionary.MergedDictionaries"/> collection of <see cref="P:JetBrains.UI.Wpf.IPlatformResourceDictionary.PlatformResources"/>.</para>
            <para>If you're authoring a new top-level WPF control (Window, Visual Studio Tool Window integration, etc), make sure to publish this dictionary on your WPF controls tree root. See <see cref="T:JetBrains.UI.Wpf.PlatformResourcesBehavior"/> for an MVVM helper for that.</para>
            </summary>
        </member>
        <member name="P:JetBrains.UI.Wpf.IPlatformResourceDictionary.PlatformResources">
            <summary>
            <para>Exposes the central Resource Dictionary whch should be available to every piece of WPF UI within the platform-based product.</para>
            <para>Some of the UI controls rely on theming colors, icons, automation object views and other resources which must be externally applied to them thru this dictionary.</para>
            <para>If you would like to publish a resource to make it universally available:</para>
            <para>(1) Look for an existing subsystem for registering your kind of resources, such as an icon or a color. Thus subsystem will expose them for you through this dictionary.</para>
            <para>(2) If this is a new kind of resources, add a new <see cref="T:System.Windows.ResourceDictionary"/> to the <see cref="P:System.Windows.ResourceDictionary.MergedDictionaries"/> collection of <see cref="P:JetBrains.UI.Wpf.IPlatformResourceDictionary.PlatformResources"/>.</para>
            <para>If you're authoring a new top-level WPF control (Window, Visual Studio Tool Window integration, etc), make sure to publish this dictionary on your WPF controls tree root. See <see cref="T:JetBrains.UI.Wpf.PlatformResourcesBehavior"/> for an MVVM helper for that.</para>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.PlatformResourceDictionary">
            <summary>
            Default impl.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.PlatformResourcesBehavior">
            <summary>
            An MVVM helper for exposing common WPF resources (<see cref="T:JetBrains.UI.Wpf.IPlatformResourceDictionary"/>) on the top of a new WPF controls tree.
            Expose <see cref="T:JetBrains.UI.Wpf.IPlatformResourceDictionary"/> in your automation object and define the <see cref="F:JetBrains.UI.Wpf.PlatformResourcesBehavior.DefineProperty">behavior</see> on the top-level framework element, setting it to the <see cref="T:JetBrains.UI.Wpf.IPlatformResourceDictionary"/> value taken from the backend.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.PublishDefaultControlStyles">
            <summary>
            Mounts default styles into the common <see cref="T:JetBrains.UI.Wpf.IPlatformResourceDictionary"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.PublishPlatformResourceDictionaryToAvalonApplicationV3">
            <summary>
            This assembly is compiled for NETFX 3 and has PresentationFramework v3. Register our ResourceDictionary in it.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.UI.ReviewDetailsWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            ReviewDetailsWindow
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.ReviewDetailsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.UI.EditDetailsWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            EditDetailsWindow
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.EditDetailsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.UI.ErrorInfoControl">
            <summary>
            Interaction logic for ErrorInfoControl.xaml
            </summary>
            <summary>
            ErrorInfoControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.ErrorInfoControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.UI.DetailsControl">
            <summary>
            Interaction logic for DetailsControl.xaml
            </summary>
            <summary>
            DetailsControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.DetailsControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:JetBrains.UI.ExceptionReport.UI.DetailsHost.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.DetailsHost.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.DetailsHost.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.UI.ExceptionBrowserControl">
            <summary>
            Interaction logic for ExceptionBrowserControl.xaml
            </summary>
            <summary>
            ExceptionBrowserControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.ExceptionBrowserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:JetBrains.UI.ExceptionReport.UI.ExceptionBrowserHost.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.ExceptionBrowserHost.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.ExceptionBrowserHost.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.UI.ExceptionBrowserHostControl">
            <summary>
            Interaction logic for ExceptionBrowserHostControl.xaml
            </summary>
            <summary>
            ExceptionBrowserHostControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.ExceptionBrowserHostControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.UI.ExceptionDataControl">
            <summary>
            Interaction logic for ExceptionDataControl.xaml
            </summary>
            <summary>
            ExceptionDataControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.ExceptionDataControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.UI.ExceptionBrowser">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            ExceptionBrowser
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.ExceptionBrowser.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.UI.DetailsHostControl">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            DetailsHostControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.DetailsHostControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.UI.PendingExceptionsControl">
            <summary>
            Interaction logic for PendingExceptionsControl.xaml
            </summary>
            <summary>
            PendingExceptionsControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.PendingExceptionsControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.UI.SubmittedExceptionsControl">
            <summary>
            Interaction logic for UserControl1.xaml
            </summary>
            <summary>
            SubmittedExceptionsControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.SubmittedExceptionsControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.UI.TextBoxDetailsPanel">
            <summary>
            Interaction logic for TextBoxDetailsPanel.xaml
            </summary>
            <summary>
            TextBoxDetailsPanel
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.TextBoxDetailsPanel.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.UI.TrackerLoginControl">
            <summary>
            Interaction logic for TrackerLoginControl.xaml
            </summary>
            <summary>
            TrackerLoginControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.UI.TrackerLoginControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.ExceptionReportingIconSet">
            <summary>
            As a component running sometimes without Shell, Exception Reporting should request its icons explicitly.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.ShellLessExceptionReporting">
            <summary>
            Helpers for setting up exception reporting when the product shell is not running yet.
            User-interactive mode helpers.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.ShellLessExceptionReporting.CreateAndInstall(JetBrains.DataFlow.Lifetime,JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.Application.BuildScript.Application.IWindowBranding,System.Lazy{System.Collections.Generic.IEnumerable{JetBrains.Application.BuildScript.PackageSpecification.JetPackageMetadata}})">
            <summary>
            An exception reporter which knows the static product details and can submit smth to the issue tracker.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.ShellLessExceptionReporting.CreateAndInstall(JetBrains.DataFlow.Lifetime,JetBrains.Build.Serialization.SerializedValuesResolver)">
            <summary>
            An exception reporter which knows the static product details and can submit smth to the issue tracker.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.ShellLessExceptionReporting.CreateAndInstallDeadEnd">
            <summary>
            Does not show exceptions to the user.
            Used in Production Mode when we shouldn't be showing the exceptions to the user.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.ShellLessExceptionReporting.CreateAndInstallWithoutContext">
            <summary>
            An exception reporter which does not have the product context or any components yet.
            Shows a primitive message box without the submit-to-tracker capability.
            Reports failures in creation of the context for the full reporter.
            We MUST NOT obey <see cref="P:JetBrains.Application.ExceptionReport.IsModeReportExceptionsComponent.IsShowingExceptionsToUser" /> flag here: after we have the context, we push another exception reporter that obeys the flag, but startup-related errors are most likely FATAL and MUST be shown to the user. — NOTE: not necessarily deemed true in wave01
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.ShellLessExceptionReporting.CreateDeadEnd">
            <summary>
            Does not show exceptions to the user.
            Used in Production Mode when we shouldn't be showing the exceptions to the user.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.ExceptionNotifierPopupWindow.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            </summary>
            <param name="e"> A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data. </param>
        </member>
        <member name="F:JetBrains.UI.ExceptionReport.TrackerLoginForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.TrackerLoginForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.ExceptionReport.TrackerLoginForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.ExceptionReport.SubmitToTrackerExceptionReportService.LoginInformation">
            <summary>
            When Shell is running, its component binds this to the Setting Store.
            Otherwise work isolated, ask every time.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ExceptionReport.ShellExceptionReportComponent">
            <summary>
              When Shell is running, takes over Exception Reporting to provide smart behavior: show popup exception notifier, store exceptions, submit the whole list.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupLayout.AvalonAnchoringRect">
            <summary>
            Anchors to a screen location of an Avalon object.
            </summary>
            <remarks>
            Technically, anchors to the HWND-based rendertarget of the visual tree and the relative coordinates of the visual within it. Has some magic with client-to-screen transform besides being a regular nested anchoring rect.
            </remarks>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.AvalonAnchoringRect.Element">
            <summary>
            The UI element we're anchoring to.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupLayout.StaticAvalonClientRectInScreenPixels">
            <summary>
            Converts a rectangle within UIElement to screen pixels relative to UIElement top left corner.
            </summary>
            <remarks>
            It is designed to track a nested rectangle inside an UIElement.
            
            IAnchoringRect anchor = new NestedAnchoringRect(lifetime,
              new StaticAvalonClientRectInScreenPixels(lifetime, element, rect),
              new AvalonAnchoringRect(lifetime, element, hookManager));
            </remarks>
        </member>
        <member name="T:JetBrains.UI.PopupLayout.PopupFormController">
            <summary>
            The layout controller for the popup forms.
            Shows a popup window, controls its location and position against the layouter, and destroys the form upon one of the predefined actions.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupFormController.myConstrainableControl">
            <summary>
            <see cref="F:JetBrains.UI.PopupLayout.PopupFormController.myContentForm"/>, cast to the <see cref="T:JetBrains.Application.UI.Controls.IConstrainableControl"/> interface.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupFormController.myContentForm">
            <summary>
            The form being controlled.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupFormController.myContext">
            <summary>
            <see cref="P:JetBrains.UI.PopupLayout.PopupFormController.Context"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupFormController.myEventsAttached">
            <summary>
            Specifies whether <see cref="M:JetBrains.UI.PopupLayout.PopupFormController.AttachEvents(JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.UI.PopupLayout.PopupWindowManager)"/> has been performed for the instance.
            Needed for <see cref="F:JetBrains.Application.UI.PopupLayout.FormHideMethod.Visibility"/>-type windows that may call <see cref="M:JetBrains.UI.PopupLayout.PopupFormController.ShowWindow"/> more than once, to prevent multiple <see cref="M:JetBrains.UI.PopupLayout.PopupFormController.AttachEvents(JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.UI.PopupLayout.PopupWindowManager)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupFormController.myHideFlags">
            <summary>
            Defines the actions on which to hide. Can't be changed in runtime.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupFormController.myHideMethod">
            <summary>
            <see cref="P:JetBrains.UI.PopupLayout.PopupFormController.HideMethod"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupFormController.myIsChangingSize">
            <summary>
            Prevents from reacting to the child form resizes that are caused by ours applying the layout.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupFormController.myIsDisposed">
            <summary>
            <see cref="P:JetBrains.UI.PopupLayout.PopupFormController.IsDisposed"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupFormController.myLayoutMode">
            <summary>
            <see cref="P:JetBrains.UI.PopupLayout.PopupFormController.LayoutMode"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupFormController.myLayouter">
            <summary>
            Layouts the popup onscreen.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupFormController.myMutex">
            <summary>
            By default, each window is independent.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupFormController.myReshowOnActivation">
            <summary>
            Whether a window should be shown automatically when the application is activated. Set to <c>True</c> only for those windows that have <see cref="F:JetBrains.Application.UI.PopupLayout.FormHideMethod.Visibility"/> and if they were hidden due to app deactivation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupFormController.myWantsFocus">
            <summary>
            Whether to grab focus on show.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupFormController.myDeactivationTimer">
            <summary>
            The timer to check whether the form should be closed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.PopupFormController.#ctor(JetBrains.DataFlow.LifetimeDefinition,System.Windows.Forms.Form,JetBrains.Application.UI.PopupLayout.IPopupWindowContext,JetBrains.Application.UI.WindowManagement.HideFlags,System.Boolean,JetBrains.Application.UI.PopupLayout.PopupWindowMutex,JetBrains.Application.UI.Components.IIsApplicationActiveState,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.UI.PopupLayout.PopupWindowManager)">
            <summary>
            Constructs a popup form controller.
            </summary>
            <param name="lifetimeDefinition">Defines the lifetime of the popup window. Could be terminated by this class in case the window is closed due to one of the conditions. Bind all of the layouters, window context, and per-popup-window additional resources to this lifetime.</param>
            <param name="form">A form to be shown as a popup window.</param>
            <param name="context">The owning context for the popup window, which defines when the window should be hidden, and also its layout and size through the layouter.</param>
            <param name="hideflags">Flags that identify when to destroy the form.</param>
            <param name="wantsfocus">If <c>True</c>, sets the focus to the popup window.</param>
            <param name="mutex">Specifies the popup window's identity group.</param>
            <param name="isApplicationActiveState"></param>
            <param name="hookManager">Hooks to enable listening to focus loss in owned windows. If omitted, keeping the form alive while focus is in an owned window is not supported.</param>
            <param name="popupWindowManager"></param>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.PopupFormController.CanShowPopups">
            <summary>
            Gets whether the popup windows could be shown at the moment, ie whether the main window is currently active.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.PopupFormController.AttachEvents(JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.UI.PopupLayout.PopupWindowManager)">
            <summary>
            Hooks on all the listeners.
            Must be called before showing the window onscreen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.PopupFormController.DetachEvents">
            <summary>
            Detaches from all the events.
            You'd better not call it manually, but rather call <see cref="M:JetBrains.UI.PopupLayout.PopupFormController.Dispose"/> instead.
            Resets many things to <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.PopupFormController.GetControlPreferredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Asks the <see cref="F:JetBrains.UI.PopupLayout.PopupFormController.myConstrainableControl"/> for its <see cref="M:JetBrains.Application.UI.Controls.IConstrainableControl.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)"/>.
            Validates the retval.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.PopupFormController.HideWindowIfNotFocused">
            <summary>
            Checks whether the controlled form owns the focus at the moment, and hides it if not.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.PopupFormController.OnActiveChanged">
            <summary>
            Kills the popup when switching away from Devenv.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.PopupFormController.UpdatePopupLayout">
            <summary>
            Applies the new layout to the form.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.PopupFormController.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.PopupFormController.HideMethod">
            <summary>
            Gets or sets what exactly the popup window should do to hide the controlled form.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.PopupFormController.IsDisposed">
            <summary>
            Gets whether the window has already been disposed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.PopupFormController.LayoutMode">
            <summary>
            Gets or sets whether the popup window location and size is currently controlled by the layouter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.PopupFormController.Mutex">
            <summary>
            Gets the mutex that defines the popup window's identity class.
            For example, it may prohibit displaying more than one window of the same class at a time.
            This value should be immutable.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupLayout.PopupWindowManager">
            <summary>
            Manages the display, positioning, and destroying popup windows.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.PopupWindowManager.myPopupWindows">
            <summary>
            This must be an instance member.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.PopupWindowManager.PopupWindows">
            <summary>
            Gets the collection of popup windows currently active in the system.
            Some of them may be invisible.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.PopupWindowManager.CreatePopupWindow(JetBrains.DataFlow.LifetimeDefinition,System.Windows.Forms.Form,JetBrains.Application.UI.PopupLayout.IPopupWindowContext,JetBrains.Application.UI.WindowManagement.HideFlags,System.Boolean,JetBrains.Application.UI.PopupLayout.PopupWindowMutex)">
            <summary>
            Shows a popup window, controls its location and position against the layouter, and destroys the form upon one of the predefined actions.
            </summary>
            <param name="lifetimeDefinition">Defines the lifetime of the popup window. Could be terminated by this class in case the window is closed due to one of the conditions. Bind all of the layouters, window context, and per-popup-window additional resources to this lifetime.</param>
            <param name="form">A form to be shown as a popup window.</param>
            <param name="context">The owning context for the popup window.</param>
            <param name="hideflags">Flags that identify when to destroy the form (or hide, if the <see cref="P:JetBrains.UI.PopupLayout.PopupFormController.HideMethod"/> has been overridden to <see cref="F:JetBrains.Application.UI.PopupLayout.FormHideMethod.Visibility"/>).</param>
            <param name="wantsfocus">If <c>True</c>, sets the focus to the popup window when it's first shown. The default is <c>True</c>.</param>
            <param name="mutex">Specifies the popup window's identity group. Creates a new unique group if omitted.</param>
            <returns>Identifies the popup window controller.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.PopupWindowManagerEx.ShowPopupWindow(JetBrains.UI.PopupLayout.PopupWindowManager,JetBrains.DataFlow.Lifetime,System.Windows.Forms.Form,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.Application.UI.PopupLayout.IPopupWindowContext},JetBrains.Application.UI.WindowManagement.HideFlags,JetBrains.Application.UI.PopupLayout.FormHideMethod)">
            <summary>
            Shows a popup window, controls its location and position against the layouter, and destroys the form upon one of the predefined actions.
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">The limiting lifetime for the window session.</param>
            <param name="form">A form to be shown as a popup window.</param>
            <param name="FCreateContext">The owning context for the popup window.</param>
            <param name="hideflags">Flags that identify when to destroy the form.</param>
            <param name="hidemethod">What to do to the window if it should be hidden (e.g. when app is deactivated). By default, the popup window will be closed, and its resources freed.</param>
            <returns>Identifies the popup window controller.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.PopupWindowManagerEx.ShowPopupWindow(JetBrains.UI.PopupLayout.PopupWindowManager,JetBrains.DataFlow.Lifetime,System.Windows.Forms.Form,JetBrains.Application.UI.PopupLayout.PopupWindowContextSource,JetBrains.Application.UI.WindowManagement.HideFlags,JetBrains.Application.UI.PopupLayout.FormHideMethod)">
            <summary>
            Shows a popup window, controls its location and position against the layouter, and destroys the form upon one of the predefined actions.
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">The limiting lifetime for the window session.</param>
            <param name="form">A form to be shown as a popup window.</param>
            <param name="contextsource">The owning context for the popup window.</param>
            <param name="hideflags">Flags that identify when to destroy the form.</param>
            <param name="hidemethod">What to do to the window if it should be hidden (e.g. when app is deactivated). By default, the popup window will be closed, and its resources freed.</param>
            <returns>Identifies the popup window controller.</returns>
        </member>
        <member name="T:JetBrains.UI.PopupLayout.TrackedWindow">
            <summary>
            A window that hosts an <see cref="T:System.Windows.UIElement"/> and can be tracked by an <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.TrackedWindow.myShouldBeVisible">
            <summary>
            A property whose value is composited from the user volition and physical capability to show the window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.TrackedWindow.myUpdatePopupLayoutReentrancyFlag">
            <summary>
            When in <see cref="M:JetBrains.UI.PopupLayout.TrackedWindow.UpdatePopupLayout"/>, prevents from reentering it.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupLayout.TrackedWindow.myWannaBeVisible">
            <summary>
            Whether the user explicitly wants the window to be shown.
            This is ANDed with the physical capability to show the window.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.TrackedWindow.Glassify">
            <summary>
            Specifies whether the Aero Glass effect should be applied to the window, if available.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.TrackedWindow.HideFlags">
            <summary>
            Gets or sets the flags that control the set of signals from the popup window context owner on which the window can be hidden.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.TrackedWindow.IsGlassified">
            <summary>
            A readonly property that gets whether the glass effect is actually applied to the window at the moment.
            The <see cref="P:JetBrains.UI.PopupLayout.TrackedWindow.Glassify"/> property is just an intention that may be unsupported by the runtime.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.TrackedWindow.Handle">
            <summary>
            Gets the window handle to the current window, or <c>NULL</c> if not created yet.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.TrackedWindow.HwndSource">
            <summary>
            Returns the <see cref="T:System.Windows.Interop.HwndSource"/> for the current window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.AttachEvents(JetBrains.UI.PopupLayout.PopupWindowManager)">
            <summary>
            Starts sining the environment events.
            </summary>
            <param name="popupWindowManager"></param>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.GetClientRoomFromWindowRoom(System.Drawing.Size,System.Windows.Interop.HwndSource)">
            <summary>
            Based on the room for the window, calculates the available room for its content.
            In per-pixel-transparency mode, the nonclient area is not present.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.GetWindowRoomFromClientRoom(System.Windows.Size,System.Windows.Interop.HwndSource)">
            <summary>
            Based on the room required by the client area, calculates the required room for the window.
            In per-pixel-transparency mode, the nonclient area is not present.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.OnHideFlagsChange(JetBrains.DataFlow.PropertyChangedEventArgs{JetBrains.Application.UI.WindowManagement.HideFlags})">
            <summary>
            Attaches and detaches the <see cref="P:JetBrains.UI.PopupLayout.TrackedWindow.HideFlags"/>-related events.
            Should be (un)sinked in (attach/detach)-event.
            Note: when the property value is changed in runtime, updates the set of sinked hide-signals.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.OnHideSignal(System.Object,System.EventArgs)">
            <summary>
            A hide signal has been received, eg from the popup window context owner.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.OnShouldBeVisibleChanged_Hide">
            <summary>
            The window should be hidden.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.OnShouldBeVisibleChanged_Show">
            <summary>
            The window should be shown.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.UpdatePopupLayout">
            <summary>
            Applies the popup layout suggested by the <see cref="P:JetBrains.UI.PopupLayout.TrackedWindow.Layouter"/> to the window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.MeasureOverride(System.Windows.Size)">
            <summary>
            Override this method to measure the size of a window.
            </summary>
            
            <returns>
            A <see cref="T:System.Windows.Size"></see> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.
            </returns>
            
            <param name="availableSize">A <see cref="T:System.Windows.Size"></see> that reflects the available size that this window can give to the child. Infinity can be given as a value to indicate that the window will size to whatever content is available.</param>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closed"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Deactivated"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.OnSourceInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.SourceInitialized"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.HideWindow">
            <summary>
            Closes the window. After that the window cannot resurrect. Invoking this will cause the <see cref="E:JetBrains.Application.UI.PopupLayout.IPopupWindow.Closed"/> event to fire.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayout.TrackedWindow.ShowWindow">
            <summary>
            Initially shows the popup window. The window remains shown until it is closed by the <see cref="M:JetBrains.Application.UI.PopupLayout.IPopupWindow.HideWindow"/> method or by an action from the <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupWindowContext"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.TrackedWindow.Context">
            <summary>
            Gets context the window is shown in.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.TrackedWindow.HideMethod">
            <summary>
            Gets or sets what exactly the popup window should do to hide the controlled form.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.TrackedWindow.IsDisposed">
            <summary>
            Gets whether the window has already been disposed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.TrackedWindow.LayoutMode">
            <summary>
            Gets or sets whether the popup window location and size is currently controlled by the layouter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.TrackedWindow.Mutex">
            <summary>
            Gets the mutex that defines the popup window's identity class.
            For example, it may prohibit displaying more than one window of the same class at a time.
            This value should be immutable.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayout.TrackedWindow.Visible">
            <summary>
            Gets value indicating whether the window is currently shown.
            </summary>
        </member>
        <member name="T:JetBrains.UI.resources.StringTable">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertAnchorNotInGroup">
            <summary>
              Looks up a localized string similar to Cannot insert actions because the anchoring action is not included in the actions group we&apos;re inserting into..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertCantLoad">
            <summary>
              Looks up a localized string similar to Failed to insert an action into the group because it failed to load..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertConflictingAnchor">
            <summary>
              Looks up a localized string similar to Could not insert actions because the anchoring action was specified, which conflicts with the relative positioning value..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertIntoNonexistentGroup">
            <summary>
              Looks up a localized string similar to Cannot insert actions because the target action group does not exist..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertIntoNonGroupAction">
            <summary>
              Looks up a localized string similar to Cannot insert actions because the target action ID belongs to an action that is not an action group..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertInvalidAnchor">
            <summary>
              Looks up a localized string similar to Cannot insert actions because the anchoring action does not exist..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertInvalidRelativePosition">
            <summary>
              Looks up a localized string similar to Cannot insert actions because the relative positioning value is invalid..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertMissingAnchor">
            <summary>
              Looks up a localized string similar to Could not insert actions because the anchoring action was not specified, as required by the relative positioning value..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantLoad">
            <summary>
              Looks up a localized string similar to Failed to load the product action {0}..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionUnnamedXmlElementName">
            <summary>
              Looks up a localized string similar to Unnamed &lt;{0}&gt; Element.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ExceptionBrowserForm_Close">
            <summary>
              Looks up a localized string similar to Cl&amp;ose.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ExceptionBrowserForm_Copy_To_Clipboard">
            <summary>
              Looks up a localized string similar to Copy to clipboard.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ExceptionBrowserForm_Copy_URL">
            <summary>
              Looks up a localized string similar to Copy URL.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ExceptionBrowserForm_Created_new_issue">
            <summary>
              Looks up a localized string similar to Created new issue.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ExceptionBrowserForm_Do_Not_Show">
            <summary>
              Looks up a localized string similar to Do not show this window after exceptions are submitted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ExceptionBrowserForm_Double_Click">
            <summary>
              Looks up a localized string similar to Double-click an item to open corresponding issue in web browser or press Enter..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ExceptionBrowserForm_Forget">
            <summary>
              Looks up a localized string similar to Forget.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ExceptionBrowserForm_Message">
            <summary>
              Looks up a localized string similar to Message:.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ExceptionBrowserForm_Mute_Selected">
            <summary>
              Looks up a localized string similar to &amp;Mute.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ExceptionBrowserForm_Please_Describe">
            <summary>
              Looks up a localized string similar to &amp;Please describe what you were doing when the exception occurred (example: I tried to open a 6-project solution with BizTalk projects):.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ExceptionBrowserForm_Please_Note">
            <summary>
              Looks up a localized string similar to Please note that exceptions are submitted to JetBrains public tracker which is available publicly..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ExceptionBrowserForm_Remove_Selected">
            <summary>
              Looks up a localized string similar to &amp;Remove.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ExceptionBrowserForm_Submit_Selected">
            <summary>
              Looks up a localized string similar to &amp;Submit.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.JetPopupMenuMainThread">
            <summary>
              Looks up a localized string similar to The popup menu must be used on the UI thread only..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.JetPopupMenuNoItemsBanner">
            <summary>
              Looks up a localized string similar to There are no items to show in this menu..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.MenuAlreadyVisible">
            <summary>
              Looks up a localized string similar to The menu is already visible..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.MenuItemKeyMustBeNonNull">
            <summary>
              Looks up a localized string similar to The menu item key is expected to be non-Null..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.NoItemsCaseShouldHaveBeenCutOffEarlier">
            <summary>
              Looks up a localized string similar to The no-items case should&apos;ve been cut off earlier..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.PendingView_Initialize_Error_Summary">
            <summary>
              Looks up a localized string similar to Summary.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.PendingView_Initialize_When_Happened">
            <summary>
              Looks up a localized string similar to When Happened.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.SubmittedView_Initialize_Issue_Key">
            <summary>
              Looks up a localized string similar to Issue Key.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.SubmittedView_Initialize_Result">
            <summary>
              Looks up a localized string similar to Result.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.SubmittedView_Initialize_Submitted">
            <summary>
              Looks up a localized string similar to Submitted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdAllowDownloadCheckbox">
            <summary>
              Looks up a localized string similar to Download the list of available updates from the Web.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdAllowDownloadComment">
            <summary>
              Looks up a localized string similar to No personally identifiable information is uploaded to the server.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdAreNewPluginVersionsAvailable">
            <summary>
              Looks up a localized string similar to There are new plugin versions available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdAreNewProductVersionsAvailable">
            <summary>
              Looks up a localized string similar to There are new {0} versions available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdDownloadLink">
            <summary>
              Looks up a localized string similar to Download.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdEstimatedPrice">
            <summary>
              Looks up a localized string similar to Estimated price.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdFree">
            <summary>
              Looks up a localized string similar to free.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdIsNewPluginVersionAvailable">
            <summary>
              Looks up a localized string similar to There is a new plugin version available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdIsNewProductVersionAvailable">
            <summary>
              Looks up a localized string similar to There is a new {0} version available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdKindFeatures">
            <summary>
              Looks up a localized string similar to feature release.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdKindGeneric">
            <summary>
              Looks up a localized string similar to update.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdKindPreview">
            <summary>
              Looks up a localized string similar to prerelease build.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdKindService">
            <summary>
              Looks up a localized string similar to service update.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdNoUpdatesAvailable">
            <summary>
              Looks up a localized string similar to There are no updates available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdNoUpdatesAvailableForProduct">
            <summary>
              Looks up a localized string similar to There are no updates available for {0}..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdPluginUpdates">
            <summary>
              Looks up a localized string similar to Plugin Updates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdProductUpdates">
            <summary>
              Looks up a localized string similar to {0} Updates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdReadMoreLink">
            <summary>
              Looks up a localized string similar to Read More.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdThisUpdateInstallsInstalls">
            <summary>
              Looks up a localized string similar to installs.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdThisUpdateInstallsPre">
            <summary>
              Looks up a localized string similar to This.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdUnidentifiedProduct">
            <summary>
              Looks up a localized string similar to Unidentified Product.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdUnknownCompany">
            <summary>
              Looks up a localized string similar to Unknown Company.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdUntitledUpdate">
            <summary>
              Looks up a localized string similar to Untitled.
            </summary>
        </member>
        <member name="T:JetBrains.UI.License.ObtainPermanentLicenseRequestEventArgs">
            <summary>
            Represents event args for SendRequest and ActivateLicense requests of ObtainPermanentLicenseWindow
            </summary>
        </member>
        <member name="T:JetBrains.UI.License.ObtainPermanentLicenseWindow">
            <summary>
            Dialog to obtain a permanent license from a license server. 
            Note, that it not have any logic of license, it produces events 
            SendRequest and ActivateLicense when an user interacts with corresponding UI.
            </summary>
            <summary>
            ObtainPermanentLicenseWindow
            </summary>
        </member>
        <member name="E:JetBrains.UI.License.ObtainPermanentLicenseWindow.SendRequest">
            <summary>
            Occurs when user tries to send request for a permanent license ticket
            </summary>
        </member>
        <member name="E:JetBrains.UI.License.ObtainPermanentLicenseWindow.ActivateLicense">
            <summary>
            Occurs when user tries to activate its permanent license ticket with activation code
            </summary>
        </member>
        <member name="P:JetBrains.UI.License.ObtainPermanentLicenseWindow.Email">
            <summary>
            Gets or sets current e-mail entered in the dialog
            </summary>
        </member>
        <member name="F:JetBrains.UI.License.ObtainPermanentLicenseWindow.EmailProperty">
            <summary>
            Using a DependencyProperty as the backing store for Email.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.License.ObtainPermanentLicenseWindow.ActivationCode">
            <summary>
            Gets or sets current activation code entered in the dialog
            </summary>
        </member>
        <member name="F:JetBrains.UI.License.ObtainPermanentLicenseWindow.ActivationCodeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ActivationCode.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:JetBrains.UI.License.ObtainPermanentLicenseWindow.Banner">
            <summary>
            Gets or sets an image at the top of the dialog
            </summary>
        </member>
        <member name="F:JetBrains.UI.License.ObtainPermanentLicenseWindow.BannerProperty">
            <summary>
            Using a DependencyProperty as the backing store for Banner.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:JetBrains.UI.License.ObtainPermanentLicenseWindow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:JetBrains.UI.License.ObtainPermanentLicenseWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:JetBrains.UI.License.EvaluationExpirationControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.License.EvaluationExpirationControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.License.EvaluationExpirationControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.License.EvaluationFeedbackControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.License.EvaluationFeedbackControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.License.EvaluationFeedbackControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.License.JetWebBrowser.GetMeasuringDivStyle(System.Drawing.Size)">
            <summary>
            Generates a style for the div we use for measuring the text, assigning it the specified width and height, which must be given in pixels.
            </summary>
        </member>
        <member name="F:JetBrains.UI.License.JetWebBrowser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.License.JetWebBrowser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.License.JetWebBrowser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.License.LicenseAgreementForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.License.LicenseAgreementForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.License.LicenseAgreementForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.License.PasteTextBox.components">
            <summary>Required designer variable.</summary>
        </member>
        <member name="M:JetBrains.UI.License.PasteTextBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.UI.License.PasteTextBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.License.ProductBaseForm.Show(JetBrains.DataFlow.Lifetime,System.Windows.Forms.IWin32Window,System.Action)">
            <summary>
            Shows form non-module with action to perform if AcceptButton clicked
            </summary>
            <param name="lifetime">Maximum form lifetime</param>
            <param name="ownerWindow">Main window</param>
            <param name="onOkAction">Action to call if </param>
        </member>
        <member name="F:JetBrains.UI.License.ProductBaseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.License.ProductBaseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.License.ProductBaseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.AvalonBitmapInterop.RenderGdipIntoAvalonImage(System.Windows.Size,JetBrains.UI.CrossFramework.AvalonBitmapInterop.AlphaChannel,System.Action{System.Drawing.Graphics})">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics">GDI+ Graphics</see> to render into, and returns the rendering result in a form of an <see cref="T:System.Windows.Media.ImageSource">Avalon image</see>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.AvalonBitmapInterop.RenderGdipIntoAvalonImage_GdiBitmap_DIBitmap(System.Windows.Size,JetBrains.UI.CrossFramework.AvalonBitmapInterop.AlphaChannel,System.Action{System.Drawing.Graphics})">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics">GDI+ Graphics</see> to render into, and returns the rendering result in a form of an <see cref="T:System.Windows.Media.ImageSource">Avalon image</see>.
            </summary>
            <remarks>Thought it could re-use the bits of <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/>, but seems like it's not the way it works.</remarks>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.AvalonBitmapInterop.RenderGdipIntoAvalonImage_GdipBitmap(System.Windows.Size,JetBrains.UI.CrossFramework.AvalonBitmapInterop.AlphaChannel,System.Action{System.Drawing.Graphics})">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics">GDI+ Graphics</see> to render into, and returns the rendering result in a form of an <see cref="T:System.Windows.Media.ImageSource">Avalon image</see>.
            </summary>
            <remarks>Creates a byte buffer, a GDI+ bitmap right on these bytes, and then an Avalon image off these bytes. Could be easily turned into a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> to reuse its bytes on subsequent renders of the same size, but in this method if a GDI DC is created off the GDIP DC, then any transparency functions would fail (cannot get the back color it seems), like ClearType or even rectangles with alpha. So we cannot use it as a main method, and thus no use optimizing into a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/>.</remarks>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.AvalonBitmapInterop.RenderGdipIntoAvalonImage_GdiBitmap_DIBSection(System.Windows.Size,JetBrains.UI.CrossFramework.AvalonBitmapInterop.AlphaChannel,System.Action{System.Drawing.Graphics})">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics">GDI+ Graphics</see> to render into, and returns the rendering result in a form of an <see cref="T:System.Windows.Media.ImageSource">Avalon image</see>.
            </summary>
            <remarks>Creates a GDI bitmap, HDC on it, Graphics on that, and uses the GDI bitmap bytes to create an Avalon image off those. Not quite compatible with <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> because the bits are created by <see cref="M:JetBrains.Interop.WinApi.Gdi32Dll.CreateDIBSection(System.Void*,JetBrains.Interop.WinApi.Declarations.Structures.BITMAPINFO*,System.UInt32,System.Void**,System.Void*,System.Int32)"/> anew each time.</remarks>
        </member>
        <member name="T:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap">
            <summary>
            Allows to render with GDIP into an Avalon device context.
            Bitmap source object reused on renders, recreated when size changes (with optional optimizations).
            Created (and gets size) on first <see cref="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.PaintGdip(System.Windows.Size,System.Action{System.Drawing.Graphics})"/>, any <see cref="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.Render(System.Windows.Media.DrawingContext,System.Windows.Rect)"/> calls before that are silently ignored.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.myBitmap">
            <summary>
            Avalon bitmap source: reused on renders, recreated when size changes.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.myLogicalSize">
            <summary>
            The size, as set by the user, as painted, as visible on screen on render.
            The bitmap might be larger to optimize for resizes (see <see cref="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.myResizePolicy"/>).
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.PaintGdip(System.Windows.Size,System.Action{System.Drawing.Graphics})">
            <summary>
            Does GDI+ rendering into this bitmap.
            </summary>
            <param name="sizeNew">The new size of the bitmap (or the old one, in which case the bitmap will remain intact).</param>
            <param name="FRender">Painter.</param>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.Render(System.Windows.Media.DrawingContext,System.Windows.Rect)">
            <summary>
            Renders the bitmap onto the given DC.
            Only the logical-size-part is painted, any lazy-sized regions outside the logical size are clipped out.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.ChooseBitmapSizeByPolicy_LazyDim(System.Double,System.Double)">
            <summary>
            Chooses each dim of the lazy preferred size.
            When less than screen, round up to the nearest power of 2. When larger, round up to the nearest screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.ChooseBitmapSizeByPolicy(System.Windows.Size)">
            <summary>
            In lazy mode, we do not want to respawn the bitmap each time we're growing it gradually (eg resizing the window).
            Snap sizes to some common values in lazy mode.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.RecreateBitmap(System.Windows.Size)">
            <summary>
            Create new writable bitmap of the given size.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.ResizePolicy.Exact">
            <summary>
            Bitmap is always of the required size, exactly. Reallocated on each resize.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.ResizePolicy.Lazy">
            <summary>
            Old bitmap is reused if the new size is smaller.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CrossFramework.RichTextEx">
            <summary>
            Extension methods for <see cref="N:JetBrains.UI.RichText"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CrossFramework.WindowsFormsIntegration">
            <summary>
            Carries out the internal members out of the <c>WindowsFormsIntegration</c> DLL, and some more.
            Bridges the Avalon and WinForms worlds.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.WindowsFormsIntegration.SetFontA``1(``0,System.Drawing.Font)">
            <summary>
            Tears apart a WinForms <see cref="T:System.Drawing.Font"/> and applies it to an Avalon element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.WindowsFormsIntegration.SetFontB``1(``0,System.Drawing.Font,System.Boolean)">
            <summary>
            Tears apart a WinForms <see cref="T:System.Drawing.Font"/> and applies it to an Avalon element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.WindowsFormsIntegration.SetFontC``1(``0,System.Drawing.Font,System.Boolean)">
            <summary>
            Tears apart a WinForms <see cref="T:System.Drawing.Font"/> and applies it to an Avalon element.
            </summary>
        </member>
        <member name="T:JetBrains.UI.MsoComponentManager.JetComponentManager">
            <summary>
            A base implementation of the Jet Component Manager.
            </summary>
        </member>
        <member name="T:JetBrains.UI.MsoComponentManager.JetComponentManager.ComponentAction">
            <summary>
            Actions supported by base Component Manager implementation.
            </summary>
        </member>
        <member name="T:JetBrains.UI.MsoComponentManager.JetComponentManager.JetMsoComponent">
            <summary>
            Base implementation of a MSO component
            </summary>
        </member>
        <member name="M:JetBrains.UI.MsoComponentManager.JetComponentManager.JetMsoComponent.FPreTranslateMessage(JetBrains.Interop.WinApi.MSG[])">
            <summary>
            Processes the message before it is translated and dispatched.
            </summary>
            <returns>
            true if the message is consumed, false otherwise.
            </returns>
        </member>
        <member name="F:JetBrains.UI.MsoComponentManager.JetComponentManager.JetComponentActionProperty">
            <summary>
            ComponentManagerAction attached property.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Validation.CheckedValidator">
            <summary>
            Validates that:
            • This button is checked (if <see cref="P:JetBrains.UI.Validation.CheckedValidator.GroupId"/> is not specified).
            —or—
            • At least one button among all with such a <see cref="P:JetBrains.UI.Validation.CheckedValidator.GroupId"/> is checked.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.CheckedValidator.IsChecked">
            <summary>
            Late-bound-checks the checkstate of this control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.CheckedValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.UI.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.UI.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.ControlListenerFactory.CreateControlListener(System.Windows.Forms.Control)">
            <summary>
            Gets a composite listener that wraps all the available listeners for the given control.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.UI.Validation.ControlValidator">
            <summary>
            Base implementation of the <see cref="T:JetBrains.Application.UI.Validation.IValidator"/> interface that expects you to override just the <see cref="M:JetBrains.UI.Validation.ControlValidator.Update"/> method.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Validation.ControlValidator.myBounds">
            <summary>
            Part of the <see cref="T:JetBrains.Application.UI.Controls.IWindowlessControl"/> implementation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Validation.ControlValidator.myControlListener">
            <summary>
            Listens for the changes in the control, triggers an update whenever one occurs.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Validation.ControlValidator.myGottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Validation.ControlValidator.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.ControlValidator.Control">
            <summary>
            Gets the associated control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.ControlValidator.GetImageFromSeverity(JetBrains.Application.UI.Validation.ValidatorSeverity,JetBrains.Application.UI.Components.IUIApplication)">
            <summary>
            Converts a severity value into a corresponding image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Validation.ControlValidator.FireLayouterChanged(JetBrains.Application.UI.PopupLayout.IPopupLayouter,JetBrains.Application.UI.PopupLayout.IPopupLayouter)">
            <summary>
            Fires the <see cref="E:JetBrains.UI.Validation.ControlValidator.LayouterChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.ControlValidator.FireMessageChanged(JetBrains.UI.RichText.RichText,JetBrains.UI.RichText.RichText)">
            <summary>
            Fires the <see cref="E:JetBrains.UI.Validation.ControlValidator.MessageChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.ControlValidator.FireSeverityChanged(JetBrains.Application.UI.Validation.ValidatorSeverity,JetBrains.Application.UI.Validation.ValidatorSeverity)">
            <summary>
            Fires the <see cref="E:JetBrains.UI.Validation.ControlValidator.SeverityChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.ControlValidator.FireWindowlessControlChanged(JetBrains.Application.UI.Controls.IWindowlessControl,JetBrains.Application.UI.Controls.IWindowlessControl)">
            <summary>
            Fires the <see cref="E:JetBrains.UI.Validation.ControlValidator.WindowlessControlChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.ControlValidator.OnSeverityChangedShowHide(System.Object,JetBrains.DataFlow.PropertyChangedEventArgs{System.String,JetBrains.Application.UI.Validation.ValidatorSeverity})">
            <summary>
            When severity changes, shows or hides the control, depending on the severity value, and requests the resize/repanit of the view.
            Attached in ctor by default. Detach this sink from the event if you'd like to change the behavior.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Validation.ControlValidator.LayouterChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.Application.UI.Validation.IValidator.Layouter"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Validation.ControlValidator.MessageChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.Application.UI.Validation.IValidator.Message"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Validation.ControlValidator.SeverityChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.Application.UI.Validation.IValidator.Severity"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Validation.ControlValidator.WindowlessControlChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.Application.UI.Validation.IValidator.WindowlessControl"/> property changes its value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.ControlValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.UI.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.UI.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.ControlValidator.Layouter">
            <summary>
            Gets the layouter that positions the validator.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.ControlValidator.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.ControlValidator.Severity">
            <summary>
            Gets the severity of this validator in its current state.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.ControlValidator.WindowlessControl">
            <summary>
            Gets the presentation of the validator.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.ControlValidator.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.Application.UI.Controls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.Validation.ControlValidator.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.UI.Validation.ControlValidator.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.Application.UI.Controls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.UI.Validation.ControlValidator.SetLayout(JetBrains.Application.UI.PopupLayout.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.Validation.ControlValidator.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.ControlValidator.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.ControlValidator.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.ControlValidator.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Validation.DynamicTextValidator">
            <summary>
            A kind of <see cref="T:JetBrains.UI.Validation.TextValidator"/> that allows changing the severity level and string message dynamically.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.DynamicTextValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.UI.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.UI.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Validation.FormValidator">
            <summary>
            Manages a number of validators on the form controls that display error glyphs and prevent submission unless the validation passes.
            The validators may come from attributes on the form controls, from <see cref="T:JetBrains.Application.UI.Validation.IValidatorProvider"/> implemented by form or its controls, and from manual submissions to the <see cref="P:JetBrains.UI.Validation.FormValidator.Validators"/> collection.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.FormValidator.FireSeverityChanged(JetBrains.Application.UI.Validation.ValidatorSeverity,JetBrains.Application.UI.Validation.ValidatorSeverity)">
            <summary>
            Fires the <see cref="E:JetBrains.UI.Validation.FormValidator.SeverityChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.FormValidator.OnValidatorSeverityChanged(System.Object,JetBrains.DataFlow.PropertyChangedEventArgs{System.String,JetBrains.Application.UI.Validation.ValidatorSeverity})">
            <summary>
            Whenever a validator severity changes, recalculates the total severity of this <see cref="T:JetBrains.Application.UI.Validation.IFormValidator"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.FormValidator.ShowMessage_OneSeverity(JetBrains.Application.UI.Validation.ValidatorSeverity)">
            <summary>
            Reports one particular severity.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Validation.FormValidator.SeverityChanged">
            <summary>
            Fires when <see cref="P:JetBrains.Application.UI.Validation.IFormValidator.Severity"/> changes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.FormValidator.ShowMessage">
            <summary>
            Reports the current validity status in a message box (including the valid state).
            The valid and error states have just an ok button, while the warnings have the yes-no buttons.
            The return value is either the current <see cref="P:JetBrains.Application.UI.Validation.IFormValidator.Severity"/>, or a lower severity if the user has clicked “Yes” on the warning confirmation dialog and has thus discarded the warnings.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.FormValidator.Update">
            <summary>
            Forces revalidation on all the controls.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.FormValidator.Severity">
            <summary>
            Gets the overall severity of the form validator, which is the maximum severity of all the validators.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.FormValidator.ValidatorProviders">
            <summary>
            Gets the mutable validator providers collection.
            Those are also collected automatically from the form and all of its controls.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.FormValidator.Validators">
            <summary>
            Gets the mutable validators collection.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Validation.FormValidator.BridgeControlsToValidatorProviders">
            <summary>
            Listens for child controls being added to or removed from the root control.
            Adds/removes the corresponding validator providers. Stores the mapping from controls to providers, so that to remove exactly what has come.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Validation.FormValidator.BridgeValidatorProvidersToValidators">
            <summary>
            Watches for validator providers, populates the validators collection with their contents.
            Stores the validators added by a provider, so that to remove just them when the validator is removed (the provider could return new instances, and they won't match).
            </summary>
        </member>
        <member name="F:JetBrains.UI.Validation.FormValidator.BridgeValidatorProvidersToValidators.myMapProvidersToValidators">
            <summary>
            Stores the validators added by a provider, so that to remove just them when the validator is removed (the provider could return new instances, and they won't match).
            </summary>
        </member>
        <member name="F:JetBrains.UI.Validation.FormValidatorsInteractive.ourFormValidators">
            <summary>
            Caches the form validator instances.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.FormValidatorsInteractive.GetOrCreate(System.Windows.Forms.Control)">
            <summary>
            Gets (or creates, if missing) a form validator for the given form or control.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Validation.FormValidatorView">
            <summary>
            Manages the validator glyphs as validator views, based on the <see cref="T:JetBrains.UI.Validation.FormValidator"/> data.
            When the owning window gets destroyed, all the validator glyphs also get destroyed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.FormValidatorView.CreateValidatorView(JetBrains.Application.UI.Validation.IValidator)">
            <summary>
            Creates a new view from the validator.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Validation.FormValidatorView.ValidatorTooltipProvider">
            <summary>
            Produces a tooltip out of the validator message.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.FormValidatorView.ValidatorTooltipProvider.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.Application.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="T:JetBrains.UI.Validation.IControlListener">
            <summary>
            Listens for changes in the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.IControlListener.Control">
            <summary>
            Gets the listened control.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Validation.IControlListener.ControlStateChanged">
            <summary>
            Event that is fired when some important control state changes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.PredicateValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.UI.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.UI.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.PredicateValidatorReentrantSafe.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.UI.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.UI.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Validation.TextValidator">
            <summary>
            Validates the control text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.TextValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.UI.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.UI.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Validation.ValidatorFactory">
            <summary>
            shortcut class for creating control validators.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Validation.ValidatorHarvester">
            <summary>
            Harvests the <see cref="T:JetBrains.UI.Validation.ValidationAttribute"/>s on the controls and provides validators based on them.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.ValidatorHarvester.Harvest(System.Windows.Forms.Control)">
            <summary>
            Harvests the <see cref="T:JetBrains.UI.Validation.ValidationAttribute"/>s on the controls and provides validators based on them.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Validation.ValidatorHarvester.StaticValidatorProvider">
            <summary>
            A simple validator provider.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.ValidatorHarvester.StaticValidatorProvider.Validators">
            <summary>
            Gets the list of validators to add.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Validation.WindowlessControlView">
            <summary>
            Takes an <see cref="T:JetBrains.Application.UI.Controls.IWindowlessControl"/> and floats it as a form.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Validation.WindowlessControlView.GottenDirty">
            <summary>
            The control is about to repaint.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Validation.WindowlessControlView.IsTransparent">
            <summary>
            Whether the window supports the alpha channel.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Validation.WindowlessControlView.WindowlessControl">
            <summary>
            Gets or sets the windowless control that rules the presentation of the window.
            Set to <c>Null</c> to hide the window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Validation.WindowlessControlView.myInIsTopMost">
            <summary>
            See <see cref="P:JetBrains.UI.Validation.WindowlessControlView.IsTopMost"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Validation.WindowlessControlView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.WindowlessControlView.TooltipProvider">
            <summary>
            Gets or sets the tooltip provider for the control.
            <c>Null</c> is a valid value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.WindowlessControlView.OnPaint_Layared">
            <summary>
            Repaints the window using the layered technique.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.WindowlessControlView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Make this window not selectable
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.WindowlessControlView.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by the <see cref="T:System.Windows.Forms.Form"></see>.
            </summary>
            
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="P:JetBrains.UI.Validation.WindowlessControlView.ShowWithoutActivation">
            <summary>
            Gets a value indicating whether the window will be activated when it is shown.
            </summary>
            
            <returns>
            True if the window will not be activated when it is shown; otherwise, false. The default is false.
            </returns>
            
        </member>
        <member name="M:JetBrains.UI.Validation.WindowlessControlView.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.Application.UI.Controls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.Validation.WindowlessControlView.SetLayout(JetBrains.Application.UI.PopupLayout.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.Validation.WindowlessControlView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Validation.WindowlessControlView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.WindowlessControlView.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.Application.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="T:JetBrains.UI.WindowManagement.MainWindowLayouter">
            <summary>
            Layouts a window by placing it relatively to the main window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowManagement.MainWindowLayouter.CreateCenteredCorner(JetBrains.DataFlow.Lifetime,JetBrains.Application.StdApplicationUI.IMainWindow,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Creates a layouter that layouts the content by its top-left corner at approximately the center of the main window.
            When the content size changes, its left-top corner won't move.
            Unlike <see cref="M:JetBrains.UI.WindowManagement.MainWindowLayouter.CreateCenteredMiddle(JetBrains.DataFlow.Lifetime,JetBrains.Application.StdApplicationUI.IMainWindow,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)"/>, it's not truely centered, but the title of your content won't jump when it resizes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowManagement.MainWindowLayouter.CreateCenteredMiddle(JetBrains.DataFlow.Lifetime,JetBrains.Application.StdApplicationUI.IMainWindow,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Creates a layouter that places the content in the center of the main window. When the content size changes, it remains centered.
            Unlike <see cref="M:JetBrains.UI.WindowManagement.MainWindowLayouter.CreateCenteredCorner(JetBrains.DataFlow.Lifetime,JetBrains.Application.StdApplicationUI.IMainWindow,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)"/>, this layouter won't fix the content's title in place, but at each moment the content will be truely centered in the main window.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = ExtensionManagerThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(ExtensionManagerThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionBlank">
             <summary>
            	<para>
            		<para>ExtensionBlank Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionBlank.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+ExtensionBlank}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.ExtensionBlank))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ExtensionManagerThemedIcons.ExtensionBlank.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.ExtensionBlank&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionBlank.Id">
             <summary>
            	<para>
            		<para>ExtensionBlank Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionBlank"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+ExtensionBlank}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.ExtensionBlank))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ExtensionManagerThemedIcons.ExtensionBlank.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.ExtensionBlank&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionBlank.Load_Color">
            <summary>Loads the image for Themed Icon ExtensionBlank theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionBlank.Load_Gray">
            <summary>Loads the image for Themed Icon ExtensionBlank theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionBlank.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExtensionBlank theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionBlank.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExtensionBlank.</summary>
        </member>
        <member name="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionDownlodCounter">
             <summary>
            	<para>
            		<para>ExtensionDownlodCounter Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionDownlodCounter.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                              `=r,           
                             H@@@@@/         
                            `@@@@@@m         
                   .00F      ~Hg@$y`         
                   -@@b     `/LLLLL"         
                 -g1@@8k8 -0@@@@@@@@@n       
                  n@@@@g;_@@$@@@@@@gg@R      
                   .kgL  8@n=@@@@@@g`g@+     
                        .@@`)@@@@@@@ J$_     
                          . o@@@@@@@`        
                            ygQ0H5;`         
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+ExtensionDownlodCounter}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.ExtensionDownlodCounter))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ExtensionManagerThemedIcons.ExtensionDownlodCounter.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.ExtensionDownlodCounter&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionDownlodCounter.Id">
             <summary>
            	<para>
            		<para>ExtensionDownlodCounter Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionDownlodCounter"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                              `=r,           
                             H@@@@@/         
                            `@@@@@@m         
                   .00F      ~Hg@$y`         
                   -@@b     `/LLLLL"         
                 -g1@@8k8 -0@@@@@@@@@n       
                  n@@@@g;_@@$@@@@@@gg@R      
                   .kgL  8@n=@@@@@@g`g@+     
                        .@@`)@@@@@@@ J$_     
                          . o@@@@@@@`        
                            ygQ0H5;`         
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+ExtensionDownlodCounter}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.ExtensionDownlodCounter))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ExtensionManagerThemedIcons.ExtensionDownlodCounter.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.ExtensionDownlodCounter&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionDownlodCounter.Load_Color">
            <summary>Loads the image for Themed Icon ExtensionDownlodCounter theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionDownlodCounter.Load_Gray">
            <summary>Loads the image for Themed Icon ExtensionDownlodCounter theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionDownlodCounter.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExtensionDownlodCounter theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionDownlodCounter.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExtensionDownlodCounter.</summary>
        </member>
        <member name="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionInstall">
             <summary>
            	<para>
            		<para>ExtensionInstall Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionInstall.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                           F00,              
                           b@@~              
                           b@@~              
                       Fo  b@@~ -D-          
                       n@g/b@@=F@@-          
                       ,Q@@@@@@@@9           
                         rg@@@@0,            
                           1@g+              
                            .                
                      n@@@@@@@@@@@@-         
                      `------------          
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+ExtensionInstall}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.ExtensionInstall))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ExtensionManagerThemedIcons.ExtensionInstall.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.ExtensionInstall&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionInstall.Id">
             <summary>
            	<para>
            		<para>ExtensionInstall Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionInstall"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                           F00,              
                           b@@~              
                           b@@~              
                       Fo  b@@~ -D-          
                       n@g/b@@=F@@-          
                       ,Q@@@@@@@@9           
                         rg@@@@0,            
                           1@g+              
                            .                
                      n@@@@@@@@@@@@-         
                      `------------          
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+ExtensionInstall}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.ExtensionInstall))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ExtensionManagerThemedIcons.ExtensionInstall.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.ExtensionInstall&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionInstall.Load_Color">
            <summary>Loads the image for Themed Icon ExtensionInstall theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionInstall.Load_Gray">
            <summary>Loads the image for Themed Icon ExtensionInstall theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionInstall.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExtensionInstall theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionInstall.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExtensionInstall.</summary>
        </member>
        <member name="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLastPublished">
             <summary>
            	<para>
            		<para>ExtensionLastPublished Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLastPublished.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                       ;L=      /L,          
                     ~r0-Qr~~~~oX,g~^        
                    -@@@0@@@@@@@gQ@@g        
                    -@~~~~FnLJnTLnFJg        
                    -@    m0Lk0FL0m~g        
                    -@'T+^t~r7~)r~t~g        
                    -@`bb_yb/Fb)/by~g        
                    -@,bb~kbLnbJLbkrg        
                    `nnnnnnnnnnnnnnnJ        
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+ExtensionLastPublished}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.ExtensionLastPublished))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ExtensionManagerThemedIcons.ExtensionLastPublished.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.ExtensionLastPublished&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLastPublished.Id">
             <summary>
            	<para>
            		<para>ExtensionLastPublished Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLastPublished"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                       ;L=      /L,          
                     ~r0-Qr~~~~oX,g~^        
                    -@@@0@@@@@@@gQ@@g        
                    -@~~~~FnLJnTLnFJg        
                    -@    m0Lk0FL0m~g        
                    -@'T+^t~r7~)r~t~g        
                    -@`bb_yb/Fb)/by~g        
                    -@,bb~kbLnbJLbkrg        
                    `nnnnnnnnnnnnnnnJ        
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+ExtensionLastPublished}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.ExtensionLastPublished))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ExtensionManagerThemedIcons.ExtensionLastPublished.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.ExtensionLastPublished&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLastPublished.Load_Color">
            <summary>Loads the image for Themed Icon ExtensionLastPublished theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLastPublished.Load_Gray">
            <summary>Loads the image for Themed Icon ExtensionLastPublished theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLastPublished.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExtensionLastPublished theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLastPublished.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExtensionLastPublished.</summary>
        </member>
        <member name="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLink">
             <summary>
            	<para>
            		<para>ExtensionLink Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLink.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                                `            
                             !m@g@gD.        
                             R5^  /@8        
                      rm@gF=yg@g`~m@L        
                     ,@W_ 8@$1"+ggX+         
                     t@X. "oQ-               
                      FDg@g9/                
                                             
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+ExtensionLink}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.ExtensionLink))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ExtensionManagerThemedIcons.ExtensionLink.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.ExtensionLink&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLink.Id">
             <summary>
            	<para>
            		<para>ExtensionLink Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLink"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                                `            
                             !m@g@gD.        
                             R5^  /@8        
                      rm@gF=yg@g`~m@L        
                     ,@W_ 8@$1"+ggX+         
                     t@X. "oQ-               
                      FDg@g9/                
                                             
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+ExtensionLink}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.ExtensionLink))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ExtensionManagerThemedIcons.ExtensionLink.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.ExtensionLink&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLink.Load_Color">
            <summary>Loads the image for Themed Icon ExtensionLink theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLink.Load_Gray">
            <summary>Loads the image for Themed Icon ExtensionLink theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLink.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExtensionLink theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionLink.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExtensionLink.</summary>
        </member>
        <member name="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionTags">
             <summary>
            	<para>
            		<para>ExtensionTags Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionTags.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                       yggggggggg+           
                       b@@@@@@@@@L           
                       b@@@@@@@@@L           
                       b@@@@@@@@@L           
                       b@@@@@@@@@L           
                       b@@@@@@@@@L           
                       b@@@@@@@@@L           
                       b@@@@0@@@@L           
                       b@@k. ,D@@L           
                       kn`     -br           
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+ExtensionTags}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.ExtensionTags))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ExtensionManagerThemedIcons.ExtensionTags.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.ExtensionTags&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionTags.Id">
             <summary>
            	<para>
            		<para>ExtensionTags Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionTags"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                       yggggggggg+           
                       b@@@@@@@@@L           
                       b@@@@@@@@@L           
                       b@@@@@@@@@L           
                       b@@@@@@@@@L           
                       b@@@@@@@@@L           
                       b@@@@@@@@@L           
                       b@@@@0@@@@L           
                       b@@k. ,D@@L           
                       kn`     -br           
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+ExtensionTags}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.ExtensionTags))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ExtensionManagerThemedIcons.ExtensionTags.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.ExtensionTags&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionTags.Load_Color">
            <summary>Loads the image for Themed Icon ExtensionTags theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionTags.Load_Gray">
            <summary>Loads the image for Themed Icon ExtensionTags theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionTags.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExtensionTags theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionTags.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExtensionTags.</summary>
        </member>
        <member name="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionViewInformation">
             <summary>
            	<para>
            		<para>ExtensionViewInformation Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionViewInformation.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                     Jnnnnnn~_Fnnnnnn~       
                     gt----=@@Q_----Qn       
                     gL     @@b     0n       
                     gL     @@b     0n       
                     7//'   @@b     0n       
                    -@g5@m-_@@HrPbbb@n       
                    `Qg5@F`t008r_----`       
                      `'                     
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+ExtensionViewInformation}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.ExtensionViewInformation))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ExtensionManagerThemedIcons.ExtensionViewInformation.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.ExtensionViewInformation&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionViewInformation.Id">
             <summary>
            	<para>
            		<para>ExtensionViewInformation Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionViewInformation"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                     Jnnnnnn~_Fnnnnnn~       
                     gt----=@@Q_----Qn       
                     gL     @@b     0n       
                     gL     @@b     0n       
                     7//'   @@b     0n       
                    -@g5@m-_@@HrPbbb@n       
                    `Qg5@F`t008r_----`       
                      `'                     
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ExtensionManagerThemedIcons+ExtensionViewInformation}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ExtensionManagerThemedIcons.ExtensionViewInformation))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ExtensionManagerThemedIcons.ExtensionViewInformation.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ExtensionManagerThemedIcons.ExtensionViewInformation&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionViewInformation.Load_Color">
            <summary>Loads the image for Themed Icon ExtensionViewInformation theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionViewInformation.Load_Gray">
            <summary>Loads the image for Themed Icon ExtensionViewInformation theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionViewInformation.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExtensionViewInformation theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.ExtensionManagerThemedIcons.ExtensionViewInformation.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExtensionViewInformation.</summary>
        </member>
        <member name="T:JetBrains.UI.Resources.LayoutDesignerThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.UI.Resources.LayoutDesignerThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LayoutDesignerThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.UI.Resources.LayoutDesignerThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(LayoutDesignerThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.UI.Resources.LayoutDesignerThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.UI.Resources.LayoutDesignerThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = LayoutDesignerThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(LayoutDesignerThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;LayoutDesignerThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Collapsible">
             <summary>
            	<para>
            		<para>Collapsible Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Collapsible.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                                   ,D        
                                 ,D@@        
                               ,D@@@@        
                             ,D@@@@@@        
                           ,D@@@@@@@@        
                         ,D@@@@@@@@@@        
                       ,D@@@@@@@@@@@@        
                     ,D@@@@@@@@@@@@@@        
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LayoutDesignerThemedIcons+Collapsible}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(LayoutDesignerThemedIcons.Collapsible))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = LayoutDesignerThemedIcons.Collapsible.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;LayoutDesignerThemedIcons.Collapsible&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Collapsible.Id">
             <summary>
            	<para>
            		<para>Collapsible Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Collapsible"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                                   ,D        
                                 ,D@@        
                               ,D@@@@        
                             ,D@@@@@@        
                           ,D@@@@@@@@        
                         ,D@@@@@@@@@@        
                       ,D@@@@@@@@@@@@        
                     ,D@@@@@@@@@@@@@@        
                                             
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LayoutDesignerThemedIcons+Collapsible}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(LayoutDesignerThemedIcons.Collapsible))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = LayoutDesignerThemedIcons.Collapsible.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;LayoutDesignerThemedIcons.Collapsible&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Collapsible.Load_Color">
            <summary>Loads the image for Themed Icon Collapsible theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Collapsible.Load_Gray">
            <summary>Loads the image for Themed Icon Collapsible theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Collapsible.Load_GrayDark">
            <summary>Loads the image for Themed Icon Collapsible theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Collapsible.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Collapsible.</summary>
        </member>
        <member name="T:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Expandable">
             <summary>
            	<para>
            		<para>Expandable Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Expandable.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                       "                     
                       @QL                   
                       @@8@y-                
                       @@ _y@8/              
                       @@   `Tgg1.           
                       @@      }@@F          
                       @@    !%@9"           
                       @@ `7ggJ`             
                       @@E@R=                
                       @gn.                  
                       +                     
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LayoutDesignerThemedIcons+Expandable}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(LayoutDesignerThemedIcons.Expandable))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = LayoutDesignerThemedIcons.Expandable.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;LayoutDesignerThemedIcons.Expandable&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Expandable.Id">
             <summary>
            	<para>
            		<para>Expandable Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Expandable"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                       "                     
                       @QL                   
                       @@8@y-                
                       @@ _y@8/              
                       @@   `Tgg1.           
                       @@      }@@F          
                       @@    !%@9"           
                       @@ `7ggJ`             
                       @@E@R=                
                       @gn.                  
                       +                     
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LayoutDesignerThemedIcons+Expandable}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(LayoutDesignerThemedIcons.Expandable))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = LayoutDesignerThemedIcons.Expandable.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;LayoutDesignerThemedIcons.Expandable&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Expandable.Load_Color">
            <summary>Loads the image for Themed Icon Expandable theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Expandable.Load_Gray">
            <summary>Loads the image for Themed Icon Expandable theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Expandable.Load_GrayDark">
            <summary>Loads the image for Themed Icon Expandable theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.UI.Resources.LayoutDesignerThemedIcons.Expandable.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Expandable.</summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
