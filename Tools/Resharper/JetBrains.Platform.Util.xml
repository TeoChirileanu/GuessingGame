<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.Util</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Util.AsyncLazy`1">
            <summary>
            A lazily-calculated asynchronous value.
            </summary>
        </member>
        <member name="F:JetBrains.Util.AsyncLazy`1.myValue">
            <summary>
            Lazily-created task. Threading: simple reads, CAS writes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.AsyncLazy`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            An explicit value.
            </summary>
        </member>
        <member name="M:JetBrains.Util.AsyncLazy`1.#ctor(System.Func{`0})">
            <summary>
            A function to produce the value. This function is run within a task when the value is requested.
            </summary>
        </member>
        <member name="M:JetBrains.Util.AsyncLazy`1.#ctor(JetBrains.DataFlow.Lifetime,System.Func{`0},JetBrains.Application.Threading.Tasks.ITaskHost)">
            <summary>
            A function to produce the value. This function is run within a task when the value is requested.
            </summary>
        </member>
        <member name="M:JetBrains.Util.AsyncLazy`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            An async lambda.
            </summary>
            <param name="afactory"></param>
        </member>
        <member name="M:JetBrains.Util.AsyncLazy`1.#ctor">
            <summary>
            Inheritor ctor for custom lazy init. Expected to override <see cref="M:JetBrains.Util.AsyncLazy`1.OnCustomGetValue" /> in the inheritor to provide the value if this overload is used.
            </summary>
        </member>
        <member name="M:JetBrains.Util.AsyncLazy`1.GetAwaiter">
            <summary>Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
            <returns>An awaiter instance.</returns>
        </member>
        <member name="M:JetBrains.Util.AsyncLazy`1.GetValueAsync">
            <summary>
              <para>Starts calculating the value asynchronously, if this is the first time the value has been called for. Returns the task to be awaited.</para>
              <para>On subsequent calls, returns the same task (either completed or not).</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.AsyncLazy`1.GetValueCold">
            <summary>
            Cold-path for <see cref="M:JetBrains.Util.AsyncLazy`1.GetValueAsync" /> to initiate its calculation. Skipped on further calls.
            </summary>
        </member>
        <member name="M:JetBrains.Util.AsyncLazy`1.OnCustomGetValue">
            <summary>
            Override in derived classes to avoid creating a ctor-passed lambda. Replaces the factory constructor parameter.
            This WILL NOT be called from the base ctor.
            This will be called:
            1) Never, if the user never asks for the lazy task.
            2) Once, the first time the user asks for the lazy task, if this method succeeds.
            3) If this method throws, then each next time the user asks for the lazy task, until it succeeds.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Collections.AlphanumComparatorFast">
            <summary>
            This sorting algorithm logically handles numbers in strings. It makes sense to humans. Highway names like 50F and 100F will be sorted wrongly with ASCII sort.
            </summary>
            <remarks>
            https://www.dotnetperls.com/alphanumeric-sorting
            </remarks>
        </member>
        <member name="T:JetBrains.Util.Collections.Fixed.Bunch4`1">
            <summary>
            Represents a 4-cell value type array.
            </summary>
            <typeparam name="T">The type of stored item.</typeparam>
        </member>
        <member name="P:JetBrains.Util.Collections.Fixed.Bunch4`1.Length">
            <summary>
            Gets the maximum size of the <see cref="T:JetBrains.Util.Collections.Fixed.Bunch4`1"/> collection.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Collections.Fixed.Bunch4`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less then zero -or- greater than maximum length of the bunch.
            </exception>
        </member>
        <member name="M:JetBrains.Util.Collections.Fixed.Bunch4`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the bunch.
            </summary>
            <returns>An <see cref="T:JetBrains.Util.Collections.Fixed.Bunch4`1.Enumerator"/> that can be used to iterate through the bunch.</returns>
        </member>
        <member name="T:JetBrains.Util.Collections.Fixed.Bunch8`1">
            <summary>
            Represents a 8-cell value type array.
            </summary>
            <typeparam name="T">The type of stored item.</typeparam>
        </member>
        <member name="P:JetBrains.Util.Collections.Fixed.Bunch8`1.Length">
            <summary>
            Gets the maximum size of the <see cref="T:JetBrains.Util.Collections.Fixed.Bunch8`1"/> collection.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Collections.Fixed.Bunch8`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less then zero -or- greater than maximum length of the bunch.
            </exception>
        </member>
        <member name="M:JetBrains.Util.Collections.Fixed.Bunch8`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the bunch.
            </summary>
            <returns>An <see cref="T:JetBrains.Util.Collections.Fixed.Bunch8`1.Enumerator"/> that can be used to iterate through the bunch.</returns>
        </member>
        <member name="T:JetBrains.Util.Collections.Fixed.Bunch16`1">
            <summary>
            Represents a 16-cell value type array.
            </summary>
            <typeparam name="T">The type of stored item.</typeparam>
        </member>
        <member name="P:JetBrains.Util.Collections.Fixed.Bunch16`1.Length">
            <summary>
            Gets the maximum size of the <see cref="T:JetBrains.Util.Collections.Fixed.Bunch16`1"/> collection.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Collections.Fixed.Bunch16`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less then zero -or- greater than maximum length of the bunch.
            </exception>
        </member>
        <member name="M:JetBrains.Util.Collections.Fixed.Bunch16`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the bunch.
            </summary>
            <returns>An <see cref="T:JetBrains.Util.Collections.Fixed.Bunch16`1.Enumerator"/> that can be used to iterate through the bunch.</returns>
        </member>
        <member name="T:JetBrains.Util.Collections.Fixed.Bunch32`1">
            <summary>
            Represents a 32-cell value type array.
            </summary>
            <typeparam name="T">The type of stored item.</typeparam>
        </member>
        <member name="P:JetBrains.Util.Collections.Fixed.Bunch32`1.Length">
            <summary>
            Gets the maximum size of the <see cref="T:JetBrains.Util.Collections.Fixed.Bunch32`1"/> collection.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Collections.Fixed.Bunch32`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less then zero -or- greater than maximum length of the bunch.
            </exception>
        </member>
        <member name="M:JetBrains.Util.Collections.Fixed.Bunch32`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the bunch.
            </summary>
            <returns>An <see cref="T:JetBrains.Util.Collections.Fixed.Bunch32`1.Enumerator"/> that can be used to iterate through the bunch.</returns>
        </member>
        <member name="T:JetBrains.Util.Collections.Fixed.Bunch64`1">
            <summary>
            Represents a 64-cell value type array.
            </summary>
            <typeparam name="T">The type of stored item.</typeparam>
        </member>
        <member name="P:JetBrains.Util.Collections.Fixed.Bunch64`1.Length">
            <summary>
            Gets the maximum size of the <see cref="T:JetBrains.Util.Collections.Fixed.Bunch64`1"/> collection.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Collections.Fixed.Bunch64`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less then zero -or- greater than maximum length of the bunch.
            </exception>
        </member>
        <member name="M:JetBrains.Util.Collections.Fixed.Bunch64`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the bunch.
            </summary>
            <returns>An <see cref="T:JetBrains.Util.Collections.Fixed.Bunch64`1.Enumerator"/> that can be used to iterate through the bunch.</returns>
        </member>
        <member name="T:JetBrains.Util.Collections.Fixed.List4`1">
            <summary>
            Represents a value type collection with fixed capacity equal to 4.
            </summary>
            <typeparam name="T">The type of stored item.</typeparam>
        </member>
        <member name="M:JetBrains.Util.Collections.Fixed.List4`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the bunch.
            </summary>
            <returns>An <see cref="T:JetBrains.Util.Collections.Fixed.List4`1.Enumerator"/> that can be used to iterate through the bunch.</returns>
        </member>
        <member name="T:JetBrains.Util.Collections.Fixed.List8`1">
            <summary>
            Represents a value type collection with fixed capacity equal to 8.
            </summary>
            <typeparam name="T">The type of stored item.</typeparam>
        </member>
        <member name="M:JetBrains.Util.Collections.Fixed.List8`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the bunch.
            </summary>
            <returns>An <see cref="T:JetBrains.Util.Collections.Fixed.List8`1.Enumerator"/> that can be used to iterate through the bunch.</returns>
        </member>
        <member name="T:JetBrains.Util.Collections.Fixed.List16`1">
            <summary>
            Represents a value type collection with fixed capacity equal to 16.
            </summary>
            <typeparam name="T">The type of stored item.</typeparam>
        </member>
        <member name="M:JetBrains.Util.Collections.Fixed.List16`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the bunch.
            </summary>
            <returns>An <see cref="T:JetBrains.Util.Collections.Fixed.List16`1.Enumerator"/> that can be used to iterate through the bunch.</returns>
        </member>
        <member name="T:JetBrains.Util.Collections.Fixed.List32`1">
            <summary>
            Represents a value type collection with fixed capacity equal to 32.
            </summary>
            <typeparam name="T">The type of stored item.</typeparam>
        </member>
        <member name="M:JetBrains.Util.Collections.Fixed.List32`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the bunch.
            </summary>
            <returns>An <see cref="T:JetBrains.Util.Collections.Fixed.List32`1.Enumerator"/> that can be used to iterate through the bunch.</returns>
        </member>
        <member name="T:JetBrains.Util.Collections.Fixed.List64`1">
            <summary>
            Represents a value type collection with fixed capacity equal to 64.
            </summary>
            <typeparam name="T">The type of stored item.</typeparam>
        </member>
        <member name="M:JetBrains.Util.Collections.Fixed.List64`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the bunch.
            </summary>
            <returns>An <see cref="T:JetBrains.Util.Collections.Fixed.List64`1.Enumerator"/> that can be used to iterate through the bunch.</returns>
        </member>
        <member name="T:JetBrains.Util.Collections.ObjectPool`1">
            <remarks>
            All methods of this class are thread safe
            </remarks>>
            <typeparam name="T">The type of the entities in the pool</typeparam>
        </member>
        <member name="M:JetBrains.Util.Collections.ObjectPool`1.GetObject(JetBrains.DataFlow.Lifetime)">
            <summary>
            Gets an object from the pool. Object is returned to the pool as lifetime is terminated.
            If there are no vacant objects the new one is created using the factory passed to the constructor
            </summary>
            <param name="lifetime">Lifetime of the object using, terminate it when finish using of the object in order to return it to the pool</param>
            <returns>Return an object from the pool</returns>
        </member>
        <member name="M:JetBrains.Util.Collections.ObjectPool`1.GetObject">
            <summary>
            Gets an object from the pool. Object must be returned to the pool via <see cref="M:JetBrains.Util.Collections.ObjectPool`1.ReturnObject(`0)"/> method.
            If there are no vacant objects the new one is created using the factory passed to the constructor
            </summary>
            <returns>Return an object from the pool</returns>
        </member>
        <member name="M:JetBrains.Util.Collections.ObjectPool`1.CreateAndGetObject(JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates the new object using factory passed to the constructor and returns it
            </summary>
            <param name="lifetime"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Collections.ObjectPool`1.AddObjectToPool(`0)">
            <summary>
            Adds another object to the pool
            </summary>
            <param name="object"></param>
        </member>
        <member name="M:JetBrains.Util.Collections.ObjectPool`1.ReturnObject(`0)">
            <summary>
            Return the object taken with <see cref="M:JetBrains.Util.Collections.ObjectPool`1.GetObject"/> method to the pool. 
            If there are no vacant objects the new one is created using the factory passed to the constructor
            </summary>
        </member>
        <member name="T:JetBrains.Util.Collections.CountingSet`1">
            <summary>
            Multiset, each element can be included into set multiple times. Internally implemented as Dictionary : [Element] -> [Number of equal elements in this set]
            Each time we execute <see cref="M:JetBrains.Util.Collections.CountingSet`1.Add(`0)"/> counter for given element is increased. On <see cref="M:JetBrains.Util.Collections.CountingSet`1.Remove(`0)"/> counter is decreased (if it becomes zero, element is removed from set).
            You can check the number of element occurrences in this set by invoking <see cref="M:JetBrains.Util.Collections.CountingSet`1.GetCount(`0)"/>
            </summary>
            <typeparam name="T">Type of set's element</typeparam>
        </member>
        <member name="T:JetBrains.Util.Collections.EnumeratorExt">
            <summary>
            Class contains classic methods of <see cref="T:System.Collections.IEnumerable"/> for <see cref="T:System.Collections.IEnumerator"/>. One of purposes is to suport "struct enumerators" - all theese
            methods works with "struct enumerators" without allocating any object in the heap.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Collections.JetBinaryTree.NodeColor">
            <summary>
            A node in a red black tree can have one of the following two colors.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeEnumerator`2">
            <summary>
            The JetBinaryTreeEnumerator class returns the keys or data objects of the treap in sorted order. 
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeEnumerator`2.#ctor(JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode{`0,`1},System.Boolean,JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode{`0,`1})">
            <summary>
             Determine order, walk the tree and push the nodes onto the stack
            </summary>
             <param name="node"></param>
             <param name="ascending"></param>
             <param name="sentinelNode"></param>
        </member>
        <member name="P:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeEnumerator`2.Key">
            <summary>
             Key.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeEnumerator`2.Value">
            <summary>
             The data or value associated with the key.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeEnumerator`2.Node">
            <summary>
             The data or value associated with the key.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeEnumerator`2.InsertNewNode(JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode{`0,`1})">
            <summary>
            Use depth-first traversal to push nodes into stack the lowest node will be at the top of the stack.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeEnumerator`2.NextElement">
            <summary>
             Next element.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeEnumerator`2.HasMoreElements">
            <summary>
             Has more elements.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeEnumerator`2.MoveNext">
            <summary>
             Move next.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode`2">
            <summary>
            A single node that is encapsulated in a red black tree data structure.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode`2.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode`2.Color">
            <summary>
             Color - used to balance the tree.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode`2.Left">
            <summary>
             Left node.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode`2.Right">
            <summary>
             Right node.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode`2.Parent">
            <summary>
            Parent node.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode`2.Key">
            <summary>
             Key provided by the calling class.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode`2.Data">
            <summary>
             Data available in this node
            </summary>
        </member>
        <member name="T:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2">
            <summary>
             Red-black tree implementation. Not thread-safe
             Sorted map, can be used for imprecise search
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.Size">
            <summary>
            The number of nodes contained in the tree.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.Clear">
            <summary>
            Clears the tree.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.IsEmpty">
            <summary>
            Returns true if the tree is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.RemoveMin">
            <summary>
            Removes the node with the minimum key.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.RemoveMax">
            <summary>
            Removes the node with the maximum key.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.GetMinKey">
            <summary>
            Returns the minimum key value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.GetMaxKey">
            <summary>
            Returns the maximum key value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.GetMinValue">
            <summary>
            Returns the object having the minimum key value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.GetMaxValue">
            <summary>
            Returns the object having the maximum key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.GetNode(`0)">
            <summary>
            Gets node for the specified key.
            WARNING: This is hackish. Use it only when you really need it and understand all side-effects.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.GetData(`0)">
            <summary>
            Gets the data object associated with the specified key.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.InplaceReplace(`0,`0,`1)">
            <summary>
             This method updates key and value for existing node.
             WARNING: It doesn't check that replaced key is in correct place! Use this method only if you are shifting keys and you're sure that this won't cause any corruption to the tree!
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.Add(`0,`1)">
            <summary>
             Adds data to the tree.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.RotateLeft(JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode{`0,`1})">
            <summary>
             Rebalance the tree by rotating the nodes to the left.
            </summary>        
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.RotateRight(JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode{`0,`1})">
            <summary>
             Rebalance the tree by rotating the nodes to the right.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.Remove(`0)">
            <summary>
            Removes the key and data object (delete).
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.Nodes(System.Boolean)">
            <summary>
            Returns an enumerator that returns nodes in order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.Pairs(System.Boolean)">
            <summary>
            Returns an enumerator that returns the key-value pairs in order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.Keys(System.Boolean)">
            <summary>
            Returns keys in order as specified in parameter.
            </summary>
            <param name="ascending"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.Values(System.Boolean)">
            <summary>
            Returns all the values in the tree in order as specified in the parameter.
            </summary>
            <param name="ascending"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.Elements(System.Boolean)">
            <summary>
            Returns an enumeration of the data objects in order as specified in the parameter.
            </summary>
            <param name="ascending"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.RestoreAfterInsert(JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode{`0,`1})">
            <summary>
            RestoreAfterInsert
            Additions to red-black trees usually destroy the red-black 
            properties. Examine the tree and restore. Rotations are normally 
            required to restore it
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.RestoreAfterDelete(JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode{`0,`1})">
            <summary>
            Deletions from red-black trees may destroy the red-black 
            properties. Examine the tree and restore. Rotations are normally 
            required to restore it.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.Delete(JetBrains.Util.Collections.JetBinaryTree.JetBinaryTreeNode{`0,`1})">
            <summary>
            Deletes a node from the tree and restores red black properties.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree`2.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Util.Collections.LimitedDictionary`2">
            <summary>
            Cache of most recently used items.
            No position update on access.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Collections.EnumerableCollection`1">
            <summary>
            This class adapts <see cref="T:System.Collections.Generic.IEnumerable`1"/> to read-only <see cref="T:System.Collections.Generic.ICollection`1"/> involving count of items. Methods <see cref="M:JetBrains.Util.Collections.EnumerableCollection`1.Contains(`0)"/>
            and <see cref="M:JetBrains.Util.Collections.EnumerableCollection`1.CopyTo(`0[],System.Int32)"/> are not supported.
            Used to optimize getting count of items only. Count is specified in constructor - it IS NOT counted automatically by enumerable. 
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="T:JetBrains.Util.Collections.EqualityComparer">
            <summary>
            Factory for anonmymous <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementations based on delegates provided.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.EqualityComparer.Create``1(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
            Returns equality comparer implementation from pair of delegates.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Collections.EqualityComparer.Create``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns equality comparer implementation projecting values to some keys using the delegate rule provided
            and comparing those keys with custom or default equality comparer for key type.
            </summary>
        </member>
        <member name="T:JetBrains.Util.EmptyDictionary`2">
            <summary>
            Reuses the single read-only instance of an empty dictionary (one per type).
            </summary>
        </member>
        <member name="T:JetBrains.Util.Colors.ColorAdjustment">
            <summary>
            Helps to adjust different color parameters in fluent way
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Shade(System.Double)">
            <summary>
            Makes brighter or darker depending on current brightness. 
            For example, in case of current color is light one, it makes darker
            </summary>
            <param name="offset">Offset</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Lighter(System.Double)">
            <summary>
            Makes color lighter
            </summary>
            <param name="offset">Offset</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Darker(System.Double)">
            <summary>
            Makes color darker
            </summary>
            <param name="offset">Offset</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Brightness(System.Double)">
            <summary>
            Changes brightness to the target one
            </summary>
            <param name="brightness">Target brightness</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Brightness(System.Windows.Media.Color)">
            <summary>
            Changes brightness to the target one
            </summary>
            <param name="brightness">Target brightness</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Brightness(System.Drawing.Color)">
            <summary>
            Changes brightness to the target one
            </summary>
            <param name="brightness">Target brightness</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Lightest">
            <summary>
            Makes the most distinguishable toned lightest color.
            Note, in case of the color is currently has indistinguishable tone, it will not coerce it 
            (in other word it will try to preserve current level of 'distinguishable')
            </summary>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Darkest">
            <summary>
            Makes the most distinguishable lightest color
            Note, in case of the color is currently has indistinguishable tone, it will not coerce it 
            (in other word it will try to preserve current level of 'distinguishable')
            </summary>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Saturate(System.Double)">
            <summary>
            Makes color more saturate
            </summary>
            <param name="offset">Offset</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Desaturate(System.Double)">
            <summary>
            Desaturates color
            </summary>
            <param name="offset">Offset</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Saturation(System.Double)">
            <summary>
            Changes saturation to the target one
            </summary>
            <param name="saturation">Target saturation</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Saturation(System.Windows.Media.Color)">
            <summary>
            Changes saturation to the target one
            </summary>
            <param name="saturation">Target saturation</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Saturation(System.Drawing.Color)">
            <summary>
            Changes saturation to the target one
            </summary>
            <param name="saturation">Target saturation</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Tingle(System.Double)">
            <summary>
            Changes hue 
            </summary>
            <param name="offset">Offset to hue</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Tint(System.Double)">
            <summary>
            Changes hue to the target one
            </summary>
            <param name="hue">Target hue</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Tint(System.Windows.Media.Color)">
            <summary>
            Changes hue to the target one
            </summary>
            <param name="hue">Target hue</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Tint(System.Drawing.Color)">
            <summary>
            Changes hue to the target one
            </summary>
            <param name="hue">Target hue</param>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Fade(System.Double)">
            <summary>
            Multiply current alpha with the given value
            </summary>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Opacity(System.Double)">
            <summary>
            Change current opacity to the given one
            </summary>
            <returns>The same object to continue adjusting</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Accent(System.Windows.Media.Color,System.Double)">
            <summary>
            Add accent from the given color. Technically, result color is hue &amp; saturation 
            from the accent color and brightness from the original
            </summary>
            <param name="accent"></param>
            <param name="strange">How many accented color will be in result color [0..1]</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Accent(System.Drawing.Color,System.Double)">
            <summary>
            Add accent from the given color. Technically, result color is hue &amp; saturation 
            from the accent color and brightness from the original
            </summary>
            <param name="accent"></param>
            <param name="strange">How many accented color will be in result color [0..1]</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Admix(System.Windows.Media.Color,System.Double,System.Boolean)">
            <summary>
            Blends with other color
            </summary>
            <param name="other"></param>
            <param name="strange">How many other color will be in result color [0..1]</param>
            <param name="affectAlpha">Set true to mix alpha too</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustment.Admix(System.Drawing.Color,System.Double,System.Boolean)">
            <summary>
            Blends with other color
            </summary>
            <param name="other"></param>
            <param name="strange">How many other color will be in result color [0..1]</param>
            <param name="affectAlpha">Set true to mix alpha too</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustmentExtensions.Adjust(System.Windows.Media.Color)">
            <summary>
            Gets helper to adjust different color parameters in fluent way
            </summary>
            <param name="color">Source color</param>
            <returns>ColorAdjustment</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorAdjustmentExtensions.Adjust(System.Drawing.Color)">
            <summary>
            Gets helper to adjust different color parameters in fluent way
            </summary>
            <param name="color">Source color</param>
            <returns>ColorAdjustment</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorsEx.RGB(System.Windows.Media.Color)">
            <summary>
            Converts color to rgb32 format
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorsEx.MixWith(System.Windows.Media.Color,System.Windows.Media.Color,System.Single)">
            <summary>
            Mixes two colors together.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Colors.HumanPerceptibleColor">
            <summary>
            Color representation with specific to be accurate to human perception of parameters like saturation, brightness. 
            This model is similar to HSB except to taking account different degrees to which each of the primary (RGB) colors 
            affects human perception of the overall brightness of a color
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.HumanPerceptibleColor.Hue">
            <summary>
            Gets or set hue (in range [0...1])
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.HumanPerceptibleColor.Saturation">
            <summary>
            Gets or set saturation (in range [0...1])
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.HumanPerceptibleColor.Brightness">
            <summary>
            Gets or set brightness as it is perceived by human (in range [0...1])
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.HumanPerceptibleColor.Alpha">
            <summary>
            Gets or set alpha channel (opacity) (in range [0...1])
            </summary>
        </member>
        <member name="T:JetBrains.Util.Colors.ColorSpaces.CIELab">
            <summary>
            Represents L*a*b* color space
            </summary>
        </member>
        <member name="F:JetBrains.Util.Colors.ColorSpaces.CIELab.Empty">
            <summary>
            Gets an empty CIELab structure.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorSpaces.CIELab.L">
            <summary>
            Gets or sets L component (0..100).
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorSpaces.CIELab.A">
            <summary>
            Gets or sets a component (-100..+100).
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorSpaces.CIELab.B">
            <summary>
            Gets or sets a component  (-100..+100).
            </summary>
        </member>
        <member name="T:JetBrains.Util.Colors.ColorSpaces.CIEXYZ">
            <summary>
            Represents CIE XYZ color space
            </summary>
        </member>
        <member name="F:JetBrains.Util.Colors.ColorSpaces.CIEXYZ.Empty">
            <summary>
            Gets an empty CIEXYZ structure.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Colors.ColorSpaces.CIEXYZ.D65">
            <summary>
            Gets the CIE D65 (white) structure.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorSpaces.CIEXYZ.X">
            <summary>
            Gets or sets X component.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorSpaces.CIEXYZ.Y">
            <summary>
            Gets or sets Y component.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorSpaces.CIEXYZ.Z">
            <summary>
            Gets or sets Z component.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Colors.ColorSpaces.CMYK">
            <summary>
            Represents CMYK color space.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Colors.ColorSpaces.CMYK.Empty">
            <summary>
            Gets an empty CMYK structure;
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.CMYK.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of a CMYK structure.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Colors.ColorSpaces.ColorSpace">
            <summary>
            Provides methods to convert from a color space to an other.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.GetColorDistance(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the "distance" between two colors.
            RGB colors must be normalized (eg. values in [0.0, 1.0]).
            </summary>
            <param name="r1">First color red component.</param>
            <param name="g1">First color green component.</param>
            <param name="b1">First color blue component.</param>
            <param name="r2">Second color red component.</param>
            <param name="g2">Second color green component.</param>
            <param name="b2">Second color blue component.</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.GetColorDistance(System.Double[],System.Double[])">
            <summary>
            Gets the "distance" between two colors.
            RGB colors must be normalized (eg. values in [0.0, 1.0]).
            </summary>
            <param name="color1">First color [r,g,b]</param>
            <param name="color2">Second color [r,g,b]</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.GetColorDistance(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Gets the "distance" between two colors.
            </summary>
            <param name="color1">First color.</param>
            <param name="color2">Second color.</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.GetIntFromHex(System.String)">
            <summary>
            Gets the int equivalent for a hexadecimal value.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HexToColor(System.String)">
            <summary>
            Converts a Hex color to a .net Color.
            </summary>
            <param name="hexColor">The desired hexadecimal color to convert.</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBToHex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a RGB color format to an hexadecimal color.
            </summary>
            <param name="r">The Red value.</param>
            <param name="g">The Green value.</param>
            <param name="b">The Blue value.</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBToHex(System.Windows.Media.Color)">
            <summary>
            Converts a RGB color format to an hexadecimal color.
            </summary>
            <param name="r">The color to convert.</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSBtoRGB(JetBrains.Util.Colors.ColorSpaces.HSB)">
            <summary>
            Converts HSB to RGB.
            </summary>
            <param name="hsv">The HSB structure to convert.</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSBtoRGB(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSB to RGB.
            </summary>
            <param name="H">Hue value.</param>
            <param name="S">Saturation value.</param>
            <param name="V">Brigthness value.</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSBtoColor(JetBrains.Util.Colors.ColorSpaces.HSB)">
            <summary>
            Converts HSB to Color.
            </summary>
            <param name="hsv">the HSB structure to convert.</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSBtoColor(System.Double,System.Double,System.Double)">
            <summary> 
            Converts HSB to a .net Color.
            </summary>
            <param name="h">Hue value (must be between 0 and 360).</param>
            <param name="s">Saturation value (must be between 0 and 1).</param>
            <param name="b">Brightness value (must be between 0 and 1).</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSBtoColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts HSB to Color.
            </summary>
            <param name="h">Hue value.</param>
            <param name="s">Saturation value.</param>
            <param name="b">Brightness value.</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSBtoHSL(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSB to HSL.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSBtoCMYK(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSB to CMYK.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSBtoYUV(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSB to CMYK.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSLtoRGB(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSL to RGB.
            </summary>
            <param name="h">Hue, must be in [0, 360].</param>
            <param name="s">Saturation, must be in [0, 1].</param>
            <param name="l">Luminance, must be in [0, 1].</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSLtoRGB(JetBrains.Util.Colors.ColorSpaces.HSL)">
            <summary>
            Converts HSL to RGB.
            </summary>
            <param name="hsl">The HSL structure to convert.</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSLtoColor(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSL to .net Color.
            </summary>
            <param name="hsl">The HSL structure to convert.</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSLtoColor(JetBrains.Util.Colors.ColorSpaces.HSL)">
            <summary>
            Converts HSL to .net Color.
            </summary>
            <param name="hsl">The HSL structure to convert.</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSLtoHSB(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSL to HSB.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSLtoCMYK(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSL to CMYK.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.HSLtoYUV(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSL to YUV.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoHSL(System.Int32,System.Int32,System.Int32)">
            <summary> 
            Converts RGB to HSL.
            </summary>
            <param name="red">Red value, must be in [0,255].</param>
            <param name="green">Green value, must be in [0,255].</param>
            <param name="blue">Blue value, must be in [0,255].</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoHSL(JetBrains.Util.Colors.ColorSpaces.RGB)">
            <summary> 
            Converts RGB to HSL.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoHSL(System.Windows.Media.Color)">
            <summary> 
            Converts Color to HSL.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoHSB(System.Int32,System.Int32,System.Int32)">
            <summary> 
            Converts RGB to HSB.
            </summary> 
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoHSB(JetBrains.Util.Colors.ColorSpaces.RGB)">
            <summary> 
            Converts RGB to HSB.
            </summary> 
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoHSB(System.Windows.Media.Color)">
            <summary> 
            Converts RGB to HSB.
            </summary> 
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoCMYK(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts RGB to CMYK
            </summary>
            <param name="red">Red vaue must be in [0, 255].</param>
            <param name="green">Green vaue must be in [0, 255].</param>
            <param name="blue">Blue vaue must be in [0, 255].</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoCMYK(System.Windows.Media.Color)">
            <summary>
            Converts RGB to CMYK
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoCMYK(JetBrains.Util.Colors.ColorSpaces.RGB)">
            <summary>
            Converts RGB to CMYK
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoYUV(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts RGB to YUV.
            </summary>
            <param name="red">red must be in [0, 255].</param>
            <param name="green">green must be in [0, 255].</param>
            <param name="blue">blue must be in [0, 255].</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoYUV(System.Windows.Media.Color)">
            <summary>
            Converts RGB to YUV.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoYUV(JetBrains.Util.Colors.ColorSpaces.RGB)">
            <summary>
            Converts RGB to YUV.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoXYZ(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts RGB to CIE XYZ (CIE 1931 color space)
            </summary>
            <param name="red">Red must be in [0, 255].</param>
            <param name="green">Green must be in [0, 255].</param>
            <param name="blue">Blue must be in [0, 255].</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoXYZ(JetBrains.Util.Colors.ColorSpaces.RGB)">
            <summary>
            Converts RGB to CIEXYZ.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoXYZ(System.Windows.Media.Color)">
            <summary>
            Converts RGB to CIEXYZ.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoLab(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts RGB to CIELab.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoLab(JetBrains.Util.Colors.ColorSpaces.RGB)">
            <summary>
            Converts RGB to CIELab.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.RGBtoLab(System.Windows.Media.Color)">
            <summary>
            Converts RGB to CIELab.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.CMYKtoColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Converts CMYK to RGB.
            </summary>
            <param name="c">Cyan value (must be between 0 and 1).</param>
            <param name="m">Magenta value (must be between 0 and 1).</param>
            <param name="y">Yellow value (must be between 0 and 1).</param>
            <param name="k">Black value (must be between 0 and 1).</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.CMYKtoColor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts CMYK to RGB.
            </summary>
            <param name="c">Cyan value (must be between 0 and 1).</param>
            <param name="m">Magenta value (must be between 0 and 1).</param>
            <param name="y">Yellow value (must be between 0 and 1).</param>
            <param name="k">Black value (must be between 0 and 1).</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.CMYKtoColor(JetBrains.Util.Colors.ColorSpaces.CMYK)">
            <summary>
            Converts CMYK to RGB.
            </summary>
            <param name="cmyk"></param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.CMYKtoRGB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts CMYK to RGB.
            </summary>
            <param name="c">Cyan value (must be between 0 and 1).</param>
            <param name="m">Magenta value (must be between 0 and 1).</param>
            <param name="y">Yellow value (must be between 0 and 1).</param>
            <param name="k">Black value (must be between 0 and 1).</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.CMYKtoRGB(JetBrains.Util.Colors.ColorSpaces.CMYK)">
            <summary>
            Converts CMYK to RGB.
            </summary>
            <param name="cmyk"></param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.CMYKtoHSL(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts CMYK to HSL.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.CMYKtoHSB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts CMYK to HSB.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.CMYKtoYUV(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts CMYK to YUV.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.YUVtoRGB(System.Double,System.Double,System.Double)">
            <summary>
            Converts YUV to RGB.
            </summary>
            <param name="y">Y must be in [0, 1].</param>
            <param name="u">U must be in [-0.436, +0.436].</param>
            <param name="v">V must be in [-0.615, +0.615].</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.YUVtoRGB(JetBrains.Util.Colors.ColorSpaces.YUV)">
            <summary>
            Converts YUV to RGB.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.YUVtoColor(System.Double,System.Double,System.Double)">
            <summary>
            Converts YUV to a .net Color.
            </summary>
            <param name="y">Y must be in [0, 1].</param>
            <param name="u">U must be in [-0.436, +0.436].</param>
            <param name="v">V must be in [-0.615, +0.615].</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.YUVtoColor(JetBrains.Util.Colors.ColorSpaces.YUV)">
            <summary>
            Converts YUV to a .net Color.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.YUVtoHSL(System.Double,System.Double,System.Double)">
            <summary>
            Converts YUV to HSL.
            </summary>
            <param name="y">Y must be in [0, 1].</param>
            <param name="u">U must be in [-0.436, +0.436].</param>
            <param name="v">V must be in [-0.615, +0.615].</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.YUVtoHSB(System.Double,System.Double,System.Double)">
            <summary>
            Converts YUV to HSB.
            </summary>
            <param name="y">Y must be in [0, 1].</param>
            <param name="u">U must be in [-0.436, +0.436].</param>
            <param name="v">V must be in [-0.615, +0.615].</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.YUVtoCMYK(System.Double,System.Double,System.Double)">
            <summary>
            Converts YUV to CMYK.
            </summary>
            <param name="y">Y must be in [0, 1].</param>
            <param name="u">U must be in [-0.436, +0.436].</param>
            <param name="v">V must be in [-0.615, +0.615].</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.XYZtoRGB(System.Double,System.Double,System.Double)">
            <summary>
            Converts CIEXYZ to RGB structure.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.XYZtoRGB(JetBrains.Util.Colors.ColorSpaces.CIEXYZ)">
            <summary>
            Converts CIEXYZ to RGB structure.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.Fxyz(System.Double)">
            <summary>
            XYZ to L*a*b* transformation function.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.XYZtoLab(System.Double,System.Double,System.Double)">
            <summary>
            Converts CIEXYZ to CIELab structure.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.XYZtoLab(JetBrains.Util.Colors.ColorSpaces.CIEXYZ)">
            <summary>
            Converts CIEXYZ to CIELab structure.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.LabtoXYZ(System.Double,System.Double,System.Double)">
            <summary>
            Converts CIELab to CIEXYZ.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.LabtoXYZ(JetBrains.Util.Colors.ColorSpaces.CIELab)">
            <summary>
            Converts CIELab to CIEXYZ.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.LabtoRGB(System.Double,System.Double,System.Double)">
            <summary>
            Converts CIELab to RGB.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.ColorSpace.LabtoRGB(JetBrains.Util.Colors.ColorSpaces.CIELab)">
            <summary>
            Converts CIELab to RGB.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Colors.ColorSpaces.HSB">
            <summary>
            Structure to define HSB.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Colors.ColorSpaces.HSB.Empty">
            <summary>
            Gets an empty HSB structure;
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorSpaces.HSB.Hue">
            <summary>
            Gets or sets the hue component.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorSpaces.HSB.Saturation">
            <summary>
            Gets or sets saturation component.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorSpaces.HSB.Brightness">
            <summary>
            Gets or sets the brightness component.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.HSB.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of a HSB structure.
            </summary>
            <param name="h">Hue value.</param>
            <param name="s">Saturation value.</param>
            <param name="b">Brightness value.</param>
        </member>
        <member name="T:JetBrains.Util.Colors.ColorSpaces.HSL">
            <summary>
            Structure to define HSL.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Colors.ColorSpaces.HSL.Empty">
            <summary>
            Gets an empty HSL structure;
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorSpaces.HSL.Hue">
            <summary>
            Gets or sets the hue component.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorSpaces.HSL.Saturation">
            <summary>
            Gets or sets saturation component.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorSpaces.HSL.Luminance">
            <summary>
            Gets or sets the luminance component.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.HSL.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of a HSL structure.
            </summary>
            <param name="h">Hue value.</param>
            <param name="s">Saturation value.</param>
            <param name="l">Lightness value.</param>
        </member>
        <member name="T:JetBrains.Util.Colors.ColorSpaces.RGB">
            <summary>
            Structure to define RGB.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Colors.ColorSpaces.RGB.Empty">
            <summary>
            Gets an empty RGB structure;
            </summary>
        </member>
        <member name="T:JetBrains.Util.Colors.ColorSpaces.YUV">
            <summary>
            Structure to define YUV.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Colors.ColorSpaces.YUV.Empty">
            <summary>
            Gets an empty YUV structure.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorSpaces.YUV.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of a YUV structure.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Colors.ColorManagement">
            <summary>
            Color Management routines.
            Contains a few simple static functions for working with RGB, BGR and HLS colors.
            Based in parts on ancient MSDN C++ samples (HLS-RGB conversion).
            </summary>
        </member>
        <member name="F:JetBrains.Util.Colors.ColorManagement.c_nMaxHLS">
            <summary>
            Background for MaxHLS.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorManagement.MaxHLS">
            <summary>
            H, L, and S vary over 0-c_nMaxHLS.
            Best if divisible by 6.
            Must fit in a System.Byte.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Colors.ColorManagement.c_nMaxRGB">
            <summary>
            Background for MaxRGB.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorManagement.MaxRGB">
            <summary>
            R, G, and B vary over 0-c_nMaxRGB.
            Must fit in a <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Colors.ColorManagement.c_nUndefinedHue">
            <summary>
            Background for UndefinedHue.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Colors.ColorManagement.UndefinedHue">
            <summary>
            Hue is undefined if Saturation is 0 (grey-scale). This value determines where the Hue scrollbar is initially set for achromatic colors.
            Set tot 2/3 of MaxHLS by default.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.RGBtoHLS(System.UInt32,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            RGBtoHLS() takes a DWORD RGB value and translates it to HLS BYTEs.
            
            A point of reference for the algorithms is Foley and Van Dam, "Fundamentals of Interactive Computer Graphics," Pages 618-19. Their algorithm is in floating point. CHART implements a less general (hardwired ranges) integral algorithm.
            
            There are potential round-off errors throughout this sample. ((0.5 + x)/y) without floating point is phrased ((x + (y/2))/y), yielding a very small round-off error. This makes many of the following divisions look strange. 
            </summary>
            <param name="lRGBColor">The source RGB color.</param>
            <param name="H">Resulting Hue value.</param>
            <param name="L">Resulting Luminance value.</param>
            <param name="S">Resulting Saturation value.</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.HueToRGB(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Utility routine for HLStoRGB.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.HLStoRGB(System.UInt16,System.UInt16,System.UInt16,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts an HLS color to an RGB color and returns three byte components.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.HLStoRGB(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Converts HLS to a <see cref="T:System.Drawing.Color"/> object.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.HLStoBGR(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Works just like HLStoRGB, but reverses the return value (BGR DWORD instead of an RGB one).
            This is useful in case of Windows bitmaps which use BGR colors.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.Mix(System.UInt32,System.UInt32,System.Double)">
            <summary>
            Mixes two colors together in the proportion specified.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.Mix(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            Mixes two colors together in the proportion specified.
            </summary>
            <param name="colorA">First color.</param>
            <param name="colorB">Second color.</param>
            <param name="proportion">A number in between <c>0.0</c> and <c>1.0</c>.</param>
            <returns>The new color.</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.Mix(System.Windows.Media.Color,System.Windows.Media.Color,System.Double)">
            <summary>
            Mixes two colors together in the proportion specified.
            </summary>
            <param name="colorA">First color.</param>
            <param name="colorB">Second color.</param>
            <param name="proportion">A number in between <c>0.0</c> and <c>1.0</c>.</param>
            <returns>The new color.</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.RGB2BGR(System.UInt32)">
            <summary>
            Converts a DWORD RGB color to BGR, or vice versa as it's symmetrical.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.BlendTwo(System.UInt32,System.UInt32)">
            <summary>
            Mixes two colors
            Does the same as Mix but for a fixed 1:1 proportion.
            </summary>
            <param name="rgbA"></param>
            <param name="rgbB"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.GetAlphaBlendedColor(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Blends two colors.
            </summary>
            <param name="g">Device context to get the nearest color from. May be <c>Null</c>, in which case the exact color is returned.</param>
            <param name="src">The first color.</param>
            <param name="dest">The second color.</param>
            <param name="alpha">The alpha value in the [0…FF] range.</param>
            <returns>The blended color, constrained to the device context or not.</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.GetRValue(System.UInt32)">
            <summary>
            Extracts the R value from the RGB color (R is less significant).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.GetGValue(System.UInt32)">
            <summary>
            Extracts the G value from the RGB color (R is less significant).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.GetBValue(System.UInt32)">
            <summary>
            Extracts the B value from the RGB color (R is less significant).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.RGB(System.Byte,System.Byte,System.Byte)">
            <summary>
            Produces an RGB color out of R, G and B values (R is less significant).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.RGBA(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Produces an RGBA color out of R, G, B, and A values (R is less significant).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.RGB(System.Drawing.Color)">
            <summary>
            Produces an RGB color out of R, G and B values (R is less significant).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.RGB(System.Windows.Media.Color)">
            <summary>
            Produces an RGB color out of R, G and B values (R is less significant).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.ConstrainHls(System.Int32)">
            <summary>
            Constrains the integer value to the range of valid HLS values.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.GetContrastedForeground(System.Drawing.Color,System.Drawing.Color,System.Double,System.Double,System.Double)">
            <summary>
            Makes contrast foreground color (tries to preserve color and make well read foreground))
            </summary>
            <param name="background">Currently used background</param>
            <param name="foreground">Currently used foreground</param>
            <param name="contrast">Desired contrast, difference in lightness between background and foreground (value in range [0..1])</param>
            <param name="margin">Margin of lightness to avoid color missing, result's lightness will be in range [margin, 1-margin]</param>
            <param name="whiteBalance">Determine when we make darker and when lighter (must be in range from margin to 1 - margin)</param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.Util.Colors.ColorManagement.LumaRed">
            <summary>
            Grayscale coefficients for HDTV luma from ITU-R BT.709: 0.2126, 0.7152, and 0.0722
            </summary>
        </member>
        <member name="F:JetBrains.Util.Colors.ColorManagement.LumaGreen">
            <summary>
            Grayscale coefficients for HDTV luma from ITU-R BT.709: 0.2126, 0.7152, and 0.0722
            </summary>
        </member>
        <member name="F:JetBrains.Util.Colors.ColorManagement.LumaBlue">
            <summary>
            Grayscale coefficients for HDTV luma from ITU-R BT.709: 0.2126, 0.7152, and 0.0722
            </summary>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.MakeSimilarColor(System.Drawing.Color,System.Drawing.Color,System.Double,System.Double)">
            <summary>
            Makes a color similar to the pattern color in terms of brightness
            </summary>
            <param name="color">Base color</param>
            <param name="pattern">Pattern color</param>
            <param name="threshold">Differences [0..1] which is appropriate, base color returns in case of difference between base color and pattern less than the threshold</param>
            <param name="offset">Offset, required difference [0..1] from pattern lightness</param>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.GetSimilarForeground(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Tries to correct suggested foreground color according to good one
            </summary>
            <param name="foreground"></param>
            <param name="goodForeground"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.GetDarkerColor(System.Drawing.Color,System.Double)">
            <summary>
            Makes darker color than the given one
            </summary>
            <param name="color">Base color</param>
            <param name="value">How darker it should be [0..1]</param>
            <returns>Darker color</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.GetLighterColor(System.Drawing.Color,System.Double)">
            <summary>
            Makes lighter color than the given one
            </summary>
            <param name="color">Base color</param>
            <param name="value">How darker it should be [0..N] (for ex., value 0.2 is 20% lighter)</param>
            <returns>Darker color</returns>
        </member>
        <member name="M:JetBrains.Util.Colors.ColorManagement.BlendColors(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            Blend two colors
            </summary>
            <param name="a">Color a</param>
            <param name="b">Color b</param>
            <param name="proportion">How many of color 'a' in result blended color [0..1]</param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.IsKeyed">
            <summary>
            Whether option is keyed or non-keyed. If keyed then <c>Key</c>, <c>Shortcut</c> and <c>GetKeyDefinition</c> must not return null or throw.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.Key">
            <summary>
            Key name.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.Shortcut">
            <summary>
            Key shortcut. Default: '\x0' (means no shortcut).
            </summary>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.NonKeyedIndex">
            <summary>
            0-based index for non-keyed option.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.IsNonKeyedTail">
            <summary>
            If set to true then all non-keyed arguments starting from <c>NonKeyedIndex</c> considered as multi value for this option.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.IsRequired">
            <summary>
            Whether option is required or not.
            </summary>
            <remarks>
            IMPORTANT! <c>IsRequired</c> has additional meaning for <c>ImplicitGroup</c>-s: "option required to activate implicit group".
            <br/>
            For example, [BoolOption(..., IsRequired = true)] <i>outside</i> implicit group is useless (because value always will be true), 
            but <i>inside</i> implicit group it means 'if this option is specified then appropriate implicit group activated'.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.DefaultValue">
            <summary>
            The value which is set when no option specified at all.
            If option without value specified then <c>EmptyValue</c> is set.
            </summary>
            <remarks>
            Default value must be the same type as option's <c>ValueType</c> or <c>MultiValueType</c> or be the <c>String</c>. 
            String value will be converted via <c>ConvertValue</c> method.
            </remarks>
            <seealso cref="P:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.EmptyValue"/>    
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.EmptyValue">
            <summary>
            The value which is set when option without value specified.
            If option isn't specified at all then <c>DefaultValue</c> is set.
            If <c>EmptyValue</c> is <c>null</c> and option specified without value then error will be reported.
            </summary>
            <remarks>
            Empty value must be the same type as option's <c>ValueType</c> or <c>MultiValueType</c> or be the <c>String</c>. 
            String value will be converted via <c>ConvertValue</c> method.
            </remarks>
            <seealso cref="P:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.DefaultValue"/>    
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.Alias">
            <summary>
            Alternative name for keyed option.
            </summary>
            <remarks>
            Might be used in transition period when you rename some options.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.SymbolicValue">
            <summary>
            Symbolic value like &lt;value> or &lt;path>.
            </summary>
            <remarks>
            Used in usage and help generation.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.HelpText">
            <summary>
            Help text.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.Separator">
            <summary>
            Separator for multi-value. Default: '\0' which means that separator is not available.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.GetKeyDefinition">
            <summary>
            Returns definition for keyed-option. Must not be null if <c>IsKeyed</c> true.
            </summary>
            <remarks>
            Default implementation returns definition with expected value, value is required if no default one provided.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute.FormatValues(System.Object,System.Boolean)">
            <summary>
            Formats option value to string presentation.
            </summary>
            <remarks>
            If <c>value</c> is a single-value then single string is returned.<br/>
            <br/>
            If <c>value</c> is a multi-value and <c>Separator</c> is defined for this option then single string of joined single-values is returned.<br/>
            If <c>Separator</c> IS NOT defined then sequence of single-value strings is returned (neccessary to support '--key=value1 --key=value2 ...' syntax).<br/>    
            </remarks>
            <param name="value"></param>
            <param name="forceDefaultValue">if true then value will be formatted even it is equal to DefaultValue</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.Attributes.AppNameAttribute">
            <summary>
            Specifies app name which is used in help/example/command line generation.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.Attributes.AppNameAttribute.#ctor(System.String)">
            <summary>
            Specifies app name for options model class.
            </summary>
            <param name="nameWithoutExt">app name without extension</param>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.Attributes.OptionOrderAttribute">
            <summary>
            Defines option order number. 
            </summary>
            <remarks>
            Options are stable sorted ascendenly by this number. If no attribute specified then 0 order number supposed.<br/>
            Affects options order inside single class only but including all base classes.<br/>
            <br/>
            By default options defined in base class will preceed options from derived one. Using <c>OptionOrderAttribute</c> it's possible to override this order. 
            </remarks>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.Attributes.AbstractMapperAttribute">
            <summary>
            Base class for all command line mapper's attributes.
            </summary>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.CommandLineArgument">
            <summary>
            Represents parsed command line argument eigther keyed with optional value or non-keyed.
            </summary>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.CommandLineException">
            <summary>
            Represents command line parsing/mapping error which should be shown to end-user.
            </summary>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.GroupSignature">
            <summary>
            Represents group signature which is set of required options.
            </summary>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.ICommandLineBuilder`1">
            <summary>
            Builds command line from typed options model.
            </summary>
            <typeparam name="TOptions"></typeparam>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.ICommandLineMapper`1">
            <summary>
            Maps <c>CommandLineArgument</c>-s to typed options model.
            </summary>
            <remarks>
            Features:<br/>
             * supports types: string, int, bool, enum, TimeSpan, FileSystemPath<br/>
             * extensible: easy to map custom types<br/>
             * supports collection assignable from T[]<br/>
             * supports multi-value specified via separator or repeating key (e.g. '--list=a,b,c' or '--list=a --list=b --list=c')<br/>
             * supports commands (a-la 'git push')<br/>
             * supports implicit group deduced on the set of provided arguments<br/>
             * supports mutually exclusive groups and multi-groups<br/>
             * provides auto-help generation<br/>
             * supports sample generation from options model<br/>
             * supports raw command line tail: useful for passing arguments to started child-process<br/>
            </remarks>
            See <c>CommandLineMapperExamples</c> in test-project.
            <typeparam name="TOptions"></typeparam>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.ICommandLineMapper`1.HelpGenerator">
            <summary>
            Current help generator.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.ICommandLineMapper`1.GetKeyDefinitions">
            <summary>
            Returns <c>KeyDefinition</c>-s built by options model.
            </summary>
            <remarks>
            Key definitions are used by parser to support feature 'space as value separator'.
            <br/>
            E.g. -f &lt;file-name>
            <br/>
            If -f option expects a value then &lt;file-name> is a value for keyed option 'f' otherwise &lt;file-name> is a non-keyed option.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.ICommandLineMapper`1.Map(JetBrains.Util.CommandLineMapper.ICommandLineParser,System.Action{System.String})">
            <summary>
            Maps <c>CommandLineArgument</c>-s to typed options model with auto-processing of help keys and/or command.   
            If command line doesn't contain any argument then also help is displayed.
            Returns null if help was displayed.
            </summary>
            <param name="parser"></param>
            <param name="displayHelp"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.ICommandLineMapper`1.Map(JetBrains.Util.CommandLineMapper.ICommandLineParser)">
            <summary>
            Maps <c>CommandLineArgument</c>-s to typed options model.
            Returns null if and only if command line doesn't contain any argument.
            </summary>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.ICommandLineParser">
            <summary>
            Parses command line, resolves shortcut and alias to key name and provides sequence of <c>CommandLineArgument</c>-s.
            </summary>
            <seealso cref="T:JetBrains.Util.CommandLineMapper.CommandLineArgument"/>
            <seealso cref="T:JetBrains.Util.CommandLineMapper.Impl.AbstractParser"/>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.ICommandLineParser.GetArguments(JetBrains.Util.CommandLineMapper.KeyDefinitionSet)">
            <summary>
            Parses command line according to provided key definitions and returns sequence of <c>CommandLineArgument</c>-s.    
            </summary>
            <param name="keyDefinitions"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.IExampleFormatter">
            <summary>
            Provides method to format sample options as command line.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.IExampleFormatter.Format(System.Object,JetBrains.Util.CommandLineMapper.ExampleFormatFlags)">
            <summary>
            Formats a command line according to passed options.
            </summary>    
            <param name="options"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.IHelpGenerator">
            <summary>
            Generates help by options object model.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.IHelpGenerator.GenerateHelp">
            <summary>
            Generates generic help for options model.
            </summary>
            <remarks>
            Generic help includes only command names with description but without detailed options.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.IHelpGenerator.GenerateHelp(System.String)">
            <summary>
            Generates help for specific command/group.
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.Impl.AbstractParser">
            <summary>
            Basic implementation which able to parse the following cases:
            <br/>
            &lt;non-keyed-value>
            <br/>
            &lt;key-marker>&lt;key>
            <br/>
            &lt;key-marker>&lt;key>:&lt;value>
            <br/>
            &lt;key-marker>&lt;key>=&lt;value>
            <br/>
            &lt;key-marker>&lt;key> &lt;value>  // if 'space-as-value-separator' feature enabled
            <br/>
            &lt;shortcut-marker>&lt;shortcut>[&lt;shortcut>...]
            <br/>
            &lt;shortcut-marker>&lt;shortcut>[&lt;shortcut>...]:&lt;value>
            <br/>
            &lt;shortcut-marker>&lt;shortcut>[&lt;shortcut>...]=&lt;value>
            <br/>
            &lt;shortcut-marker>&lt;shortcut>[&lt;shortcut>...] &lt;value>   // if 'space-as-value-separator' feature enabled
            <br/>
            &lt;shortcut-marker>&lt;shortcut>[&lt;shortcut>...]&lt;value>
            <br/>
            where &lt;shortcut> is a single char
            <br/><br/>
            Also supports &lt;non-keyed-mark> after wich all following arguments are treated as non-keyed.
            <br/>
            See: https://en.wikipedia.org/wiki/Command-line_interface#Option_conventions_in_Unix-like_systems
            </summary>
            <seealso cref="T:JetBrains.Util.CommandLineMapper.Impl.UnixStyleParser"/>
            <seealso cref="T:JetBrains.Util.CommandLineMapper.Impl.UniversalParser"/>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.Impl.BackwardCompatibilityParser">
            <summary>
            Treats - (single dash) as key marker but not a shortcut. Under Windows / (slash) also treated as key marker.<br/>
            <br/>
            &lt;key-marker> ::= -- | / | - <br/>
            &lt;shortcut-marker> ::= (none) <br/>
            &lt;non-keyed-mark> ::= -- <br/>
            <br/>
            Examples: --name=value --name:value /name=value /name:value -name=value -name:value -- -non-keyed --non-keyed
            </summary>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.Impl.CommandLineParserSettings.Builder.TreatUndefinedKeyAsIs">
            <summary>
            If enabled then keys which haven't definition will be converted to <c>CommandLineArgument</c> with given name and without alias/shortcut resolving.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.Impl.CommandLineParserSettings.Builder.TreatSpaceAsValueSeparator">
            <summary>
            If enabled then non-keyed value followed key expecting value will be parsed as value of this key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.Impl.CommandLineParserSettings.Builder.WhenKeyFound(System.Action{System.String,System.String})">
            <summary>
            Sets callback when keyed-option found by its original name. Might be used to display deprecation warning.
            </summary>
            <param name="callback"><c>void OnKeyFound(string prefix, string key)</c></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.Impl.CommandLineParserSettings.Builder.WhenUndefinedKeyFound(System.Action{System.String,System.String})">
            <summary>
            Sets callback when <c>TreatUndefinedKeyAsIs</c> enabled and undefined keyed-option found. Might be used to display deprecation warning.
            </summary>
            <param name="callback"><c>void OnUndefinedKeyFound(string prefix, string key)</c></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.Impl.CommandLineParserSettings.Builder.WhenShortcutFound(System.Action{System.String,System.Char,System.String})">
            <summary>
            Sets callback when keyed-option found by its shortcut. Might be used to display deprecation warning.
            </summary>
            <param name="callback"><c>void OnShortcutFound(string prefix, char shortcut, string key)</c></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.Impl.CommandLineParserSettings.Builder.WhenUndefinedShortcutFound(System.Action{System.String,System.Char})">
            <summary>
            Sets callback when <c>TreatUndefinedKeyAsIs</c> enabled and undefined shortcut found. Might be used to display deprecation warning.
            </summary>
            <param name="callback"><c>void OnUndefinedShortcutFound(string prefix, char shortcut)</c></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.Impl.CommandLineParserSettings.Builder.WhenAliasFound(System.Action{System.String,System.String,System.String})">
            <summary>
            Sets callback when keyed-option found by its alias. Might be used to display deprecation warning.
            </summary>
            <param name="callback"><c>void OnAliasFound(string prefix, string alias, string key)</c></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Impl.CommandLineParserSettings.OnKeyFound">
            <summary>
            Called when keyed-option found by its original name.<br/>
            <c>void OnKeyFound(string prefix, string key)</c>
            </summary>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Impl.CommandLineParserSettings.OnUndefinedKeyFound">
            <summary>
            Called when <c>TreatUndefinedKeyAsIs = true</c> and undefined keyed-option found.<br/>
            <c>void OnUndefinedKeyFound(string prefix, string key)</c>
            </summary>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Impl.CommandLineParserSettings.OnShortcutFound">
            <summary>
            Called when keyed-option found by its shortcut.<br/>
            <c>void OnShortcutFound(string prefix, char shortcut, string key)</c>
            </summary>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Impl.CommandLineParserSettings.OnUndefinedShortcutFound">
            <summary>
            Called when <c>TreatUndefinedKeyAsIs = true</c> and undefined shortcut found.<br/>
            <c>void OnUndefinedShortcutFound(string prefix, char shortcut)</c>
            </summary>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.Impl.CommandLineParserSettings.OnAliasFound">
            <summary>
            Called when keyed-option found by its alias.<br/>
            <c>void OnAliasFound(string prefix, string alias, string key)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.Impl.CompactHelpGenerator">
            <summary>
            Generates help expanding groups inplace. Might be useful for tools with simple command line.
            </summary>
            <example>
            TODO: provide example here
            </example>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.Impl.DefaultHelpGenerator">
            <summary>
            Default implementation of help generator.
            </summary>
            <example>
            <![CDATA[
            Usage: dotMem [--log-level[=ERROR|WARN|INFO]] [--log-file=<file-path>] [--save-to=<dir-path>] <command>
            
            [--log-level[=ERROR|WARN|INFO]] logging level
            [--log-file=<file-path>]        log file path
            [--save-to=<dir-path>]          folder path to save workspace to
            
            <command>
            help                            Display help related to specified command.
              get-snapshot                    Get snapshot of running .NET process.
              start                           Start standalone application under profiling and get snapshot by triggers.  
            ]]>
            </example>
            
            <example>
            <![CDATA[
            get-snapshot                    Get snapshot of running .NET process.
            Usage: dotMem get-snapshot <process-spec> [--as-admin]
            
            <process-spec> ::= <pid-spec> | <name-spec>
            
              <pid-spec> ::= --pid|-i=<pid>
              Specify process by PID.
            
                --pid|-i=<pid>                  process identifier
            
              <name-spec> ::= --name|-n=<process-name> [--with-max-mem] [--all]
              Specify process by name with some optional conditions.
            
                --name|-n=<process-name>        process name with optional extension
                [--with-max-mem]                snapshot a process with max memory consumption
                [--all]                         snapshot all processes with specified name
            
            [--as-admin]                    elevate to admin privileges
            
            E.g: dotMem get-snapshot --pid=2025
                 Get snapshot of process with PID 2025.
            
            E.g: dotMem get-snapshot --name=PaintDotNet --all
                 Get snapshot of all processes with name PaintDotNet.
            
            E.g: dotMem get-snapshot --name=PaintDotNet --with-max-mem
                 Get snapshot of process with name PaintDotNet, if several instances are running pick one which consumes max memory.
            ]]>
            </example>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.Impl.ExampleFormatter">
            <summary>
            Default implementation of <c>IExampleFormatter</c>
            </summary>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.Impl.UniversalParser">
            <summary>
            Treats -- (double dash) and / (slash) on Windows as key markes, - (single dash) as shortcut marker.<br/>
            <br/>
            &lt;key-marker> ::= -- | / <br/>
            &lt;shortcut-marker> ::= - <br/>
            &lt;non-keyed-mark> ::= -- <br/><br/>
            Examples: --name=value --name:value /name=value /name:value -n=value -abc -- -non-keyed --non-keyed
            </summary>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.Impl.UnixStyleParser">
            <summary>
            &lt;key-marker> ::= --
            <br/>
            &lt;shortcut-marker> ::= -
            <br/>
            &lt;non-keyed-mark> ::= --
            <br/><br/>
            Examples: --name=value --name:value --name value -n=value -n:value -n value -nvalue -abcn=value -- -non-keyed --non-keyed
            </summary>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.WildcardedPath">
            <summary>
            A special stub class to assign to field marked as [FileSetOption] in order to build command line from model.
            </summary>
            <remarks>
            Members of <c>IReadOnlyList</c> not supported by this stub and throws an exception.
            </remarks>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.IOptionFormatter">
            <summary>
            Provides set of methods which format option declared in object model in some specific style. E.g. --option or /option or -o etc.
            </summary>
            <remarks>
            Used to generate help, usage hints, usage samples and to format error messages which contain reference to some option.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.IOptionFormatter.KeyMarker">
            <summary>
            Key marker.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.IOptionFormatter.ShortcutMarker">
            <summary>
            Shortcut marker. '\x0' if not supported.
            </summary>    
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.IOptionFormatter.NonKeyedMarker">
            <summary>
            Marker which means 'all followed arguments are non-keyed'. Usually -- (double dash).
            </summary>
        </member>
        <member name="P:JetBrains.Util.CommandLineMapper.IOptionFormatter.ValueSeparator">
            <summary>
            Name-value separator.
            </summary>    
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.IOptionFormatter.Format(JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute,System.Boolean)">
            <summary>
            Formats option like this: '--option|-o[=&lt;value>[,&lt;value>,...]]'.
            </summary>
            <remarks>
            Used to generate help or usage hints.
            </remarks>
            <param name="optionAttribute"></param>
            <param name="isMultiValued"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.IOptionFormatter.Format(JetBrains.Util.CommandLineMapper.Attributes.AbstractGroupAttribute,System.Boolean)">
            <summary>
            Formats group like this: '&lt;group> [&lt;group>...]'.
            </summary>
            <remarks>
            Used to generate help or usage hints.
            </remarks>
            <param name="groupAttribute"></param>
            <param name="isMultipleAllowed"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.IOptionFormatter.Format(JetBrains.Util.CommandLineMapper.Attributes.AbstractGroupDefinitionAttribute)">
            <summary>
            Formats group definition like this: 'command' or this '--group=group-def'.
            </summary>
            <remarks>
            Used to generate help or usage hints.
            </remarks>
            <param name="groupDefinitionAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.IOptionFormatter.Format(JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute,System.Object,System.Boolean@)">
            <summary>
            Formats option with specified value(s) like this: '--option=value' or '--option=value1 --option=value2'.
            </summary>
            <remarks>
            Used to generate usage samples.
            </remarks>
            <param name="optionAttribute"></param>
            <param name="value"></param>
            <param name="nonKeyedMarkerRequired"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.IOptionFormatter.FormatName(JetBrains.Util.CommandLineMapper.Attributes.AbstractOptionAttribute)">
            <summary>
            Formats option name like this: '--option|-o'.
            </summary>
            <remarks>
            Used to generate help or usage hints.
            </remarks>
            <param name="optionAttribute"></param>    
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.IOptionFormatter.FormatName(JetBrains.Util.CommandLineMapper.Attributes.AbstractGroupAttribute)">
            <summary>
            Formats group name like this: '&lt;group>'.
            </summary>
            <remarks>
            Used to generate help or usage hints.
            </remarks>
            <param name="groupAttribute"></param>    
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.CommandLineMapper.ISupportRawCommandLine.GetNonKeyedTailRaw(System.Int32)">
            <summary>
            Returns command line tail (in raw form) starting from given non-keyed parameter. Raw means 'as was provided by caller'.
            </summary>    
            <remarks>
            Command line raw tail used when we need to bypass part of original command line to sub-process as-is.
            </remarks>
            <param name="startNonKeyedParamIndex"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Util.CommandLineMapper.ISupportRawValueFormat">
            <summary>
            Mix-in interface for option which able to return raw value (raw means no additional quoting required).
            </summary>
        </member>
        <member name="T:JetBrains.Util.CollectionValidator">
            <summary>
            Validates collections by preventing certain values from being added or removed.
            Note that for the validator to attach, the original values must all pass the validation.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionValidator.EnsureReadonly``1(JetBrains.DataFlow.ListEvents{``0},JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
            <summary>
            Makes a readonly list. All the legitimate modifiers must pass the <paramref name="token"/> as an argument.
            If the <paramref name="token"/> is invalid, an exception is thrown.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionValidator.EnsureThisThread``1(JetBrains.DataFlow.ListEvents{``0})">
            <summary>
            Ensures the <paramref name="thіs"/> is modified only on the thread this function was called on.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionValidator.EnsureThisThread``1(JetBrains.DataFlow.ListEvents{``0},JetBrains.DataFlow.Lifetime)">
            <summary>
            Ensures the <paramref name="thіs"/> is modified only on the thread this function was called on.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Console.ConsoleFlashMode">
            <summary>
            Summary description for ConsoleWriter.
            </summary>
            
        </member>
        <member name="T:JetBrains.Util.Console.MyConsole">
            <summary>
            Extended console for both Windows and Console Applications.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Visible">
            <summary>
            Specifies whether the console window should be visible or hidden
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Initialize">
            <summary>
            Initializes WinConsole -- should be called at the start of the program using it
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Title">
            <summary>
            Gets or sets the title of the console window
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Handle">
            <summary>
            Get the HWND of the console window
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.ParentHandle">
            <summary>
            Gets and sets a new parent hwnd to the console window
            </summary>
            <param name="window"></param>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Buffer">
            <summary>
            Get the current Win32 buffer handle
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Beep">
            <summary>
            Produces a simple beep.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Flash(System.Boolean)">
            <summary>
            Flashes the console window
            </summary>
            <param name="once">if off, flashes repeated until the user makes the console foreground</param>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Clear">
            <summary>
            Clear the console window
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.CursorPosition">
            <summary>
            Get the current position of the cursor
            </summary>
            
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.ScreenSize">
            <summary>
            Returns a coordinates of visible window of the buffer
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.BufferSize">
            <summary>
            Returns the size of buffer
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.MaximumScreenSize">
            <summary>
            Returns the maximum size of the screen given the desktop dimensions
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.RedirectDebugOutput(System.Boolean,JetBrains.Util.Console.ConsoleColor,System.Boolean)">
            <summary>
            Redirects debug output to the console
            </summary>
            <param name="clear">clear all other listeners first</param>
            <param name="color">color to use for display debug output</param>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.RedirectTraceOutput(System.Boolean,JetBrains.Util.Console.ConsoleColor)">
            <summary>
            Redirects trace output to the console
            </summary>
            <param name="clear">clear all other listeners first</param>
            <param name="color">color to use for display trace output</param>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Info">
            <summary>
            Returns various information about the screen buffer
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Color">
            <summary>
            Gets or sets the current color and attributes of text 
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.CtrlBreakPressed">
            <summary>
            Returns true if Ctrl-C or Ctrl-Break was hit since the last time this property
            was called. The value of this property is set to false after each request.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.GetWindowPosition(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the Console Window location and size in pixels
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.SetWindowPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the console window location and size in pixels
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Error">
            <summary>
            Returns the error stream (same as Console.Error)
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.In">
            <summary>
            Returns the input stream (same as Console.In)
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Out">
            <summary>
            Returns the output stream (same as Console.Out)
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.OpenStandardInput">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.OpenStandardInput(System.Int32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.OpenStandardError">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.OpenStandardError(System.Int32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.OpenStandardOutput">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.OpenStandardOutput(System.Int32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.SetIn(System.IO.TextReader)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.SetOut(System.IO.TextWriter)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.SetError(System.IO.TextWriter)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Read">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.ReadLine">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Boolean)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Char)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Char[])">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Decimal)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Double)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Single)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Int32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.UInt32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Int64)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.UInt64)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.String)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.String,System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.String,System.Object[])">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.String,System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.String,System.Object,System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.String,System.Object[])">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Boolean)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Char)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Char[])">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Double)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Decimal)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Single)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Int32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.UInt32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Int64)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.UInt64)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.String)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="T:JetBrains.Util.DataStructures.LocalChunkArray`1">
            <summary>
            This collection after moving from dotCommon lost calculation of the chunk size and became a STRUCT.
            It is used only in <see cref="T:JetBrains.Util.DataStructures.ChunkHashMap`2"/> and <see cref="T:JetBrains.Util.DataStructures.ChunkHashSet`1"/> which do not have any tests.
            Please do not make it public and do not use it in the any new code, use normal <see cref="T:JetBrains.Util.DataStructures.ChunkArray`1"/> instead.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.LocalChunkArray`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates array that can exceed 2Gb per object limit of .NET
            </summary>
            <param name="length">The length of the array</param>
            <param name="chunkLength">The length of the one chunk. Must be pow of 2</param>
        </member>
        <member name="M:JetBrains.Util.DataStructures.LocalChunkArray`1.#ctor(System.Int32)">
            <summary>
            Creates array with guarantee that data will not be allocated in LOH
            </summary>
            <param name="length">The count of array elements</param>
        </member>
        <member name="M:JetBrains.Util.DataStructures.ChunkSparseArray`1.#ctor(System.Int32)">
            <summary>
            Create chunk array with pre-allocated given size
            </summary>
            <param name="initialSize"></param>
        </member>
        <member name="T:JetBrains.Util.DataStructures.HybridCollection`1">
            <summary>
            Collection which optimized to store single item without allocating array.
            The collection cannot contain <c>null</c> elements!
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.ChunkHashSet`1.#ctor(System.Collections.Generic.ICollection{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.ChunkHashSet`1.SetEquals(JetBrains.Util.DataStructures.ChunkHashSet{`0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.ChunkHashSet`1.IsSupersetOf(System.Collections.Generic.ICollection{`0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.ChunkHashSet`1.IsSupersetOf(JetBrains.Util.DataStructures.ChunkHashSet{`0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DataStructures.ChunkHashSet`1.Entry.HashCode">
            <summary>
            Cached hash code of the key, -1 means entry is free
            </summary>
        </member>
        <member name="F:JetBrains.Util.DataStructures.ChunkHashSet`1.Entry.NextEntryIndex">
            <summary>
            Index of next entry in the chain of keys with the same hashcodes (modulo size), -1 means last
            </summary>
        </member>
        <member name="T:JetBrains.Util.DataStructures.ChunkHashMap`2">
            <summary>
            Reimplementation of Dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:JetBrains.Util.DataStructures.ChunkHashMap`2.Entry.HashCode">
            <summary>
            Cached hash code of the key, -1 means entry is free
            </summary>
        </member>
        <member name="F:JetBrains.Util.DataStructures.ChunkHashMap`2.Entry.NextEntryIndex">
            <summary>
            Index of next entry in the chain of keys with the same hashcodes (modulo size), -1 means last
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.RegistrySettingsTable.Load(System.Action{System.Version})">
            <summary>
            Returns false if the expected key does not exist in the registry
            or exceprion is thrown
            </summary>
        </member>
        <member name="T:JetBrains.Util.DataStructures.ChunkPackedIntArray">
            <summary>
             Presents <c>uint[]</c> (this) packed into <c>uint[][]</c> (myChunks). Each chunk is <c>UncheckedPackedIntArray</c> which supplies compression.
             Chunks are used to avoid LOH.
             
            To take <c>i</c>-th element of 'this', invoke <c>GetItem(i, valueBits, 0)</c>. You can also use <c>this[ith]</c> to get/set values with array of one element (in case
            of <c>valueBits</c> less than '32'.
            
            One can increase or reduce size of elem by invocation of <c>IncreaseValueBits(ChunkPackedIntArray oldArray, int newValueBits)</c>
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.ChunkPackedIntArray.GetItem(System.Int32,System.Int32)">
            <summary>
            Returns the first element of <see cref="P:JetBrains.Util.DataStructures.ChunkPackedIntArray.Item(System.Int32)"/> array
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.HybridDistinctCollection`1.Add(`0)">
            <summary>
            Adds an item into the collection if it does not exist
            </summary>
            <param name="item">Item to add</param>
            <returns>true if item added, false if it existed previously</returns>
        </member>
        <member name="T:JetBrains.Util.DataStructures.UncheckedPackedIntArray">
            <summary>
            Presents <c>uint[]</c> (this) packed into another <c>uint[]</c> (myData). <c>valueBits</c> parameter for each method denotes size in bits of one element of 'this'
            Can be much or less than '32' bits, which is the size of myData element. No range checks are performed.
            
            To take <c>i</c>-th element of 'this', invoke <c>GetItem(i, valueBits, 0)</c>. You can also use <c>this[ith]</c> to get/set values with array of one element (in case
            of <c>valueBits</c> less than '32'.
            
            One can increase or reduce size of elem by invocation of <c>IncreaseValueBits(UncheckedPackedIntArray oldArray, int length, int oldValueBits, int newValueBits)</c>
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.UncheckedPackedIntArray.GetItem(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates this[iSubItem]
            </summary>
        </member>
        <member name="T:JetBrains.Util.dataStructures.BidirectionalMapOnCompactMap`2">
            <summary>
              <para>Mapping from one family of objects into another and vice versa.</para>
              <para>Uses the Compact Map inside. This consumes less memory and won't hit the LOH, but is a few times slower. So in perf-critical scenarios without big mem pressure choose the <see cref="T:JetBrains.Util.dataStructures.BidirectionalMapOnDictionary`2" />.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Util.dataStructures.BidirectionalMapOnCompactMap`2.Count">
            <summary>
            Get the number of mappings.
            As we implement the identity mapping, the number of items on both sides is always in sync.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.BidirectionalMapOnCompactMap`2.Add(`0,`1)">
            <summary>
            Adds a new mapping to the map. Both ends must be unique in their maps.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.BidirectionalMapOnCompactMap`2.SetMapping(`0,`1,System.Boolean)">
            <summary>
            Adds a new mapping to the map. You should use <see cref="M:JetBrains.Util.dataStructures.BidirectionalMapOnCompactMap`2.Add(`0,`1)" /> whenever possible, as it throws on dpulicate keys.
            </summary>
            <param name="left">Left key.</param>
            <param name="right">Right key.</param>
            <param name="bIgnoreConflicts">Whether to ignore duplicate keys in left and right collections silently. Not recommended. The conflicting mappings will be dropped.</param>
        </member>
        <member name="T:JetBrains.Util.dataStructures.NaturalSort">
            <summary>
            Compares strings by their natural sorting order, which is, case-insensitively and treating digits and numbers, where 2 goes before 10.
            </summary>
        </member>
        <member name="T:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple">
            <summary>
            A stream which allows to access memory outside the process' virtual address space. That would be RAM if enough is available, or it might be paged out to disk.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.mySubstreamsFixedLength">
            <summary>
            List of substreams currently opened within the body of the main stream, which have a fixed length and cannot be grown.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.mySubstreamAppending">
            <summary>
            At most one substream currently writing at the end of the main stream; this one has a growing length.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.DefaultBankSizeExponent">
            <summary>
            The default exponent (base is 2) for the bank size.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.DefaultOpenBanksLimit">
            <summary>
            The default number of banks which can be mapped into process memory at the same time.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.myMruBank">
            <summary>
            MRU bank from <see cref="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.myBanks" />.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.myBanks">
            <summary>
            Caches a few open banks.
            The idea is that the structured storage file system managing code would be writing the content and the filesystem tables intermittently, so the file tables' banks better be left open.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.myBankSizeExponent">
            <summary>
            The exponent (base is 2) for the bank size.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.myOpenBanksLimit">
            <summary>
            The number of banks which can be mapped into process memory at the same time.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.#ctor(JetBrains.DataFlow.Lifetime,System.UInt64,JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.BankSpec)">
            <summary>
            </summary>
            <param name="lifetime">The lifetime for unmanaged resources behind the stream.</param>
            <param name="qwLengthLimit">The maximum length of the stream. This memory is not initially committed. Must be a multiple of the bank size.</param>
            <param name="bankspec">Bank fine tuning.</param>
        </member>
        <member name="M:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.#ctor(JetBrains.DataFlow.Lifetime,System.Void*,System.UInt64,System.UInt64,JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.BankSpec)">
            <summary>
            </summary>
            <param name="lifetime">The lifetime for unmanaged resources behind the stream.</param>
            <param name="hExternalMmf">An externally-created MMF, to attach to, or NULL to create a new one.</param>
            <param name="qwLengthLimit">The maximum length of the stream (this memory is not initially committed), if no external MMF is specified. Otherwise it's assumed to be the size of the pre-allocated MMF. Must be a multiple of the bank size.</param>
            <param name="qwWrittenLength">This number of bytes at the beginning of the <see cref="!:hExternalMmf" /> is considered as already written. Stream <see cref="P:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.Length" /> returns this value.</param>
            <param name="bankspec">Bank fine tuning.</param>
        </member>
        <member name="P:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.LengthLimit">
            <summary>
            Gets the maximum <see cref="P:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.Length" /> this object is allowed to reach.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.Attach(JetBrains.DataFlow.Lifetime,System.Void*,System.UInt64,System.UInt64,JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.BankSpec)">
            <summary>
            Attaches to an existing memory-mapped file.
            </summary>
            <param name="lifetime">Stream lifetime, and lifetime of all the MMF views it opens. The MMF itself isn't destroyed when the lifetime ends.</param>
            <param name="hExistingMmf">An already-open MMF of size <paramref name="qwMmfSize" />.</param>
            <param name="qwMmfSize">Total size of the <paramref name="hExistingMmf" />. Must be a multiple of the bank size.</param>
            <param name="qwWrittenLength">This number of bytes at the beginning of the <see cref="!:hExistingMmf" /> is considered as already written. Stream <see cref="P:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.Length" /> returns this value.</param>
            <param name="bankspec">Bank fine tuning.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.CreateStandardMmf(JetBrains.DataFlow.Lifetime,System.UInt64)">
            <summary>
            Allocates an MMF the standard way, just as this object would do by default.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.ReadAt(System.UInt64,System.Void*,System.UInt32)">
            <summary>
            Reads a sequence of bytes from the current stream at the specified position without touching the stream <see cref="P:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.Position" /> value.
            </summary>
            <param name="ulOffset">The stream offset to start reading at. The <see cref="P:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.Position" /> is not considered or modified by this call.</param>
            <param name="pv">Points to the first byte of the destination buffer.</param>
            <param name="cb">The number of bytes to copy.</param>
        </member>
        <member name="M:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.ReleaseBanks">
            <summary>
            You can call this if you're not going to be using this object for some time. They'll be reopened automatically.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.WriteAt(System.UInt64,System.Void*,System.UInt32)">
            <summary>
            Writes a sequence of bytes to the current stream at the specified position without touching the stream <see cref="P:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.Position" /> value. The stream <see cref="P:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.Length" /> might however increase.
            </summary>
            <param name="ulOffset">The stream offset to start writing at. The <see cref="P:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.Position" /> is not considered or modified by this call.</param>
            <param name="pv">Points to the first byte of the source buffer.</param>
            <param name="cb">The number of bytes to copy.</param>
            <returns>We don't return the number of written bytes because reading less than requested is a failure HR and will be thrown out as an exception.</returns>
        </member>
        <member name="M:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.GetBankByViewPointer(System.UInt64,JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.Bank@)">
            <summary>
            Gets the cached or openes a new bank whose view starts at the given offset (must be a multiple of the bank size).
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.OpenSubstreamFixedLength(JetBrains.DataFlow.Lifetime,System.UInt64,System.UInt64,JetBrains.Util.Storage.StructuredStorage.StreamOpenFlags.ReadWrite)">
            <summary>
            Opens a stream which looks on a view within the body of this stream.
            Obviously, cannot change its length.
            </summary>
            <param name="lifetime"></param>
            <param name="start"></param>
            <param name="length"></param>
            <param name="rw"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.OpenSubstreamForAppending(JetBrains.DataFlow.Lifetime)">
            <summary>
            Opens a stream which writes to the end of this stream. Can grow both its length and the parent stream length. Can't have more than one such. Always RW.
            </summary>
            <param name="lifetime"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.CanOpenSubstreamForAppendingNow">
            <summary>
            As only one appender substream can be opened at any given time, tells whether the <see cref="M:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.OpenSubstreamForAppending(JetBrains.DataFlow.Lifetime)" /> option is available.
            </summary>
        </member>
        <member name="T:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.BankSpec">
            <summary>
            Defines how many banks and of which size this stream should use for accessing the memory.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.BankSpec.wBankSizeExponent">
            <summary>
            Optional. Allows to change the exponent (base 2) of the bank size. Zero means use default <see cref="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.DefaultBankSizeExponent" />.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.BankSpec.wOpenBanksLimit">
            <summary>
            Optional. Max number of banks which can be mapped into process memory at the same time.  Zero means use default <see cref="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.DefaultOpenBanksLimit" />.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.StateFlags.IsFrozen">
            <summary>
            <see cref="M:JetBrains.Util.Collections.IFreezable.Freeze" /> has been called.
            </summary>
        </member>
        <member name="T:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.Substream">
            <summary>
            An effective stream on subrange, in that it does not add an extra layer of calls.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.Substream.SubFlags.IsFrozen">
            <summary>
            <see cref="M:JetBrains.Util.Collections.IFreezable.Freeze" /> has been called, here or on parent.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.BankSwitchingMemoryStreamSimple.Substream.SubFlags.IsFixedLength">
            <summary>
            This stream can't grow by writing.
            </summary>
        </member>
        <member name="T:JetBrains.Util.dataStructures.SubStream">
            <summary>
            Sometimes we have to trick some feature into thinking that it works on its own stream, while actually it gets only a substream from some other larger stream (or file).
            An example would be features like ZIP which would seek into beginning and the end.
            Another case is appending to a larger stream, while some features would like to rewind first.
            And it also won't dispose the underlying stream on close.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.SubStream.#ctor(System.IO.Stream,System.Int64,System.Nullable{System.Int64},System.IO.FileAccess)">
            <summary>
            </summary>
            <param name="stream">The underlying stream. Won't be disposed of!</param>
            <param name="start">Start of the view.</param>
            <param name="length">Length of the view. A nonnegative number means a fixed length, and <c>NULL</c> means “to the current end of the underlying stream”, and it allows growing the stream on write.</param>
            <param name="rwfilter">Allows to limit operations on the underlying stream.</param>
        </member>
        <member name="M:JetBrains.Util.dataStructures.SubStream.Append(System.IO.Stream)">
            <summary>
            Creates a substream for appending to the end of another stream.
            Writable, growable, asserts at end.
            </summary>
        </member>
        <member name="T:JetBrains.Util.dataStructures.UncloseableStream">
            <summary>
            Wraps a <see cref="T:System.IO.Stream" /> instance and does not the consumer of this class to close that instance.
            </summary>
        </member>
        <member name="T:JetBrains.Util.dataStructures.ConciseBitArray">
            <summary>
            Effective replace of <see cref="T:System.Collections.BitArray"/> for sparse and almost filled set. Effective for density of 1-s between 0 and 0.1, and beween 0.9 and 1.
            Inspired by http://ricerca.mat.uniroma3.it/users/colanton/docs/concise.pdf
            Non thread-safe
            </summary>
        </member>
        <member name="P:JetBrains.Util.dataStructures.ConciseBitArray.Count">
            <summary>
            Slow implementation, no memoization
            </summary>
        </member>
        <member name="T:JetBrains.Util.dataStructures.StringDotConcat">
            <summary>
            Represents string that consists from other strings. The way of avoiding string concatenation and high memory traffic.
            Works fast for small number of parts. Typical replace for: namespace + "." + typeName
            </summary>
        </member>
        <member name="T:JetBrains.Util.dataStructures.FibFinder">
            <summary>
            Utility for fibbonacci number 
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.FibFinder.NextFib(System.Int32)">
            <summary>
            Find minimal fib number larger or equal to give
            </summary>
            <returns>lowest fibbonaci number greater or equal to given</returns>
        </member>
        <member name="M:JetBrains.Util.dataStructures.FibFinder.NextFibIndex(System.Int32)">
            <summary>
            Searches index <b>idx</b> in array <see cref="F:JetBrains.Util.dataStructures.FibFinder.FibSeq"/> such as <b>idx</b> - lowest possible number that satisfies <see cref="F:JetBrains.Util.dataStructures.FibFinder.FibSeq"/>[<b>idx</b>] >= <b>x</b>.
            </summary>
            <param name="x">Input value</param>
            <returns>Index in  <see cref="F:JetBrains.Util.dataStructures.FibFinder.FibSeq"/> </returns>
        </member>
        <member name="T:JetBrains.Util.dataStructures.IntSet">
            <summary>
            Hash set for ints. Internally contains a single array so memory usage is low (but loadfactor is 0.75 to provide high speed for Add, Contains and Remove operations).
            The set is initialized with so-called marker element (0 by default) which is always contained in this set (you can't remove it). So set minimum size (<see cref="P:JetBrains.Util.dataStructures.IntSet.Count"/>) is 1.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.IntSet.NextBucketShift">
            <summary>
            Not equal to any number obtained by <see cref="M:JetBrains.Util.DataStructures.PrimeFinder.NextPrime(System.Int32)"/> 
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.ValueRefEntry.SizeNBits">
            <summary>
            26 bits for size means we one key can hold from 0 to 67,108,864 values exclusively.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.ValueRefEntry.CapacityNBits">
            <summary>
            Capacity for a given key is a log2 for #fibbonacci_number (0 is reserved for exact fit capacity). So maximum capacity is fib(64) which is 
            far larger than maximum count (as per <see cref="F:JetBrains.Util.dataStructures.ValueRefEntry.SizeNBits"/>).
            </summary>
        </member>
        <member name="T:JetBrains.Util.dataStructures.MultimapStorage`1">
            <summary>
            Analogous to <see cref="T:JetBrains.Util.DataStructures.ChunkList`1"/> but correctly handles <see cref="M:JetBrains.Util.dataStructures.MultimapStorage`1.set_Item(System.Int32,`0)"/> with index bigger than current capacity. Also includes some additional
            facilities like <see cref="M:JetBrains.Util.dataStructures.MultimapStorage`1.CompactToNewCount(System.Int32)"/> which is used in enclosing map's compaction procedure.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:JetBrains.Util.dataStructures.MultimapValueCollectionEnumerator`1">
            <summary>
            Struct enumerator to reduce memory traffic
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:JetBrains.Util.dataStructures.KeyToEntryMap`1.NextBucketShift">
            <summary>
            Not equal to any number obtained by <see cref="M:JetBrains.Util.DataStructures.PrimeFinder.NextPrime(System.Int32)"/> 
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.IValueConsumer`2.Consume(`0,`1)">
            <returns>True if further search is not needed</returns>
        </member>
        <member name="M:JetBrains.Util.dataStructures.OneToListMultimap`2.Compact">
            <summary>
            Compacts and returns number of compacted entries.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.dataStructures.OneToListMultimap`2.CompactConditionally">
            <summary>
            Compacts if CompactionPolicy is met.
            </summary>
            <returns>Number of compacted entries or -1 if CompactionPolicy is not met</returns>
        </member>
        <member name="P:JetBrains.Util.dataStructures.OneToListMultimap`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="T:JetBrains.Util.dataStructures.SafeUnmanagedMemory">
            <summary>
            Unmanaged piece of memory that MUST be taken by <code>using (var mem = SafeUnmanagedMemory.Alloc(sizeInBytes) {...}</code> construct.
            Works faster then <see cref="T:JetBrains.Util.UnmanagedBlock"/> because doesn't use <see cref="T:System.Runtime.InteropServices.SafeHandle"/> utility inside.
            </summary>
        </member>
        <member name="T:JetBrains.Util.dataStructures.SimpleTrie`2">
            <summary>
            A trie which stores hierarchically nodes whose keys are lists of <typeparamref name="TKey" />.
            </summary>
        </member>
        <member name="F:JetBrains.Util.dataStructures.SimpleTrie`2.myRootNode">
            <summary>
            Synthetic root.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.SimpleTrie`2.AddOrUpdateValue``2(JetBrains.Util.dataStructures.SimpleTrie{`0,`1}.KeyEnumerator{``0,``1},JetBrains.Util.dataStructures.SimpleTrie{`0,`1}.AddOrUpdateHandler{``0},``0)">
            <summary>
            Sets a value to the trie, possibly updating an existing value.
            </summary>
            <typeparam name="TContext"></typeparam>
            <typeparam name="TState"></typeparam>
            <param name="keys">An enumerator which produces the keys for the path in the trie.</param>
            <param name="value">The value to be set. A <c>NULL</c> value would be set as any value, the node would not be deleted.</param>
            <param name="context">User-defined context for the <paramref name="keys" /> enumerator function.</param>
        </member>
        <member name="M:JetBrains.Util.dataStructures.SimpleTrie`2.RemoveAllKeyPrefixes(System.Collections.Generic.IList{`0})">
            <summary>
            Removes all nodes on any possible prefixes of <paramref name="keys" />.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.SimpleTrie`2.SetValue``2(JetBrains.Util.dataStructures.SimpleTrie{`0,`1}.KeyEnumerator{``0,``1},`1,``0)">
            <summary>
            Sets a value to the trie.
            </summary>
            <typeparam name="TContext"></typeparam>
            <typeparam name="TState"></typeparam>
            <param name="keys">An enumerator which produces the keys for the path in the trie.</param>
            <param name="value">The value to be set. A <c>NULL</c> value would be set as any value, the node would not be deleted.</param>
            <param name="context">User-defined context for the <paramref name="keys" /> enumerator function.</param>
        </member>
        <member name="M:JetBrains.Util.dataStructures.SimpleTrie`2.TryGetValue``2(JetBrains.Util.dataStructures.SimpleTrie{`0,`1}.KeyEnumerator{``0,``1},`1@,``0)">
            <summary>
            Gets a value from the trie if it is defined.
            </summary>
            <typeparam name="TContext"></typeparam>
            <typeparam name="TState"></typeparam>
            <param name="keys">An enumerator which produces the keys for the path in the trie.</param>
            <param name="value">The value, if set; <c>NULL</c> otherwise.</param>
            <param name="context">User-defined context for the <paramref name="keys" /> enumerator function.</param>
            <returns>Whether the value were set and is returned in <paramref name="value" />.</returns>
        </member>
        <member name="T:JetBrains.Util.dataStructures.SimpleTrie`2.AddOrUpdateHandler`1">
            <summary>
            Adds a new value or updates an existing one.
            </summary>
            <typeparam name="TContext"></typeparam>
            <param name="isExistingValue">
              <para>If <c>True</c>, <paramref name="existingOrNull" /> has the existing value you would be updating.</para>
              <para>If <c>False</c>, the node had no existing value, <paramref name="existingOrNull" /> is <c>NULL</c>, and you should return the new value.</para>
            </param>
            <param name="existingOrNull">The existing value of the node, if there were such (and <paramref name="isExistingValue" /> is <c>True</c>). <c>NULL</c> otherwise.</param>
            <param name="context">The user-defined context.</param>
            <returns>The value to set to the node.</returns>
        </member>
        <member name="T:JetBrains.Util.dataStructures.SimpleTrie`2.KeyEnumerator`2">
            <summary>
              <para>A non-allocating compound key producer function, as an alternative to passing the <see cref="T:System.Collections.Generic.List`1" /> of keys as the compound key.</para>
              <para>Defines the path in the trie.</para>
              <para>To produce the keys in the path, an algorithm will call <see cref="T:JetBrains.Util.dataStructures.SimpleTrie`2.KeyEnumerator`2" /> repeatedly.</para>
            </summary>
            <typeparam name="TContext"></typeparam>
            <typeparam name="TState"></typeparam>
            <param name="context">The static context. This is passed thru as is from algorithm user to the algorithm and by the algorithm to the key enumerator function. Not supposed to change with iteration, though it's up to key enumerator implemenation. Example: the string on which to enumerate parts.</param>
            <param name="state">The state of the enumerator. Passed by reference. On the first call, would be NULL. On each call the key enumerator implementation is expected to change this state so that on the next call it returned the next part.</param>
            <param name="key">The next key, if return value is <c>True</c>. Undefined otherwise.</param>
            <returns>Whether this iteration produced a valid item. <c>True</c> means <paramref name="key" /> is the next valid key. <c>False</c> means the iteration has gone out of bounds and is over, <paramref name="key" /> is an undefined value, iteration should now stop.</returns>
            <remarks>The iteration is not guaranteed to be completed by the caller (might abort after few first items). There is no “enumeration dispose” call.</remarks>
        </member>
        <member name="T:JetBrains.Util.dataStructures.Boxed`1">
            <summary>
            Turns a value type into a reference type — similarly to <see cref="T:System.Nullable`1"/>,
            but the resulting type is a reference type not a value type.
            </summary>
        </member>
        <member name="T:JetBrains.Util.dataStructures.Boxed">
            <summary>
            Supports <see cref="T:JetBrains.Util.dataStructures.Boxed`1"/>, mostly taken from <see cref="T:System.Nullable"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Util.dataStructures.StringConcat">
            <summary>
            Represents string that consists from other strings. The way of avoiding string concatenation and high memory traffic.
            Works fast for small number of parts. Typical replace for: namespace + "." + typeName
            </summary>
        </member>
        <member name="T:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1">
            <summary>
            Represents an integer value with specific semantics that cannot be freely assigned to/from other ints.
            </summary>
            <typeparam name="TType">This type is not used for storing data values. It it solely used for distinguishing between typed intrinsics.</typeparam>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.Limited(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{`0},JetBrains.Util.dataStructures.TypedIntrinsics.Int32{`0})">
            <summary>
            Limits the current value. Returns a copy that's guaranteed to be in the <c>[</c><paramref name="minInclusive"/><c>, </c><paramref name="maxExclusive"/><c>)</c> limits.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.Minus1">
            <summary>
            Adds one to the current value.
            Does not modify the original object.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.Plus1">
            <summary>
            Adds one to the current value.
            Does not modify the original object.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <param name="obj">An object to compare with this instance. </param><exception cref="T:System.ArgumentException"><paramref name="obj"/> is not the same type as this instance. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IComparable{JetBrains#Util#dataStructures#TypedIntrinsics#Int32{TType}}#CompareTo(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{`0})">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for this instance.
            </summary>
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"/> of the class or value type that implements this interface.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.String"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"/> of the specified <see cref="T:System.Type"/> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is equivalent to the value of this instance.
            </returns>
            <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted. </param><param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.Equals(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the value of the current instance in the specified format.
            </returns>
            <param name="format">The <see cref="T:System.String"/> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation. </param><param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Util.Dotnet.DotNetFrameworkDescriptor">
            <summary>
            Describes NugetFramework, to avoid referencing NuGet.Frameworks project
            Useful in communication with NuGet itself
            </summary>
        </member>
        <member name="T:JetBrains.Util.Dotnet.MicrosoftDotNet.DotNetRuntimes">
            <summary>
            Windows, OS wide, .NET Frameworks installed on this machine.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Dotnet.MicrosoftDotNet.DotNetRuntimes.Instance">
            <summary>
            Current system bitness
            </summary>
        </member>
        <member name="P:JetBrains.Util.Dotnet.MicrosoftDotNet.DotNetRuntimes.Instances32">
            <summary>
            Current system when running 32 bits, Wow on 64 bits.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Dotnet.MicrosoftDotNet.ReferenceAssemblies.GetReferenceAssembliesFolder">
            <summary>
            discovers reference assemblies starting from 3.5 client profile.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Dotnet.Mono.MonoInstance">
            <summary>
            Instance of mono installation. Every mono instance is equivalent to the whole .net framework on windows.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId">
            <summary>
            .kproj (ASP .Net 5.0 projects) may target different frameworks using different project properties and reference sets. 
            The class is used to support it.
            Docs:
              https://docs.nuget.org/create/targetframeworks (general)
              https://github.com/dotnet/corefx/blob/master/Documentation/architecture/net-platform-standard.md (portable profiles)
              https://docs.microsoft.com/en-us/dotnet/articles/standard/library
              RSRP-459103 contains quite a few links and comments about it
              Xamarin/ Android: https://docs.microsoft.com/en-us/nuget/schema/target-frameworks
              netstandard: https://github.com/dotnet/standard/blob/master/docs/versions.md
            </summary>
        </member>
        <member name="P:JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId.AllowedToReferenceDefaultTargetFramework">
            <summary>
            DNX 4.5.1 is allowed to reference regular projects unlike all other combinations
            </summary>
        </member>
        <member name="F:JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId.Default">
            <summary>
            This is a temporary value used while refactoring. And now we have 300+ usages forever.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkUtil">
            <summary>
            Helper class to detect TargetFrameworkId from Roslyn project
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.EnvDteUtil.GetRunningDteInstances">
            <summary>
            Get the map of VS process ids to DTE objects.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.EnvDteUtil.ExecuteCommandWithBestDte(System.String)">
            <summary>
            Try to find the "best" VS DTE object and execute the command with it.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.EnvDteUtil.ExecuteDteCommand(System.Object,System.String,System.String)">
            <summary>
            Try to execute a VS command using DTE object.
            </summary>
            <param name="dte">_DTE object. We cannot reference envdte.dll here, so we use dynamic.</param>
            <param name="command">VS command name.</param>
            <param name="args">Command arguments.</param>
            <returns>True if there was no exception. It does not mean that the command is executed, because it could be not available at the moment.</returns>
        </member>
        <member name="T:JetBrains.Util.DevEnv.DevenvHostDiscovery">
            <summary>
            Shares some Devenv discovery code which is also required in non-devenv-specific code, like installers and assembly resolvers.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.VisualStudioRegistryPathNoHive">
            <summary>
            Gets the version-independent Registry Visuyal Studio path prefix.
            Currently, <c>"Software\Microsoft\VisualStudio"</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.VsOutOfGacAssemblyFoldersUnderInstalldir">
            <summary>
            The subfolders under VS InstallDir which might contain those DLLs previously in the GAC which are now side-by-side shipped within VS 15+ without a global registration.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.VsClassicVersionsWhiteList">
            <summary>
            This skips VS6 which is still found in the wild(!) [RSRP-462081] and would be useless on our discovered VSes list.
            This skips VS13 which has never been released and 14 goes after 12 because fuck you that's why.
            This skips classic VS15 that's obsolete.
            This skips VS15 when VS discovering is called inside the process with loaded registry detour hive.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.EnumInstalledVs">
            <summary>
            Enumerates Visual Studio versions found installed on this machine. This should include side-by-side installations of the new VSes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.EnumInstalledVs(JetBrains.Util.DevEnv.DevenvHostDiscovery.EnumInstalledVsFlags)">
            <summary>
            Enumerates Visual Studio versions found installed on this machine. This should include side-by-side installations of the new VSes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.GetMsEnvDllPath">
            <summary>
            Knowing that VS environment is based on <c>msenv.dll</c>, gets the path of the loaded module.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.GetVsRegistryPath(JetBrains.Util.DevEnv.VsHive)">
            <summary>
            Gets the Visual Studio registry path prefix for a specific Registry hive.
            Example: <c>“Software\Microsoft\VisualStudio\8.0ReSharper”</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.GetVsRegistryConfigPath(JetBrains.Util.DevEnv.VsHive)">
            <summary>
            Gets the Visual Studio registry path prefix for a specific registry config hive.
            Example: <c>“Software\Microsoft\VisualStudio\14.0ReSharper_Config”</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.GetVsAppDataPath(System.Environment.SpecialFolder,JetBrains.Util.DevEnv.VsHive)">
            <summary>
            Gets the path to the Visual Studio local/roaming/common appdata folder for the given VS Hive.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.GetVsAppDataRootPath(System.Environment.SpecialFolder)">
            <summary>
            Gets the root path to the Visual Studio local/roaming/common appdata folder.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.GetVsInstallDir(JetBrains.Util.DevEnv.VsHive,JetBrains.Util.OnError)">
            <summary>
            Retrieves the Devenv Installdir for the specific hive.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.GetVsInstallDirFromRegistryRaw(JetBrains.Util.BackSlashSeparatedRelativePath,JetBrains.Util.OnError)">
            <summary>
            Reads the Registry Hive at the supplied Registry path to read the InstallDir.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.GetRegistryHiveDetourFileForVs15(JetBrains.Util.DevEnv.VsHive)">
            <summary>
            Return the path to the "privateregistry.bin" file.
            </summary>
            <returns>
            If the VS does not use regsitry detouring, returns an empty path.
            If the file exists, returns the file.
            If the file does not exist, tries to guess its name.
            </returns>
        </member>
        <member name="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.TryGetVsVersionFromDllVersion">
            <summary>
            As recommended by MSFT, tries to get the full 4-component VS version from fileversion of <c>msenv.dll</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.IsVs15DiscoveryAvailable">
            <summary>
            Determine whether we are able to discover VS15 instances.
            </summary>
            <returns>S_OK discovery available; S_FALSE VS15 not installed; E_ACCESSDENIED elevation probably required; or another error code.</returns>
        </member>
        <member name="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.EnumInstalledVsCore(JetBrains.Util.DevEnv.DevenvHostDiscovery.EnumInstalledVsFlags,JetBrains.Util.OnError)">
            <summary>
            Enumerates Visual Studio versions installed on this machine. This should include side-by-side installations of the new VSes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.DevenvHostDiscovery.GetInstalledVs15Lightweight_Build_2016_07_07(JetBrains.Util.OnError)">
            <summary>
            VS 15 lt Preview 3 on 2016-07-07.
            </summary>
            <param name="onerror"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.EnumInstalledVsFlags.AddPackagesListing">
            <summary>
            Fills the <see cref="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVs.PackagesIfKnown" /> list for those VS versions which expose this information.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.EnumInstalledVsFlags.AddExtendedInfoSinceVs15">
            <summary>
            Get VS15+ extended info: preview, nickname
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.EnumInstalledVsFlags.IncludeAllInstancesSinceVs15">
            <summary>
            Include non-VS instances (e.g. Microsoft.VisualStudio.Product.BuildTools, Microsoft.VisualStudio.Product.TestProfessional).
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVs.DisplayNameLong">
            <summary>
            The long display name for descriptions and tooltips.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVs.DisplayNameShort">
            <summary>
            The short display name for list items.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVs.Hive">
            <summary>
            The VS Hive, which consists of a two-component version and optional instance id and root suffix.
            This is enough for identifying the VS instance in most of the cases.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVs.InstallDir">
            <summary>
            InstallDir of VS, which is the directory with <c>devenv.exe</c>, <c>$(InstallRoot)/Common7/IDE</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVs.PackagesIfKnown">
            <summary>
            Gets the list of VS packages. <c>NULL</c> if not known. Empty if known to be empty.
            This info is only available for VS 15 RC and later, and if the <see cref="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.EnumInstalledVsFlags.AddPackagesListing" /> were specified.
            </summary>
        </member>
        <member name="P:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVs.IsIncomplete">
            <summary>
            VS installation is incomplete. Applicable to VS 2017+ only.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVs.IsPreview">
            <summary>
            channelId contains "Preview" substring (examples of channels: "VisualStudio.15.Preview", "VisualStudio.15.Release")
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVs.Nickname">
            <summary>
            VS15+ instance nickname given by the user at the installation.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVs.ProductRootDir">
            <summary>
            The path to the installation root of the product.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVs.DisplayVersion">
            <summary>
            VS15+ display version. E.g. Version4="15.7.27703.2000" is "15.7.1".
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVs.State">
            <summary>
            VS15+ state of the VS instance.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVsPackage.RawVersion">
            <summary>
            Version. Didn't bother to parse the format yet.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVsPackage.Type">
            <summary>
            Package type, see <see cref="T:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVsPackage.WellKnownTypes" /> for reference.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVsPackage.WellKnownTypes.Product">
            <summary>
            Should be the only Product component, identifies the installation itself.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DevEnv.DevenvHostDiscovery.InstalledVsPackage.WellKnownTypes.Workload">
            <summary>
            Workloads are big buttons in the installer to select the roles.
            </summary>
        </member>
        <member name="T:JetBrains.Util.DevEnv.DevenvHostDiscovery.VsSetupConfigurationInterop">
            <summary>
            Calls into the VS Setup Configuration COM Object, if present on this machine.
            This should serve VS instances starting with VS15 RC.
            Brought into a separate class to help with containing possible JIT-time exceptions.
            </summary>
        </member>
        <member name="T:JetBrains.Util.DevEnv.VsHive">
            <summary>
            A hive, e.g. in Visual Studio, is a two-component version number, plus an optional string for the root suffix.
            Starting VS15 it also contains the instance id.
            </summary>
        </member>
        <member name="P:JetBrains.Util.DevEnv.VsHive.HiveString">
            <summary>
            Gets the canonical textual representation of the hive.
            Example: "15.0_a0848a47Exp", where VS version = "15.0", Instance Id = "a0848a47", Rott Suffix = "Exp".
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.VsHive.NewWithRootSuffux(System.String)">
            <summary>
            Create a new hive with another root suffix.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.VsHive.Parse(System.String)">
            <summary>
            Parse the VS hive string, throw an exception if failed.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DevEnv.VsHive.TryParse(System.String)">
            <summary>
            Try to parse the VS hive string.
            We assume that hive string is <c>{Version}[_{InstanceId}]{RootSuffix}</c>.
            </summary>
            <returns>
            If hive is parsed successfully, pair.First is the VS hive. Otherwise pair.First is null, and pair.Second is the error message.
            </returns>
        </member>
        <member name="M:JetBrains.Util.DevEnv.VsHive.FromVersionAndHive(JetBrains.Util.Version2,System.String)">
            <summary>
            Used for backward compatibility. HostInfo and Installer store hive strings withot VS version number.
            </summary>
        </member>
        <member name="P:JetBrains.Util.GcUtil.LohCollectionCount">
            <summary>
            Returns the number of times garbage collection has occurred for the large object heap.
            </summary>
        </member>
        <member name="M:JetBrains.Util.GcUtil.UltraCollect">
            <summary>
            On Windows + .NET Framework 4.5.1+, it compress LOH once and collect garbage.
            Otherwise, it's just a regular GC.Collect.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.Com.UnknownAddRef(System.Object)">
            <summary>
            Assumes the parameter is a COM object's RCW, or a managed COMable object. Does QueryInterface for IUnknown on it and returns the raw IUnknown pointer, which also adds one more reference on the object.
            </summary>
            <param name="comobj"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Interop.Com.ReleaseToken.Dispose">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Util.Interop.ErrorLevelException">
            <summary>
            An exception upon the process exit code (ERRORLEVEL) indicating an error.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Interop.DpiResolution">
            <summary>
            Specifies the DPI resolution of some device, or device-independent 96 DPI.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Interop.DpiResolution.CurrentScreenDpi">
            <summary>
            Gets the current device-dependent DPI value of the screen device.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.DpiResolution.DeviceIndependent96Dpi">
            <summary>
            Gets the WPF-standard device-independent resolution of 96x96 DPI.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.DpiResolution.NotSure">
            <summary>
            Use this as a temporary placeholder when you're not sure which resolution is in effect. Such cases should be adressed later.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Interop.DpiResolution.DpiX">
            <summary>
            <para>Gets the resolution along the X-axis.</para>
            <para>Note that for an uninitialized structure this returns the device-independent DPI of 96.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Util.Interop.DpiResolution.DpiY">
            <summary>
            <para>Gets the resolution along the X-axis.</para>
            <para>Note that for an uninitialized structure this returns the device-independent DPI of 96.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Util.Interop.DpiUtil.DpiHorizontalFactor">
            <summary>
            It is DpiX / 96. (96 is default value of DPI in Windows)
            This factor can be used to multiply your size to scale it to user DPI settings
            </summary>
        </member>
        <member name="P:JetBrains.Util.Interop.DpiUtil.DpiVerticalFactor">
            <summary>
            It is DpiY / 96. (96 is default value of DPI in Windows)
            This factor can be used to multiply your size to scale it to user DPI settings
            </summary>
        </member>
        <member name="P:JetBrains.Util.Interop.DpiUtil.ScreenDpi">
            <summary>
            Gets the screen DPI along X and Y axes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.DpiUtil.GetBootTimeScreenDpi">
            <summary>
            Gets the system-wide boot-time (or logon-time) screen DPI which does not reflect dynamic and per-monitor DPI changes.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Interop.NativeDll">
            <summary>
            Encapsulates a native DLL module. Use <see cref="T:JetBrains.Util.Interop.NativeDllsLoader"/> to get instances of this class.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.NativeDll.Handle">
            <summary>
            The DLL module handle.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.NativeDll.File">
            <summary>
            The absolute path to the DLL file on disk.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.NativeDll.#ctor(System.Void*,JetBrains.Util.Interop.NativeDllKey,JetBrains.Util.FileSystemPath,JetBrains.Util.Interop.IDllLoader)">
            <summary>
            Internal constructor. Used by <see cref="T:JetBrains.Util.Interop.NativeDllsLoader"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.NativeDll.myMethods">
            <summary>
            The table of loaded DLL entry points.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.NativeDll.ImportMethod``1(System.String)">
            <summary>
            Gets a delegate instance for the specified DLL entry point.
            </summary>
            <typeparam name="TDelegate">The delegate type a DLL entry point to be converted to.</typeparam>
            <param name="methodName">The name of a DLL entry point.</param>
        </member>
        <member name="M:JetBrains.Util.Interop.NativeDll.CreateComObject(System.Guid)">
            <summary>
            Creates an instance of a COM object without the Registry information, by invoking its class factory.
            </summary>
            <param name="guidClsid">CLSID of the object to create.</param>
        </member>
        <member name="M:JetBrains.Util.Interop.NativeDll.CreateComObject``1">
            <summary>
            Creates an instance of a COM object without the Registry information, by invoking its class factory.
            </summary>
            <typeparam name="TType">The type of the object to create.</typeparam>
        </member>
        <member name="T:JetBrains.Util.Interop.NativeDll.DllGetClassObjectDelegate">
            <summary>
            A delegate for the DllGetClassObject function.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Interop.NativeDll.ComObject">
            <summary>
            A wrapper for an instance of a COM object created by <see cref="M:JetBrains.Util.Interop.NativeDll.CreateComObject(System.Guid)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.NativeDll.ComObject.Instance">
            <summary>
            The instance of a COM object.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.NativeDll.ComObject.CLSID">
            <summary>
            CLSID of the object.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.NativeDll.ComObject.As``1">
            <summary>
            Casts the object to the specified interface type.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Interop.NativeDllsLoader">
            <summary>
              Helps to load and work with native DLL modules.
            </summary>
            <remarks>
              Calling <c>LoadLibrary</c> increments the reference count.
              Calling the <c>FreeLibrary</c> or <c>FreeLibraryAndExitThread</c> function decrements the reference count.
              The system unloads a module when its reference count reaches zero or when the process terminates (regardless of the
              reference count).
            </remarks>
        </member>
        <member name="F:JetBrains.Util.Interop.NativeDllsLoader.Options.None">
            <summary>
              Nothing special
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.NativeDllsLoader.Options.Debug">
            <summary>
              Debug version of dlls
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.NativeDllsLoader.#cctor">
            <summary>
              Static constructor gets the current processor architecture and corresponding DLL subdirectory.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.NativeDllsLoader.LoadDll(JetBrains.DataFlow.Lifetime,JetBrains.Util.RelativePath,JetBrains.Util.Interop.NativeDllsLoader.Options)">
            <summary>
              Loads the DLL module and returns an instance of <see cref="T:JetBrains.Util.Interop.NativeDll" /> class.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="relativePathWithoutSuffix">The name of a DLL to load.</param>
            <param name="options">See <see cref="T:JetBrains.Util.Interop.NativeDllsLoader.Options" /></param>
        </member>
        <member name="M:JetBrains.Util.Interop.NativeDllsLoader.LoadDllExact(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath)">
            <summary>
              Loads the DLL module and returns an instance of <see cref="T:JetBrains.Util.Interop.NativeDll" /> class.
            Unlike the <see cref="M:JetBrains.Util.Interop.NativeDllsLoader.LoadDll(JetBrains.DataFlow.Lifetime,JetBrains.Util.RelativePath,JetBrains.Util.Interop.NativeDllsLoader.Options)"/>, does not apply the DLL location and suffices logic, but expects the have the exact DLL path here.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="pathExact">The exact file name of a DLL to load.</param>
        </member>
        <member name="M:JetBrains.Util.Interop.NativeDllsLoader.GetDllDirectory(JetBrains.Interop.WinApi.ProcessorArchitecture,System.Boolean)">
            <summary>
              Returns the full path for DLLs of the specified processor architecture ("current assembly directory"\"processor
              architecture subdirectory").
            </summary>
        </member>
        <member name="T:JetBrains.Util.Interop.RegistryEx">
            <summary>
              Extensions for accessing Registry in an explicitly-defined view on 64-bit systems, regardless of the architecture of
              the currently running process.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.myIsCustomRootKey">
            <summary>
            Normally, we'd only allow a limited set of root HKEYs as <see cref="F:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.myKeyBase"/>.
            Loading an app hive makes an exception to this rule because it's a “virtual root” which is a valid root yet not in the list of the special keys.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.CreateKey(JetBrains.Util.BackSlashSeparatedRelativePath,JetBrains.Util.OnError)">
            <summary>
              <para>Creates a key.</para>
            </summary>
            <param name="subkey">Subkey under the hive root key.</param>
            <param name="onerror">Error handling. In case of any errors, an exception is reported and <c>False</c> is returned.</param>
            <returns>Whether the key was successfully created.</returns>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.DeleteKey(JetBrains.Util.BackSlashSeparatedRelativePath,JetBrains.Util.OnError)">
            <summary>
              <para>Deletes a key.</para>
            </summary>
            <param name="subkey">Subkey under the hive root key.</param>
            <param name="onerror">Error handling. In case of any errors, an exception is reported and <c>False</c> is returned.</param>
            <returns>Whether the key was successfully deleted.</returns>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.DeleteValue(JetBrains.Util.BackSlashSeparatedRelativePath,System.String,JetBrains.Util.OnError)">
            <summary>
              <para>Deletes a value.</para>
            </summary>
            <param name="subkey">Subkey under the hive root key.</param>
            <param name="dataname">Name of the Registry data, or <c>“”</c> for the default value.</param>
            <param name="onerror">Error handling. In case of any errors, an exception is reported and <c>False</c> is returned.</param>
            <returns>Whether the value was successfully deleted.</returns>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.GetRawValue(JetBrains.Util.BackSlashSeparatedRelativePath,System.String,System.UInt32@,JetBrains.Util.OnError)">
            <summary>
              <para>Reads a raw value.</para>
            </summary>
            <param name="subkey">Subkey under the hive root key.</param>
            <param name="dataname">Name of the Registry data, or <c>“”</c> for the default value.</param>
            <param name="valuetype">Return value type</param>
            <param name="onerror">
              Error handling. If the Registry value is missing, but everything else is OK, a <c>Null</c> is
              silently returned. In case of any errors, an exception is reported and <c>Null</c> is returned.
            </param>
            <returns>
              If <paramref name="onerror" /> is throwing, returns <c>Null</c> only if the value is missing. In non-throwing
              case, returns <c>Null</c> if the value cannot be read due to any reason.
            </returns>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.GetDwordValue(JetBrains.Util.BackSlashSeparatedRelativePath,System.String,JetBrains.Util.OnError)">
            <summary>
              <para>Reads a DWORD value.</para>
            </summary>
            <param name="subkey">Subkey under the hive root key.</param>
            <param name="dataname">Name of the Registry data, or <c>“”</c> for the default value.</param>
            <param name="onerror">
              Error handling. If the Registry value is missing, but everything else is OK, a <c>Null</c> is
              silently returned. In case of any errors, an exception is reported and <c>Null</c> is returned.
            </param>
            <returns>
              If <paramref name="onerror" /> is throwing, returns <c>Null</c> only if the value is missing. In non-throwing
              case, returns <c>Null</c> if the value cannot be read due to any reason.
            </returns>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.GetQwordValue(JetBrains.Util.BackSlashSeparatedRelativePath,System.String,JetBrains.Util.OnError)">
            <summary>
              <para>Reads a QWORD value.</para>
            </summary>
            <param name="subkey">Subkey under the hive root key.</param>
            <param name="dataname">Name of the Registry data, or <c>“”</c> for the default value.</param>
            <param name="onerror">
              Error handling. If the Registry value is missing, but everything else is OK, a <c>Null</c> is
              silently returned. In case of any errors, an exception is reported and <c>Null</c> is returned.
            </param>
            <returns>
              If <paramref name="onerror" /> is throwing, returns <c>Null</c> only if the value is missing. In non-throwing
              case, returns <c>Null</c> if the value cannot be read due to any reason.
            </returns>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.GetStringValue(JetBrains.Util.BackSlashSeparatedRelativePath,System.String,JetBrains.Util.OnError)">
            <summary>
              <para>Reads a string value.</para>
            </summary>
            <param name="subkey">Subkey under the hive root key.</param>
            <param name="dataname">Name of the Registry data, or <c>“”</c> for the default value.</param>
            <param name="onerror">
              Error handling. If the Registry value is missing, but everything else is OK, a <c>Null</c> is
              silently returned. In case of any errors, an exception is reported and <c>Null</c> is returned.
            </param>
            <returns>
              If <paramref name="onerror" /> is throwing, returns <c>Null</c> only if the value is missing. In non-throwing
              case, returns <c>Null</c> if the value cannot be read due to any reason.
            </returns>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.GetStringArrayValue(JetBrains.Util.BackSlashSeparatedRelativePath,System.String,JetBrains.Util.OnError)">
            <summary>
              <para>Reads a string array value.</para>
            </summary>
            <param name="subkey">Subkey under the hive root key.</param>
            <param name="dataname">Name of the Registry data, or <c>“”</c> for the default value.</param>
            <param name="onerror">
              Error handling. If the Registry value is missing, but everything else is OK, a <c>Null</c> is
              silently returned. In case of any errors, an exception is reported and <c>Null</c> is returned.
            </param>
            <returns>
              If <paramref name="onerror" /> is throwing, returns <c>Null</c> only if the value is missing. In non-throwing
              case, returns <c>Null</c> if the value cannot be read due to any reason.
            </returns>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.GetBinaryValue(JetBrains.Util.BackSlashSeparatedRelativePath,System.String,JetBrains.Util.OnError)">
            <summary>
              <para>Reads a binary value.</para>
            </summary>
            <param name="subkey">Subkey under the hive root key.</param>
            <param name="dataname">Name of the Registry data, or <c>“”</c> for the default value.</param>
            <param name="onerror">
              Error handling. If the Registry value is missing, but everything else is OK, a <c>Null</c> is
              silently returned. In case of any errors, an exception is reported and <c>Null</c> is returned.
            </param>
            <returns>
              If <paramref name="onerror" /> is throwing, returns <c>Null</c> only if the value is missing. In non-throwing
              case, returns <c>Null</c> if the value cannot be read due to any reason.
            </returns>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.SetDwordValue(JetBrains.Util.BackSlashSeparatedRelativePath,System.String,System.UInt32,JetBrains.Util.OnError)">
            <summary>
              <para>Writes a DWORD value.</para>
            </summary>
            <param name="subkey">Subkey under the hive root key.</param>
            <param name="dataname">Name of the Registry data, or <c>“”</c> for the default value.</param>
            <param name="datavalue">DWORD value.</param>
            <param name="onerror">Error handling. In case of any errors, an exception is reported and <c>False</c> is returned.</param>
            <returns>Whether the value was successfully written.</returns>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.SetQwordValue(JetBrains.Util.BackSlashSeparatedRelativePath,System.String,System.UInt64,JetBrains.Util.OnError)">
            <summary>
              <para>Writes a QWORD value.</para>
            </summary>
            <param name="subkey">Subkey under the hive root key.</param>
            <param name="dataname">Name of the Registry data, or <c>“”</c> for the default value.</param>
            <param name="datavalue">QWORD value.</param>
            <param name="onerror">Error handling. In case of any errors, an exception is reported and <c>False</c> is returned.</param>
            <returns>Whether the value was successfully written.</returns>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.SetStringValue(JetBrains.Util.BackSlashSeparatedRelativePath,System.String,System.String,JetBrains.Util.OnError)">
            <summary>
              <para>Writes a string value.</para>
            </summary>
            <param name="subkey">Subkey under the hive root key.</param>
            <param name="dataname">Name of the Registry data, or <c>“”</c> for the default value.</param>
            <param name="datavalue">String value, non-<c>Null</c>.</param>
            <param name="onerror">Error handling. In case of any errors, an exception is reported and <c>False</c> is returned.</param>
            <returns>Whether the value was successfully written.</returns>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.SetStringArrayValue(JetBrains.Util.BackSlashSeparatedRelativePath,System.String,System.String[],JetBrains.Util.OnError)">
            <summary>
              <para>Writes a string array value.</para>
            </summary>
            <param name="subkey">Subkey under the hive root key.</param>
            <param name="dataname">Name of the Registry data, or <c>“”</c> for the default value.</param>
            <param name="datavalue">String value, non-<c>Null</c>.</param>
            <param name="onerror">Error handling. In case of any errors, an exception is reported and <c>False</c> is returned.</param>
            <returns>Whether the value was successfully written.</returns>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.SetBinaryValue(JetBrains.Util.BackSlashSeparatedRelativePath,System.String,System.Byte[],JetBrains.Util.OnError)">
            <summary>
              <para>Writes a string value.</para>
            </summary>
            <param name="subkey">Subkey under the hive root key.</param>
            <param name="dataname">Name of the Registry data, or <c>“”</c> for the default value.</param>
            <param name="datavalue">Byte array value, non-<c>Null</c>.</param>
            <param name="onerror">Error handling. In case of any errors, an exception is reported and <c>False</c> is returned.</param>
            <returns>Whether the value was successfully written.</returns>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.RegistryHiveAccess.LoadHive(JetBrains.DataFlow.Lifetime,JetBrains.Util.BackSlashSeparatedRelativePath,JetBrains.Util.FileSystemPath,JetBrains.Util.OnError)">
            <summary>
              <para>Loads a Registry file on disk to work with it as with normal Registry.</para>
              <para>You might have to call <see cref="M:JetBrains.Interop.WinApi.Privileges.Adjust(System.Diagnostics.Process,JetBrains.Interop.WinApi.Privileges.NameAndAttributes[],System.Boolean)" /> to enable <see cref="F:JetBrains.Interop.WinApi.SeName.SE_RESTORE_NAME" /> and <see cref="F:JetBrains.Interop.WinApi.SeName.SE_BACKUP_NAME" /> before doing this for the first time.</para>
              <para>The only valid root keys for this are <see cref="F:Microsoft.Win32.Registry.LocalMachine" /> and <see cref="F:Microsoft.Win32.Registry.Users" />.</para>
            </summary>
            <param name="lifetime"></param>
            <param name="subKey">Subpath into which the registry will be mounted.</param>
            <param name="fileName">Disk file with reg hive.</param>
            <param name="onerror"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.Util.Interop.RegistryEx.KEY_32">
            <summary>
              Flag to access virtualized WOW6432 hive on x64 regardless of the running process architecture (N/A on NT versions
              below 5.1).
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.RegistryEx.KEY_64">
            <summary>
              Flag to access native Registry hive on x64 regardless of the running process architecture (N/A on NT versions below
              5.1).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.InProcessSpecific(Microsoft.Win32.RegistryKey)">
            <summary>
              <para>
                Follows the system policy for Registry virtualization: in 64-bit processes, sees the native Registry, and in
                32-bit processes sees the emulated one. This works the same as default .NET Registry accessor methods.
              </para>
              <para>On a 32-bit system, all of the readers read the same.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.InSystemNative(Microsoft.Win32.RegistryKey)">
            <summary>
              <para>
                Operates on the system-native Registry view (64-bit on 64-bit systems), regardless of the current process
                architecture.
              </para>
              <para>
                This means that in a 32-bit process on a 64-bit system this reader won't be tricked into the WoW-64-32
                emulation Registry branch, but will read the system-real value.
              </para>
              <para>On a 32-bit system, all of the readers read the same.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.InWin32(Microsoft.Win32.RegistryKey)">
            <summary>
              <para>Operates on the 32-bit Registry view (WoW-64-32 emulation view on 64-bit systems).</para>
              <para>
                This means that in a 64-bit process on a 64-bit system this reader will still read the same value as any 32-bit
                process running in the WoW-64-32 emulation will do.
              </para>
              <para>On a 32-bit system, all of the readers read the same.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.RegistryEx.LoadAppHive(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath,JetBrains.Util.ILogger,JetBrains.Util.Interop.RegistryEx.LoadExclusiveness)">
            <summary>
            Uses the <see cref="M:JetBrains.Interop.WinApi.Advapi32Dll.RegLoadAppKeyW(System.String,System.Void**,System.UInt32,System.UInt32,System.UInt32)" /> function.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.RegistryEx.LoadExclusiveness.AllowLoadingConcurrently">
            <summary>
            Does not prevent other clients from mapping the same file.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.RegistryEx.LoadExclusiveness.LoadExclusively">
            <summary>
            Prevents other clients from loading the same Registry file.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.ShellLinkHelper.ExtensionNoDot">
            <summary>
            Shell link file extension.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.ShellLinkHelper.ExtensionWithDot">
            <summary>
            Shell link file extension.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.ShellLinkHelper.CreateLink(JetBrains.Util.FileSystemPath,JetBrains.Util.FileSystemPath)">
            <summary>
            Creates a new Shell Link.
            </summary>
            <param name="pathLnkFile">The location of the newly-created .LNK file.</param>
            <param name="pathLinkTarget">The target this .LNK file will be pointing to.</param>
        </member>
        <member name="M:JetBrains.Util.Interop.ShellLinkHelper.ResolveLinkTarget(JetBrains.Util.FileSystemPath)">
            <summary>
            Given a path to an .LNK file, reads the target path of the shell link.
            </summary>
            <param name="pathLnk"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Util.Interop.FixedBuffer">
            <summary>
            Manages an unmanaged buffer with a fixed address in the memory.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.FixedBuffer.bInFinalizationQueue">
            <summary>
            GC can add to final-queue more than once, so track the state. 
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.FixedBuffer.#ctor">
            <summary>
            Constructs the object without any allocated memory.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.FixedBuffer.#ctor(System.Int32)">
            <summary>
            Constructs the object and allocates the desired length.
            The object must then be disposed of, to free the memory.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Interop.FixedBuffer.Address">
            <summary>
            Gets the fixed address of the allocated buffer (safe for passing into unmanaged funcs), throws if not allocated yet.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Interop.FixedBuffer.IsAllocated">
            <summary>
            Gets whether the buffer has been allocated, and its <see cref="P:JetBrains.Util.Interop.FixedBuffer.Length"/> and <see cref="P:JetBrains.Util.Interop.FixedBuffer.Address"/> properties can be accessed.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Interop.FixedBuffer.Length">
            <summary>
            Gets the length of the allocated buffer, throws if not allocated yet.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.FixedBuffer.Allocate(System.Int32)">
            <summary>
            Allocates or reallocates the buffer to fit the length specified.
            No attempts are currently made to minimize the number of resizes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.FixedBuffer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Util.Interop.ImportAddressTableHook">
            <summary>
            Provides for hooking into the Import Address Table (IAT) of a DLL.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.ImportAddressTableHook.IterationLimit">
            <summary>
            Limits the number or items in the list to guard off infinite loops.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.ImportAddressTableHook.Install(System.String,System.String,System.Void*,System.Delegate)">
            <summary>
            Installs an Import Address Table (IAT) hook.
            You choose a function (<paramref name="sFuncMod"/>, <paramref name="sFuncName"/>) whose entry will be replaced in the IAT of the specified module (<paramref name="hCallingMod"/>) to point to your own implementation (<see cref="!:pNewFunction"/>) instead.
            </summary>
            <param name="sFuncMod">Name of the module in which the function-to-be-hooked is defined. Example: <c>USER32.DLL</c>.</param>
            <param name="sFuncName">Name of the function to be hooked. Example: <c>SystemParametersInfoW</c>. Note that for the functions that have separate ANSI and Wide versions you must include a suffix in the function name. Must have the <c>stdcall</c> (<c>WINAPI</c>, <c>PASCAL</c>) calling convention.</param>
            <param name="hCallingMod">The module whose IAT is to be patched. Its calls to the Function will be intercepted.</param>
            <param name="pNewFunction">The new implementation to replace the Function, in view of <paramref name="hCallingMod"/>. The hook will hold a reference on the delegate. Note that it's up to you to provide the appropriate signature of the delegate, which must match the one of the Function. Pay attention to the charset and bitness issues.</param>
        </member>
        <member name="M:JetBrains.Util.Interop.ImportAddressTableHook.Install(System.String,System.String,System.String,System.Delegate)">
            <summary>
            Installs an Import Address Table (IAT) hook.
            You choose a function (<paramref name="sFuncMod"/>, <paramref name="sFuncName"/>) whose entry will be replaced in the IAT of the specified module (<paramref name="sCallingMod"/>) to point to your own implementation (<see cref="!:pNewFunction"/>) instead.
            </summary>
            <param name="sFuncMod">Name of the module in which the function-to-be-hooked is defined. Example: <c>USER32.DLL</c>.</param>
            <param name="sFuncName">Name of the function to be hooked. Example: <c>SystemParametersInfoW</c>. Note that for the functions that have separate ANSI and Wide versions you must include a suffix in the function name. Must have the <c>stdcall</c> (<c>WINAPI</c>, <c>PASCAL</c>) calling convention.</param>
            <param name="sCallingMod">The module whose IAT is to be patched. Its calls to the Function will be intercepted. Must be loadable with <c>LoadLibrary</c> (or already loaded).</param>
            <param name="pNewFunction">The new implementation to replace the Function, in view of <paramref name="sCallingMod"/>. The hook will hold a reference on the delegate. Note that it's up to you to provide the appropriate signature of the delegate, which must match the one of the Function. Pay attention to the charset and bitness issues.</param>
        </member>
        <member name="M:JetBrains.Util.Interop.ImportAddressTableHook.InstallCore(System.String,System.String,System.Void*,System.String,System.Delegate)">
            <summary>
            Impl for the <c>Install</c> family functions. <paramref name="hCallingMod"/> MUST be specified, while its name <paramref name="sCallingMod"/> is optional (for diag).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.ImportAddressTableHook.AssertNoWin32Error">
            <summary>
            Throw on GetLastError.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.ImportAddressTableHook.DelegateAddRef(System.Delegate)">
            <summary>
            Ensures the delegate would not be ever collected.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Interop.ImportAddressTableHook.UnsafeNativeMethods">
            <summary>
            Personal declarations for the WinAPI calls.
            Not shared with WinAPI.Interop, as there're pointers where applicable instead of intptrs.
            Was written to be compatible with ANSI/Wide charsets and 32/64 bit systems.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Interop.ImportAddressTableHook.UnsafeNativeMethods.IMAGE_THUNK_DATA">
            <summary>
            It's DWORD in 32bit and ULONGLONG in 64bit, so use void* for both.
            Yes, there's only one field unioned in there.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Bdd.BddNode">
            <summary>
              <h1>Node structure</h1>
              2 PARTS = 2 integers (8 bytes)
              Rem. 3 byte for regular's node number => 8*256^3 bytes = 128 Mb for full node addressing, more than enough
              There are two types of nodes - REGULAR and SPECIAL. REGULAR nodes are stored in memory, SPECIAL are not.
              If highest bit of first node is 1, then node is REGULAR, otherwise SPECIAL.
              REGULAR node:
              Next two highest bits of first integer (very highest is for node type) marks following
              00 - left and right childs are REGULAR
              01 - left child is REGULAR, right child is SPECIAL
              10 - left child is SPECIAL, right is REGULAR
              11 - left and right childs are SPECIAL
              1 bit - flag
              4 bits + 5rd byte - variable; nodes with HIGHER variable can reference nodes with LOWER variable as child and NOT
              vice versa.
              2-4 bytes - left child. If left child is regular then link to memory. Otherwise(SPECIAL) 1 byte -
              highest_var_of_child/4,
              6-8 bytes - right child. the same
              
            
              Special node
            
              4 small bits of 1st byte + 5rd byte - variable of cluster
              2-4 bytes - value of cluster
              <h1>Operations to implement</h1>
              
            </summary>
        </member>
        <member name="T:JetBrains.Util.BitHacks">
            <summary>
            Inspired by http://graphics.stanford.edu/~seander/bithacks.html
            </summary>
        </member>
        <member name="T:JetBrains.Util.BooleanBoxes">
            <summary>
            Avoid boxing boolean by reusing the boxes for readonly purposes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Extension.JavaCompatibilityStringExtensions.ToRegistryValue(System.String)">
            Converts value string to it Windows representation.
            as a byte-encoded string.
            Encoding algorithm adds "/" character to capital letters, i.e.
            "A" is encoded as "/A". Character '\' is encoded as '//',
            '/' is encoded as  '\'.
            Then encoding scheme similar to jdk's native2ascii converter is used
            to convert java string to a byte array of ASCII characters.
        </member>
        <member name="M:JetBrains.Util.Extension.JavaCompatibilityStringExtensions.FromRegistryValue(System.String)">
            Converts value string from its Windows representation
            to java string.  See
            {@link #toWindowsValueString(String) toWindowsValueString()} for the
            description of the encoding algorithm.
        </member>
        <member name="M:JetBrains.Util.LogUtil.GetUserFriendlyShortName(System.Object)">
            <summary>
            Generate a user friendly object name for logging. Compatible with Focus Monitor.
            </summary>
        </member>
        <member name="T:JetBrains.Util.MbButton">
            <summary>
            Buttons layout selection for the message box.
            </summary>
            <remarks>
            Note: we're not using either WinForms or Avalon constants for this thing, because they're causing conflicting namespace imports into the code that calls the message box. For instance, importing the <c>System.Windows.Forms</c> namespace in an Avalon component brings much of similarly-named constants into visibility, with the need to qualify names.
            </remarks>
        </member>
        <member name="T:JetBrains.Util.MbIcon">
            <summary>
            Icon selection for the message box.
            </summary>
            <remarks>
            Note: we're not using either WinForms or Avalon constants for this thing, because they're causing conflicting namespace imports into the code that calls the message box. For instance, importing the <c>System.Windows.Forms</c> namespace in an Avalon component brings much of similarly-named constants into visibility, with the need to qualify names.
            </remarks>
        </member>
        <member name="T:JetBrains.Util.Memory.IMemoryGrave">
            <summary>
            A collection of objects to be checked for a memory leak.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Memory.LeakWatchdog">
            <summary>
            An utility to monitor memory leaks.
            </summary>
            <remarks>
            The class made static to be able to survive R# suspend/resume.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.Memory.LeakWatchdog.Mode.Passive">
            <summary>
            Let objects to be garbage collected in the "natural" way.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Memory.LeakWatchdog.Mode.ForceGc">
            <summary>
            Force GC to collect the objects.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Memory.LeakWatchdog.GetOrCreateGrave(JetBrains.DataFlow.Lifetime,System.String)">
            <summary>
            Get a memory grave for the specified lifetime.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Memory.LeakWatchdog.RegisterObject(JetBrains.DataFlow.Lifetime,System.Object,System.String)">
            <summary>
            Register the object with the leak watchdog. Objects with the same lifetime will be placed in one memory grave.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Memory.LeakWatchdog.RegisterTerminatedObject(System.Object,System.TimeSpan,JetBrains.Util.Memory.LeakWatchdog.Mode,System.Action{System.Int32})">
            <summary>
            Immediate starts to wait for the object to be collected.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Memory.LeakWatchdog.GcWaitingGrave">
            <summary>
            Wait for objects to be collected in the specified amount of full GC.
            </summary>
            <remarks>
            There is no timeout, because GC is non-deterministic.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.Memory.LeakWatchdog.GcWaitingGrave.GcWaitCount">
            <summary>
            In most cases 3 full GC is enough to collect an object.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Memory.LeakWatchdog.TimeLimitedGrave">
            <summary>
            Wait for objects to be collected for the specified timeout.
            </summary>
        </member>
        <member name="F:JetBrains.Util.MessageBoxHandlers.MessageBoxHandlersStack">
            <summary>
            Holds the stack of the message box handlers, the last one is executed when a message box is attempted to be shown.
            A handler has the same prototype as <see cref="M:JetBrains.Util.MessageBox.ShowCore(System.Void*,System.String,System.String,JetBrains.Interop.WinApi.MessageBoxFlags)" />, but returns <c>Null</c> if it does not want to handle the message.
            By default, the message is displayed in a system message box.
            Should be modified in the Primary thread only.
            </summary>
        </member>
        <member name="M:JetBrains.Util.MessageBoxHandlers.GetHandlerSilent(JetBrains.Util.ILogger)">
            <summary>
            Default implementation.
            Displays the system MessageBox, cannot provide main window ownership and product name.
            </summary>
        </member>
        <member name="M:JetBrains.Util.MessageBoxHandlers.GetHandlerWinNT">
            <summary>
            Default implementation.
            Displays the system MessageBox, cannot provide main window ownership and product name.
            </summary>
        </member>
        <member name="T:JetBrains.Util.MessageBoxHandlers.ErrorMessageBoxException">
            <summary>
            An exception which gets reported via <see cref="T:JetBrains.Util.ILogger" /> when a silent error message box tries to show.
            </summary>
        </member>
        <member name="M:JetBrains.Util.MessageBoxHandlers.ErrorMessageBoxException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.MessageBoxHandlers.ErrorMessageBoxException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Util.MessageBoxHandlers.MessageBoxHandlerDelegate">
            <summary>
            Msgbox handler prototype.
            </summary>
            <param name="window">Handle to the message box owner window, or <c>Null</c> to use the main window of the current application, if available.</param>
            <param name="text">Body text.</param>
            <param name="caption">Optional message box caption, an empty string to use the product name by default. Otherwise, the product name will be prepended to the provided caption text.</param>
            <param name="flags">The buttons, icons, default button, behavior and so on.</param>
            <returns><c>NULL</c> if not handled, or the pressed button code otherwise.</returns>
        </member>
        <member name="M:JetBrains.Util.MessageBoxHandlers.SilentHandlerClosure.#ctor(JetBrains.Util.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.MessageBoxHandlers.SilentHandlerClosure.SilentMessageBox(System.Void*,System.String,System.String,JetBrains.Interop.WinApi.MessageBoxFlags)">
            <summary>
            Suppresses message boxes in tests.
            </summary>
        </member>
        <member name="T:JetBrains.Util.MessageBoxHandlers.WinNTHandlerClosure">
            <summary>
            A delegate instance class for the WinNT message box. Even tho it has no instance members, it's required to give the delegate unique per-instance equality for safe multiple adds/removes in the list.
            </summary>
        </member>
        <member name="M:JetBrains.Util.MessageBoxHandlers.WinNTHandlerClosure.WinNTMessageBox(System.Void*,System.String,System.String,JetBrains.Interop.WinApi.MessageBoxFlags)">
            <summary>
            Default implementation.
            Displays the system MessageBox, cannot provide main window ownership and product name.
            </summary>
        </member>
        <member name="T:JetBrains.Util.NamedPipes.ChannelReader">
            <summary>
            Returned when you create the reader end of the channel.
            </summary>
        </member>
        <member name="P:JetBrains.Util.NamedPipes.ChannelReader.ChannelName">
            <summary>
            Gets the channel name, as created by the reader, to be given to the writer side.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.ChannelReader.ReadRemainingMessages">
            <summary>
              <para>Enforces waiting for all pending messages to be processed before closing the channel — you must be sure that the writer has disconnected in such case, otherwise you might be waiting indefinitely.</para>
              <para>Terminating the reader lifetime aborts reading and cancels remaining messages in case you want to break the channel no matter what happens to the other end. If you terminate the other end and want to make sure that all pending messages are read, call this method before proceeding with lifetime termination.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.ChannelReader.ReadRemainingMessagesAsync">
            <summary>
              <para>Enforces waiting for all pending messages to be processed before closing the channel — you must be sure that the writer has disconnected in such case, otherwise you might be waiting indefinitely.</para>
              <para>Terminating the reader lifetime aborts reading and cancels remaining messages in case you want to break the channel no matter what happens to the other end. If you terminate the other end and want to make sure that all pending messages are read, call this method before proceeding with lifetime termination.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Util.NamedPipes.ChannelWriter`1">
            <summary>
            Returned when you create the writer end of the channel.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.ChannelWriter`1.Write(`0)">
            <summary>
            Call to send the next item over the channel. Note that the item could be stored for some time before it is processed for serialization and transmission, so do not modify this object. Writer lifetime must not be terminated when you call this method.
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:JetBrains.Util.NamedPipes.ChannelWriter`1.ItemSerializer">
            <summary>
            Turns item into bytes for sending. This might happen on the sender thread, not when the item is request for sending. That's why you write items in the API, not bytes, and we need a separate functor for turning items into bytes.
            </summary>
            <param name="item">The item to serialize.</param>
            <param name="buffer">In: the buffer for writing, content undefined. If to small, allocate a new one. Out: the buffer stuff has been actually written into, might be the input one. This buffer would be reused when returned, do not treat it as owned or readonly.</param>
            <param name="cbSize">Out: number of bytes in the buffer for the serialized item.</param>
        </member>
        <member name="T:JetBrains.Util.NamedPipes.DiskFileBasedPipeEmulationChannel">
            <summary>
            If pipes are not working and <see cref="T:JetBrains.Util.NamedPipes.NamedPipeMessageChannel" /> is not possible
            </summary>
        </member>
        <member name="T:JetBrains.Util.NamedPipes.IPipeMessageChannel">
            <summary>
            Common interface for <see cref="T:JetBrains.Util.NamedPipes.NamedPipeMessageChannel" /> and its fallbacks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.IPipeMessageChannel.CreateReader(JetBrains.DataFlow.Lifetime,System.Action{System.Byte[],System.UInt32,System.UInt32},JetBrains.Util.ILogger)">
            <summary>
            Defines the channel name, opens the reader, returns the token which allows to enforce waiting for all pending messages to be processed before closing the channel — you must be sure that the writer has disconnected in such case, otherwise you might be waiting indefinitely.
            </summary>
            <param name="lifetime">Closes the channel and drops unread messages.</param>
            <param name="FOnRead">Callback on every message. The buffer is reusable, do not store it.</param>
            <param name="logger"></param>
            <returns>The token which allows to enforce waiting for all pending messages to be processed before closing the channel — you must be sure that the writer has disconnected in such case, otherwise you might be waiting indefinitely; and the channel name to be passed to the writer.</returns>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.IPipeMessageChannel.CreateWriter``1(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Util.NamedPipes.ChannelWriter{``0}.ItemSerializer,JetBrains.Util.ILogger)">
            <summary>
            Opens the writing end of the pipe; it's the client, so the server (reader) end must be opened already.
            </summary>
            <typeparam name="TItem">Item type, for the serializer. Serialization is taken out async, so the implementation needs the serializer to run.</typeparam>
            <param name="lifetime">Enforces writing out all remaining items and close the channel.</param>
            <param name="sChannelName">The channel name given in the <see cref="T:JetBrains.Util.NamedPipes.ChannelReader" /> struct obtained when opening the reader end.</param>
            <param name="serializer">Per-item serializer.</param>
            <param name="logger"></param>
            <returns>A token which has the write function.</returns>
        </member>
        <member name="T:JetBrains.Util.NamedPipes.NamedPipeMessageChannel">
            <summary>
            Pumps messages over a pipe between appdomains or processes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.NamedPipeMessageChannel.#ctor">
            <summary>
            Use the <see cref="F:JetBrains.Util.NamedPipes.NamedPipeMessageChannel.Factory" /> instance.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.NamedPipeMessageChannel.JetBrains#Util#NamedPipes#IPipeMessageChannel#CreateReader(JetBrains.DataFlow.Lifetime,System.Action{System.Byte[],System.UInt32,System.UInt32},JetBrains.Util.ILogger)">
            <summary>
            Defines the channel name, opens the reader, returns the token which allows to enforce waiting for all pending messages to be processed before closing the channel — you must be sure that the writer has disconnected in such case, otherwise you might be waiting indefinitely.
            </summary>
            <param name="lifetime">Closes the channel and drops unread messages.</param>
            <param name="FOnRead">Callback on every message. The buffer is reusable, do not store it.</param>
            <param name="logger"></param>
            <returns>The token which allows to enforce waiting for all pending messages to be processed before closing the channel — you must be sure that the writer has disconnected in such case, otherwise you might be waiting indefinitely; and the channel name to be passed to the writer.</returns>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.NamedPipeMessageChannel.JetBrains#Util#NamedPipes#IPipeMessageChannel#CreateWriter``1(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Util.NamedPipes.ChannelWriter{``0}.ItemSerializer,JetBrains.Util.ILogger)">
            <summary>
            Opens the writing end of the pipe; it's the client, so the server (reader) end must be opened already.
            </summary>
            <typeparam name="TItem">Item type, for the serializer. Serialization is taken out async, so the implementation needs the serializer to run.</typeparam>
            <param name="lifetime">Enforces writing out all remaining items and close the channel.</param>
            <param name="sChannelName">The channel name given in the <see cref="T:JetBrains.Util.NamedPipes.ChannelReader" /> struct obtained when opening the reader end.</param>
            <param name="serializer">Per-item serializer.</param>
            <param name="logger"></param>
            <returns>A token which has the write function.</returns>
        </member>
        <member name="T:JetBrains.Util.NamedPipes.NamedPipeMessageChannel.ManualResetAwaitHandle">
            <summary>
            An async wait handle which is somewhat like the manual-reset wait handle.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.NamedPipeMessageChannel.ManualResetAwaitHandle.ResetAndWaitAsync">
            <summary>
            Resets the state.
            Awaits for someone to call <see cref="M:JetBrains.Util.NamedPipes.NamedPipeMessageChannel.ManualResetAwaitHandle.Set" />.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.NamedPipeMessageChannel.ManualResetAwaitHandle.Set">
            <summary>
            Sets the event in the signaled state. Whoever is waiting on <see cref="M:JetBrains.Util.NamedPipes.NamedPipeMessageChannel.ManualResetAwaitHandle.ResetAndWaitAsync" />, would wake up.
            </summary>
        </member>
        <member name="T:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel">
            <summary>
            Pumps messages over a pipe between appdomains or processes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.#ctor">
            <summary>
            Use the <see cref="F:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.Factory" /> instance.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.JetBrains#Util#NamedPipes#IPipeMessageChannel#CreateReader(JetBrains.DataFlow.Lifetime,System.Action{System.Byte[],System.UInt32,System.UInt32},JetBrains.Util.ILogger)">
            <summary>
            Defines the channel name, opens the reader, returns the token which allows to enforce waiting for all pending messages to be processed before closing the channel — you must be sure that the writer has disconnected in such case, otherwise you might be waiting indefinitely.
            </summary>
            <param name="lifetime">Closes the channel and drops unread messages.</param>
            <param name="FOnRead">Callback on every message. The buffer is reusable, do not store it.</param>
            <param name="logger"></param>
            <returns>The token which allows to enforce waiting for all pending messages to be processed before closing the channel — you must be sure that the writer has disconnected in such case, otherwise you might be waiting indefinitely; and the channel name to be passed to the writer.</returns>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.JetBrains#Util#NamedPipes#IPipeMessageChannel#CreateWriter``1(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Util.NamedPipes.ChannelWriter{``0}.ItemSerializer,JetBrains.Util.ILogger)">
            <summary>
            Opens the writing end of the pipe; it's the client, so the server (reader) end must be opened already.
            </summary>
            <typeparam name="TItem">Item type, for the serializer. Serialization is taken out async, so the implementation needs the serializer to run.</typeparam>
            <param name="lifetime">Enforces writing out all remaining items and close the channel.</param>
            <param name="sChannelName">The channel name given in the <see cref="T:JetBrains.Util.NamedPipes.ChannelReader" /> struct obtained when opening the reader end.</param>
            <param name="serializer">Per-item serializer.</param>
            <param name="logger"></param>
            <returns>A token which has the write function.</returns>
        </member>
        <member name="T:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.ManualResetAwaitHandle">
            <summary>
            An async wait handle which is somewhat like the manual-reset wait handle.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.ManualResetAwaitHandle.ResetAndWaitAsync">
            <summary>
            Resets the state.
            Awaits for someone to call <see cref="M:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.ManualResetAwaitHandle.Set" />.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.ManualResetAwaitHandle.Set">
            <summary>
            Sets the event in the signaled state. Whoever is waiting on <see cref="M:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.ManualResetAwaitHandle.ResetAndWaitAsync" />, would wake up.
            </summary>
        </member>
        <member name="T:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.ManualResetAwaitHandle1">
            <summary>
            An async wait handle which is somewhat like the manual-reset wait handle.
            NOTE(H): this version tends to execute the payload SYNC on the calling thread when doing SetResult, and looks like there are no easy ways to overcome that. And occupying the calling thread is no-no for us.
            </summary>
        </member>
        <member name="F:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.ManualResetAwaitHandle1.myTasker">
            <summary>
            When in non-signaled state, holds the current awaitable.
            To signal, the source is replaced with NULL and set as complete.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.ManualResetAwaitHandle1.ResetAndWaitAsync">
            <summary>
            Resets the state.
            Awaits for someone to call <see cref="M:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.ManualResetAwaitHandle1.Set" />.
            Note that unlike the system event handles ALL the waiters would be awakened when set, not just the first one.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.ManualResetAwaitHandle1.Set">
            <summary>
            Sets the event in the signaled state. Whoever is waiting on <see cref="M:JetBrains.Util.NamedPipes.NamedPipeNativeMessageChannel.ManualResetAwaitHandle1.ResetAndWaitAsync" />, would wake up.
            </summary>
        </member>
        <member name="T:JetBrains.Util.NamedPipes.AsyncMessageStreamReader">
            <summary>
            Reads packs of bytes from the stream, exactly as they were
            </summary>
        </member>
        <member name="F:JetBrains.Util.NamedPipes.AsyncMessageStreamReader.myBuffer">
            <summary>
            The active read buffer.
            The only buffer for single-chunk messages (that fit under buffer size).
            Each chunk in order for multi-chunk messages.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.AsyncMessageStreamReader.#ctor(JetBrains.DataFlow.Lifetime,System.IO.Stream,System.Func{System.Boolean},System.Int32)">
            <summary>
            Inits.
            </summary>
            <param name="lifetime"></param>
            <param name="stream">The stream to read messages from.</param>
            <param name="FIsCompleteMessageReceived">As we've read a chunk of bytes from the stream, tells if this chunk represents a complete message (otherwise, the next chunk[s] should be appended to compose the complete message). For example, on a <see cref="T:System.IO.Pipes.PipeStream"/>, this is <see cref="P:System.IO.Pipes.PipeStream.IsMessageComplete"/>, which is available on its <see cref="T:System.IAsyncResult"/>, but somehow not exposed to the general public.</param>
            <param name="bufferSize">Default size of the buffer.</param>
        </member>
        <member name="F:JetBrains.Util.NamedPipes.AsyncMessageStreamReader.MessageReceived">
            <summary>
            There's a new pack of bytes.
            Fires for each received pack.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.AsyncMessageStreamReader.BeginReadMessage">
            <summary>
            Initiates async reading.
            </summary>
        </member>
        <member name="T:JetBrains.Util.NamedPipes.AsyncServerPipeMessageReader">
            <summary>
            Reads packs of bytes from a pipe async.
            Wraps <see cref="T:JetBrains.Util.NamedPipes.AsyncMessageStreamReader"/>, but adds a wait for the pipe to be connected before actually starting any reads.
            </summary>
        </member>
        <member name="P:JetBrains.Util.NamedPipes.AsyncServerPipeMessageReader.MessageReceived">
            <summary>
            There's a new pack of bytes.
            Fires for each received pack.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.AsyncServerPipeMessageReader.BeginReadMessage">
            <summary>
            Initiates async reading.
            </summary>
        </member>
        <member name="T:JetBrains.Util.NamedPipes.AsyncServerPipeObjectReader`1">
            <summary>
            Deserializes objects from a pipe working in the message mode.
            Extends <see cref="T:JetBrains.Util.NamedPipes.AsyncServerPipeMessageReader"/> by adding a deserializer.
            </summary>
        </member>
        <member name="F:JetBrains.Util.NamedPipes.AsyncServerPipeObjectReader`1.ObjectReceived">
            <summary>
            There's a new object.
            Fires for each received object.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NamedPipes.AsyncServerPipeObjectReader`1.BeginReadMessage">
            <summary>
            Initiates async reading.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Networking.HttpDownload.HttpDownloadReliable(JetBrains.DataFlow.OuterLifetime,System.Uri,System.IO.Stream,JetBrains.Util.Networking.HttpDownload.DownloadProgress,System.Net.IWebProxy,JetBrains.Util.Networking.HttpDownload.Flags)">
            <summary>
            Initiates the HTTP download. Retries several times on failures. Tries to check if the content has downloaded fully.
            </summary>
            <param name="lifetime">Cancelation.</param>
            <param name="uri">The URI to download. Currently, must be of the HTTP scheme.</param>
            <param name="streamOut">
              <para>The output stream.</para>
              <para>MUST support seeking for the case if the download interrupts, has to be restarted, and resuming from the same spot is not possible (if resumes are not prohibited).</para>
              <para>MUST be at position zero, otherwise the existing bytes are assumed to be partially downloaded content to be resumed (if resumes are not prohibited).</para>
            </param>
            <param name="dlprogress">Optional. The progress for user feedback.</param>
            <param name="webproxy">Optional. The proxy server to use.</param>
            <param name="flags">Optional. Flags.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Networking.HttpDownload.HttpDowloadReliableAttempt(System.Uri,System.IO.Stream,System.Net.IWebProxy,JetBrains.Util.Networking.HttpDownload.Flags,JetBrains.Util.Networking.HttpDownload.RetryOracle,JetBrains.Util.Networking.HttpDownload.DownloadProgress,JetBrains.Util.ILogger)">
            <summary>
            Does one attempt, must not throw out unless very fatal, return the exception instead.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Networking.HttpDownload.DownloadProgress.myIsForceIndeterminate">
            <summary>
            Total size were explicitly reported as unknown, or were reported inconsistently.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Networking.HttpDownload.DownloadProgress.myLastSteppedProgressPos">
            <summary>
            Locked with <see cref="F:JetBrains.Util.Networking.HttpDownload.DownloadProgress.myLockStepping" />. Reflects last value which should be in the progress
            </summary>
        </member>
        <member name="F:JetBrains.Util.Networking.HttpDownload.DownloadProgress.BytesKind.InitialDownload">
            <summary>
            Just goign on as we started.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Networking.HttpDownload.DownloadProgress.BytesKind.ResumedDownload">
            <summary>
            The download were interrupted and were resumed without dropping all the bytes we have.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Networking.HttpDownload.DownloadProgress.BytesKind.RestartedDownload">
            <summary>
            Resume were not possible, dropped all the bytes we have and restarted.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Networking.HttpDownload.Flags.NoPartialDownloads">
            <summary>
            Prevents from downloadig file in parts. A retry would retry from scratch and not resume from the same position.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Networking.HttpDownload.Flags.NoRetry">
            <summary>
            Does not retry/resume if the first attempt fails.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Networking.HttpDownload.Flags.NoWaitBetweenAttempts">
            <summary>
            Does not pause between the next attempt (e.g. if network is temporarily down, to not waste all attempts in an instant).
            </summary>
        </member>
        <member name="F:JetBrains.Util.Networking.HttpDownload.Flags.Timeout">
            <summary>
              <para>The timeout for the download operation.</para>
              <para><see cref="F:System.TimeSpan.MaxValue" /> or <see cref="F:JetBrains.Interop.WinApi.WinDef.INFINITE" /> means no timeout. A NULL value means <see cref="F:JetBrains.Util.Networking.HttpDownload.Flags.DefaultTimeout" />.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Util.Networking.HttpDownload.RetryOracle.myOtherErrors">
            <summary>
            Some network/transport/algorithm error.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Networking.HttpDownload.RetryOracle.myPermanentErrors">
            <summary>
            Like 403,404 — should do a few attempts anyway, but not too many.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Networking.HttpDownload.RetryOracle.myProgressingResumes">
            <summary>
            The dload were interrupted, but resumed successfully from the same spot and more bytes were received, the progress is going, no waits, more attempts.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Networking.HttpDownload.RetryOracle.GetException">
            <summary>
            Exception from the last failed attempt.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NumberUtilParsing.TryParseFloatingPoint(System.Byte*,System.UInt32,System.Double*)">
            <summary>
            Duplicates the code in <see cref="M:System.Double.TryParse(System.String,System.Double@)" />, as borrowed from CoreCLR, with the following differences:
            (1) Parses only for <c>AllowLeadingSign+AllowExponent+AllowDecimalPoint</c>. No currency, no thousands.
            (2) Parses only for the Invariant Culture, only dots for decimal points.
            (3) Operates on the memory pointer rather than a string managed object. This is the key point.
            (4) Does not need a terminating zero at the end of the string. This allows to parse a part of the input stream.
            (5) The input is in bytes, and is assumed to be in a multibyte encoding such as ASCII or ANSI or UTF-8 — for normal doubles, that's no difference, with the exception of the “∞” char which might occur in the <see cref="F:System.Double.PositiveInfinity" /> <see cref="M:System.Double.ToString" /> in <c>R</c> mode, which is expected to be expressed as three UTF-8 bytes. Any unexpected byte value aborts parsing.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NumberUtilParsing.TryParseFloatingPoint(System.UInt16*,System.UInt32,System.Double*,JetBrains.Util.NumberUtilParsing.DataBuffer)">
            <summary>
            Duplicates the code in <see cref="M:System.Double.TryParse(System.String,System.Double@)" />, as borrowed from CoreCLR, with the following differences:
            (1) Parses only for <c>AllowLeadingSign+AllowExponent+AllowDecimalPoint</c>. No currency, no thousands.
            (2) Parses only for the Invariant Culture, only dots for decimal points.
            (3) Operates on the memory pointer rather than a string managed object. This is the key point.
            (4) Does not need a terminating zero at the end of the string. This allows to parse a part of the input stream.
            </summary>
        </member>
        <member name="M:JetBrains.Util.NumberUtilParsing.TryParseFloatingPoint(System.String,System.Double@)">
            <summary>
            Façade for parsing from a regular string, mostly for testing purposes, as it makes a slower version of <see cref="M:System.Double.Parse(System.String)" />.
            </summary>
        </member>
        <member name="F:JetBrains.Util.NumberUtilParsing.NumberCpp.rgexp64Power10">
            <summary>
            exponents for both powers of 10 and 0.1
            </summary>
        </member>
        <member name="F:JetBrains.Util.NumberUtilParsing.NumberCpp.rgexp64Power10By16">
            <summary>
            // exponents for both powers of 10^16 and 0.1^16
            </summary>
        </member>
        <member name="M:JetBrains.Util.NumberUtilParsing.NumberCpp.AssembleIeeeDoubleBits(JetBrains.Util.NumberUtilParsing.NumberCpp.FloatingData*,System.Double*)">
            <summary>
            The <c>NumberToDouble</c> method from <c>number.cpp</c>.
            </summary>
            <param name="number"></param>
            <param name="value"></param>
        </member>
        <member name="F:JetBrains.Util.NumberUtilParsing.NumberCpp.FloatingData.Digits">
            <summary>
            ASCII chars, numbers only, buffer must be long enough for NumberMaxDigits (plus NULL), has <see cref="F:JetBrains.Util.NumberUtilParsing.NumberCpp.FloatingData.Precision" /> meaningful bytes.
            </summary>
        </member>
        <member name="F:JetBrains.Util.NumberUtilParsing.NumberCpp.FloatingData.Precision">
            <summary>
            Number of meaningful digits.
            </summary>
        </member>
        <member name="T:JetBrains.Util.ObservableRangeCollection`1">
            <summary> 
            Represents a dynamic data collection that provides notifications when items get added, removed, or when the whole list is refreshed. 
            </summary> 
            <typeparam name="T"></typeparam> 
        </member>
        <member name="M:JetBrains.Util.ObservableRangeCollection`1.AddRange(System.Collections.Generic.IList{`0})">
            <summary> 
            Adds the elements of the specified collection to the end of the ObservableCollection(Of T). 
            </summary> 
        </member>
        <member name="M:JetBrains.Util.ObservableRangeCollection`1.RemoveRange(System.Collections.Generic.IList{`0})">
            <summary> 
            Removes the first occurrence of each item in the specified collection from ObservableCollection(Of T). 
            </summary> 
        </member>
        <member name="M:JetBrains.Util.ObservableRangeCollection`1.Replace(`0)">
            <summary> 
            Clears the current collection and replaces it with the specified item. 
            </summary> 
        </member>
        <member name="M:JetBrains.Util.ObservableRangeCollection`1.ReplaceRange(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Clears the current collection and replaces it with the specified collection. 
            </summary> 
        </member>
        <member name="M:JetBrains.Util.ObservableRangeCollection`1.#ctor">
            <summary> 
            Initializes a new instance of the System.Collections.ObjectModel.ObservableCollection(Of T) class. 
            </summary> 
        </member>
        <member name="M:JetBrains.Util.ObservableRangeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Initializes a new instance of the System.Collections.ObjectModel.ObservableCollection(Of T) class that contains elements copied from the specified collection. 
            </summary> 
            <param name="collection">collection: The collection from which the elements are copied.</param> 
            <exception cref="T:System.ArgumentNullException">The collection parameter cannot be null.</exception> 
        </member>
        <member name="T:JetBrains.Util.Frameworks.FrameworkRegistryData">
            <summary>
            Represents registry "Version" and "Release" keys that are necessary to built marketing version of .NET framework
            https://msdn.microsoft.com/en-us/library/hh925568.aspx 
            </summary>
        </member>
        <member name="P:JetBrains.Util.Frameworks.FrameworkRegistryData.Version">
            <summary>
            Raw value of "Version" registry key 
            </summary>
        </member>
        <member name="P:JetBrains.Util.Frameworks.FrameworkRegistryData.Release">
            <summary>
            Raw value of "Release" registry key
            </summary>
        </member>
        <member name="T:JetBrains.Util.ProductHeadline">
            <summary>
            Formats product headline like 'Product Name 2017.3 EAP 8 build 111.0.20171124.0-eap08. Copyright © 2009-2017 JetBrains s.r.o.'
            according to https://youtrack.jetbrains.com/issue/LegalCZ-9
            </summary>
            <remarks>
            This class is similar to <c>JetBrains.Application.BuildScript.ProductHeadlineBuilder</c> but might be used in runtime.
            </remarks>
        </member>
        <member name="T:JetBrains.Util.Serialization.JsonTypeConverterNewtonsoft`1">
            <summary>
            Uses the alternative JSON serializer, not the system one.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Serialization.JsonValueSerializerNewtonsoft`1">
            <summary>
            Uses the alternative JSON serializer, not the system one.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Serialization.MemberwiseSerializableAttribute">
            <summary>
              <para>Means that the artifact should be serialized on member-by-member basis, by reading values of all public fields or properties.</para>
              <para>When restoring, values should be assigned either back to fields and properties (if writable), or to constructor parameters.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Util.Serialization.XamlSerializableAttribute">
            <summary>
            Means that the artifact should be serialized into XAML.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Serialization.CsexpArchive">
            <summary>
            Like an MFC Archive, handles read and write operations with the same API.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Serialization.CsexpReader.BuffersCbSize">
            <summary>
            For reuse when we need max buf size, allows to avoid field reads.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpReader.GetCurrentStringTokenCbSize">
            <summary>
            If the current <see cref="P:JetBrains.Util.Serialization.CsexpReader.TokenKind" /> is a <see cref="F:JetBrains.Util.Serialization.CsexpTokenKind.String" />, gets its length, in bytes.
            Otherwise, throws.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpReader.ReadBufferValue">
            <summary>
            Allocates a new buffer to read the value.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpReader.ReadBufferValue(System.Byte[],System.UInt32)">
            <summary>
            Reads the value of the current string token into a user-supplied buffer.
            Returns the number of bytes actually copied. The buffer must be large enough to fit the <see cref="M:JetBrains.Util.Serialization.CsexpReader.GetCurrentStringTokenCbSize" /> size.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpReader.ReadBufferValue(JetBrains.Util.PersistentMap.UnsafeWriter.Cookie)">
            <summary>
            Reads the value of the current string token into a user-supplied native memory buffer.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpReader.ReadDecValue">
            <summary>
            Reads the current string value as an encoded unsigned decimal number.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpReader.ReadHexValue">
            <summary>
            Reads the current string value as an encoded hex number.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpReader.ReadStringValue(System.String)">
            <summary>
            Reads the value of the current String token as a managed string.
            </summary>
            <param name="assertThisValue">Optional. If defined, will check that it's equal to token, and throw an exception otherwise; no heap memory will be allocated unless the string is too large.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpReader.Skip">
            <summary>
            Skips the current token to the next one. Returns the next state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpReader.GetUnderlyingStreamPosition">
            <summary>
            Gets the current position of the input bytes stream (note: the underlying stream might be positioned elsewhere).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpReader.ReadByteSlow">
            <summary>
            Reads a single input byte in case of a precache miss.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpWriterEx.BeginWriteList(JetBrains.Util.Serialization.CsexpWriter)">
            <summary>
            Opens-cloes the nested list.
            To begin the use of this object, you must open the single toplevel list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpWriterEx.BeginWriteNamedList(JetBrains.Util.Serialization.CsexpWriter,System.String)">
            <summary>
            Opens-cloes the nested list.
            To begin the use of this object, you must open the single toplevel list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpWriterEx.WriteNameValue(JetBrains.Util.Serialization.CsexpWriter,System.String,System.String)">
            <summary>
            A helper which writes a nested list of two items, name and value.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpWriterEx.WriteNameValue``1(JetBrains.Util.Serialization.CsexpWriter,System.String,``0)">
            <summary>
            A helper which writes a nested list of two items, name and value.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpWriterEx.WriteValue``1(JetBrains.Util.Serialization.CsexpWriter,``0)">
            <summary>
            A helper which writes a string conversion of a typed value.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Serialization.CsexpWriterEx.WriteDoubleTextValue(JetBrains.Util.Serialization.CsexpWriter,System.Double)">
            <summary>
            A helper which writes a double value.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CompanySpecificFolderLocations.LocalAppdata">
            <summary>
            The non-Roaming Application Data, shared for all company data.
            Usually it's <code>Environment.SpecialFolder.LocalApplicationData / CompanyInfo.Name</code>, but can be overriden by value of environment variable <see cref="F:JetBrains.Util.CompanySpecificFolderLocations.JET_LOCAL_APPDATA_DIR"/>.
            <para>This environment variable won't be inherited by child processes after first calculation of this property</para>
            </summary>
        </member>
        <member name="P:JetBrains.Util.CompanySpecificFolderLocations.RoamingAppdata">
            <summary>
            The Roaming Application Data, shared for all company data.
            Usually it's <code>Environment.SpecialFolder.RoamingApplicationData / CompanyInfo.Name</code> but can be overriden by value of environment variable <see cref="F:JetBrains.Util.CompanySpecificFolderLocations.JET_ROAMING_APPDATA_DIR"/>.
            <para>This environment variable won't be inherited by child processes after first calculation of this property</para>
            </summary>
        </member>
        <member name="P:JetBrains.Util.CompanySpecificFolderLocations.TempFolder">
            <summary>
            Temp folder, shared for all company data.
            Usually it's <code>TEMP / CompanyInfo.Name</code> but can be overriden by value of environment variable <see cref="F:JetBrains.Util.CompanySpecificFolderLocations.JET_TEMP_DIR"/>.
            <para>This environment variable won't be inherited by child processes after first calculation of this property</para>
            </summary>
        </member>
        <member name="T:JetBrains.Util.StandardFolderLocationsStatic">
            <summary>
            This class gives standard folder locations for raw static utils.
            Any code running in shelled apps should use <c>HostFolderLocations</c> to get the desired locations and pass them to the corresponding utils. Only very static and basic code can use this class directly.
            </summary>
        </member>
        <member name="P:JetBrains.Util.StandardFolderLocationsStatic.LocalAppdata">
            <summary>
            The non-Roaming Application Data, shared for all versions and all hosts.
            </summary>
        </member>
        <member name="P:JetBrains.Util.StandardFolderLocationsStatic.RoamingAppdata">
            <summary>
            The Roaming Application Data, shared for all versions and all hosts.
            </summary>
        </member>
        <member name="P:JetBrains.Util.StandardFolderLocationsStatic.TransientAppdata">
            <summary>
            The Application Data Transient folder
            </summary>
        </member>
        <member name="P:JetBrains.Util.StandardFolderLocationsStatic.TransientAppdataShortened">
            <summary>
            A version of <see cref="P:JetBrains.Util.StandardFolderLocationsStatic.TransientAppdata" /> with a shorter path, in case your usage hits the <see cref="F:JetBrains.Interop.WinApi.WinDef.MAX_PATH" /> limit.
            </summary>
        </member>
        <member name="F:JetBrains.Util.StandardFolderLocationsStatic.Constants.LocalAppdataCachesSubfolder">
            <summary>
            Subfolder under local-app-data for caches (specifically transient stuff).
            </summary>
        </member>
        <member name="F:JetBrains.Util.StandardFolderLocationsStatic.Constants.NonPerHostSubfolder">
            <summary>
            Replaces the host name when not per-host.
            </summary>
        </member>
        <member name="F:JetBrains.Util.StandardFolderLocationsStatic.Constants.NotPerVersionFolderInfix">
            <summary>
            Replaces the version number when not per-wave.
            Goes after <see cref="F:JetBrains.Util.StandardFolderLocationsStatic.Constants.VersionSubfolderPrefix" />.
            </summary>
        </member>
        <member name="F:JetBrains.Util.StandardFolderLocationsStatic.Constants.VersionSubfolderPrefix">
            <summary>
            Prefix for the version folder name.
            </summary>
        </member>
        <member name="T:JetBrains.Util.InvokeChildProcess">
            <summary>
              Helps with invoking a child process during a build.
            </summary>
        </member>
        <member name="F:JetBrains.Util.InvokeChildProcess.TimeoutChildProcess">
            <summary>
            The default timeout for running child processes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.InvokeChildProcess.InvokeCore_Native_JobObject_ListProcesses(JetBrains.DataFlow.Lifetime,System.Void*,JetBrains.Util.ILogger)">
            <summary>
            Lists the processes which are currently running and belong to the job.
            </summary>
            <param name="lifeTerminating"></param>
            <param name="hJob"></param>
        </member>
        <member name="F:JetBrains.Util.InvokeChildProcess.StartInfo.AdditionalEnvironmentVariables">
            <summary>
            By default, a child process inherits all of the environment variables of the parent process.
            This dictionary allows to modify the list by setting the new ones or removing existing ones (by setting them a NULL value).
            </summary>
        </member>
        <member name="F:JetBrains.Util.InvokeChildProcess.StartInfo.OverrideCreateProcessW">
            <summary>
            Optional. If set, overrides the call to Windows NT <c>CreateProcessW</c> with a call to this function instead, with all the exact parameters as designated for the system call. It is an error to set this value when the implementation is not about to call the native WinNT CreateProcessW.
            </summary>
        </member>
        <member name="P:JetBrains.Util.InvokeChildProcess.StartInfo.Pipe">
            <summary>
            Gets or sets how the StdOut/StdErr streams of the child process should be pumped.
            <c>NULL</c> means that the streams should not be captured, and the process should be allowed to show its own console (if it's a console process).
            The initial setting is to redirect child process streams into those of the parent process (even if any of them is not a console process).
            </summary>
        </member>
        <member name="T:JetBrains.Util.InvokeChildProcess.PipeStreams">
            <summary>
            Determines what happens to the StdOut and StdErr streams of the child process.
            </summary>
        </member>
        <member name="M:JetBrains.Util.InvokeChildProcess.PipeStreams.IntoJetLogger(JetBrains.Util.InvokeChildProcess.TreatStderr,System.Nullable{JetBrains.Util.LoggingLevel})">
            <summary>
            Child process StdOut gets logged into the <see cref="T:JetBrains.Util.Logging.Logger" /> as <see cref="F:JetBrains.Util.LoggingLevel.INFO" /> (or custom level) messages.
            Child process StdErr gets logged into the <see cref="T:JetBrains.Util.Logging.Logger" /> as <see cref="F:JetBrains.Util.LoggingLevel.ERROR" /> or <see cref="F:JetBrains.Util.LoggingLevel.INFO" /> (or custom level) messages, depending on the <see cref="T:JetBrains.Util.InvokeChildProcess.TreatStderr" /> setting.
            If the message parses as a standard error or warning line (in accordance with csc/vbc/msbuild rules), then it gets logged as an error or as a warning.
            </summary>
            <param name="treatStderr">Allows to suppress treating StdErr lines as errors, considering them the same as StdOut.</param>
            <param name="levelDefault">Optionally changes the logging level for non-error messages from its default <see cref="F:JetBrains.Util.LoggingLevel.INFO" />.</param>
        </member>
        <member name="M:JetBrains.Util.InvokeChildProcess.PipeStreams.IntoParentProcessStreams(JetBrains.Util.InvokeChildProcess.TreatStderr)">
            <summary>
            Child process StdOut gets piped into the parent process StdOut.
            Child process StdErr gets piped into either StdErr or StdOut of the parent process, depending on the <see cref="T:JetBrains.Util.InvokeChildProcess.TreatStderr" /> setting.
            </summary>
            <param name="treatStderr">Allows to suppress treating StdErr lines as errors, considering them the same as StdOut.</param>
        </member>
        <member name="F:JetBrains.Util.InvokeChildProcess.ProcessIdHandleName.Handle">
            <summary>
            Handle MUST be closed after use.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.GetPackageStatus">
            <summary>
            Status reporting item for <see cref="M:JetBrains.Util.Storage.Packages.IJetNugetPackageManager.GetPackageAsync(JetBrains.DataFlow.OuterLifetime,JetBrains.Util.Storage.Packages.PackageIdentity,JetBrains.Util.OnError,JetBrains.DataFlow.IProperty{JetBrains.Util.Storage.Packages.GetPackageStatus})" />.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.GetPackageStatus.EPath.MemCache">
            <summary>
            The package has already been loaded into memory by some prev request.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.GetPackageStatus.EPath.DiskCache">
            <summary>
            The package has been loaded from disk from a valid cached copy.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.GetPackageStatus.EPath.Source">
            <summary>
            The package had to be retrieved from source (e.g. http-downloaded).
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.IJetNugetPackageManager">
            <summary>
            Wraps a Nuget Package Manager together with its settings (like what the package source is and where the default local Packages directory should be).
            Has extension methods with our implementations for reliable package retrieval and extraction.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.Packages.IJetNugetPackageManager.NugetConfigFile">
            <summary>
            Nuget settings on which this repo is running, unless operating in the fallback-to-default mode.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.IJetNugetPackageManager.GetPackageAsync(JetBrains.DataFlow.OuterLifetime,JetBrains.Util.Storage.Packages.PackageIdentity,JetBrains.Util.OnError,JetBrains.DataFlow.IProperty{JetBrains.Util.Storage.Packages.GetPackageStatus})">
            <summary>
            The package repository for retrieving packages from the Nuget uplink. Uses own caching on disk.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.JetNuGetSettings">
            <summary>
            NuGet Settings with expanding environment variables in values
            Implemented in NuGet 3.4 <see href="https://github.com/NuGet/NuGet.Client/pull/171"/>
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.Packages.JetNuGetSettings.IsMachineWideSettings">
            <summary>
            Flag indicating whether this file is a machine wide settings file. A machine wide settings
            file will not be modified.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.JetNuGetSettings.LoadDefaultSettings(NuGet.IFileSystem,System.String)">
            <summary>
            Loads user settings from the NuGet configuration files. The method walks the directory
            tree in <paramref name="fileSystem"/> up to its root, and reads each NuGet.config file
            it finds in the directories. It then reads the user specific settings,
            which is file <paramref name="configFileName"/>
            in <paramref name="fileSystem"/> if <paramref name="configFileName"/> is not null,
            If <paramref name="configFileName"/> is null, the user specific settings file is
            %AppData%\NuGet\NuGet.config.
            After that, the machine wide settings files are added.
            </summary>
            <remarks>
            For example, if <paramref name="fileSystem"/> is c:\dir1\dir2, <paramref name="configFileName"/> 
            is "userConfig.file", the files loaded are (in the order that they are loaded):
                c:\dir1\dir2\nuget.config
                c:\dir1\nuget.config
                c:\nuget.config
                c:\dir1\dir2\userConfig.file
                machine wide settings (e.g. c:\programdata\NuGet\Config\*.config)
            </remarks>
            <param name="fileSystem">The file system to walk to find configuration files.</param>
            <param name="configFileName">The user specified configuration file.</param>
            <returns>The settings object loaded.</returns>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.JetNuGetSettings.GetSettingsFileNames(NuGet.IFileSystem)">
            <remarks>
            Order is most significant (e.g. applied last) to least significant (applied first)
            ex:
            c:\foo\nuget.config
            c:\nuget.config
            </remarks>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.JetNuGetSettings.ExecuteSynchronized(System.Action)">
            <summary>
            Wrap all IO operations on setting files with this function to avoid file-in-use errors
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem">
            <summary>
            Wraps a single file for submitting into Nuget APIs.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.#ctor(JetBrains.Util.Storage.SimpleFileItem,JetBrains.Util.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#AddFile(System.String,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#AddFile(System.String,System.Action{System.IO.Stream})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#AddFiles(System.Collections.Generic.IEnumerable{NuGet.IPackageFile},System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#CreateFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#DeleteDirectory(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#DeleteFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#DeleteFiles(System.Collections.Generic.IEnumerable{NuGet.IPackageFile},System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#DirectoryExists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#FileExists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#GetCreated(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#GetDirectories(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#GetFiles(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#GetFullPath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#GetLastAccessed(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#GetLastModified(System.String)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#Logger">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#MakeFileWritable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#MoveFile(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#OpenFile(System.String)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Util.Storage.Packages.SingleFileNugetFileSystem.NuGet#IFileSystem#Root">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem">
            <summary>
            For extracting a package from various artifact containers.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.JetPackageManifest">
            <summary>
            Same as <see cref="T:NuGet.Manifest" />, but serializable.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.JetPackageReference">
            <summary>
            A serializable version of the <see cref="T:NuGet.PackageReference" />.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.JetPackageReference.ToExactIdentity(JetBrains.Util.OnError)">
            <summary>
            Ensures that this reference represents the exact package identity (rather than a version range), and returns that identity.
            </summary>
            <param name="onerror"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalPackagesMeta.OpenInFolder(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath)">
            <summary>
            Opens the meta stored in the folder (usually, the solution's Packages folder) for the duration of the lifetime.
            Deserializes when opening, serializes upon termination of the lifetime, holds the lock to the file the whole duration.
            </summary>
            <param name="lifetime">When to serialize back and close file.</param>
            <param name="dirPackages">Usually, the solution Packages folder.</param>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalPackagesMeta.PackageRecord.TimeoutOnNugetMetaLock">
            <summary>
            The timeout to wait for a lock when trying to open metadata on a nuget entry in the Central Cache or a Local Restore folder.
            This might mean that another thread/process is also performing an operation on the same package location.
            The supposedly most lengthy operation is package download, which also locks the folder (why not? you cannot local restore a package before you download it. and you do not want to run simultaneous downloads). We got large packages and possibly slow connections. Do not limit the process.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.Packages.LocalPackagesMeta.PackageRecord.ExpandedFilesTimestamp">
            <summary>
            Validates the files expanded from out of the package. Their size is checked against the package contents, and their stamp must all match this one.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalPackagesMeta.PackageRecord.PackageFileSize">
            <summary>
            Validates the copy of .nupkg stored in the expanded folder.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.Packages.LocalPackagesMeta.PackageRecord.PackageFileTimestamp">
            <summary>
            Validates the copy of .nupkg stored in the expanded folder.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalPackagesMeta.PackageRecord.PackageVersionString">
            <summary>
            String representation of the package semantic version, to defer costly parsing — this speeds up mass-serialization considerably.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalPackagesMeta.PackageRecord.OpenAndLockSinglePackageMetadataAsync(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath,JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.ILogger,System.Nullable{System.TimeSpan})">
            <summary>
            Opens the package local expansion metadata for a single package, and locks access to it by holding an exclusive lock on the file for the duration of the lifetime.
            The metadata is in the <see cref="T:JetBrains.Util.Storage.Packages.LocalPackagesMeta.PackageRecord" /> format and describes the single package to which this directory <see cref="!:dirExpanded" /> (either as a local-expand location, or just a caching place for its nupkg). The metadata helps control its integrity.
            If the metadata does not exist, an empty one gets created. When the lifetime ends, the new value is written to the metadata file.
            Locking access means that the file is opened exclusively (with awaiting for it to become available), and is held locked for the <paramref name="lifetime" />, thus protecting the <see cref="!:dirExpanded" /> from unexpected modification by another party. Multiple concurrent tasks or processes can safely request caching/expanding a package this way.
            The metadata is stored in directory attributes in the stream named <see cref="F:JetBrains.Util.Storage.Packages.LocalPackagesMeta.SinglePackageMetadataFileName" /> on supporting file systems, or in a file under the same name concatenated to the directory name otherwise (so it's outside the dir itself). Beware opening on a symlink: on NTFS, the attributes would go on the symlink target, but otherwise it would be on the symlink source.
            The returned box would be NULL if record missing/invalid, or the valid record. Upon lifetime termination, the box contents would be written if reference changed from the previous one.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalPackagesMeta.PackageRecord.TryReadFromDirectoryAttributes(JetBrains.Util.FileSystemPath)">
            <summary>
            Reads the package local expansion metadata which can validate that it has not been tampered with, written right into the package expansion directory extended attributes (more specifically, an alternate data stream named <see cref="F:JetBrains.Util.Storage.Packages.LocalPackagesMeta.SinglePackageMetadataFileName" />). This is used in case we're linking package folders from the common storage, so the per-Packages-folder local metadata file is not sufficient because it does not know about packages written to the central storage by other parties.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalPackagesMeta.PackageRecord.TryWriteToDirectoryAttributes(JetBrains.Util.FileSystemPath,JetBrains.Util.Storage.Packages.LocalPackagesMeta.PackageRecord)">
            <summary>
            See <see cref="M:JetBrains.Util.Storage.Packages.LocalPackagesMeta.PackageRecord.TryReadFromDirectoryAttributes(JetBrains.Util.FileSystemPath)" />.
            “Try” because the filesystem might not support this (but in that case linking the packages folders to the central storage won't be supported either).
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.LocalPackagesMeta.PkgIdString">
            <summary>
            Operates on strings, without parsing the semver. Profitable for mass-serialization.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesCentralCache">
            <summary>
              <para>Represents a central NTSF folder into which all packages are actually expanded upon local-restore and then linked into individual Packages folders with directory junctions as needed.</para>
              <para>The actual folder path might be <c>NULL</c>, which means that the central folder is not available (e.g. due to the lack of filesystem support for junctions), and local package folders must be used normally in such a case.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesCentralCache.ExpirationAgeLimit">
            <summary>
            Time after a folder in the central cache or backlog (with either just the package or its local restoration) is last accessed for package download or local restore, before it's deleted.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesCentralCache.CleanupExpiredFolders(JetBrains.DataFlow.OuterLifetime,JetBrains.Util.FileSystemPath,JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.ILogger)">
            <summary>
            Does not let the nuget cache folder grow infinitely.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesCentralCache.Create(JetBrains.Util.FileSystemPath)">
            <summary>
            Creates the custom directory (does not check OS features, use <see cref="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesCentralCache.CreateIfSoftLinksSupported(JetBrains.Util.FileSystemPath)" /> if not sure, use <see cref="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesCentralCache.CreateInLocalAppDataIfSoftLinksSupported" /> for machine-default location).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesCentralCache.CreateIfSoftLinksSupported(JetBrains.Util.FileSystemPath)">
            <summary>
            If the volume supports junctions.
            Always returns a non-NULL instance, but it might have a NULL path.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesCentralCache.CreateInLocalAppDataIfSoftLinksSupported">
            <summary>
            Creates at the default machine location, if OS and file system support the necessary features.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession">
            <summary>
              <para>Restores a specific set of Nuget package into the packages directory, mostly the same way as Nuget will do.</para>
              <para>As opposed to the standard Nuget procedure:</para>
              <para>• Ensures the folder contains no more packages than the retrieved list, to prevent projects from using non-whitelisted pkgs by accident. Operates on the Backlog folder to quickly retrieve such packages whenif we switch context.</para>
              <para>• Ensures the expanded content still matches the original packages (the file set and their content, by timestamp of the last time we wrote them).</para>
              <para>• Fixes exceptions in Nuget which probably resulted from some race (NP-1199).</para>
              <para>• Operates on the already-retrieved package body, as an artifact object.</para>
              <para>• Uses a slightly optimized procedure for accessing the artifact body (not so important).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.EnvironmentVariableNameForNoNugetValidation">
            <summary>
            Name of the env var which suppresses validation of the expanded nuget packages.
            This could be used for debug purposes when you modify an already-expanded package and run experiments with the new content. In the normal course of action, local restore would repair corruption with the original contents.
            Should parse as a boolean value.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.OptionNugetExpandedFilesCompressionRatioThreshold">
            <summary>
            Whether to set the NTFS Compressed attribute on folders with expanded nugets, so that they occupied less disk space (e.g. for Platform SDK and VC Build Tool nugets).
            Set to <c>0</c> to compress no packages, or <c>1</c> to compress every package.
            A valid value in between specifies the compression ratio (compressed div uncompressed) of the original nuget under which compression should be applied to expanded disk files, ie do not compress if files are noncompressable.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.PackagesBacklogFolder">
            <summary>
            Gets relative path from the <see cref="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.PackagesDir" /> to the to the folder in which expanded packages not currently referenced are hidden from accidental use in project references for potential reuse when we switch a branch and need them again.
            The name of the folder does not match the regex on Package ID (<c>\w</c>), so it shan't interfere with normal packages.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.myCentralCacheDirectory">
            <summary>
            Directory to the <see cref="T:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesCentralCache" />, if were supplied and we decided to put it to use.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.myFolderLocalNames">
            <summary>
            Tracks the folders in Packages directory which we have used — we will hide unuseds.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.mySubstantialDiskWriteSemaphore">
            <summary>
            Limits concurrent substantial write operations (eg metadata ops are not limited here, supposing we're on SSD).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath,JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesCentralCache)">
            <summary>
            Opens the session. You can declare more packages as used while the session is open.
            The intended use is to close the session as soon as you are done with the restore, and then proceed using the packages — it's a restore-time session, not working-time session.
            Upon close, session will clean up packages you have not touched.
            </summary>
            <param name="lifetime"></param>
            <param name="dirPackages">The <c>Packages</c> dir. Note that it's not the product home dir but usually the <c>Packages</c> folder under it.</param>
            <param name="tasker">The async strategy.</param>
            <param name="centralcache">Optional central cache. If gives a non-NULL dir, and packages folder supports junctions, will use directory junctions to the central cache instead of the local backlog dir.</param>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.IsEnvironmentVariableForNoNugetValidation">
            <summary>0 lazy delayed, 1 yes, -1 no</summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.UnusedPackages">
            <summary>
            By default, <see cref="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.BacklogUnusedPackages" /> is called automatically when session is closed, so that the folder only had those packages mentioned in the session.
            By changing this value you can prevent this cleanup. The untouched packages are not removed, but are not validated either.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.BacklogDirectoryCleanupAsync">
            <summary>
            Cleans up old unused packages in the backlog folder. Do not terminated the session lifetime while running.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.BacklogUnusedPackages">
            <summary>
            This is done automatically when session is closed, but you can call it at any time as well. Adding more packages won't break things.
            All packages which were not mentioned in this session are hidden from the packages directory, to make sure they're not accidentally referenced without also adding a reference to the package.
            To cleanup the backlog folder of the very old packages, call <seealso cref="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.BacklogDirectoryCleanupAsync" /> (called by session async helpers automatically).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.LocalRestoreAsync(JetBrains.Util.Storage.Packages.NugetPackageFileItem,JetBrains.Util.OnError)">
            <summary>
            As the first stage of the local restore, tries to see if there's a potential location with already expanded package files.
            Fast track: executes always.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.ChooseExpandDirectoryCompression(JetBrains.Util.Storage.Packages.NugetPackageFileItem,JetBrains.Util.FileSystemPath,JetBrains.Util.ILogger)">
            <summary>
            For packages with effectively compressable content, might be worth setting the compressed attr on directory.
            Called when new expansion has been done for the package. Thus assume we've taken the lock for lengthy FS writes, and have gone to another thread.
            The directory should be the real dir (not the soft link source).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.EnsureValidExpandedAsync(JetBrains.DataFlow.Lifetime,JetBrains.Util.Storage.Packages.NugetPackageFileItem,JetBrains.Util.FileSystemPath,JetBrains.Util.dataStructures.Boxed{JetBrains.Util.Storage.Packages.LocalPackagesMeta.PackageRecord},System.Boolean,JetBrains.Util.FileSystemPath,JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.Threading.Tasks.TaskSemaphore,JetBrains.Util.OnError,JetBrains.Util.ILogger)">
            <summary>
            Validates that the Central Cache has a correct expand directory for this package, with all the files intact.
            NOTE: Central Cache directories might have either just the nupkg file (if it were only downloaded), or the full expanded package. Here we only need the latter.
            </summary>
            <param name="lifeSinglePackageExpand">Lifetime for this single package expansion act (not the session nor anything larger).</param>
            <param name="nupkg">The package.</param>
            <param name="dirExpand">The real expand dir, either the local one, or the central cache one in case of the central cache.</param>
            <param name="metabox">Expansion metadata for validation (obtained from the correct place, ie either local or ccache).</param>
            <param name="isWritable">When validation fails, try to fix it by writing/deleting files.</param>
            <param name="dirExpandedBacklog">Backlog folder, can use it to supply the missing files.</param>
            <param name="taskHost"></param>
            <param name="substantialDiskWriteSemaphore"></param>
            <param name="onerror">Reports encountered errors here.</param>
            <param name="logger"></param>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.IsNoNugetValidation(JetBrains.Util.ILogger)">
            <summary>
            Gets if we've gotten ourselves a flag to suppress all nuget validation
            </summary>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.MoveExtraPackagesToBacklog">
            <summary>
            Backlogs unused packages, so that there were no accidental references into them from around the solution.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.RegisterExpandedPackage(JetBrains.Util.Storage.Packages.NugetPackageFileItem,JetBrains.Util.FileSystemPath,System.String,JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.ValidatedAndExpanded)">
            <summary>
            Creates a <see cref="T:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.RestoredPackage" /> to return and caches it. Proper caching is why this method exists at all.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.TryGetMetadataRecordForPackage(JetBrains.Util.Storage.Packages.NugetPackageFileItem,JetBrains.Util.FileSystemPath,JetBrains.Util.Storage.Packages.LocalPackagesMeta)">
            <summary>
            Gets the record with metadata on package expansion, which allows to validate the actual package files on disk against what must be there in a valid expanded package.
            Metadata is looked up in two places: (1) on the expansion directory itself — this supports the case when packages are expanded into the central storage and then linked with junctions to actual package folders; (2) in the local-meta file in the Packages folder, which supports the case without junctions.
            </summary>
            <param name="pkgid">ID of the package to look for.</param>
            <param name="dirExpanded">The directory into which the package is expanded, if applicable. Looks for metadata on the directory itself, which is the case with the junctions way. This is the preferred location.</param>
            <param name="meta">The local-meta file from Packages, if available. Checked after the on-dir storage. Supposedly, they're the same.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.BacklogBehavior">
            <seealso cref="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.UnusedPackages" />
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.BacklogBehavior.BacklogUnusedPackagesOnClosingSession">
            <summary>
            When the session closes, all of the packages which are in the session's Packages dir and were not mentioned within the session are considered unused in the current layout and are moved to the Backlog location, so that they were not accidentally referenced in solution files.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.BacklogBehavior.LeaveUnusedPackages">
            <summary>
            When the session closes, all of the packages which are in the session's Packages dir and were not mentioned within the session are considered unused in the current layout, but are left AS IS. This is applicable when the same folder is reused by multiple unrelated sessions, and each session does not cover the whole set (like with test data).
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.CachedPackageFile">
            <summary>
            Returned when looking up a package in the central cache.
            Holds the lock while the lifetime is open.
            Allows to set a new entry to the cache.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.CachedPackageFile.NugetPackage">
            <summary>
            Gets the Nuget package, either the originally retrieved from cache, or after assigning the new value.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.CachedPackageFile.SetPackage(JetBrains.Util.Storage.Packages.NugetPackageFileItem)">
            <summary>
            Assigns a new package. Would be written to the cache when the lifetime cache ends.
            </summary>
            <param name="nupkgManuallyAssigned"></param>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.RestoredPackage.ExpandedFileCount">
            <summary>
            Gets the number of files in the expanded package. This includes the copy of the package file itself.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.RestoredPackage.ExpandedSize">
            <summary>
            Gets the number of bytes the package took after expanding. Note that this includes the package file itself, so that's at least double the package size if the parts were not compressed in the package, but usually even more.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.LocalRestoreNugetPackagesSession.RestoredPackage.IsExpandedAnew">
            <summary>
            Gets whether the package files had to be written (or rewritten).
            If all the files are already there and OK (same set, same size, same stamps) then this would be <c>False</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.NugetHelpers">
            <summary>
            Nuget package helpers which might be specific to build-related types, but are not specific to build semantic.
            </summary>
            <remarks>
              <para><c>NugetApplicationPackageConvention</c> — Nuget package layouts, locations, constants, etc for application shell aware needs.</para>
              <para><see cref="T:JetBrains.Util.Storage.Packages.NugetHelpers" /> — very generic Nuget helpers in the <c>Util</c>, not aware of Build nor Application Shell packages layout.</para>
              <para><c>NugetHelpersBuild</c> — Nuget services for supporting the Build infrasturcture and build operations not aware of the Application Shell packages.</para>
              <para><c>NugetHelpersShell</c> — Nuget services for working with the Application Shell packages.</para>
              <para><c>NugetApplicationPackageTasks</c> — Application Shell packages logic.</para>
            </remarks>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.NugetHelpers.ProgramDatabasePackageIdAppendix">
            <summary>
            Add to the package ID of the main package to get the ID of the Nuget package with the program database for that subplatform, separated with a dot.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.CreateOpcPartUri(JetBrains.Util.RelativePath)">
            <summary>
            Mimics Nuget's helper for turning paths into OPC Pack URIs.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.CreateSourceRepository(NuGet.ISettings)">
            <summary>
            Creates the source repo, with per-machine caching enabled.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.CreateSourceRepositoryNoMachineCache(NuGet.ISettings)">
            <summary>
            Creates the source repo, with per-machine caching skipped.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.FilterDependencySets(System.Collections.Generic.IEnumerable{NuGet.PackageDependencySet})">
            <summary>
            Restores the Nuget logic for filtering dependency sets by the target framework.
            Calling Nuget native API has a drawback of throwing exceptions when it finds surprising records in the Registry of the local machine, and also makes excessive allocations.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.FindPackage``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Gets the package by ID. A missing package is an error.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.FindPackageAndItsReferences``1(System.Collections.Generic.IEnumerable{``0},System.String,JetBrains.Util.OnError)">
            <summary>
            Gets the package by ID, plus all its references, transitively. A missing reference is an error.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.FindPackages``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the packages by ID. A missing package is an error.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.FindPackagesCore``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Predicate{System.String},JetBrains.Util.OnError)">
            <summary>
            Gets the package by ID, plus all its references, transitively. A missing reference is an error.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.FindPackagesWithSymbols``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            For a set of packages with binaries, tries to look up corresponding packages with symbols in the total packages set.
            </summary>
            <typeparam name="TPackage"></typeparam>
            <param name="packagesWithBinaries">Subset of binaries packages.</param>
            <param name="allpackages">The total set of packages to consider.</param>
            <returns>The set of found symbol packages.</returns>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.GetExpandedPackageDirectoryName(NuGet.IPackageName)">
            <summary>
            Name of the directory under <c>Packages</c> folder into which the package would be expanded.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.GetJetOrNugetEffectivePath(NuGet.IPackageFile)">
            <summary>
            Gets the effective path of the embedded file in the package.
            If the package follows the DotFiles folder convention, cuts this folder name. Otherwise, takes what Nuget thinks to be the effective path of the file.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.GetPackageFileName(JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem)">
            <summary>
            Gets the local name of the package file with the given ID and version.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.GetPackageFileName(NuGet.IPackageName)">
            <summary>
            Gets the local name of the package file with the given ID and version.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.MightHaveDependencyOn(JetBrains.Util.Storage.SimpleFileItem,System.String)">
            <summary>
            Fast-checks if the package has a dependency on another package.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.RetrievePackageCore(System.Func{System.Boolean,NuGet.IPackage},System.Object,JetBrains.Util.OnError)">
            <summary>
            Gets the package in a reliable way, working around problems like inability to retrieve bytes of the actually-returned package.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.RetrievePackageExact(JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Util.Storage.Packages.PackageIdentity,JetBrains.Util.OnError)">
            <summary>
            Gets the package in a reliable way, working around problems like inability to retrieve bytes of the actually-returned package.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.RetrievePackageExactDeep(JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Util.Storage.Packages.PackageIdentity,JetBrains.Util.OnError)">
            <summary>
            Gets the package in a reliable way, working around problems like inability to retrieve bytes of the actually-returned package.
            Also retrieves its references, recursively.
            Note that all the references must be specified by an exact version.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.RetrievePackageExactDeep(JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Util.Storage.Packages.PackageIdentity,System.Collections.Generic.IDictionary{JetBrains.Util.Storage.Packages.PackageIdentity,JetBrains.Util.Storage.Packages.NugetPackageFileItem},JetBrains.Util.OnError)">
            <summary>
            Gets the package in a reliable way, working around problems like inability to retrieve bytes of the actually-returned package.
            Also retrieves its references, recursively.
            Note that all the references must be specified by an exact version.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.SanitizePackageBuilder(NuGet.IPackageBuilder)">
            <summary>
            Reports all known package errors in a non-breaking fashion.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetHelpers.TryGetJetEffectivePath(NuGet.IPackageFile)">
            <summary>
            Gets the effective path of the embedded file in the package, by our convention, only from the <c>Lib</c> or <c>DotFiles</c> folders.
            If the package follows the DotFiles folder convention, cuts this folder name. Otherwise, takes what Nuget thinks to be the effective path of the file in the <c>Lib</c> folder.
            </summary>
            <returns>The effective path, and whether the file were within the Lib folder in our or Nuget-standard convention.</returns>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.NugetHelpers.ExtractedFileConflict.Candidates">
            <summary>
            All candidates conflicting over the path.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.NugetHelpers.ExtractedFileConflict.ChosenFile">
            <summary>
            The file which would be chosen for the output.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.Packages.NugetHelpers.ExtractedFileConflict.Path">
            <summary>
            When merging files from several packages, the relative path which several files are targeting.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.NugetHelpers.ExtractedFileConflict.FileInPackage.File">
            <summary>
            File, if known. As it will be holding all the file bytes for the whole operation duration, might be NULL and only certain file props might be set.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.NugetHelpers.ExtractedFileConflict.FileInPackage.FileSize">
            <summary>
            Must be set even if the file is not set.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.NugetHelpers.ExtractedFileConflict.FileInPackage.Path">
            <summary>
            <see cref="F:JetBrains.Util.Storage.Packages.NugetHelpers.ExtractedFileConflict.FileInPackage.File" />.<see cref="P:JetBrains.Util.Storage.SimpleFileItem.RelativePath" />
            Must be set even if the file is not set.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.NugetPackageFileItem">
            <summary>
            Represents an in-memory serializable Nuget package item, much like a <see cref="T:JetBrains.Util.Storage.SimpleFileItem" /> is for a file.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageFileItem.#ctor(JetBrains.Util.Storage.Packages.JetPackageManifest,JetBrains.Util.Storage.SimpleFileItem)">
            <summary>
            Identity ctor.
            </summary>
            <param name="manifest"></param>
            <param name="file"></param>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageFileItem.#ctor(JetBrains.Util.Storage.SimpleFileItem)">
            <summary>
            Reads manifest from the package file.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageFileItem.#ctor(NuGet.IPackage)">
            <summary>
            Reads the package and detaches from the instance.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageFileItem.#ctor(NuGet.IPackageBuilder)">
            <summary>
            A newly-created package item from a builder.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.NugetPackageFileItem.File">
            <summary>
            The package file stream contents.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.NugetPackageFileItem.Manifest">
            <summary>
            The manifest of the package.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageFileItem.Load">
            <summary>
            Loads the package with Nuget.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.NugetPackageIntrospection">
            <summary>
              <para>Uses alternative methods for introspecting Nuget packages, which can give up to 2x total speed and greatly reduces intermediate memory usage.</para>
              <para>Does not reference the Nuget itself, so is netfx35-friendly.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.EnumNugetEntriesDirectory``1(JetBrains.Util.Storage.SimpleFileItem,JetBrains.Util.Storage.Packages.NugetPackageIntrospection.FilterFlags,JetBrains.Util.Storage.Packages.NugetTargetFramework,System.Func{JetBrains.Util.Storage.Packages.NugetPartPaths,System.Boolean},System.Func{System.Collections.Generic.IList{JetBrains.Util.Storage.Packages.NugetPackageIntrospection.NugetEntry},``0})">
            <summary>
              <para>Uses direct ZIP directory access for retrieving Nuget content file items.</para>
              <para>Benefits:</para>
              <para>• Nuget uses the .NET OPC implementation which isn't so fast on itself, SharpZipLib feels considerably faster.</para>
              <para>• Nuget would copy all the streams before handing them out, while ZIP access allows to inftale on the fly.</para>
              <para>• Nuget does the shadow copying for streams of ALL files, in one gulp and before we filter them. Here we skip all but needed.</para>
            </summary>
            <param name="fiNugetPackage">The file item with the package itself (the <c>JetBrains.Application.SinceClr4.BuildScript.NugetPackageFileItem::File</c>).</param>
            <param name="λFilter">Optional filter to avoid getting unneeded file streams.</param>
            <param name="λEntries">Processing function. Called on the entries which passed the filter.</param>
            <param name="flags">Flags to skip certain items, for speed.</param>
            <param name="targetfx">
              <para>Allows to limit the extracted content items by a specific Target Framework.</para>
              <para>Not filtering (not <see cref="P:JetBrains.Util.Storage.Packages.NugetTargetFramework.IsFiltering" />): gets the union of all the content items for any frameworks; might yield items with the same <see cref="F:JetBrains.Util.Storage.Packages.NugetPartPaths.EffectivePathJet" /> (but different <see cref="F:JetBrains.Util.Storage.Packages.NugetPartPaths.PartPath" /> of course). This is the legacy behavior.</para>
              <para>Filtering (<see cref="P:JetBrains.Util.Storage.Packages.NugetTargetFramework.IsFiltering" />):</para>
              <para>• Illegal if not <see cref="F:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.FilterFlags.JetContentItemsOnly" />.</para>
              <para>• Returns content items for this specific framework only.</para>
              <para>• If limiting for the specific framework yields an empty list, falls back to the original behavior as if this were <c>NULL</c>. This is a compatibility fix to make sure that we're still able to support projects targeting the non-solution-standard fx version and their custom nuget references.</para>
              <para>The commonly-used value would be <see cref="F:JetBrains.Util.Storage.Packages.NugetTargetFramework.ToolsetDefault" />.</para>
            </param>
            <returns>The list of matching content items.</returns>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.EnumNugetEntriesStream(JetBrains.Util.Storage.SimpleFileItem,JetBrains.Util.Storage.Packages.NugetPackageIntrospection.FilterFlags,System.Action{JetBrains.Util.Storage.Packages.NugetPartPaths,System.IO.Stream},System.Func{JetBrains.Util.Storage.Packages.NugetPartPaths,System.Boolean})">
            <summary>
              <para>Uses direct ZIP stream access for retrieving Nuget content file items.</para>
              <para>Benefits:</para>
              <para>• Nuget uses the .NET OPC implementation which isn't so fast on itself, SharpZipLib feels considerably faster.</para>
              <para>• Nuget would copy all the streams before handing them out, while ZIP access allows to inftale on the fly.</para>
              <para>• Nuget does the shadow copying for streams of ALL files, in one gulp and before we filter them. Here we skip all but needed.</para>
            </summary>
            <param name="fiNugetPackage">The file item with the package itself (the <c>JetBrains.Application.SinceClr4.BuildScript.NugetPackageFileItem::File</c>).</param>
            <param name="λEntry">Processing function. Called for each item which passes all the filters. The stream is temporary and probably not seekable.</param>
            <param name="λFilter">Optional filter to avoid getting unneeded file streams.</param>
            <param name="flags">Flags to skip certain items, for speed.</param>
            <returns>The list of matching content items.</returns>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.GetJetContentFileItemsFast(JetBrains.Util.Storage.SimpleFileItem,System.Func{JetBrains.Util.Storage.Packages.NugetPartPaths,System.Boolean},JetBrains.Util.Storage.Packages.NugetTargetFramework)">
            <summary>
              <para>Uses direct ZIP access for retrieving Nuget content file items.</para>
              <para>Benefits:</para>
              <para>• Nuget uses the .NET OPC implementation which isn't so fast on itself, SharpZipLib feels considerably faster.</para>
              <para>• Nuget would copy all the streams before handing them out, while ZIP access allows to inftale on the fly.</para>
              <para>• Nuget does the shadow copying for streams of ALL files, in one gulp and before we filter them. Here we skip all but needed.</para>
            </summary>
            <param name="fiNugetPackage">The file item with the package itself (the <c>JetBrains.Application.SinceClr4.BuildScript.NugetPackageFileItem::File</c>).</param>
            <param name="λFilter">Optional filter to avoid getting unneeded file streams.</param>
            <param name="targetfx">If not specified, </param>
            <returns>The list of matching content items.</returns>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.GetJetContentFileItemsFast(JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem,System.Func{JetBrains.Util.Storage.Packages.NugetPartPaths,System.Boolean},JetBrains.Util.Storage.Packages.NugetTargetFramework)">
            <summary>
              <para>Uses direct ZIP access for retrieving Nuget content file items.</para>
              <para>Benefits:</para>
              <para>• Nuget uses the .NET OPC implementation which isn't so fast on itself, SharpZipLib feels considerably faster.</para>
              <para>• Nuget would copy all the streams before handing them out, while ZIP access allows to inftale on the fly.</para>
              <para>• Nuget does the shadow copying for streams of ALL files, in one gulp and before we filter them. Here we skip all but needed.</para>
            </summary>
            <param name="nupkg">The nuget package.</param>
            <param name="λFilter">Optional filter to avoid getting unneeded file streams.</param>
            <param name="targetfx">If not specified, </param>
            <returns>The list of matching content items.</returns>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.GetNugetManifestPartName(ICSharpCode.SharpZipLib.Zip.ZipFile,System.Object,JetBrains.Util.OnError)">
            <summary>
            Looks up the relationships file in the package, and reads the Nuget Manifest relationship target to learn the part which has the package manifest.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.GetPackageManifestFast(JetBrains.Util.Storage.SimpleFileItem)">
            <summary>
            Using Nuget's own package for getting a manifest results in copying the full package stream and then copying the metadata a few times. Try skipping all that.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.GetPackageManifestFast_SystemPackaging(JetBrains.Util.Storage.SimpleFileItem)">
            <summary>
            Using Nuget's own package for getting a manifest results in copying the full package stream and then copying the metadata a few times. Try skipping all that.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.GetPackageManifestFast_Zip(JetBrains.Util.Storage.SimpleFileItem)">
            <summary>
            Using Nuget's own package for getting a manifest results in copying the full package stream and then copying the metadata a few times. Try skipping all that.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.FilterFlags.JetContentItemsOnly">
            <summary>
            Only take those items for which <see cref="M:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.TryGetJetEffectivePath(JetBrains.Util.RelativePath)" /> is defined, i.e. those recognized as content items by our system.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.FilterFlags.DoNotSkipEmptyFolderFileMarker">
            <summary>
            Do not skip <see cref="F:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.PackageEmptyFileName">empty folder maker</see>.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.NugetEntry.CompressedLength">
            <summary>
            Gets the compressed length of the entry, if available.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.NugetEntry.IsNull">
            <summary>
            Allows to tell uninitialized structs, e.g. with TryGet methods.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.NugetEntry.UncompressedLength">
            <summary>
            Gets the uncompressed length of the entry without actually inflating the bytes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.NugetEntry.CreateFileItem">
            <summary>
            Inflates the part into an uncompressed copy in the memory.
            Uses the <see cref="F:JetBrains.Util.Storage.Packages.NugetPartPaths.EffectivePathJet" /> path.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.NugetEntry.CreatePartPathFileItem">
            <summary>
            Inflates the part into an uncompressed copy in the memory.
            Uses the full part path of the file, <see cref="F:JetBrains.Util.Storage.Packages.NugetPartPaths.PartPath" />.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.NugetEntry.ReadRandomAccessStream``1(System.Func{System.IO.Stream,``0})">
            <summary>
            Inflates the part on-demand. Prefer this method if you only need to peek into the head of the stream.
            Guarantees the stream has random-access capabilities, but this comes at a cost of doubled memory use. Call <see cref="M:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.NugetEntry.ReadSequentialStream``1(System.Func{System.IO.Stream,``0})" /> unless you need random access.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetPackageIntrospection.NugetEntry.ReadSequentialStream``1(System.Func{System.IO.Stream,``0})">
            <summary>
            Inflates the part on-demand. Prefer this method if you only need to peek into the head of the stream.
            The stream might be returned as sequential-only, depending on the ZIP options used.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.NugetPartPaths.EffectivePathJet">
            <summary>
            <see cref="M:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.TryGetJetEffectivePath(JetBrains.Util.RelativePath)" />.
            Might be undefined for some of the parts.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.NugetPartPaths.PartPath">
            <summary>
            The path equivalent of the Part URI in the OPC package.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.NugetTargetFramework">
            <summary>
            Specifies filtering by target framework when fast-extracting the nuget packages.
            The NULL value means the toolset-default targetfx should be used.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.NugetTargetFramework.DontFilter">
            <summary>
            Gets the union of all the content items for any frameworks; might yield items with the same <see cref="F:JetBrains.Util.Storage.Packages.NugetPartPaths.EffectivePathJet" /> (but different <see cref="F:JetBrains.Util.Storage.Packages.NugetPartPaths.PartPath" /> of course). This is the legacy behavior.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.NugetTargetFramework.ToolsetDefault">
            <summary>
            Filters by the netfx of <see cref="F:JetBrains.Util.ToolsetInfo.CurrentDefaultTargetFx" />, which is the default target netfx version for the managed projects in the solution.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.NugetTargetFramework.#ctor(System.Boolean,System.Runtime.Versioning.FrameworkName)">
            <summary>
            This weird combination is required so that the NULL value of the structure were the preferred omitted-default value (use current toolset).
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.PackageIdentity">
            <summary>
            Most like the <see cref="T:NuGet.PackageName" /> class, but with correct equality members implementation.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants">
            <summary>
            Defines some of the constants related to handling Nuget packages for subplatforms.
            Even though all of this functionality is NetFX4-specific and lives in higher assemblies, some of the constants must reside here to be shared.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.JetBrainsContentFilesFolder">
            <summary>
            Name of the folder within Nuget package files which we're to use for storing our generic content files by convention.
            This is not immediately visible to Nuget Core itself and prevents it from adding references to our DLLs from VS projects automatically. Instead, we'd add a custom .Targets file to manage what gets added and how.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.JetMetadataInApplicationPackageExt">
            <summary>
            Package part extension for the jet package metadata objects embedded into a subplatform package.
            The part contains a structured storage with a <c>SerializedValuesResolver</c> holding the components.
            The other half of the part local name is the package ID (no version included, for easier cleanup when extracting), and the folder is the main content folder.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.NugetLibFolder">
            <summary>
            The standard Nuget Lib folder name.
            <c>Constants::Lib</c> if we got a reference to Nuget.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.PackageEmptyFileName">
            <summary>
            Starting from nuget 2.0, use a file with the special name '_._' to represent an empty folder.
            <c>Constants::PackageEmptyFileName</c> if we got a reference to Nuget.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.SubplatformPlatformCoreShellPackageId">
            <summary>
            Name of the Nuget package which is the central/core package of the system, and is basically referenced by nearly every other package.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.IsPackageFileEffectivePathSuitableForManagedReference(JetBrains.Util.RelativePath)">
            <summary>
              <para>After content files are listed for the package (this means looking in the set folders, and stripping off their paths to make an effective path), checks whether this effective path look like this file could be used as a managed assembly or a managed assembly reference after it's installed.</para>
              <para>This allows to seamlessly skip content files shipped in subfolders if they're actually managed assemblies, for being inspected for cataloging etc.</para>
              <para>Also checks the file extension.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.TryGetJetEffectivePath(JetBrains.Util.RelativePath)">
            <summary>
            Gets the effective path of the embedded file in the package, by our convention, only from the <c>Lib</c> or <c>DotFiles</c> folders.
            If the package follows the DotFiles folder convention, cuts this folder name. Otherwise, takes what Nuget thinks to be the effective path of the file in the <c>Lib</c> folder.
            </summary>
            <returns>The effective path, and whether the file were within the Lib folder in our or Nuget-standard convention.</returns>
        </member>
        <member name="T:JetBrains.Util.Storage.SimpleFileItemPackageFile">
            <summary>
            Adapts a <see cref="T:JetBrains.Util.Storage.SimpleFileItem" /> to be exposed as a package file.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.SimpleFileItemPackageFile.GetOsDependentPath">
            <summary>
            It is critical to return forward slashes on unix.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple">
            <summary>
            A Structured Storage implementation for fast in-memory operations in the "write once, read many" fashion.
            The format is NOT compatible with any standard readers.
            Not all possible operations are implemented.
            The supported operations are: write a newly-created stream (hence, one at a time); read an existing stream (any number). Others might be suboptimal or unavailable.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord">
            <summary>
            Represents a filesystem tree node for either a storage or a stream (see <see cref="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.ContentLength" /> to tell).
            The record length in <see cref="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.SizeOfRecord" /> does not include the last <see cref="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.wsz" /> field, because it's just a marker.
            Immediately follwed by the node name (would have a zero char, even if empty), <see cref="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.SizeOfRecord" /> from the record RVA.
            After that comes the content bytes, <see cref="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.ContentLength" /> long unless it's <see cref="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.StgContentLengthValue" />, at Record RVA + <see cref="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.SizeOfRecord" /> bytes + (<see cref="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.CchName" /> + 1 zero-terminator) chars (!).
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.StgContentLengthValue">
            <summary>
            The special value in the <see cref="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.ContentLength" /> field if the node represents a storage rather than a stream. Note that there can be a storage without any children, yet existing.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.RvaParent">
            <summary>
            RVA to the parent.
            Can be NULL on the root storage, or if the node has been deleted from the tree (=unlinked).
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.RvaPrevSibling">
            <summary>
            Prev sibling, or NULL for the first child or a node without a parent.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.RvaNextSibling">
            <summary>
            Next sibling, or NULL for the first child or a node without a parent.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.RvaFirstChild">
            <summary>
            First child, or NULL if it's a stream, or a storage with zero children.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.RvaLastChild">
            <summary>
            Last child, or NULL if it's a stream, or a storage with zero children.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.ContentLength">
            <summary>
            For a stream node, the content length of that stream.
            For a storage node, the special <see cref="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.StgContentLengthValue" /> value.
            That's how we tell them.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.CchName">
            <summary>
            Length of the string, in chars, not including the terminating zero (which must also be written).
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.BankSwitchingStructuredStorageSimple.NodeRecord.wsz">
            <summary>
            Not in the structure! Just marks the beginning of the string, UTF-16LE, zero-terminated (ready for use in the runtime).
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.ZipStructuredStorage">
            <summary>
            Implements a Structured Storage over ZIP file.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ZipStructuredStorage.EscapeRules">
            <summary>
            ASCII range, XML-safe and printable-safe and filename-safe.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ZipStructuredStorage.CreateOnStream(JetBrains.DataFlow.Lifetime,System.IO.Stream)">
            <summary>
            Creates a new OPC structured storage in a stream.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ZipStructuredStorage.OpenStream(System.IO.Stream,System.Action{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage})">
            <summary>
            Opens the stream for reading an OPC storage in it.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ZipStructuredStorage.OpenStream(JetBrains.DataFlow.Lifetime,System.IO.Stream)">
            <summary>
            Opens the stream for reading a ZIP storage in it.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ZipStructuredStorage.OpenStream``1(System.IO.Stream,System.Func{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage,``0})">
            <summary>
            Opens the stream for reading an OPC storage in it.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ZipStructuredStorage.TreeLeaf.CacheStream">
            <summary>
            When writing new content, gets kept here until we commit to the ZIP.
            For if we do a full commit after each write, it gets to rebuild the whole ZIP on each iteration, and feels O(n2) on writes.
            And if we submit it to ZIP and do not commit, it won't return the newly-submitted streams when opening entries. So we got to keep them in own cache for a while.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ZipStructuredStorage.TreeLeaf.ZipEntry">
            <summary>
            The originating ZIP entry of this stream, if created over an unmodified stream from the loaded storage.
            Keeps the index (for fast reading) and the entry transport name. When opening by entry, only uses the index when it still matches the name, ie is a safe bet.
            For modified or newly-created entries, we keep their streams until we are ready to commit the archive, so this will be NULL.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ZipStructuredStorage.TreeNode.ZipEntry">
            <summary>
            Set to an entry if this node has been created from a real zip directory entry, or to NULL if it's been created because some child entry exists for a dir/file.
            Used to delete the entry.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage">
            <summary>
            Wraps a native COM storage with the managed <see cref="T:JetBrains.Util.Storage.StructuredStorage.IStructuredStorage" /> interface.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Interop.WinApi.Declarations.Interfaces.IStorage,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.ImplementationFlags)">
            <summary>
            Wraps a native COM storage with the managed <see cref="T:JetBrains.Util.Storage.StructuredStorage.IStructuredStorage" /> interface.
            </summary>
            <param name="lifetime">The lifetime to deterministically close all of the storages and streams.</param>
            <param name="storage">The native storage.</param>
            <param name="implflags">If this storage implementation requires name mangling.</param>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.#ctor(JetBrains.Util.RelativePath,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.OpenStoragesPool)">
            <summary>
            Internal ctor for substorages.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.ComStructuredStorageStream.#ctor(JetBrains.Util.RelativePath,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.OpenStoragesPool,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.OpenOrCreate)">
            <summary>
            The stream is only opened when calling Open, to avoid keeping the COM reference open for too long.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.ImplementationFlags.MangleLongNamesDownTo31">
            <summary>
            Docfile impl can't have names longer than 31, mangling and table lookup required.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.ImplementationFlags.NeverWriteNonemptyStreams">
            <summary>
            ITSS impl can't write nonempty streams. Have to be cloned if opened for writing.
            // TODO: actually, it's surfaced that ITSS can't actually seek for writing, not write to already-existing streams. Deal with that if such a case surfaces.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.ImplementationFlags.IsOpeningSubStoragesForWriting">
            <summary>
            Means substorages should be opened with <see cref="F:JetBrains.Interop.WinApi.Declarations.Constants.STGM.STGM_READWRITE" /> instead of <see cref="F:JetBrains.Interop.WinApi.Declarations.Constants.STGM.STGM_READ" />.
            ITSS ignores these flags, but docfiles impl won't open child storages for writing under a readonly storage.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.NameMangler">
            <summary>
            COM compound files only handle 31 chars of name length. Have to mangle anything that is longer than that.
            The full names will be stored in the property storage.
            Note that the character set is quite permissive, nearly no mangling is needed.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.NameMangler.MaxUnmangledLength">
            <summary>
            Technical limit is 31, but 31-long names will be an additional indication that they have been mangled
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.NameMangler_PropertyPerName">
            <summary>
            The original impl.
            Looks up mangled names right in the property storage stream, writes each new mangling directly to the stream.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.NameMangler_SingleList">
            <summary>
            Gen 2 impl. Stores the single name mangling list in the property storage stream.
            Reads the stream when first needed, saves (if modified) before closing the storage.
            Does the lookups and modifications in an in-memory dictionary.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.NameMangler_SingleList.myMapMangledToUnmangled">
            <summary>
            NULL until it's actually read from the persisted form, upon the first read/write call.
            Written when the lifetime ends.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.NameMangler_SingleList.SerializedNamesSeparatorChar">
            <summary>
            A char which separates names in the mangled names table. Must not be valid for file names.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.NameMangler_SingleList.Serialize">
            <summary>
            Serializes the name mapping before closing the storage, in case there were any modifications.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.OpenStorageRecord.myOpenStorage">
            <summary>
            NULLed when closed.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.OpenStorageRecord.myLocks">
            <summary>
            Ownership locks on this storage.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.OpenStorageRecord.OpenStorage">
            <summary>
            The open physical storage object.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.OpenStorageRecord.CloseComObjectsCore">
            <summary>
            A separate func, to avoid capturing anything in a closure, fuck csc.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.OpenStorageRecord.Path">
            <summary>
            Path, starting from the root storage we've opened (not including it).
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.OpenStoragesPool">
            <summary>
            Pools opening the physical <see cref="T:JetBrains.Interop.WinApi.Declarations.Interfaces.IStorage" /> objects. Does not keep them opened once and forever.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.OpenStoragesPool.myOpenStorages">
            <summary>
            Sorted list of open storages.
            Topmost first, deeper go next.
            Usually only as large as substorages depth.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.OpenStoragesPool.CollectGarbage">
            <summary>
            Close the storages which have no locks.
            They're kept open for some time to avoid re-opening the same storage with each next call.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.OpenStoragesPool.OpenStorage(JetBrains.Util.RelativePath,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.OpenOrCreateOrTryOpen)">
            <summary>
            Opens the storage. Does not add the lock (will be GCed when <see cref="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorage.OpenStoragesPool.CollectGarbage" /> is called or another storage is opened, so for onstack use only).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.CreateDiskFile(JetBrains.Util.FileSystemPath,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ComStorageFormat,System.Action{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage})">
            <summary>
            Creates a new empty storage on a disk file, and fills it with a user callback.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.CreateMemoryStream(JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ComStorageFormat,System.Action{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage})">
            <summary>
            Creates a new empty storage, fills it with a user callback, and returns it as a memory stream.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.CreateOnLockBytes(JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ComStorageFormat,System.Action{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage})">
            <summary>
            Creates a new empty storage on user-supplied COM resizable memory exposed as <see cref="T:JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes" />.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.CreateOnLockBytes(JetBrains.DataFlow.Lifetime,JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ComStorageFormat)">
            <summary>
            Creates a new empty storage on user-supplied COM resizable memory exposed as <see cref="T:JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes" />, and fills it with a user callback.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.CreateOnStream(JetBrains.DataFlow.Lifetime,System.IO.Stream,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ComStorageFormat)">
            <summary>
            Creates a new empty storage.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ModifyLockBytes(JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ComStorageFormat,System.Action{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage})">
            <summary>
            Opens an already-initialized storage in user-supplied COM resizable memory exposed as <see cref="T:JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes" />, and processes it with a user callback (for just reading and writing).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.OpenDiskFile``1(JetBrains.Util.FileSystemPath,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ComStorageFormat,System.Func{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage,``0})">
            <summary>
            Opens an already-initialized storage in a disk file, and processes it with a user callback (for just reading, or possibly modification).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.OpenLockBytes(JetBrains.DataFlow.Lifetime,JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ComStorageFormat,JetBrains.Util.Storage.StructuredStorage.StreamOpenFlags.ReadWrite)">
            <summary>
            Opens an already-initialized storage in user-supplied COM resizable memory exposed as <see cref="T:JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes" />, and processes it with a user callback (for just reading, or possibly modification).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.OpenStream(JetBrains.DataFlow.Lifetime,System.IO.Stream,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ComStorageFormat)">
            <summary>
            Opens an already-initialized storage in a stream of some sort (for just reading, or possibly modification).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ReadLockBytes``1(JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ComStorageFormat,System.Func{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage,``0})">
            <summary>
            Opens an already-initialized storage in user-supplied COM resizable memory exposed as <see cref="T:JetBrains.Interop.WinApi.Declarations.Interfaces.ILockBytes" />, and processes it with a user callback (for just reading).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ReadStream``1(System.IO.Stream,JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ComStorageFormat,System.Func{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage,``0})">
            <summary>
            Opens an already-initialized storage in a stream of some sort, and processes it with a user callback (for just reading, or possibly modification).
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ComStorageFormat.ComCompoundFile">
            <summary>
            System-implemented, no compression, 31-char names only.
            Typical DOC, MSI, XLS, younameit.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.ComStructuredStorages.ComStorageFormat.InfoTechStorage">
            <summary>
            InfoTech storage implementation from IE4, long filenames, decent compression.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.DiskFolderStructuredStorage">
            <summary>
            Represents a disk folder as a structured storage.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.INamedItem">
            <summary>
            A common basic interface for accessing items with a name.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.StructuredStorage.INamedItem.Name">
            <summary>
            The item name.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.IStructuredStorage">
            <summary>
              <para>Means for storing hierarchical data within a single object, similar to COM Structured Storage.</para>
              <para>Semantially, a storage is like a folder, and a stream is like a file.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.StructuredStorage.IStructuredStorage.Storages">
            <summary>
            Child storages, just like subfolders.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.StructuredStorage.IStructuredStorage.Streams">
            <summary>
            Streams of this storage, just like child files in a folder.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.StructuredStorage.IStructuredStorageCollection`1.Item(System.String)">
            <summary>
            Gets an existing item by its name.
            Throws an exception if the item is missing.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.IStructuredStorageCollection`1.Create(System.String)">
            <summary>
            Creates a new item filed under the given unique name.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.IStructuredStorageCollection`1.TryGetItem(System.String)">
            <summary>
            Gets an existing item by its name, or <c>Null</c> if there is no item with such a name.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.IStructuredStorageEx.CopyTo(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage,JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <summary>
            Copies the contents of one storage into another.
            Note that a clone of <paramref name="thіs" /> itself is not added under <paramref name="dest" />, just the clones of its child storages/streams.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable">
            <summary>
            Allows an object to support serialization into an <see cref="T:JetBrains.Util.Storage.StructuredStorage.IStructuredStorage" />. To support deserialization, implement a constructor taking a storage as the single parameter.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <summary>
            Populates an <see cref="T:JetBrains.Util.Storage.StructuredStorage.IStructuredStorage" /> with the data needed to serialize the target object.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.PackageStructuredStorage">
            <summary>
            Implements a Structured Storage over the OPC Package, such as a ZIP file package.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.PackageStructuredStorage.CreateMemoryStream(System.Action{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage})">
            <summary>
            Creates a new OPC structured storage, writes it into a memory stream, and returns that stream.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.PackageStructuredStorage.CreateOnStream(JetBrains.DataFlow.Lifetime,System.IO.Stream)">
            <summary>
            Creates a new OPC structured storage in a stream.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.PackageStructuredStorage.OpenStream(System.IO.Stream,System.Action{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage})">
            <summary>
            Opens the stream for reading an OPC storage in it.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.PackageStructuredStorage.OpenStream(JetBrains.DataFlow.Lifetime,System.IO.Stream)">
            <summary>
            Opens the stream for reading an OPC storage in it.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.PackageStructuredStorage.OpenStream``1(System.IO.Stream,System.Func{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage,``0})">
            <summary>
            Opens the stream for reading an OPC storage in it.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.PackageStructuredStorage.GetPartPath(System.IO.Packaging.PackagePart)">
            <summary>
            Use this method for getting the relative path for the part. Don't use <see cref="P:System.IO.Packaging.PackagePart.Uri" /> directly.
            </summary>
            <param name="part"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.PackageStructuredStorage.GetPartUri(JetBrains.Util.RelativePath)">
            <summary>
            The inverse to <see cref="M:JetBrains.Util.Storage.StructuredStorage.PackageStructuredStorage.GetPartPath(System.IO.Packaging.PackagePart)" />. Serves turning the path into the URI correctly.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.RuntimeStructuredStorage">
            <summary>
            A set of runtime objects holding all the data, not backed with any media.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.StreamOpenFlags.ReadWrite">
            <summary>
            Compatible with <see cref="T:System.IO.FileAccess" />.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Storage.StructuredStorage.StreamOpenFlags.StreamOpenFlags">
            <summary>
            The logical flags for opening streams, with all the options usually available in CreateFile.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.StreamOpenFlags.StreamOpenFlags.IsValidCombination(JetBrains.Util.OnError)">
            <summary>
            Checks if the flags are compatible.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.StructuredStorageHelpers.EmptyNameEscapeString">
            <summary>
            Substitutes an empty string when making a valid name. Has characters so that escaping any other names with our algorithm could not match it.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.StructuredStorageHelpers.EscapeToValidName(System.String)">
            <summary>
            Given a candidate stream/storage name, applies escaping so that it fit with <see cref="M:JetBrains.Util.Storage.StructuredStorage.StructuredStorageHelpers.IsNameValid(System.String,JetBrains.Util.OnError)" />.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.StructuredStorageHelpers.ReverseEscapeToValidName(System.String)">
            <summary>
            Reverses the effect of <see cref="M:JetBrains.Util.Storage.StructuredStorage.StructuredStorageHelpers.EscapeToValidName(System.String)" />.
            Note that this MUST NOT be applied to strings which didn't undergo <see cref="M:JetBrains.Util.Storage.StructuredStorage.StructuredStorageHelpers.EscapeToValidName(System.String)" /> because the escaping is only optional; you cannot readily detect if the name were escaped or not. For each storage, it should be decided by its author if names within are freehand outer-world strings and they should be escaped, or not.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.StructuredStorages.DefaultStorageFormat">
            <summary>
            The default for creating a new stream if the format is not explicitly specified.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.StructuredStorages.PublicFilesPreferredFormat">
            <summary>
            The preferred format for publicly-exposed files for which in-system performance is not as critical as readability with a wider set of tools.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.StructuredStorages.UniversalStorageExtension">
            <summary>
            For writing storage files in any of the supported formats, if we're not fixing its format but suppose autodetection.
            Use this rather than OPC, ITS, DOC etc.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.StructuredStorages.CreateMemoryStream(System.Action{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage},System.Nullable{JetBrains.Util.Storage.StructuredStorage.StructuredStorages.Format})">
            <summary>
            Creates a new structured storage, writes it into a memory stream, and returns that stream.
            The format specification is optional. If omitted, uses <see cref="F:JetBrains.Util.Storage.StructuredStorage.StructuredStorages.DefaultStorageFormat" />.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.StructuredStorages.CreateOnStream(System.IO.Stream,System.Action{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage},System.Nullable{JetBrains.Util.Storage.StructuredStorage.StructuredStorages.Format})">
            <summary>
            Creates a new structured storage, writes it into the given stream.
            The format specification is optional. If omitted, uses <see cref="F:JetBrains.Util.Storage.StructuredStorage.StructuredStorages.DefaultStorageFormat" />.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.StructuredStorages.OpenStream``1(System.IO.Stream,System.Func{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage,``0},System.Nullable{JetBrains.Util.Storage.StructuredStorage.StructuredStorages.Format})">
            <summary>
            Opens a structured storage on an existing stream.
            The format specification is optional. If omitted, autodetects format by the stream header.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.StructuredStorages.OpenStream(System.IO.Stream,System.Action{JetBrains.Util.Storage.StructuredStorage.IStructuredStorage},System.Nullable{JetBrains.Util.Storage.StructuredStorage.StructuredStorages.Format})">
            <summary>
            Opens a structured storage on an existing stream.
            The format specification is optional. If omitted, autodetects format by the stream header.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.StructuredStorage.StructuredStorages.OpenStream(JetBrains.DataFlow.Lifetime,System.IO.Stream,JetBrains.Util.OnError,System.Nullable{JetBrains.Util.Storage.StructuredStorage.StructuredStorages.Format})">
            <summary>
            Opens a structured storage on an existing stream.
            </summary>
            <param name="lifetime">Lifetime for using the storage object.</param>
            <param name="stream"></param>
            <param name="onerror"></param>
            <param name="formatIfKnown">Supports autodetection of the format by the storage header, but also allows to specify it manually.</param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.StructuredStorages.Format.OpenPackagingConventions">
            <summary>
            ECMA-376 OpenXML, 1st Edition, Part 2: Open Packaging Conventions (OPC). Based on ZIP.
            The format of the new docx, xlsx, xps, vsix, nuget, etc files. A successor for COM Compound Files.
            Uses the managed implementation from <see cref="T:System.IO.Packaging.ZipPackage" />, which has some impact due to the intermediate data storages in .NET Isolated Storage. A native implementation is available, but it requires newer Windows systems and is thus not used.
            Viewer: any ZIP viewer.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.StructuredStorages.Format.ComCompoundFiles">
            <summary>
            The classical implementation of the COM Structured Storage, the COM Compound Files binary format, aka DocFile format.
            The format of the doc, xls, msi, etc. Uses the Windows built-in COM implementation over <see cref="T:JetBrains.Interop.WinApi.Declarations.Interfaces.IStorage" />. Technically, does not support paths longer than 31 char in utf16, so external long names support has been layered over it.
            Viewer: FAR, or any other docfile viewer.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.StructuredStorages.Format.InfoTechStorageSystem">
            <summary>
            The InfoTech Storage System, as introduced with IE4 and used for CHM (compiled HTML help) and ITS file formats.
            Exposes the same COM Structured Storage <see cref="T:JetBrains.Interop.WinApi.Declarations.Interfaces.IStorage" /> interface, supports long names internally and has decent compression.
            Viewer: FAR, or any other CHM file viewer like HelpwareFAR.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.StructuredStorage.StructuredStorages.Format.Zip">
            <summary>
            Plain zip file
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.IInMemoryStream.GetBufferFromPosition(System.Int64,System.IO.SeekOrigin,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="startPosition"></param>
            <param name="origin"></param>
            <param name="needBytes">Minimum byte count what we expect</param>
            <param name="avalableBytes">Avalable bytes. It is more or equal then needBytes</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Storage.IInMemoryStream.GetBufferEndAtPosition(System.Int64,System.IO.SeekOrigin,System.Int32,System.Int32@)">
            <summary>
            Return pointer to buffer
            Return value + <see cref="!:avalableBytes"/> points at <see cref="!:endOffset"/>
            </summary>
            <param name="endOffset"></param>
            <param name="origin"></param>
            <param name="needBytes">Minimum byte count what we expect</param>
            <param name="avalableBytes">Avalable bytes. It is more or equal then needBytes</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Util.Storage.SimpleFileItem">
            <summary>
            Base class for artifacts representing a simple file. Can be realized onto disk by request, but does not have a “path” outside the step which requests it be written on disk.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.SimpleFileItem.#ctor(JetBrains.Util.RelativePath,JetBrains.Util.dataStructures.ChunkedMemoryStream)">
            <summary>
            Identity ctor.
            </summary>
            <param name="relativePath">
              <para>The file name of this file item. Might also be placed in a subfolder.</para>
              <para>Must not be an up-going relative path.</para>
            </param>
            <param name="fileContent">The byte content of the file. Must be an immutable stream, will be frozen by the ctor.</param>
        </member>
        <member name="M:JetBrains.Util.Storage.SimpleFileItem.#ctor(JetBrains.Util.Storage.SimpleFileItem)">
            <summary>
            Clone ctor. Most useful for typed inheritors.
            </summary>
            <param name="sample"></param>
        </member>
        <member name="M:JetBrains.Util.Storage.SimpleFileItem.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <summary>
            Deserialiation ctor.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.SimpleFileItem.ContentHash">
            <summary>
            Lazily-computed file content hash, for quickly comparing file contents.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Storage.SimpleFileItem.FileContent">
            <summary>
              <para>The byte content of the file. This stream is frozen, initially positioned at the beginning, and does not share its current position with other callers.</para>
            </summary>
            <remarks>A shallow clone is created for each caller. This means that (a) callers don't affect each other's stream positions, (b) there is a slight memory penalty for creating a small wrapper object on each call, and (c) the full contents of the underlying buffers are not cloned but reused immutably.</remarks>
        </member>
        <member name="P:JetBrains.Util.Storage.SimpleFileItem.RelativePath">
            <summary>
              <para>The file name of this file item. Might also be placed in a subfolder.</para>
              <para>Must not be an up-going relative path.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.SimpleFileItem.AsAnotherPath(JetBrains.Util.RelativePath)">
            <summary>
            Returns a clone which shares the content stream, but uses a different file path.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.SimpleFileItem.AsAnotherPath(System.Func{JetBrains.Util.RelativePath,JetBrains.Util.RelativePath})">
            <summary>
            Returns a clone which shares the content stream, but uses a different file path.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.SimpleFileItem.ComputeHash(System.IO.Stream)">
            <summary>
            Exposes the function which is used for computing <see cref="P:JetBrains.Util.Storage.SimpleFileItem.ContentHash" /> over the file content.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.SimpleFileItem.CreateFromDisk(JetBrains.Util.FileSystemPath)">
            <summary>
              <para>Creates an in-memory file item from a physical disk file.</para>
              <para>When the read completes, the created file item has no connection with the disk file. The latter can be modified or deleted.</para>
            </summary>
            <param name="path">Path to the disk file to be read. Must exist as a file. Its local name will be used as the name of the file item.</param>
        </member>
        <member name="M:JetBrains.Util.Storage.SimpleFileItem.CreateFromStream(JetBrains.Util.RelativePath,System.Action{System.IO.Stream})">
            <summary>
            Creates a new file by writing the content into a stream.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Storage.SimpleFileItemEx.RealizeOnDisk(JetBrains.Util.Storage.SimpleFileItem,JetBrains.DataFlow.Lifetime,JetBrains.Util.IWorkingDirectory)">
            <summary>
            Temporarily realizes the file item as a physical disk file.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Storage.SimpleFileItemEx.FileCheck.SkipContentHashCheck">
            <summary>
            Does not read the file content from disk to make sure its hash matches that of the in-memory copy.
            Not recommended for the real installation, but can be used to speed up in some simple cases like PWC pre-extraction.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Text.IdentifierMatcherAnyOrder.MakeBigraph(JetBrains.Util.PersistentMap.UnsafeIntArray,System.Int32,System.Char*,JetBrains.Util.PersistentMap.UnsafeIntArray,System.Char*)">
             <summary>
             This method calculate for each pattern character the list of possible indices of input string.
             </summary>
             <param name="graph">
             The resulting graph.
             For example, for input string "pj ppe" and pattern ppe it looks like as follow
             Note: there is not zeroing memory of all graph for performance reasons. g means that in that part of array garbage is located.
             -1 means end of list.
             | input index   | 0   | 1   | 2   | 3   | 4   | 5   |
             | input char    | p   | j   |     | p   | p   | e   |
             | ------------- | --- | --- | --- | --- | --- | --- |
             | p             | 0   | 3   | -1  | g   | g   | g   |
             | p             | 0   | 3   | 4   | -1  | g   | g   |
             | e             | 5   | -1  | g   | g   | g   | g   |
            
             </param>
             <param name="n">length of input</param>
             <param name="lowerText">the pointer to lowered input text</param>
             <param name="humps">the unsafe array of humps indices.</param>
             <param name="textData">the pointer to original input text</param>
             <returns>if corresponding character in input string is found for each character in pattern.</returns>
        </member>
        <member name="M:JetBrains.Util.Text.IdentifierMatcherAnyOrder.FindMatchingIndicesInCorrectOrder(JetBrains.Util.PersistentMap.UnsafeIntArray,System.Int32,JetBrains.Util.PersistentMap.UnsafeIntArray,JetBrains.Util.PersistentMap.UnsafeIntArray,JetBrains.Util.PersistentMap.UnsafeIntArray)">
             <summary>
             This method calculated best matching indices of input string to pattern using dynamic programming when there is guarantee that 
             match with correct indices exist.
             </summary>
             <param name="bigraph">the matrix of possible corresponding chars of input string to pattern (see detailed description above)</param>
            <param name="inputLength">input lenght</param>
             <param name="mt">mt is resulting array of input length </param>
             <param name="isHumpLookup">hump lookup for input string</param>
             <param name="dynMatrix">
             <code>
             This is externally provided storage for dynamics.
             This array threaded as matrix with row count = pattern length, column count = input length.
             For example, the following matrix is calculated for pattern ppe and input string "pj ppe"
             h = humpScore = 10
             s = nonHumpScore = 1
             c = letter count score = 100000 - fake scoring for ensure that every symbol of input is corresponding to character of input text
             path direction is determined by the sign of score:
                   Negative = maximal score taken from skipping this character of input string.
                   Positive = maximal score taken from matching this character of input string.
            
              | input index   | 0    | 1   | 2   | 3      | 4       | 5        |
              | input char    | p    | j   |     | p      | p       | e        |
              | ------------- | ---  | --- | --- | ---    | ---     | ---      |
              | p             | -c-h | c+h | c+h | -c-h   | c+h     | c+h      |
              | p             | 0    | 0   | 0   | -2c-2h | -2c-h-s | 2c+h+s   |
              | e             | 0    | 0   | 0   | 0      | 0       | 3c+1h+2s |
             </code>
             </param>
        </member>
        <member name="T:JetBrains.Util.Text.StringAbbreviator`1">
            <summary>
            Creates short abbreviated names for the entities.
            Treats just string length.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Text.StringAbbreviator`1.Run(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.String},System.Int32)">
            <summary>
            Produces abbreviated names for the given set of items.
            </summary>
            <param name="items">The list of items to process.</param>
            <param name="FItemName">The way of getting the item names.</param>
            <param name="nChars">Max number of characters allowed in the output.</param>
        </member>
        <member name="M:JetBrains.Util.Text.StringAbbreviator`1.IsCaps(System.Char)">
            <summary>
            Tells whether the char is CAPS, in our terms.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Text.StringAbbreviator`1.CreateData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initial data.
            Just limits all items to the given maxlen (at most).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Text.StringAbbreviator`1.GetDefaultAbbreviation(JetBrains.DataFlow.PropertyBag)">
            <summary>
            Take <see cref="F:JetBrains.Util.Text.StringAbbreviator`1.myCharsLimit" /> chars at most (this includes as many caps as possible).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Text.StringAbbreviator`1.GetNameParts(`0)">
            <summary>
            Gets the item name, splits it into parts by the Caps.
            Each part is a property bag.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Text.StringAbbreviator`1.GetResult">
            <summary>
            Reverses the internal map to make it item-to-name.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Text.StringAbbreviator`1.ResolveConflicts_ChooseUniqueChars">
            <summary>
            When shortening the abbreviations, we've taken the first chars from each capsed part.
            Try taking some non-first chars instead, if they help making the abbr unique.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Text.StringAbbreviator`1.ResolveConflicts_DisambigChars">
            <summary>
            Appends disambig chars to the end of the abbreviation, as a last resort.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Text.WildcardIdentifierMatcher.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Create wildcard identifier mather. Can be used together with * and ? to create exact matches
            </summary>
            <param name="wildCardPattern">the wildcard pattern for </param>
            <param name="caseSensitive"></param>
            <param name="originalPattern">Unescaped pattern value with quotes to ability create correct clones with Identifier matchers factories.</param>
        </member>
        <member name="F:JetBrains.Util.ToolsetInfo.CurrentDefaultTargetFx">
            <summary>
            Gets the default target netfx version for the managed projects in the solution, unless overridden by their specific needs (like supporting newer VS versions).
            This is the default Nuget package content extraction framework.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ToolsetInfo.CurrentDevToolset">
            <summary>
            Gets the VS version of the main toolset currently used for developing the ReSharper Ultimate family of products.
            This is the default value for Visual Studio version, MSBuild version, and so on.
            </summary>
        </member>
        <member name="T:JetBrains.Util.ReinterpretCast">
            <summary>
            In a generic method, allows to reinterpret-cast a value type to the matching generic parameter type without boxing it.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ReinterpretCast.ValueTypeOrNullable``2(``0)">
            <summary>
            Call on POD structs only!
            Reinterpret-casts types bluntly.
            </summary>
        </member>
        <member name="T:JetBrains.Util.IEquatableList`1">
            <summary>
            A list whose <see cref="M:System.Object.Equals(System.Object)"/> compares the items in their exact sequence (<see cref="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>).
            </summary>
        </member>
        <member name="T:JetBrains.Util.EquatableList`1">
            <summary>
            A list whose <see cref="M:System.Object.Equals(System.Object)"/> compares the items in their exact sequence (<see cref="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>).
            </summary>
        </member>
        <member name="T:JetBrains.Util.CommandLineBuilderJet">
            <summary>
            Mimics the MSBuild's <c>CommandLineBuilder</c> by its API over our <see cref="T:JetBrains.Util.CommandLineUtil" /> so that to avoid references to MSBuild utils.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CommandLineBuilderJet.AppendParameterWithQuoting(System.String)">
            <summary>
            Appends a separate command line parameter, quoting it if required for consistent parsing.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CommandLineBuilderJet.op_Implicit(JetBrains.Util.CommandLineBuilderJet)~System.String">
            <summary>
            Turns into a command line string.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Formats.AsmConfigFile.AssemblyBindingRedirections">
            <summary>
            Produces the default assembly binding redirections for a product assembly.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Formats.AsmConfigFile.Attr">
            <summary>
            Attribute names.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Formats.AsmConfigFile.Elem">
            <summary>
            Element names.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Formats.AsmConfigFile.Nsp">
            <summary>
            Namespace aliases.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Formats.AsmConfigFile.Xmlns">
            <summary>
            XML Namespaces.
            </summary>
        </member>
        <member name="T:JetBrains.Util.ImmutableAttribute">
            <summary>
            Indicates that this class/property is immutable (you can't change its inner state with field assignments, setters, indexers, method calls an so on) an therefore safe for multithreaded usage.
            If certain methods of class are thread-unsafe (e.g. iterators in synchronized dictionaries), you can annotate this methods with <see cref="T:JetBrains.Util.ThreadUnsafeAttribute"/>
            </summary>
        </member>
        <member name="T:JetBrains.Util.ConvertableEnumPattern`1">
            <summary>
            An EnumPattern implementation which supports convertion from a text string.
            </summary>
            <remarks>
            This implementation is intended to be used when you have to set EnumPattern attributes from XAML.
            </remarks>
        </member>
        <member name="T:JetBrains.Util.ConvertableEnumPatternConverter`1">
            <summary>
            A TypeConverter implementation for the ConvertableEnumPattern type.
            </summary>
            <remarks>
            Methods CanConvertTo and ConvertTo are not implemented, cause the base implementations do all we need.
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DictionaryWrapper`2">
            <summary>
            Dictionary with <see cref="F:JetBrains.Util.DictionaryWrapper`2.Statistics"/> for each operation. Can be serialized/deserialized seamlessly.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:JetBrains.Util.StrongToWeakDictionary`2.Entry.HashCode">
            <summary>
            Cached hash code of the key, -1 means entry is free
            </summary>
        </member>
        <member name="F:JetBrains.Util.StrongToWeakDictionary`2.Entry.NextEntryIndex">
            <summary>
            Index of next entry in the chain of keys with the same hashcodes (modulo size), -1 means last
            </summary>
        </member>
        <member name="F:JetBrains.Util.StrongToWeakDictionary`2.Entry.PrevEntryIndex">
            <summary>
            Index of previous entry in the chain of keys with the same hashcodes (modulo size), -1 means first
            </summary>
        </member>
        <member name="T:JetBrains.Util.DirectoryScanner">
            <summary>
            Nant-syntax wildcard matcher on file system trees
            </summary>
        </member>
        <member name="T:JetBrains.Util.StreamUnderLifetime">
            <summary>
              <para>An adapter from <see cref="T:JetBrains.DataFlow.Lifetime" />s world into the <see cref="T:System.IDisposable" /> world: if your provider can give a stream under a lifetime, but your consumer wants a stream that it will dispose.</para>
              <para>Gives you the lifetime under which you can get the stream from provider.</para>
              <para>Terminates this lifetime when your consumer disposes of this object.</para>
              <para>Prevents the original stream which you've received under the lifetime from being disposed of when the consumer disposes of this object (whether to dispose of that stream is up to the producer who's given the lifetime).</para>
            </summary>
        </member>
        <member name="T:JetBrains.Util.FilePersistence.SafeFileThrowAwayAccess">
            <summary>
            Helper for reading and writing throw-away files (if the content is corrupted or there's an error reading it, it can be safely dropped and re-created (<c>False</c> result reported to caller).
            </summary>
        </member>
        <member name="T:JetBrains.Util.FolderContentCache">
            <summary>
            FolderContentCache is an utility class intended to use for folders that are 
            - never deleted
            - seldom change
            The cache should be cleared by it's creator.
            </summary>
        </member>
        <member name="T:JetBrains.Util.GenericIComparableCache">
            <summary>
              <para>Cached caller for generic <see cref="T:System.IComparable`1" /> interface on untyped objects.</para>
              <para>Caches call info so that not to use reflection when working on known types.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Util.GenericIComparableCache.ComparerHelperMethodGenericDefinition">
            <summary>
            Pre-calculated reflection object of <see cref="M:JetBrains.Util.GenericIComparableCache.InvokeCompareTo``1(System.Object,System.Object)" />, for making a delegate off it.
            </summary>
        </member>
        <member name="F:JetBrains.Util.GenericIComparableCache.myFGetComparableSpecializations">
            <summary>
            Cache fn.
            </summary>
        </member>
        <member name="F:JetBrains.Util.GenericIComparableCache.myFGetInvocation">
            <summary>
            Cache fn.
            </summary>
        </member>
        <member name="F:JetBrains.Util.GenericIComparableCache.myComparableSpecializations">
            <summary>
            Cache. Thread-static to avoid concurrency issues.
            </summary>
        </member>
        <member name="F:JetBrains.Util.GenericIComparableCache.myCompareInvocationsCache">
            <summary>
            Cache. Thread-static to avoid concurrency issues.
            </summary>
        </member>
        <member name="M:JetBrains.Util.GenericIComparableCache.TryCompare(System.Object,System.Object)">
            <summary>
              <para>Cached caller for generic <see cref="T:System.IComparable`1" /> interface on untyped objects.</para>
              <para>Caches call info so that not to use reflection when working on known types.</para>
            </summary>
            <param name="ɑ">This is tested for <see cref="T:System.IComparable`1" /> interface.</param>
            <param name="β">This is passed into the <see cref="T:System.IComparable`1" /> of the first parameter, if matches the generic type.</param>
            <returns>NULL, if either <paramref name="ɑ" /> does not implement <see cref="T:System.IComparable`1" />, or none of its <see cref="T:System.IComparable`1" /> can take <paramref name="β" /> as a parameter. The <see cref="M:System.IComparable`1.CompareTo(`0)" /> call result, otherwise.</returns>
        </member>
        <member name="M:JetBrains.Util.GenericIComparableCache.GetComparableSpecializations(System.Type)">
            <summary>
            Generic params of all the <see cref="T:System.IComparable`1" /> interfaces on this type.
            Cached per type per thread.
            </summary>
        </member>
        <member name="M:JetBrains.Util.GenericIComparableCache.GetInvocation(System.Type)">
            <summary>
            Creates a delegate for calling <see cref="M:System.IComparable`1.CompareTo(`0)" /> of a certain type without reflection.
            Cached per type per thread.
            </summary>
        </member>
        <member name="M:JetBrains.Util.GenericIComparableCache.InvokeCompareTo``1(System.Object,System.Object)">
            <summary>
            Helper method to lift the genericity off the <see cref="T:JetBrains.Util.GenericIComparableCache.CompareToDelegate" />, so that it could be cached and called with objects.
            </summary>
        </member>
        <member name="T:JetBrains.Util.GenericIComparableCache.CompareToDelegate">
            <summary>
            Delegate for <see cref="M:JetBrains.Util.GenericIComparableCache.InvokeCompareTo``1(System.Object,System.Object)" />.
            </summary>
        </member>
        <member name="F:JetBrains.Util.IsDisposedState.Live">
            <summary>
            The object is live and running.
            </summary>
        </member>
        <member name="F:JetBrains.Util.IsDisposedState.Disposing">
            <summary>
            The object is still valid, but has entered the disposal routine. Used to prevent the <see cref="M:System.IDisposable.Dispose"/> from reentrancy.
            </summary>
        </member>
        <member name="F:JetBrains.Util.IsDisposedState.Disposed">
            <summary>
            The object has been disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FEx.Return``1(System.Action{System.Func{System.Func{``0},System.Action}})">
            <summary>
            <para>Allows to pass a return value thru a void-result <see cref="T:System.Action"/>.</para>
            <para>Suppose the following piece of code that should be surrounded with some pre- and post-activity:</para>
            <code>
            int GetResult()
            {
              return 5;
            }
            </code>
            <para>If the activity is available as an <see cref="T:System.IDisposable"/>, the code is surrounded with <c>using</c> without any problem with <c>return</c> statement:</para>
            <code>
            int GetResult()
            {
              using(EnterScope())
              {
                return 5;
              }
            }
            </code>
            <para>Suppose that the surrounding activity is implemented as a function that takes an <see cref="T:System.Action"/> to execute in the scope (e.g. <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/>):</para>
            <code>
            int GetResult()
            {
              ExecuteInScope(delegate
              {
                return 5;  // Compilation error
              });
            }
            </code>
            <para>This won't compile, because <c>ExecuteInScope</c> is <c>void</c> and the action that it takes to execute is also <c>void</c>.</para>
            <para>A temp local variable could be an option to use it for assignment, but it's hard to maintain in case the inner action has multiple returns against various code paths.</para>
            <para>This <see cref="M:JetBrains.Util.FEx.Return``1(System.Action{System.Func{System.Func{``0},System.Action}})"/> function wraps the <c>ExecuteInScope</c> call and gives you a functor that turns your <c>int</c>-returning inner code into a <c>void</c> action suitable for the executor:</para>
            <code>
            int GetResult()
            {
              return FEx.Return&lt;int&gt;(FR => ExecuteInScope(FR(() =>
              {
                return 5;
              })));
            }
            </code>
            </summary>
        </member>
        <member name="M:JetBrains.Util.JetSemanticVersion.ToVersion4Lossy">
            <summary>
            Throws out all other information but for the version number.
            </summary>
        </member>
        <member name="M:JetBrains.Util.JetSemanticVersion.ToVersion2Lossy">
            <summary>
            Throws out all other information but for the version number.
            </summary>
        </member>
        <member name="M:JetBrains.Util.JetSemanticVersion.ToVersion4Exact">
            <summary>
            For a semantic version which has only the version number, returns the version number.
            </summary>
        </member>
        <member name="P:JetBrains.Util.JetSemanticVersion.IsVersionNumberOnly">
            <summary>
            Gets whether this semantic version has no info besides the version number.
            </summary>
        </member>
        <member name="T:JetBrains.Util.SystemObjectEqualityComparer`1">
            <summary>
            Uses methods from base <see cref="T:System.Object"/> class for equality comparison: the object equality is checked bitwise on the reference value (or value type body), and the hash code is produced from the sync table entry. The object contents is not inspected (on reference types), and object's methods are not called (in either case).
            Extremely recommended for delegates, because normally they should only match themselves, and comparing or hashing a delegate is an expensive operation in modern NetFX.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:JetBrains.Util.TestPresentationMap">
            <summary>
            Must be used with <code>using (new TestPresentationMap()) {...}</code> idiom
            </summary>
        </member>
        <member name="P:JetBrains.Util.TestPresentationMap.Available">
            <summary>
            To suppress calculation of <code>presentation</code> in <see cref="M:JetBrains.Util.TestPresentationMap.RegisterTestPresentation``1(``0,System.String)"/>/>
            </summary>
        </member>
        <member name="T:JetBrains.Util.CollectionAdapter`1">
            <summary>
            Adapts a generic collection so that it can be handled as a non-generic collection.
            </summary>
            <typeparam name="T">Type of the generic collection.</typeparam>
        </member>
        <member name="M:JetBrains.Util.CollectionAdapter`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Util.CollectionAdapter`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Util.CollectionAdapter`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Util.CollectionAdapter`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.CollectionAdapter`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="F:JetBrains.Util.WeakToStrongDictionary`2.Entry.HashCode">
            <summary>
            Cached hash code of the key, -1 means entry is free
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakToStrongDictionary`2.Entry.NextEntryIndex">
            <summary>
            Index of next entry in the chain of keys with the same hashcodes (modulo size), -1 means last
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakToStrongDictionary`2.Entry.PrevEntryIndex">
            <summary>
            Index of previous entry in the chain of keys with the same hashcodes (modulo size), -1 means first
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakToWeakDictionary`2.Entry.HashCode">
            <summary>
            Cached hash code of the key, -1 means entry is free
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakToWeakDictionary`2.Entry.NextEntryIndex">
            <summary>
            Index of next entry in the chain of keys with the same hashcodes (modulo size), -1 means last
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakToWeakDictionary`2.Entry.PrevEntryIndex">
            <summary>
            Index of previous entry in the chain of keys with the same hashcodes (modulo size), -1 means first
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.IP6Address">
            <summary>
            Represents an IPv6 IP Address
            </summary>
            <remarks>
            This struct is used by various classes in
            the <see cref="!:Dns.Records"/> namespace to represent
            IPv6 addresses.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag1">
            <summary>
            IP fragment 1
            </summary>
            <remarks>
            IP fragment 1
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag2">
            <summary>
            IP fragment 2
            </summary>
            <remarks>
            IP fragment 2
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag3">
            <summary>
            IP fragment 3
            </summary>
            <remarks>
            IP fragment 3
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag4">
            <summary>
            IP fragment 4
            </summary>
            <remarks>
            IP fragment 4
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag5">
            <summary>
            IP fragment 5
            </summary>
            <remarks>
            IP fragment 5
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag6">
            <summary>
            IP fragment 6
            </summary>
            <remarks>
            IP fragment 6
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag7">
            <summary>
            IP fragment 7
            </summary>
            <remarks>
            IP fragment 7
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag8">
            <summary>
            IP fragment 8
            </summary>
            <remarks>
            IP fragment 8
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.IP6Address.ToString">
            <summary>
            returns a string representation of the IP address v6
            </summary>
            <returns>a human readable ipv6 address</returns>
            <remarks>
            Used to display a human readable IPv6 address.
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.IP4_Array">
            <summary>
            Represents an array of IP addresses
            </summary>
            <remarks>
            This struct is used by the DnsQuery API to hold the selected
            DNS servers to query.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP4_Array.AddrCount">
            <summary>
            Gets or sets the number of element in the 
            <see cref="F:JetBrains.Util.DnsAPI.IP4_Array.AddrArray"/> array.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP4_Array.AddrArray">
            <summary>
            Gets or sets the array of IP addresses
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsRecord">
            <summary>
            Represents a complete DNS record (DNS_RECORD)
            </summary>
            <remarks>
            This structure is used to hold a complete DNS record
            as returned from the DnsQuery API.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.Next">
            <summary>
            Gets or sets the next record.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.Name">
            <summary>
            Gets or sets the name of the record.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.RecordType">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.DataLength">
            <summary>
            Gets or sets the data length.
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsRecord.DnsRecordFlags">
            <summary>
            Represents the flags of a <see cref="T:JetBrains.Util.DnsAPI.DnsRecord"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.DnsRecordFlags.DW">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.DnsRecordFlags.S">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.Ttl">
            <summary>
            Gets or sets the TTL count
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.Reserved">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsQueryType">
            <summary>
            DNS query types
            </summary>
            <remarks>
            This enum is used by the DnsQuery API call to describe the
            options to be given to a DNS server along with a query.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.STANDARD">
            <summary>
            Standard
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.ACCEPT_TRUNCATED_RESPONSE">
            <summary>
            Accept truncated response
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.USE_TCP_ONLY">
            <summary>
            Use TCP only
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.NO_RECURSION">
            <summary>
            No recursion
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.BYPASS_CACHE">
            <summary>
            Bypass cache
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.NO_WIRE_QUERY">
            <summary>
            Cache only
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.NO_LOCAL_NAME">
            <summary>
            Directs DNS to ignore the local name.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.NO_HOSTS_FILE">
            <summary>
            Prevents the DNS query from consulting the HOSTS file.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.NO_NETBT">
            <summary>
            Prevents the DNS query from using NetBT for resolution.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.WIRE_ONLY">
            <summary>
            Directs DNS to perform a query using the network only, 
            bypassing local information.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.TREAT_AS_FQDN">
            <summary>
            Treat as FQDN
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.ALLOW_EMPTY_AUTH_RESP">
            <summary>
            Allow empty auth response
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.DONT_RESET_TTL_VALUES">
            <summary>
            Don't reset TTL values
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.RESERVED">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.CACHE_ONLY">
            <summary>
            obsolete.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.RETURN_MESSAGE">
            <summary>
            Directs DNS to return the entire DNS response message.
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsQueryReturnCode">
            <summary>
            The possible return codes of the DNS API call. This enum can
            be used to decypher the <see cref="P:JetBrains.Util.DnsAPI.DnsException.ErrorCode"/>
            property's return value.
            </summary>
            <remarks>
            This enum is used to describe a failed return code by the
            DnsQuery API used in the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> class.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.SUCCESS">
            <summary>
            Successful query
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.UNSPECIFIED_ERROR">
            <summary>
            Base DNS error code
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.MASK">
            <summary>
            Base DNS error code
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.FORMAT_ERROR">
            <summary>
            DNS server unable to interpret format.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.SERVER_FAILURE">
            <summary>
            DNS server failure.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.NAME_ERROR">
            <summary>
            DNS name does not exist.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.NOT_IMPLEMENTED">
            <summary>
            DNS request not supported by name server.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.REFUSED">
            <summary>
            DNS operation refused.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.YXDOMAIN">
            <summary>
            DNS name that ought not exist, does exist.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.YXRRSET">
            <summary>
            DNS RR set that ought not exist, does exist.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.NXRRSET">
            <summary>
            DNS RR set that ought to exist, does not exist.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.NOTAUTH">
            <summary>
            DNS server not authoritative for zone.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.NOTZONE">
            <summary>
            DNS name in update or prereq is not in zone.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.BADSIG">
            <summary>
            DNS signature failed to verify.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.BADKEY">
            <summary>
            DNS bad key.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.BADTIME">
            <summary>
            DNS signature validity expired.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.PACKET_FMT_BASE">
            <summary>
            Packet format
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.NO_RECORDS">
            <summary>
            No records found for given DNS query.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.BAD_PACKET">
            <summary>
            Bad DNS packet.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.NO_PACKET">
            <summary>
            No DNS packet.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.RCODE">
            <summary>
            DNS error, check rcode.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.UNSECURE_PACKET">
            <summary>
            Unsecured DNS packet.
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsFreeType">
            <summary>
            Possible arguments for the DnsRecordListFree api
            </summary>
            <remarks>
            This enum is used by the DnsRecordListFree API.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsFreeType.FreeFlat">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsFreeType.FreeRecordList">
            <summary>
            Frees the record list returned by the DnsQuery API
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsException">
            <summary>
            Represents the exception that occurs when a <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/>
            fails.
            </summary>
            <remarks>
            <para>
            The exception that occurs when a DNS request fails at any level.
            </para>
            <para>
            This class is used to represent two broad types of exceptions:
            <list type="bullet">
               <item><description>Win32 API Exceptions that occurred when calling the DnsQuery API</description></item>
               <item><description>Exceptions of other types that occurred when working with
               the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
               classes.</description></item>
            </list>
            </para>
            <para>
            Win32 errors that are DNS specific are specified in the
            <see cref="T:JetBrains.Util.DnsAPI.DnsQueryReturnCode"/> enumeration but if the 
            <see cref="P:JetBrains.Util.DnsAPI.DnsException.ErrorCode"/> returned is not defined in that 
            enum then the number returned will be defined in WinError.h.
            </para>
            <para>
            Exceptions of other types are available through the 
            InnerException property.
            </para>
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:JetBrains.Util.DnsAPI.DnsException"/>
            </summary>
            <remarks>
            Used to raise a <see cref="T:JetBrains.Util.DnsAPI.DnsException"/> with all the default
            properties. The message property will return: Unspecified
            DNS exception.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:JetBrains.Util.DnsAPI.DnsException"/>
            </summary>
            <param name="message">the human readable description of the problem</param>
            <remarks>
            Used to raise a <see cref="T:JetBrains.Util.DnsAPI.DnsException"/> where the only important
            information is a description about the error. The <see cref="P:JetBrains.Util.DnsAPI.DnsException.ErrorCode"/>
            property will return 0 or SUCCESS indicating that the DNS API calls
            succeeded, regardless of whether they did or did not.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsException.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of <see cref="T:JetBrains.Util.DnsAPI.DnsException"/>
            </summary>
            <param name="message">the human readable description of the problem</param>
            <param name="errcode">the error code (<see cref="T:JetBrains.Util.DnsAPI.DnsQueryReturnCode"/>)
            if the DnsQuery api failed</param>
            <remarks>
            Used to raise a <see cref="T:JetBrains.Util.DnsAPI.DnsException"/> where the underlying DNS
            API call fails. In this case, the <see cref="P:JetBrains.Util.DnsAPI.DnsException.ErrorCode"/> property
            is the most important information about the exception. In most cases,
            the number returned is a value in the <see cref="T:JetBrains.Util.DnsAPI.DnsQueryReturnCode"/>
            enum however, if it is not, the error is defined in WinError.h.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsException.ErrorCode">
            <summary>
            Gets the error code (<see cref="T:JetBrains.Util.DnsAPI.DnsQueryReturnCode"/>)
            if the DnsQuery api failed. Will be set to success (0) if the API
            didn't fail but another part of the code did.
            </summary>
            <remarks>
            Win32 errors that are DNS specific are specified in the
            <see cref="T:JetBrains.Util.DnsAPI.DnsQueryReturnCode"/> enumeration but if the 
            <see cref="P:JetBrains.Util.DnsAPI.DnsException.ErrorCode"/> returned is not defined in that 
            enum then the number returned will be defined in WinError.h.
            </remarks>
            <value>Value will be defined in WinError.h if not defined in the
            <see cref="T:JetBrains.Util.DnsAPI.DnsQueryReturnCode"/> enum.</value>
            <example>
            This example shows how to decypher the return of the
            ErrorCode property.
            <code>
            try
            {
               ...
            }
            catch(DnsException dnsEx)
            {
               int errcode = dnsEx.ErrorCode;
               if (! Enum.IsDefined(typeof(DnsQueryReturnCode), errcode))
               {
                 //defined in winerror.h
                 Console.WriteLine("WIN32 Error: {0}", errcode);
                 return;
               }
               
               DnsQueryReturnCode errretcode = (DnsQueryReturnCode) errcode;
               if (errretcode == DnsQueryReturnCode.SUCCESS)
               {
                 //inner exception contains the goodies
                 Console.WriteLine(dnsEx.InnerException.ToString());
                 return;
               }
               
               //dns error
               Console.WriteLine("DNS Error: {0}", errretcode.ToString("g"));
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:JetBrains.Util.DnsAPI.DnsException"/>
            </summary>
            <param name="message">the human readable description of the 
            problem</param>
            <param name="innerException">the exception that caused the 
            underlying error</param>
            <remarks>
            Used to raise a <see cref="T:JetBrains.Util.DnsAPI.DnsException"/> where the exception is
            some other type but a typeof(DnsException) is desired to be raised
            instead. In this case, the <see cref="P:JetBrains.Util.DnsAPI.DnsException.ErrorCode"/> property
            always returns 0 or SUCCESS and is a useless property.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:JetBrains.Util.DnsAPI.DnsException"/> for <see cref="T:System.Runtime.Serialization.ISerializable"/>
            </summary>
            <param name="info">the serialization information</param>
            <param name="context">the context</param>
            <remarks>
            Used by the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsRecordType">
            <summary>
            DNS record types
            </summary>
            <remarks>
            This enum represents all possible DNS record types that
            could be returned by the DnsQuery API.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.A">
            <summary>
            Address record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.NS">
            <summary>
            Name Server record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MD">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MF">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.CNAME">
            <summary>
            Canonical Name record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.SOA">
            <summary>
            Start Of Authority record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MB">
            <summary>
            Mailbox record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MG">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MR">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.NULL">
            <summary>
            NULL data for a DNS resource record.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.WKS">
            <summary>
            Well-Known Service record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.PTR">
            <summary>
            Pointer record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.HINFO">
            <summary>
            Host Information record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MINFO">
            <summary>
            mail information (MINFO) record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MX">
            <summary>
            Mail Exchange record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.TEXT">
            <summary> 
            Text record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.RP">
            <summary>
            Responsible Person record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.AFSDB">
            <summary>
            AFS Data Base location record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.X25">
            <summary>
            X25
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.ISDN">
            <summary>
            ISDN
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.RT">
            <summary>
            Route Through
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.NSAP">
            <summary>
            Network service access point address record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.NSAPPTR">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.SIG">
            <summary>
            Cryptographic signature record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.KEY">
            <summary>
            Public key record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.PX">
            <summary>
            Pointer to X.400/RFC822 information record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.GPOS">
            <summary>
            Geographical position record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.AAAA">
            <summary>
            IPv6 address record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.LOC">
            <summary>
            Location record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.NXT">
            <summary>
            Next record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.SRV">
            <summary>
            Server record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.ATMA">
            <summary>
            ATM address (ATMA) record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.TKEY">
            <summary>
            TKEY resource record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.TSIG">
            <summary>
            secret key transaction authentication (TSIG) record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.IXFR">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.AXFR">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MAILB">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MAILA">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.ALL">
            <summary>
            All records
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.ANY">
            <summary>
            Any records
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.WINS">
            <summary>
            WINS record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.WINSR">
            <summary>
            Windows Internet Name Service reverse-lookup record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.NBSTAT">
            <summary>
            Windows Internet Name Service reverse-lookup record
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsServerCollection">
            <summary>
            Represents a collection of servers by hostname or ip address.
            </summary>
            <remarks>
            Represents a collection of DNS servers that were specified as
            hostnames or ip addresses. Regardless of the way the server
            was entered, it is resolved to an <see cref="T:System.Net.IPAddress"/> object
            internally.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsServerCollection.#ctor">
            <summary>
            Creates a new instance of the collection.
            </summary>
            <remarks>
            This initializer creates an instance of the collection.
            The collection will be empty and contain 0 items.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsServerCollection.Add(System.String)">
            <summary>
            Adds a new hostname or ip address representing a DNS server
            to the collection.
            </summary>
            <param name="host">The ip address or hostname of a DNS server
            to add to the collection</param>
            <remarks>
            Adds a DNS server to the collection. The hostname or ip address
            is first resolved to one or more <see cref="T:System.Net.IPAddress"/> instances
            and then added to the collection. If a given hostname resolves
            to 10 ip addresses, those 10 addresses will be added to the collection.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsServerCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Net.IPAddress"/> instance found at the current
            index of the collection.
            </summary>
            <remarks>
            Gets the <see cref="T:System.Net.IPAddress"/> at the specified index of the
            collection.
            </remarks>
            <param name="idx">The index of the <see cref="T:System.Net.IPAddress"/> to 
            retrieve from the collection.</param>
            <value>The <see cref="T:System.Net.IPAddress"/> at the specified index.</value>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsWrapper">
            <summary>
            Represents a container for a DNS record of any type
            </summary>
            <remarks>
            The <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordType"/> property's value
            helps determine what type real type of the 
            <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData"/> property returns as
            noted in this chart:
            <list type="table">
               <listheader>
                 <term>RecordType</term>
                 <description>RecordData</description>
               </listheader>
               <item>
                 <term>A</term>
                 <description><see cref="!:Dns.Records.ARecord"/></description>
               </item>
               <item>
                 <term>CNAME</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>MB</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>MD</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>MF</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>MG</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>MR</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>NS</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>PTR</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>HINFO</term>
                 <description><see cref="!:Dns.Records.TXTRecord"/></description>
               </item>
               <item>
                 <term>ISDN</term>
                 <description><see cref="!:Dns.Records.TXTRecord"/></description>
               </item>
               <item>
                 <term>X25</term>
                 <description><see cref="!:Dns.Records.TXTRecord"/></description>
               </item>
               <item>
                 <term>MINFO</term>
                 <description><see cref="!:Dns.Records.MINFORecord"/></description>
               </item>
               <item>
                 <term>RP</term>
                 <description><see cref="!:Dns.Records.MINFORecord"/></description>
               </item>
               <item>
                 <term>MX</term>
                 <description><see cref="!:Dns.Records.MXRecord"/></description>
               </item>
               <item>
                 <term>AFSDB</term>
                 <description><see cref="!:Dns.Records.MXRecord"/></description>
               </item>
               <item>
                 <term>RT</term>
                 <description><see cref="!:Dns.Records.MXRecord"/></description>
               </item>
               <item>
                 <term>NULL</term>
                 <description><see cref="!:Dns.Records.NULLRecord"/></description>
               </item>
               <item>
                 <term>SOA</term>
                 <description><see cref="!:Dns.Records.SOARecord"/></description>
               </item>
               <item>
                 <term>WKS</term>
                 <description><see cref="!:Dns.Records.WKSRecord"/></description>
               </item>
               <item>
                 <term>AAAA</term>
                 <description><see cref="!:Dns.Records.AAAARecord"/></description>
               </item>
               <item>
                 <term>ATMA</term>
                 <description><see cref="!:Dns.Records.ATMARecord"/></description>
               </item>
               <item>
                 <term>NBSTAT</term>
                 <description><see cref="!:Dns.Records.WINSRRecord"/></description>
               </item>
               <item>
                 <term>SRV</term>
                 <description><see cref="!:Dns.Records.SRVRecord"/></description>
               </item>
               <item>
                 <term>TKEY</term>
                 <description><see cref="!:Dns.Records.TKEYRecord"/></description>
               </item>
               <item>
                 <term>TSIG</term>
                 <description><see cref="!:Dns.Records.TSIGRecord"/></description>
               </item>
               <item>
                 <term>WINS</term>
                 <description><see cref="!:Dns.Records.WINSRecord"/></description>
               </item>
               <item>
                 <term>LOC</term>
                 <description><see cref="!:Dns.Records.LOCRecord"/></description>
               </item>
               <item>
                 <term>AXFR</term>
                 <description>null</description>
               </item>
               <item>
                 <term>GPOS</term>
                 <description>null</description>
               </item>
               <item>
                 <term>IXFR</term>
                 <description>null</description>
               </item>
               <item>
                 <term>KEY</term>
                 <description>null</description>
               </item>
               <item>
                 <term>MAILA</term>
                 <description>null</description>
               </item>
               <item>
                 <term>MAILB</term>
                 <description>null</description>
               </item>
               <item>
                 <term>NSAP</term>
                 <description>null</description>
               </item>
               <item>
                 <term>NSAPPTR</term>
                 <description>null</description>
               </item>
               <item>
                 <term>NXT</term>
                 <description>null</description>
               </item>
               <item>
                 <term>PX</term>
                 <description>null</description>
               </item>
               <item>
                 <term>SIG</term>
                 <description>null</description>
               </item>
               <item>
                 <term>TEXT</term>
                 <description>null</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordType">
            <summary>
            Gets or sets the type of DNS record contained in the 
            <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData"/> property.
            </summary>
            <remarks>
            This property indicates the type of DNS record
            that the <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData"/> property is
            holding.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData">
            <summary>
            Gets or sets the DNS record object as denoted in the 
            <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordType"/> field.
            </summary>
            <remarks>
            This property holds the actual DNS record.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsWrapper.Equals(JetBrains.Util.DnsAPI.DnsRecordType)">
            <summary>
            Determines whether or not this <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/>
            instance is equal to a specific <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/>
            by comparing the <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordType"/> property of the
            current <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> against the 
            <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/> argument.
            </summary>
            <param name="type">The <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/> to compare to.</param>
            <returns>A boolean indicating whether or not this <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/>
            object contains a DNS record matching the entered type.</returns>
            <remarks>
            Determines if this <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> is of a specific
            <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/>. The comparison does not test the
            <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData"/> field.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsWrapper.Equals(System.Object)">
            <summary>
            Determines whether or not this <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> instance
            is equal to another <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> or to a 
            <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/> instance.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns>A boolean indicating whether or not this <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/>
            object equals the entered object.</returns>
            <remarks>
            Determines if this <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> instance is equal to
            an object. If the object is a <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/>, the
            <see cref="M:JetBrains.Util.DnsAPI.DnsWrapper.Equals(JetBrains.Util.DnsAPI.DnsRecordType)"/> method is used to determine
            equality based on the record type. If the object is a <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/>
            object, the <see cref="M:JetBrains.Util.DnsAPI.DnsWrapper.CompareTo(System.Object)"/> method is used to determine
            equality. If the object is any other type, the <see cref="T:System.Object"/>
            class's Equal method is used for comparison.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsWrapper.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable 
            for use in hashing algorithms and data structures like a 
            hash table.
            </summary>
            <returns>Integer value representing the hashcode of this 
            instance of <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/>.</returns>
            <remarks>
            The GetHashCode method uses the hash codes of the <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData"/>
            and <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordType"/> properties to generate a unique code
            for this particular record type/data combination.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsWrapper.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            comparands. The return value has these meanings:
            <list type="table">
               <listheader>
                 <term>Value</term>
                 <description>Meaning</description>
               </listheader>
               <item>
                 <term>Less than zero</term>
                 <description>This instance is less than obj. The <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData"/>
                 types do not match.</description>
               </item>
               <item>
                 <term>Zero</term>
                 <description>This instance is equal to obj. </description>
               </item>
               <item>
                 <term>Greater than zero</term>
                 <description>This instance is greater than obj. The <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordType"/>
                 do not match.</description>
               </item>
            </list>
            </returns>
            <remarks>
            Compares a <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> to this instance by its
            <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordType"/> and <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData"/> properties.
            </remarks>
            <exception cref="T:System.ArgumentException">
            obj is not the same type as this instance.
            </exception>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsWrapperCollection">
            <summary>
            Represents a collection of <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> objects.
            </summary>
            <remarks>
            The DnsWrapperCollection is a collection of <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/>
            objects. The resultant collection represents all of the DNS records
            for the given domain that was looked up. This class cannot be directly
            created - it is created by the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and
            <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> classes to hold the returned DNS
            records for the given domain.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsWrapperCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> at the specified
            ordinal in the collection
            </summary>
            <remarks>
            Gets the <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> at the specified
            index of the collection.
            </remarks>
            <param name="i">The index to retrieve from the collection.</param>
            <value>The <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> at the specified index of
            the collection.</value>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsRequest">
            <summary>
            Represents one DNS request. Allows for a complete DNS record lookup 
            on a given domain using the Windows API.
            </summary>
            <remarks>
            <para>
            The DnsRequest class represents a complete DNS request for a given
            domain on a specified DNS server, including all options. The
            DnsRequest class uses the Windows API to do the query and the dlls
            used are only found on Windows 2000 or higher machines. The class
            will throw a <see cref="T:System.NotSupportedException"/> exception if run
            on an machine not capable of using the APIs that are required.
            </para>
            <para>
            Version Information
            </para>
            <para>
                 3/8/2003 v1.1 (C#) - Released on 5/31/2003
             </para>
             <para>
            Created by: Bill Gearhart. Based on code by Patrik Lundin. 
            See version 1.0 remarks below. Specific attention was given
            to the exposed interface which got a 110% overhaul.
            </para>
            <para>
            Notable changes from the previous version:
            <list type="bullet">
              <item>
                <description>
                  structs filled with constants were changed to enums
                </description>
              </item>
              <item>
                <description>
                  .net datatypes were changed to c# datatypes
                </description>
              </item>
              <item>
                <description>
                  every object is now in it's own *.cs file 
                </description>
              </item>
              <item>
                <description>
                  custom collections and exceptions added 
                </description>
              </item>
              <item>
                <description>
                  better object orientation - request and response classes 
                  created for the dns query request/response session so that 
                  it follows the .NET model
                </description>
              </item>
              <item>
                <description>
                  eliminated duplicate recs returned by an ALL query
                </description>
              </item>
              <item>
                <description>
                  bad api return code enumeration added
                </description>
              </item>
              <item>
                <description>
                  ToString() overridden to provide meaningful info for many 
                  of the dns data structs
                </description>
              </item>
              <item>
                <description>
                  documentation and notes were created for all classes
                </description>
              </item>
              <item>
                <description>
                  added check to ensure code only runs on w2k or better
                </description>
              </item>
              <item>
                <description>
                  obsolete DNS record types are now marked as such
                </description>
              </item>
              <item>
                <description>
                  newer enum values added to DnsQueryType enum
                </description>
              </item>
              <item>
                <description>
                  compiled html documentation was written which always takes
                  20 times longer than writing the code does.
                </description>
              </item>
              <item>
                <description>
                  this list of changes was compiled by your's truly...
                </description>
              </item>
              <item>
                <description>
                  smoothed out object and member names so they were more 
                  intuitive - for instance: DNS_MX_DATA became MXRecord
                </description>
              </item>
              <item>
                <description>
                  added call to DnsRecordListFree API to free resources after 
                  DnsQuery call
                </description>
              </item>
              <item>
                <description>
                  altered DnsQuery API call to allow for servers other than the 
                  local DNS server from being queried
                </description>
              </item>
            </list>
            </para>
            <para>
              4/15/2002 v1.0 (C#)
            </para>
            <para>
            Created by: Patrik Lundin
            </para>
            <para>
            Based on code found at: 
            <a href="http://www.c-sharpcorner.com/Code/2002/April/DnsResolver.asp">http://www.c-sharpcorner.com/Code/2002/April/DnsResolver.asp</a>
                
            <list type="bullet">
              <item>
                <description>
                  Initial implementation.
                </description>
              </item>
            </list>
            </para>
            </remarks>
            <example>
            Use the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> objects
            together to get DNS information for aspemporium.com from the nameserver
            where the site is hosted.
            <code>
            using System;
            using netlib.Dns;
            using netlib.Dns.Records;
            
            namespace ClassLibrary1
            {
              class __loader
              {
                static void Main()
                {
                  try
                  {
                    DnsRequest request = new DnsRequest();
                    request.TreatAsFQDN=true;
                    request.BypassCache=true;
                    request.Servers.Add("dns.compresolve.com");
                    request.Domain = "aspemporium.com";
                    DnsResponse response = request.GetResponse();
            
                    Console.WriteLine("Addresses");
                    Console.WriteLine("--------------------------");
                    foreach(ARecord addr in response.ARecords)
                      Console.WriteLine("\t{0}", addr.ToString());
                    Console.WriteLine();
            
                    Console.WriteLine("Name Servers");
                    Console.WriteLine("--------------------------");
                    foreach(PTRRecord ns in response.NSRecords)
                      Console.WriteLine("\t{0}", ns.ToString());
                    Console.WriteLine();
            
                    Console.WriteLine("Mail Exchanges");
                    Console.WriteLine("--------------------------");
                    foreach(MXRecord exchange in response.MXRecords)
                      Console.WriteLine("\t{0}", exchange.ToString());
                    Console.WriteLine();
            
                    Console.WriteLine("Canonical Names");
                    Console.WriteLine("--------------------------");
                    foreach(PTRRecord cname in response.GetRecords(DnsRecordType.CNAME))
                      Console.WriteLine("\t{0}", cname.ToString());
                    Console.WriteLine();
            
                    Console.WriteLine("Start of Authority Records");
                    Console.WriteLine("--------------------------");
                    foreach(SOARecord soa in response.GetRecords(DnsRecordType.SOA))
                      Console.WriteLine("\t{0}", soa.ToString());
                    Console.WriteLine();
            
                    //foreach(DnsWrapper wrap in response.RawRecords)
                    //{
                    //  Console.WriteLine(wrap.RecordType);
                    //}
            
                    response = null;
                    request = null;
                  }
                  catch(DnsException ex)
                  {
                    Console.WriteLine("EXCEPTION DOING DNS QUERY:");
                    Console.WriteLine("\t{0}", ((DnsQueryReturnCode) ex.ErrorCode).ToString("g"));
            
                    if (ex.InnerException != null)
                      Console.WriteLine(ex.InnerException.ToString());
                  }
                }
              }
            }
            
            </code>
            </example>
            
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsRequest.DnsQuery(System.String,JetBrains.Util.DnsAPI.DnsRecordType,JetBrains.Util.DnsAPI.DnsQueryType,System.IntPtr,System.IntPtr@,System.IntPtr)">
            <summary>
            http://msdn.microsoft.com/library/en-us/dns/dns/dnsquery.asp
            </summary>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsRequest.DnsRecordListFree(System.IntPtr,JetBrains.Util.DnsAPI.DnsFreeType)">
            <summary>
            http://msdn.microsoft.com/library/en-us/dns/dns/dnsrecordlistfree.asp
            </summary>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.Servers">
            <summary>
            Gets a collection of DNS servers to use for the current request.
            If the collection contains no items, the local DNS servers are used.
            </summary>
            <remarks>
            If the collection contains 0 <see cref="T:System.Net.IPAddress"/> references,
            the default DNS servers are used. Otherwise, servers are used in a 
            decending order from their ordinal position in the collection.
            You can add as many DNS Servers as you need to the collection by
            host name or IP address.
            </remarks>
            <value>A <see cref="T:JetBrains.Util.DnsAPI.DnsServerCollection"/> that can be used to 
            manage the DNS servers that will be used for the query.</value>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.UseTCPOnly">
            <summary>
            Gets or sets whether or not to use TCP only for the query.
            </summary>
            <value>Boolean indicating whether or not to use TCP instead of UDP for the query</value>
            <remarks>
            If set to true, the DNS query will be done via TCP rather than UDP. This
            is useful if the DNS service you are trying to reach is running on
            TCP but not on UDP.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.AcceptTruncatedResponse">
            <summary>
            Gets or sets whether or not to accept truncated results — 
            does not retry under TCP.
            </summary>
            <value>Boolean indicating whether or not to accept truncated results.</value>
            <remarks>
            Determines wherher or not the server will be re-queried in the event
            that a response was truncated.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.NoRecursion">
            <summary>
            Gets or sets whether or not to perform an iterative query
            </summary>
            <value>Boolean indicating whether or not to use recursion
            to resolve the query.</value>
            <remarks>
            Specifically directs the DNS server not to perform 
            recursive resolution to resolve the query.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.BypassCache">
            <summary>
            Gets or sets whether or not to bypass the resolver cache 
            on the lookup. This must be set to true if you specified
            a server in the <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.Servers"/> collection.
            </summary>
            <value>Boolean indicating whether or not to bypass the cache
            and use the list of servers in the <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.Servers"/>
            collection.
            </value>
            <remarks>
            Setting this to true allows you to specify one or more DNS servers
            to query instead of querying the local DNS cache and server.
            If false is set, the list of servers is ignored and the local DNS
            cache and server is used to resolve the query.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.QueryCacheOnly">
            <summary>
            Gets or sets whether or not to direct DNS to perform a 
            query on the local cache only
            </summary>
            <value>Boolean indicating whether or not to only use the
            DNS cache to resolve a query.</value>
            <remarks>
            This option allows you to query the local DNS cache only instead
            of making a DNS request over either UDP or TCP.
            This property represents the logical opposite of the
            <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.WireOnly"/> property.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.WireOnly">
            <summary>
            Gets or sets whether or not to direct DNS to perform a 
            query using the network only, bypassing local information.
            </summary>
            <value>Boolean indicating whether or not to use the
            network only instead of local information.</value>
            <remarks>
            This property represents the logical opposite of the
            <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.QueryCacheOnly"/> property.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.NoLocalName">
            <summary>
            Gets or sets whether or not to direct DNS to ignore the 
            local name.
            </summary>
            <value>Boolean indicating whether or not to ignore the local name.</value>
            <remarks>
            Determines how the DNS query handles local names.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.NoHostsFile">
            <summary>
            Gets or sets whether or not to prevent the DNS query from 
            consulting the HOSTS file.
            </summary>
            <value>Boolean indicating whether or not to deny access to
            the HOSTS file when querying.</value>
            <remarks>
            Determines how the DNS query handles accessing the HOSTS file when
            querying for DNS information.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.NoNetbt">
            <summary>
            Gets or sets whether or not to prevent the DNS query from 
            using NetBT for resolution.
            </summary>
            <value>Boolean indicating whether or not to deny access to
            NetBT during the query.</value>
            <remarks>
            Determines how the DNS query handles accessing NetBT when
            querying for DNS information.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.QueryReturnMessage">
            <summary>
            Gets or sets whether or not to direct DNS to return 
            the entire DNS response message.
            </summary>
            <value>Boolean indicating whether or not to return the entire
            response.</value>
            <remarks>
            Determines how the DNS query expects the response to be
            received from the server.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.TreatAsFQDN">
            <summary>
            Gets or sets whether or not to prevent the DNS 
            response from attaching suffixes to the submitted 
            name in a name resolution process.
            </summary>
            <value>Boolean indicating whether or not to allow
            suffix attachment during resolution.</value>
            <remarks>
            Determines how the DNS server handles suffix appending
            to the submitted name during name resolution.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.DontResetTTLValues">
            <summary>
            Gets or sets whether or not to store records 
            with the TTL corresponding to the minimum value 
            TTL from among all records
            </summary>
            <value>Boolean indicating whether or not to
            use TTL values from all records.</value>
            <remarks>
            Determines how the DNS query handles TTL values.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.Domain">
            <summary>
            Gets or sets the domain to query. The domain must be a hostname,
            not an IP address.
            </summary>
            <remarks>
            This method is expecting a hostname, not an IP address. The
            system will fail with a <see cref="T:JetBrains.Util.DnsAPI.DnsException"/> when
            <see cref="M:JetBrains.Util.DnsAPI.DnsRequest.GetResponse"/> is called if Domain is an IP address.
            </remarks>
            <value>String representing the domain that DNS information
            is desired for. This should be set to a hostname and not an
            IP Address.</value>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsRequest.#ctor">
            <summary>
            Creates a new instance of <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/>
            </summary>
            <remarks>
            The <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.Domain"/> property is set to null
            and all other properties have their default value
            of false, except for <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.TreatAsFQDN"/> which has a value
            of true. The system is set to use the local DNS
            server for all queries.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsRequest.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/>
            </summary>
            <remarks>
            The <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.Domain"/> property is set to the domain
            argument and all other properties have their default value
            of false, except for <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.TreatAsFQDN"/> which has a value
            of true. The system is set to use the local DNS
            server for all queries.
            </remarks>
            <param name="domain">The hostname that DNS information is desired for.
            This should not be an ip address. For example: yahoo.com</param>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsRequest.GetResponse">
            <summary>
            Queries the local DNS server for information about 
            this instance of <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and returns
            the response as a <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/>
            </summary>
            <returns>A <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> object containing the response 
            from the DNS server.</returns>
            <exception cref="T:System.NotSupportedException">
            The code is running on a machine lesser than Windows 2000
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.Domain"/> property is null
            </exception>
            <exception cref="T:JetBrains.Util.DnsAPI.DnsException">
            The DNS query itself failed or parsing of the returned 
            response failed
            </exception>
            <remarks>
            Returns a <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> representing the response
            from the DNS server or one of the exceptions noted in the
            exceptions area, the most common of which is the
            <see cref="T:JetBrains.Util.DnsAPI.DnsException"/>.
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsResponse">
            <summary>
            Represents one DNS response. This class cannot be directly created - 
            it is returned by the <see cref="M:JetBrains.Util.DnsAPI.DnsRequest.GetResponse"/> method.
            </summary>
            <remarks>
            The DnsResponse class represents the information returned by a DNS 
            server in response to a <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/>. The DnsResponse
            class offers easy access to all of the returned DNS records for a given
            domain.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsResponse.RawRecords">
            <summary>
            Gets a <see cref="T:JetBrains.Util.DnsAPI.DnsWrapperCollection" /> containing
            all of the DNS information that the server returned about
            the queried domain.
            </summary>
            <remarks>
            Returns all of the DNS records retrieved about the domain
            as a <see cref="T:JetBrains.Util.DnsAPI.DnsWrapperCollection"/>. This property
            is wrapped by the <see cref="M:JetBrains.Util.DnsAPI.DnsResponse.GetRecords(JetBrains.Util.DnsAPI.DnsRecordType)"/> method, the
            <see cref="P:JetBrains.Util.DnsAPI.DnsResponse.ARecords"/>, <see cref="P:JetBrains.Util.DnsAPI.DnsResponse.MXRecords"/>, and
            <see cref="P:JetBrains.Util.DnsAPI.DnsResponse.NSRecords"/> properties.
            </remarks>
            <value>Gets a collection of <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> objects.</value>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsResponse.GetRecords(JetBrains.Util.DnsAPI.DnsRecordType)">
            <summary>
            Returns a collection of DNS records of a specified
            <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/>. The collection's data type
            is determined by the type of record being sought in the
            type argument.
            </summary>
            <param name="type">A <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/> enumeration
            value indicating the type of DNS record to get from the list of
            all DNS records (available in the <see cref="P:JetBrains.Util.DnsAPI.DnsResponse.RawRecords"/>
            property.</param>
            <returns>an <see cref="T:System.Collections.ArrayList"/> of one of the types
            specified in the <see cref="!:Dns.Records"/> namespace based
            on the <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/> argument representing the
            type of DNS record desired.
            </returns>
            <remarks>
            It is recommended that you loop through the results of this
            method as follows for maximum convenience:
            <code>
            foreach (<see cref="!:Dns.Records"/> record in obj.GetRecords(<see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/>))
            {
               string s = record.ToString();
            }
            </code>
            The following table indicates the DNS record type you can expect to get
            back based on the <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/> requested. Any items returning
            null are not currently supported.
            <list type="table">
               <listheader>
                 <term>DnsRecordType enumeration value</term>
                 <description>GetRecords() returns</description>
               </listheader>
               <item>
                 <term>A</term>
                 <description><see cref="!:Dns.Records.ARecord"/></description>
               </item>
               <item>
                 <term>CNAME</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>MB</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>MD</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>MF</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>MG</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>MR</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>NS</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>PTR</term>
                 <description><see cref="!:Dns.Records.PTRRecord"/></description>
               </item>
               <item>
                 <term>HINFO</term>
                 <description><see cref="!:Dns.Records.TXTRecord"/></description>
               </item>
               <item>
                 <term>ISDN</term>
                 <description><see cref="!:Dns.Records.TXTRecord"/></description>
               </item>
               <item>
                 <term>X25</term>
                 <description><see cref="!:Dns.Records.TXTRecord"/></description>
               </item>
               <item>
                 <term>MINFO</term>
                 <description><see cref="!:Dns.Records.MINFORecord"/></description>
               </item>
               <item>
                 <term>RP</term>
                 <description><see cref="!:Dns.Records.MINFORecord"/></description>
               </item>
               <item>
                 <term>MX</term>
                 <description><see cref="!:Dns.Records.MXRecord"/></description>
               </item>
               <item>
                 <term>AFSDB</term>
                 <description><see cref="!:Dns.Records.MXRecord"/></description>
               </item>
               <item>
                 <term>RT</term>
                 <description><see cref="!:Dns.Records.MXRecord"/></description>
               </item>
               <item>
                 <term>NULL</term>
                 <description><see cref="!:Dns.Records.NULLRecord"/></description>
               </item>
               <item>
                 <term>SOA</term>
                 <description><see cref="!:Dns.Records.SOARecord"/></description>
               </item>
               <item>
                 <term>WKS</term>
                 <description><see cref="!:Dns.Records.WKSRecord"/></description>
               </item>
               <item>
                 <term>AAAA</term>
                 <description><see cref="!:Dns.Records.AAAARecord"/></description>
               </item>
               <item>
                 <term>ATMA</term>
                 <description><see cref="!:Dns.Records.ATMARecord"/></description>
               </item>
               <item>
                 <term>NBSTAT</term>
                 <description><see cref="!:Dns.Records.WINSRRecord"/></description>
               </item>
               <item>
                 <term>SRV</term>
                 <description><see cref="!:Dns.Records.SRVRecord"/></description>
               </item>
               <item>
                 <term>TKEY</term>
                 <description><see cref="!:Dns.Records.TKEYRecord"/></description>
               </item>
               <item>
                 <term>TSIG</term>
                 <description><see cref="!:Dns.Records.TSIGRecord"/></description>
               </item>
               <item>
                 <term>WINS</term>
                 <description><see cref="!:Dns.Records.WINSRecord"/></description>
               </item>
               <item>
                 <term>LOC</term>
                 <description><see cref="!:Dns.Records.LOCRecord"/></description>
               </item>
               <item>
                 <term>AXFR</term>
                 <description>null</description>
               </item>
               <item>
                 <term>GPOS</term>
                 <description>null</description>
               </item>
               <item>
                 <term>IXFR</term>
                 <description>null</description>
               </item>
               <item>
                 <term>KEY</term>
                 <description>null</description>
               </item>
               <item>
                 <term>MAILA</term>
                 <description>null</description>
               </item>
               <item>
                 <term>MAILB</term>
                 <description>null</description>
               </item>
               <item>
                 <term>NSAP</term>
                 <description>null</description>
               </item>
               <item>
                 <term>NSAPPTR</term>
                 <description>null</description>
               </item>
               <item>
                 <term>NXT</term>
                 <description>null</description>
               </item>
               <item>
                 <term>PX</term>
                 <description>null</description>
               </item>
               <item>
                 <term>SIG</term>
                 <description>null</description>
               </item>
               <item>
                 <term>TEXT</term>
                 <description>null</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsResponse.ARecords">
            <summary>
            Gets all the <see cref="T:JetBrains.Util.DnsAPI.ARecord"/> for the queried domain.
            </summary>
            <remarks>
            Uses the <see cref="M:JetBrains.Util.DnsAPI.DnsResponse.GetRecords(JetBrains.Util.DnsAPI.DnsRecordType)"/> method to retrieve an
            array of <see cref="T:JetBrains.Util.DnsAPI.ARecord"/>s representing all the Address
            records for the domain.
            </remarks>
            <value>An array of <see cref="T:JetBrains.Util.DnsAPI.ARecord"/> objects.</value>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsResponse.MXRecords">
            <summary>
            Gets all the <see cref="T:JetBrains.Util.DnsAPI.MXRecord"/> for the queried domain.
            </summary>
            <remarks>
            Uses the <see cref="M:JetBrains.Util.DnsAPI.DnsResponse.GetRecords(JetBrains.Util.DnsAPI.DnsRecordType)"/> method to retrieve an
            array of <see cref="T:JetBrains.Util.DnsAPI.MXRecord"/>s representing all the Mail Exchanger
            records for the domain.
            </remarks>
            <value>An array of <see cref="T:JetBrains.Util.DnsAPI.MXRecord"/> objects.</value>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsResponse.NSRecords">
            <summary>
            Gets all the DNS name servers for the queried domain as an
            array of <see cref="T:JetBrains.Util.DnsAPI.PTRRecord"/>s.
            </summary>
            <remarks>
            Uses the <see cref="M:JetBrains.Util.DnsAPI.DnsResponse.GetRecords(JetBrains.Util.DnsAPI.DnsRecordType)"/> method to retrieve an
            array of <see cref="T:JetBrains.Util.DnsAPI.PTRRecord"/>s representing all the Name Server
            records for the domain.
            </remarks>
            <value>An array of <see cref="T:JetBrains.Util.DnsAPI.PTRRecord"/> objects.</value>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.WKSRecord">
            <summary>
            Represents a DNS Well Known Service record (DNS_WKS_DATA)
            </summary>
            <remarks>
            The WKSRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WKSRecord.IpAddress">
            <summary>
            Gets or sets the IP address
            </summary>
            <remarks>
            IP address, in the form of an IP4_ADDRESS structure. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WKSRecord.Protocol">
            <summary>
            Gets or sets the protocol
            </summary>
            <remarks>
            IP protocol for this record. Valid values are UDP or TCP. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WKSRecord.BitMask">
            <summary>
            Gets or sets the bitmask
            </summary>
            <remarks>
            Mask representing well known service being represented in the RR. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.WKSRecord.ToString">
            <summary>
            Returns a string representation of the service record
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            IP Address: [IPADDR] Protocol: [PROTO] BitMask: [BITMASK]
            where [IPADDR] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WKSRecord.IpAddress"/> as specified here <see cref="M:System.Net.IPAddress.ToString"/>
            and   [PROTO] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WKSRecord.Protocol"/>
            and   [BITMASK] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.WKSRecord.BitMask"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.WINSRRecord">
            <summary>
            Represents a DNS Windows Internet Name Service reverse-lookup 
            (WINSR) record (DNS_WINSR_DATA)
            </summary>
            <remarks>
            The WINSRRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRRecord.MappingFlag">
            <summary>
            Gets or sets the mapping flag
            </summary>
            <remarks>
            WINS mapping flag that specifies whether the record must be included 
            into the zone replication. It may have only two values: 0x80000000 
            and 0x00010000 corresponding to the replication and no-replication 
            (local record) flags, respectively. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRRecord.LookupTimeout">
            <summary>
            Gets or sets the lookup timeout
            </summary>
            <remarks>
            Time, in seconds, that a DNS Server attempts resolution using WINS 
            lookup. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRRecord.CacheTimeout">
            <summary>
            Gets or sets the cache timeout
            </summary>
            <remarks>
            Time, in seconds, that a DNS Server using WINS lookup may cache the 
            WINS Server's response. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRRecord.ResultDomain">
            <summary>
            Gets or sets the result domain name
            </summary>
            <remarks>
            Pointer to a string representing the domain name to append to the 
            returned NetBIOS name. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.WINSRRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            mapping flag: [FLAG] lookup timeout: [LOOKUP] cache timeout: [CACHE] result domain: [DOMAIN]
            where [FLAG] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRRecord.MappingFlag"/>
            and   [LOOKUP] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRRecord.LookupTimeout"/>
            and   [CACHE] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRRecord.CacheTimeout"/>
            and   [DOMAIN] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRRecord.ResultDomain"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.WINSRecord">
            <summary>
            Represents a DNS Windows Internet Name Service (WINS) record (DNS_WINS_DATA)
            </summary>
            <remarks>
            The WINSRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRecord.MappingFlag">
            <summary>
            Gets or sets the mapping flag
            </summary>
            <remarks>
            WINS mapping flag that specifies whether the record must be 
            included into the zone replication. It may have only two values: 
            0x80000000 and 0x00010000 corresponding to the replication and 
            no-replication (local record) flags, respectively. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRecord.LookupTimeout">
            <summary>
            Gets or sets the lookup timeout
            </summary>
            <remarks>
            Time, in seconds, that a DNS Server attempts resolution using 
            WINS lookup. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRecord.CacheTimeout">
            <summary>
            Gets or sets the cache timeout
            </summary>
            <remarks>
            Time, in seconds, that a DNS Server using WINS lookup may cache 
            the WINS Server's response. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRecord.ServerCount">
            <summary>
            Gets or sets the count of WINS servers
            </summary>
            <remarks>
            Number of WINS Servers listed in the WinsServers member. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRecord.WinsServers">
            <summary>
            Gets or sets the WINS server array pointer
            </summary>
            <remarks>
            Array of WINS Servers, each of type int . 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.WINSRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            mapping flag: [FLAG] lookup timeout: [LOOKUP] cache timeout: [CACHE] server count: [SERVERCT] server ptr: [SERVERS]
            where [FLAG] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRecord.MappingFlag"/>
            and   [LOOKUP] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRecord.LookupTimeout"/>
            and   [CACHE] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRecord.CacheTimeout"/>
            and   [SERVERCT] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRecord.ServerCount"/>
            and   [SERVERS] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRecord.WinsServers"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.TXTRecord">
            <summary>
            Represents a DNS Text record (DNS_TXT_DATA)
            </summary>
            <remarks>
            The TXTRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TXTRecord.StringCount">
            <summary>
            Gets or sets the string count
            </summary>
            <remarks>
            Number of strings represented in pStringArray. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TXTRecord.StringArray">
            <summary>
            Gets or sets the string array
            </summary>
            <remarks>
            Array of strings representing the descriptive text of the 
            TXT resource record. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.TXTRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            string count: [COUNT] string array: [ARR]
            where [COUNT] = string representation of <see cref="F:JetBrains.Util.DnsAPI.TXTRecord.StringCount"/>
            and   [ARR] = string representation of <see cref="F:JetBrains.Util.DnsAPI.TXTRecord.StringArray"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.TSIGRecord">
            <summary>
            represents a secret key transaction authentication (TSIG) record (DNS_TSIG_DATA)
            </summary>
            <remarks>
            The TSIGRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.Algorithm">
            <summary>
            Gets or sets the name algorithm
            </summary>
            <remarks>
            Name of the key used in the domain name syntax. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.AlgorithmPacket">
            <summary>
            Gets or sets the algorithm packet
            </summary>
            <remarks>
            Pointer to the packet containing the algorithm. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.Key">
            <summary>
            Gets or sets the key
            </summary>
            <remarks>
            Pointer to the signature. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.OtherData">
            <summary>
            Gets or sets the other data
            </summary>
            <remarks>
            Pointer to other data. This member is empty unless a BADTIME error is returned.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.CreateTime">
            <summary>
            Gets or sets the create time
            </summary>
            <remarks>
            Time the key transaction authentication was created, expressed in seconds since the beginning of January 1, 1970, Greenwich Mean Time (GMT), excluding leap seconds. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.FudgeTime">
            <summary>
            Gets or sets the fudge time
            </summary>
            <remarks>
            Time, in seconds, from which the i64CreateTime may be in error. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.OriginalXid">
            <summary>
            Gets or sets the original XID
            </summary>
            <remarks>
            Original message identifier. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.Error">
            <summary>
            Gets or sets the error
            </summary>
            <remarks>
            Error, expressed in expanded RCODE that covers TSIG processing. See Remarks for more information about the TSIG resource record. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.KeyLength">
            <summary>
            Gets or sets the key length
            </summary>
            <remarks>
            Length, in bytes, of the pSignature member. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.OtherLength">
            <summary>
            Gets or sets the other length
            </summary>
            <remarks>
            Length, in bytes, of the pOtherData member. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.AlgNameLength">
            <summary>
            Gets or sets the algorithm length
            </summary>
            <remarks>
            Length, in bytes, of the pNameAlgorithm member. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.PacketPointers">
            <summary>
            Gets or sets whether or not to use packet pointers
            </summary>
            <remarks>
            Reserved for future use. 
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.TKEYRecord">
            <summary>
             Represents a DNS TKEY resource record, used to 
             establish and delete shared-secret keys between 
             a DNS resolver and server. (DNS_TKEY_DATA)
            </summary>
            <remarks>
            The TKEYRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.Algorithm">
            <summary>
            Gets or sets the name algorithm
            </summary>
            <remarks>
            Pointer to a string representing the name of the algorithm 
            used with the key. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.AlgorithmPacket">
            <summary>
            Gets or sets the algorithm packet.
            </summary>
            <remarks>
            Pointer to the packet containing the algorithm. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.Key">
            <summary>
            Gets or sets the key
            </summary>
            <remarks>
            Pointer to the key. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.OtherData">
            <summary>
            Gets or sets the other data
            </summary>
            <remarks>
            Reserved for future use. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.CreateTime">
            <summary>
            Gets or sets the create time
            </summary>
            <remarks>
            Date and time at which the key was created, expressed in seconds 
            since the beginning of January 1, 1970, Greenwich Mean Time (GMT), 
            excluding leap seconds. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.ExpireTime">
            <summary>
            Gets or sets the expire time
            </summary>
            <remarks>
            Expiration date of the key, expressed in seconds since the beginning 
            of January 1, 1970, Greenwich Mean Time (GMT), excluding leap seconds. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.Mode">
            <summary>
            Gets or sets the mode
            </summary>
            <remarks>
            Scheme used for key agreement or the purpose of the TKEY DNS Message. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.Error">
            <summary>
            Gets or sets the error
            </summary>
            <remarks>
            Error, expressed in expanded RCODE that covers TSIG processing and 
            TKEY processing. See Remarks. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.KeyLength">
            <summary>
            Gets or sets the key length
            </summary>
            <remarks>
            Length, in bytes, of the pSignature member. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.OtherLength">
            <summary>
            Gets or sets the other length
            </summary>
            <remarks>
            Length, in bytes, of the pOtherData member. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.AlgNameLength">
            <summary>
            Gets or sets the name algorithm's length
            </summary>
            <remarks>
            Length, in bytes, of the pNameAlgorithm member. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.PacketPointers">
            <summary>
            Gets or sets whether or not to use packet pointers
            </summary>
            <remarks>
            Reserved for future use. 
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.SRVRecord">
            <summary>
            Represents a DNS Server record. (DNS_SRV_DATA)
            </summary>
            <remarks>
            The SRVRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SRVRecord.NameNext">
            <summary>
            Gets or sets the name
            </summary>
            <remarks>
            Pointer to a string representing the target host. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SRVRecord.Priority">
            <summary>
            Gets or sets the priority
            </summary>
            <remarks>
            Priority of the target host specified in the owner name. Lower numbers imply higher priority. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SRVRecord.Weight">
            <summary>
            Gets or sets the weight
            </summary>
            <remarks>
            Weight of the target host. Useful when selecting among hosts with the same priority. The chances of using this host should be proportional to its weight. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SRVRecord.Port">
            <summary>
            Gets or sets the port
            </summary>
            <remarks>
            Port used on the target host for the service. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SRVRecord.Pad">
            <summary>
            Reserved.
            </summary>
            <remarks>
            Reserved. Used to keep pointers DWORD aligned. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.SRVRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            name next: [SERVER] priority: [PRIOR] weight: [WEIGHT] port: [PORT]
            where [SERVER] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SRVRecord.NameNext"/>
            and   [PRIOR] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SRVRecord.Priority"/>
            and   [WEIGHT] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SRVRecord.Weight"/>
            and   [PORT] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SRVRecord.Port"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.SOARecord">
            <summary>
            Represents a DNS Start Of Authority record (DNS_SOA_DATA)
            </summary>
            <remarks>
            The SOARecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SOARecord.PrimaryServer">
            <summary>
            Gets or sets the primary server
            </summary>
            <remarks>
            Pointer to a string representing the name of the authoritative 
            DNS server for the zone to which the record belongs. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SOARecord.Administrator">
            <summary>
            Gets or sets the name of the administrator
            </summary>
            <remarks>
            Pointer to a string representing the name of the responsible party 
            for the zone to which the record belongs. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SOARecord.SerialNo">
            <summary>
            Gets or sets the serial number
            </summary>
            <remarks>
            Serial number of the SOA record. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SOARecord.Refresh">
            <summary>
            Gets or sets the refresh
            </summary>
            <remarks>
            Time, in seconds, before the zone containing this record should be 
            refreshed. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SOARecord.Retry">
            <summary>
            Gets or sets the retry count
            </summary>
            <remarks>
            Time, in seconds, before retrying a failed refresh of the zone to 
            which this record belongs 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SOARecord.Expire">
            <summary>
            Gets or sets the expiration
            </summary>
            <remarks>
            Time, in seconds, before an unresponsive zone is no longer authoritative. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SOARecord.DefaultTtl">
            <summary>
            Gets or sets the default ttl
            </summary>
            <remarks>
            Lower limit on the time, in seconds, that a DNS server or caching 
            resolver are allowed to cache any RRs from the zone to which this 
            record belongs. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.SOARecord.ToString">
            <summary>
            Returns a string representation of the Start Of Authority record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            administrator: [ADMIN] TTL: [TTL] primary server: [SERVER] refresh: [REFRESH] retry: [RETRY] serial number: [SERIAL]
            where [ADMIN] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SOARecord.Administrator"/>
            and   [TTL] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SOARecord.DefaultTtl"/>
            and   [SERVER] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SOARecord.PrimaryServer"/>
            and   [REFRESH] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SOARecord.Refresh"/>
            and   [RETRY] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SOARecord.Retry"/>
            and   [SERIAL] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SOARecord.SerialNo"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.SIGRecord">
            <summary>
            Represents a DNS Cryptographic signature record. (DNS_SIG_DATA)
            </summary>
            <remarks>
            The SIGRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.Signer">
            <summary>
            Gets or sets the signer.
            </summary>
            <remarks>
            Pointer to a string representing the name of the signer that 
            generated the record 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.TypeCovered">
            <summary>
            Gets or sets the type covered
            </summary>
            <remarks>
            Type of RR covered by the signature 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.Algorithm">
            <summary>
            Gets or sets the algorithm
            </summary>
            <remarks>
            Algorithm used with the key specified in the RR. The assigned values are shown in the following table. 
            
            <list type="table">
               <listheader>
                 <term>Value</term>
                 <description>Meaning</description>
               </listheader>
               <item>
                 <term>1</term>
                 <description>RSA/MD5 (RFC 2537)</description>
               </item>
               <item>
                 <term>2</term>
                 <description>Diffie-Hellman (RFC 2539)</description>
               </item>
               <item>
                 <term>3</term>
                 <description>DSA (RFC 2536)</description>
               </item>
               <item>
                 <term>4</term>
                 <description>Elliptic curve cryptography</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.LabelCount">
            <summary>
            Gets or sets the label count
            </summary>
            <remarks>
            Number of labels in the original signature RR owner name. The count does not include the NULL label for the root, nor any initial wildcards. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.OriginalTtl">
            <summary>
            Gets or sets the original ttl
            </summary>
            <remarks>
            TTL value of the RR set signed by the signature RR. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.Expiration">
            <summary>
            Gets or sets the expiration
            </summary>
            <remarks>
            Expiration date, expressed in seconds since the beginning of January 1, 1970, Greenwich Mean Time (GMT), excluding leap seconds. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.TimeSigned">
            <summary>
            Gets or sets the time signed
            </summary>
            <remarks>
            Date and time at which the signature becomes valid, expressed in seconds since the beginning of January 1, 1970, Greenwich Mean Time (GMT), excluding leap seconds. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.KeyTag">
            <summary>
            Gets or sets the key tag
            </summary>
            <remarks>
            Method used to choose a key that verifies a signature. See RFC 2535, Appendix C for the method used to calculate a KeyTag.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.Pad">
            <summary>
            Reserved.
            </summary>
            <remarks>
            Reserved. Used to keep byte field aligned. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.Signature">
            <summary>
            Gets or sets the signature
            </summary>
            <remarks>
            Signature, represented in base 64, formatted as defined in RFC 2535, Appendix A. 
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.PTRRecord">
            <summary>
            Represents the DNS pointer record (DNS_PTR_DATA)
            </summary>
            <remarks>
            The PTRRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.PTRRecord.HostName">
            <summary>
            Gets or sets the hostname of the record.
            </summary>
            <remarks>
            Pointer to a string representing the pointer (PTR) record data.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.PTRRecord.ToString">
            <summary>
            Returns a string representation of the pointer record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            Hostname: [HOST]
            where [HOST] = string representation of <see cref="F:JetBrains.Util.DnsAPI.PTRRecord.HostName"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.NXTRecord">
            <summary>
            Represents the DNS Next record. (DNS_NXT_DATA)
            </summary>
            <remarks>
            The NXTRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.NXTRecord.NameNext">
            <summary>
            Gets or sets the name.
            </summary>
            <remarks>
            Pointer to a string representing the name of the next domain. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.NXTRecord.TypeBitMap">
            <summary>
            Gets or sets the type bit map
            </summary>
            <remarks>
            Number of elements in the wTypes array. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.NXTRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            next: [NAME] type bitmap: [BITMAP]
            where [NAME] = string representation of <see cref="F:JetBrains.Util.DnsAPI.NXTRecord.NameNext"/>
            and   [BITMAP] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.NXTRecord.TypeBitMap"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.NULLRecord">
            <summary>
            Represents NULL data for a DNS resource record. (DNS_NULL_DATA)
            </summary>
            <remarks>
            The NULLRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.NULLRecord.ByteCount">
            <summary>
            Gets or sets the byte count.
            </summary>
            <remarks>
            Number of bytes represented in Data. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.NULLRecord.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <remarks>
            Null data.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.NULLRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            byte count: [BYTECT] data: [DATA]
            where [BYTECT] = string representation of <see cref="F:JetBrains.Util.DnsAPI.NULLRecord.ByteCount"/>
            and   [DATA] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.NULLRecord.Data"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.MXRecord">
            <summary>
            Represents a DNS Mail Exchange record (DNS_MX_DATA).
            </summary>
            <remarks>
            The MXRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.MXRecord.Exchange">
            <summary>
            Gets or sets the exchange's host name
            </summary>
            <remarks>
            Pointer to a string representing the fully qualified domain name 
            (FQDN) of the host willing to act as a mail exchange. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.MXRecord.Preference">
            <summary>
            Gets or sets the preference of the exchange.
            </summary>
            <remarks>
            Preference given to this resource record among others at the same 
            owner. Lower values are preferred. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.MXRecord.Pad">
            <summary>
            Reserved.
            </summary>
            <remarks>
            Reserved. Used to keep pointers DWORD aligned. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.MXRecord.ToString">
            <summary>
            Returns a string representation of this mail exchange.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            exchange (preference): [EXCH] ([PREF])
            where [EXCH] = string representation of <see cref="F:JetBrains.Util.DnsAPI.MXRecord.Exchange"/>
            and   [PREF] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.MXRecord.Preference"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.MINFORecord">
            <summary>
            Represents a DNS mail information (MINFO) record (DNS_MINFO_DATA)
            </summary>
            <remarks>
            The MINFORecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.MINFORecord.Mailbox">
            <summary>
            Gets or sets the mailbox name
            </summary>
            <remarks>
            Pointer to a string representing the fully qualified domain name 
            (FQDN) of the mailbox responsible for the mailing list or mailbox 
            specified in the record's owner name. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.MINFORecord.ErrorsMailbox">
            <summary>
            Gets or sets the error mailbox name
            </summary>
            <remarks>
            Pointer to a string representing the FQDN of the mailbox to receive 
            error messages related to the mailing list. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.MINFORecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            mailbox: [MAILBOX] error mailbox: [ERRMAILBOX]
            where [MAILBOX] = string representation of <see cref="F:JetBrains.Util.DnsAPI.MINFORecord.Mailbox"/>
            and   [ERRMAILBOX] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.MINFORecord.ErrorsMailbox"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.LOCRecord">
            <summary>
            Represents a DNS Location record (DNS_LOC_DATA)
            </summary>
            <remarks>
            <para>
            The LOCRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </para>
            <para>
            For <see cref="F:JetBrains.Util.DnsAPI.LOCRecord.Altitude"/>, altitude above or 
            below sea level may be used as an approximation of altitude 
            relative to the [WGS 84] spheroid, however, there will be 
            differences due to the Earth's surface not being a perfect 
            spheroid. For example, the geoid (which sea level approximates) 
            for the continental US ranges from 10 meters to 50 meters below 
            the [WGS 84] spheroid. Adjustments to <see cref="F:JetBrains.Util.DnsAPI.LOCRecord.Altitude"/> 
            and/or <see cref="F:JetBrains.Util.DnsAPI.LOCRecord.VerPrec"/> will be necessary in most cases. 
            The Defense Mapping Agency publishes geoid height values relative 
            to the [WGS 84] ellipsoid.
            </para>
            <para>
            For more information about the LOC RR, see RFC 1876.
            </para>
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.LOCRecord.Version">
            <summary>
            Gets or sets the version
            </summary>
            <remarks>
            Version number of the representation. Must be zero. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.LOCRecord.Size">
            <summary>
            Gets or sets the size
            </summary>
            <remarks>
            Diameter of a sphere enclosing the described entity, in centimeters, 
            expressed as a pair of four-bit unsigned integers, each ranging from 
            zero to nine, with the most significant four bits representing the base 
            and the second number representing the power of ten by which to multiply 
            the base. This format allows sizes from 0e0 (&lt;1cm) to 9e9 (90,000km) 
            to be expressed. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.LOCRecord.HorPrec">
            <summary>
            Gets or sets the horizontal precision
            </summary>
            <remarks>
            Horizontal precision of the data, in centimeters, expressed using the 
            same representation as wSize. This is the diameter of the horizontal 
            circle of error, rather than a plus or minus value. Matches the 
            interpretation of wSize; to get a plus or minus value, divide by 2. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.LOCRecord.VerPrec">
            <summary>
            Gets or sets the vertical precision
            </summary>
            <remarks>
            Vertical precision of the data, in centimeters, expressed using the 
            same representation as wSize. This value represents the total potential 
            vertical error, rather than a plus or minus value. Matches the 
            interpretation of wSize; to get a plus or minus value, divide by 2. 
            If altitude above or below sea level is used as an approximation for 
            altitude relative to the [WGS 84] ellipsoid, the precision value should 
            be adjusted.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.LOCRecord.Latitude">
            <summary>
            Gets or sets the latitude of the location
            </summary>
            <remarks>
            Latitude of the center of the sphere described by wSize, expressed as a 
            32-bit integer, with the most significant octet first (network standard 
            byte order), in thousandths of a second of arc. 2^31 represents the 
            equator, larger numbers are north latitude. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.LOCRecord.Longitude">
            <summary>
            Gets or sets the longitude of the location
            </summary>
            <remarks>
            Longitude of the center of the sphere described by wSize, expressed as a 
            32-bit integer, most significant octet first (network standard byte order),
            in thousandths of a second of arc, rounded away from the prime meridian. 
            2^31 represents the prime meridian, larger numbers are east longitude.. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.LOCRecord.Altitude">
            <summary>
            Gets or sets the altitude of the location
            </summary>
            <remarks>
            Altitude of the center of the sphere described by wSize, expressed as a 
            32-bit integer, most significant octet first (network standard byte order),
            in centimeters, from a base of 100,000m below the [WGS 84] reference 
            spheroid used by GPS (semimajor axis a=6378137.0, reciprocal flattening 
            rf=298.257223563). See Remarks for more information. 
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.KEYRecord">
            <summary>
            Represents a Public key DNS record (DNS_KEY_DATA)
            </summary>
            <remarks>
            The KEYRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.KEYRecord.Flags">
            <summary>
            Gets or sets the flags
            </summary>
            <remarks>
            Flags used to specify mapping, as described in IETF RFC 2535. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.KEYRecord.Protocol">
            <summary>
            Gets or sets the protocol
            </summary>
            <remarks>
            Protocol for which the key specified in the resource record can be used. The assigned values are shown in the following table. 
            
            <list type="table">
               <listheader>
                 <term>Value</term>
                 <description>Meaning</description>
               </listheader>
               <item>
                 <term>1</term>
                 <description>TLS</description>
               </item>
               <item>
                 <term>2</term>
                 <description>E-Mail</description>
               </item>
               <item>
                 <term>3</term>
                 <description>DNSSEC</description>
               </item>
               <item>
                 <term>4</term>
                 <description>IPSec</description>
               </item>
               <item>
                 <term>255</term>
                 <description>All protocols</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.KEYRecord.Algorithm">
            <summary>
            Gets or sets the algorithm
            </summary>
            <remarks>
            Algorithm used with the key specified in the resource record. The assigned values are shown in the following table. 
            
            <list type="table">
               <listheader>
                 <term>Value</term>
                 <description>Meaning</description>
               </listheader>
               <item>
                 <term>1</term>
                 <description>RSA/MD5 (RFC 2537)</description>
               </item>
               <item>
                 <term>2</term>
                 <description>Diffie-Hellman (RFC 2539)</description>
               </item>
               <item>
                 <term>3</term>
                 <description>DSA (RFC 2536)</description>
               </item>
               <item>
                 <term>4</term>
                 <description>Elliptic curve cryptography</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.KEYRecord.Key">
            <summary>
            Gets or sets the key
            </summary>
            <remarks>
            Public key, represented in base 64 as described in Appendix A of RFC 2535.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.KEYRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            flags: [FLAGS] protocol: [PROTO] algorithm: [ALGOR] key: [KEY]
            where [FLAGS] = string representation of <see cref="F:JetBrains.Util.DnsAPI.KEYRecord.Flags"/>
            and   [PROTO] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.KEYRecord.Protocol"/>
            and   [ALGOR] = string representation of <see cref="F:JetBrains.Util.DnsAPI.KEYRecord.Algorithm"/>
            and   [KEY] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.KEYRecord.Key"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.ARecord">
            <summary>
            Represents a DNS Address record (DNS_A_DATA)
            </summary>
            <remarks>
            The ARecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.ARecord.Address">
            <summary>
            Gets or sets the ip address.
            </summary>
            <remarks>
            IPv4 address, in the form of an uint datatype. 
            <see cref="P:System.Net.IPAddress.Address"/> could be 
            used to fill this property.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.ARecord.ToString">
            <summary>
            Returns a string representation of the A Record
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            ip address: [ADDRESS]
            where [ADDRESS] = <see cref="M:System.Net.IPAddress.ToString"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.AAAARecord">
            <summary>
            Represents a IPv6 Address record (DNS_AAAA_DATA)
            </summary>
            <remarks>
            The AAAARecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.AAAARecord.Address">
            <summary>
            Gets or sets the ip6 address
            </summary>
            <remarks>
            IPv6 address, in the form of an <see cref="T:JetBrains.Util.DnsAPI.IP6Address"/> structure. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.AAAARecord.ToString">
            <summary>
            returns a string representation of this AAAA record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            Address: [ADDRESS]
            where [ADDRESS] = <see cref="M:JetBrains.Util.DnsAPI.IP6Address.ToString"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.ATMARecord">
            <summary>
            Represents a DNS ATM address (ATMA) record (DNS_ATMA_DATA)
            </summary>
            <remarks>
            The ATMARecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.ATMARecord.AddressType">
            <summary>
            Gets or sets the address type
            </summary>
            <remarks>
            ATM address format. Two possible values are DNS_ATMA_FORMAT_E164 or DNS_ATMA_FORMAT_AESA. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.ATMARecord.Address">
            <summary>
            Gets or sets the address
            </summary>
            <remarks>
            ATM address. For E164, represents a NULL-terminated string of less than DNS_ATMA_MAX_ADDR_LENGTH. For AESA, its length is exactly DNS_ATMA_AESA_ADDR_LENGTH. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.ATMARecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            address type: [TYPE] address: [ADDRESS]
            where [TYPE] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.ATMARecord.AddressType"/>
            and   [ADDRESS] = string representation of <see cref="F:JetBrains.Util.DnsAPI.ATMARecord.Address"/>
            </code>
            </remarks>
        </member>
        <member name="M:JetBrains.Util.WeakHashSet`1.#ctor(System.Collections.Generic.ICollection{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakHashSet`1.Entry.HashCode">
            <summary>
            Cached hash code of the key, -1 means entry is free
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakHashSet`1.Entry.NextEntryIndex">
            <summary>
            Index of next entry in the chain of keys with the same hashcodes (modulo size), -1 means last
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakHashSet`1.Entry.PrevEntryIndex">
            <summary>
            Index of previous entry in the chain of keys with the same hashcodes (modulo size), -1 means first
            </summary>
        </member>
        <member name="T:JetBrains.Util.MessageBox">
            <summary>
            Shows a system Message Box.
            Supplies it automatically with icons, main window ownership, and product name in the title.
            Note: you should be using this class wherever possible instead of the system one, as it provides for consistent look.
            </summary>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowCore(System.Void*,System.String,System.String,JetBrains.Interop.WinApi.MessageBoxFlags)">
            <summary>
            Shows a message box, owned by the specific window.
            </summary>
            <param name="window">Handle to the message box owner window, or <c>Null</c> to use the main window of the current application, if available.</param>
            <param name="text">Body text.</param>
            <param name="caption">Optional message box caption, an empty string to use the product name by default. Otherwise, the product name will be prepended to the provided caption text.</param>
            <param name="flags">The buttons, icons, default button, behavior and so on.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowError(System.String,System.String)">
            <summary>
            Shows a message box with an error message.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowError(System.String,System.String,System.IntPtr)">
            <summary>
            Shows a message box with an error message.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="window">Not recommended. Owner window for the message box. Use only in dialogs when the default (app main window) could be inappropriate.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowExclamation(System.String,System.String)">
            <summary>
            Shows a message box with an exclamation message.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowExclamation(System.String,System.String,System.IntPtr)">
            <summary>
            Shows a message box with an exclamation message.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="window">Not recommended. Owner window for the message box. Use only in dialogs when the default (app main window) could be inappropriate.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowInfo(System.String,System.String)">
            <summary>
            Shows a message box with an information message.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowInfo(System.String,System.String,System.IntPtr)">
            <summary>
            Shows a message box with an information message.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="window">Not recommended. Owner window for the message box. Use only in dialogs when the default (app main window) could be inappropriate.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowMessageBox(System.String,System.String,System.IntPtr,JetBrains.Util.MbButton,JetBrains.Util.MbIcon)">
            <summary>
            Shows a message box, owned by the main window.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="window">Not recommended. Owner window for the message box. Use only in dialogs when the default (app main window) could be inappropriate.</param>
            <param name="button">Buttons to use.</param>
            <param name="icon">Icon to use.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowMessageBox(System.String,System.String,JetBrains.Util.MbButton,JetBrains.Util.MbIcon)">
            <summary>
            Shows a message box, owned by the main window.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="button">Buttons to use.</param>
            <param name="icon">Icon to use.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowMessageBox(System.String,JetBrains.Util.MbButton,JetBrains.Util.MbIcon)">
            <summary>
            Shows a message box, owned by the main window.
            Product name is used for the title.
            </summary>
            <param name="text">Message body text.</param>
            <param name="button">Buttons to use.</param>
            <param name="icon">Icon to use.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowOKCancel(System.String,System.String)">
            <summary>
            Shows a OK/Cancel question message box. Returns whether the answer was Yes.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowOKCancel(System.String,System.String,System.IntPtr)">
            <summary>
            Shows a Yes/Cancel question message box. Returns whether the answer was Yes.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="window">Not recommended. Owner window for the message box. Use only in dialogs when the default (app main window) could be inappropriate.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowOKCancel(System.String,System.String,System.IntPtr,System.Boolean)">
            <summary>
            Shows a OK/Cancel question message box. Returns whether the answer was Yes.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="window">Not recommended. Owner window for the message box. Use only in dialogs when the default (app main window) could be inappropriate.</param>
            <param name="defaultButton">true - OK button selected by default, false - Cancel</param>
            >
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowYesNo(System.String,System.String)">
            <summary>
            Shows a Yes/No question message box. Returns whether the answer was Yes.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowYesNo(System.String,System.String,System.IntPtr)">
            <summary>
            Shows a Yes/No question message box. Returns whether the answer was Yes.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="window">Not recommended. Owner window for the message box. Use only in dialogs when the default (app main window) could be inappropriate.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowYesNo(System.String,System.String,System.IntPtr,System.Boolean)">
            <summary>
            Shows a Yes/No question message box. Returns whether the answer was Yes.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="window">Not recommended. Owner window for the message box. Use only in dialogs when the default (app main window) could be inappropriate.</param>
            <param name="defaultButton">true - YES button selected by default, false - NO</param>
            >
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowYesNoCancel(System.String,System.String)">
            <summary>
            Shows a Yes/No/Cancel question message box. Returns whether the answer was Yes or No, <c>Null</c> for Cancel.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowYesNoCancel(System.String,System.String,System.IntPtr)">
            <summary>
            Shows a Yes/No/Cancel question message box. Returns whether the answer was Yes or No, <c>Null</c> for Cancel.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="window">Not recommended. Owner window for the message box. Use only in dialogs when the default (app main window) could be inappropriate.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowYesNoCancel(System.String,System.String,System.IntPtr,System.Nullable{System.Boolean})">
            <summary>
            Shows a Yes/No/Cancel question message box. Returns whether the answer was Yes or No, <c>Null</c> for Cancel.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="window">Not recommended. Owner window for the message box. Use only in dialogs when the default (app main window) could be inappropriate.</param>
            <param name="defaultButton">true - YES button selected by default, false - NO, null - CANCEL</param>
        </member>
        <member name="M:JetBrains.Util.ProcessUtil.GetChildren(System.Diagnostics.Process)">
            <summary>
            Tries to get all of the child processes for a given process.
            Might accidentally mix processes up if the parent process terminates and its ID is reused.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ProcessUtil.Is64BitProcess(System.Diagnostics.Process)">
            <summary>
            Indicates if the process is 32 or 64 bit.
            </summary>
            <param name="process">process to query</param>
            <returns>true: process is 64 bit; false: process is 32 bit</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">e.g. Access denied</exception>
        </member>
        <member name="M:JetBrains.Util.ProcessUtil.Is64BitProcess(System.Void*)">
            <summary>
            Indicates if the process is 32 or 64 bit.
            </summary>
            <param name="hProcess">process handle</param>
            <returns>true: process is 64 bit; false: process is 32 bit</returns>
        </member>
        <member name="M:JetBrains.Util.ProcessUtil.GetParent(System.Diagnostics.Process)">
            <summary>
            Tries to get the parent process for a given process.
            Might accidentally mix processes up if the parent process terminates and its ID is reused.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ProcessUtil.ShutdownGracefully(System.Diagnostics.Process,JetBrains.Util.ProcessUtil.ShutdownFlags,System.TimeSpan,JetBrains.Util.ILogger)">
            <summary>
            Initiates the process graceful shutdown by closing its main window.
            Optionally, kills the process abruptly if the shutdown fails to complete as the timeout expires.
            </summary>
            <param name="process">The process to kill. Could be own process.</param>
            <param name="flags">Behavior flags.</param>
            <param name="waitTimeout">The timeout to wait for the process to shutdown gracefully (before exiting or killing the process). Ignored in some <paramref name="flags" /> combinations.</param>
            <param name="logger">Optional logger</param>
            <returns>Whether the process has exited.</returns>
        </member>
        <member name="M:JetBrains.Util.ProcessUtil.IsRunningElevated">
            <summary>
            Gets whether the process is currently running elevated, i.e. with full administrator privileges. A <c>False</c> return value means either a LUA or an admin-approval mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.ProcessUtil.EncodeEnvironmentStringMbcs(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Text.Encoding)">
            <summary>
            Encodes an env string with a multibyte-character-string encoding, like CoreCLR Debugger Shim would expect when running under Linux.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ProcessUtil.EnumerateJobProcessIds(System.Void*,JetBrains.Util.OnError)">
            <summary>
            Gets the list of processes attached to the given Job object (or its child Job objects).
            </summary>
            <param name="hJob"></param>
            <param name="onerror"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.ProcessUtil.GetMainModuleName">
            <summary>
            Gets the main module name (name without extension of the main executable file, for example). Usually same as ProcessName, but faster.
            Querying the process name thru the process APIs involves doing the full enumeration, which might be undesirable in low-level code.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Util.ProcessUtil.NativeWaitHandle">
            <summary>
            Allows to guise a native HANDLE as a netfx waitable handle.
            </summary>
        </member>
        <member name="T:JetBrains.Util.ProcessUtil.ShutdownFlags">
            <summary>
            <see cref="M:JetBrains.Util.ProcessUtil.ShutdownGracefully(System.Diagnostics.Process,JetBrains.Util.ProcessUtil.ShutdownFlags,System.TimeSpan,JetBrains.Util.ILogger)" /> flags.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ProcessUtil.ShutdownFlags.WaitSynchronously">
            <summary>
            After sending the shutdown control, does not return from the method until either the timeout expires or the process exits.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ProcessUtil.ShutdownFlags.KillAfterTimeout">
            <summary>
            If the process fails to exit within the timeout, the process is killed.
            If <see cref="F:JetBrains.Util.ProcessUtil.ShutdownFlags.WaitSynchronously" />, this method performs a non-pumping wait; otherwise, a timer is used to wait async.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ProcessUtil.CreateProcessInfo`1.IsCreateNewProcessGroup">
            <summary>
            <see cref="F:JetBrains.Interop.WinApi.Constants.CreationFlags.CREATE_NEW_PROCESS_GROUP" />.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ProcessUtil.CreateProcessInfo`1.IsCreateNoWindow">
            <summary>
            <see cref="F:JetBrains.Interop.WinApi.Constants.CreationFlags.CREATE_NO_WINDOW" />.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ProcessUtil.CreateProcessInfo`1.IsDetachedProcess">
            <summary>
            <see cref="F:JetBrains.Interop.WinApi.Constants.CreationFlags.DETACHED_PROCESS" />.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ProcessUtil.CreateProcessInfo`1.IsDontInhetitHandles">
            <summary>
            Passes <c>False</c> to <c>bInheritHandles</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ProcessUtil.CreateProcessInfo`1.IsRedirectStdErr">
            <summary>
            Creates a custom pipe for the stream, gives the reader pipe end handle in <see cref="F:JetBrains.Util.ProcessUtil.CreateProcessInfo`1.BeforeProcessRuns" />.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ProcessUtil.CreateProcessInfo`1.IsRedirectStdIn">
            <summary>
            Creates a custom pipe for the stream, gives the reader pipe end handle in <see cref="F:JetBrains.Util.ProcessUtil.CreateProcessInfo`1.BeforeProcessRuns" />.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ProcessUtil.CreateProcessInfo`1.IsRedirectStdOut">
            <summary>
            Creates a custom pipe for the stream, gives the writer pipe end handle in <see cref="F:JetBrains.Util.ProcessUtil.CreateProcessInfo`1.BeforeProcessRuns" />.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ProcessUtil.CreateProcessInfo`1.OverrideCreateProcessW">
            <summary>
            Optional. If set, overrides the call to Windows NT <c>CreateProcessW</c> with a call to this function instead, with all the exact parameters as designated for the system call. It is an error to set this value when the implementation is not about to call the native WinNT CreateProcessW.
            </summary>
        </member>
        <member name="T:JetBrains.Util.ProcessUtil.Pipes">
            <summary>
            Handles to the standard streams of the child proecss, whichever were requested to be piped, others are NULL.
            </summary>
        </member>
        <member name="T:JetBrains.Util.ProcessUtil.CreateProcessWDelegate">
            <summary>
            A delegate with the exact <c>::CreateProcessW</c> prototype.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Comparator`1">
            <summary>
            A delegate for a <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/>-like method.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ListUtil.SubtractSortedInplace``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Subtracts the <paramref name="subtrahend"/> from the <paramref name="minuend"/>, the difference is written into the <see cref="!:minuend"/>, inplace, so that the original list is destoryed.
            </summary>
            <returns>The difference, in the <paramref name="minuend"/> instance.</returns>
        </member>
        <member name="T:JetBrains.Util.MultiTypeComparer.ComparerInvoker`1">
            <summary>
            Typed wrapper for delegate
            </summary>
            <typeparam name="T">Type of item to present</typeparam>
        </member>
        <member name="M:JetBrains.Util.TemporaryDirectoryCookie.CreateFolder(JetBrains.Util.FileSystemPath,System.String)">
            <summary>
            Creates temporary folder in specified parent folder. Parent folder must exist.
            If parent folder is omitted %temp% is used
            </summary>
        </member>
        <member name="M:JetBrains.Util.TemporaryDirectoryCookie.CreateFolderEx(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath,System.String,System.Boolean)">
            <summary>
            Creates temporary folder in specified parent folder. Parent folder must exist.
            If parent folder is omitted %temp% is used
            </summary>
        </member>
        <member name="M:JetBrains.Util.TemporaryDirectoryCookie.CreateFolder(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath,System.String,System.Boolean)">
            <summary>
            Creates temporary folder in specified parent folder. Parent folder must exist.
            If parent folder is omitted %temp% is used
            </summary>
        </member>
        <member name="M:JetBrains.Util.TemporaryDirectoryCookie.UseFolder(JetBrains.Util.FileSystemPath)">
            <summary>
            Use folder as temporary and  clean-up on dispose
            </summary>
        </member>
        <member name="T:JetBrains.Util.WeakCollection`1">
            <summary>
            Represents collection of items that doesn't strongly hold items
            </summary>
        </member>
        <member name="P:JetBrains.Util.WeakCollection`1.Capacity">
            <summary>
            Gets the approximate number of elements contained in the <see cref="T:JetBrains.Util.WeakCollection`1"></see>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.Add(`0)">
            <summary>
            Adds an weak reference to item to the <see cref="T:JetBrains.Util.WeakCollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:JetBrains.Util.WeakCollection`1"></see>.</param>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:JetBrains.Util.WeakCollection`1"></see>.
            </summary>
            <returns>
            true if item was successfully removed from the <see cref="T:JetBrains.Util.WeakCollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:JetBrains.Util.WeakCollection`1"></see>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:JetBrains.Util.WeakCollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:JetBrains.Util.WeakCollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:JetBrains.Util.WeakCollection`1"></see> contains a specific value.
            </summary>
            <returns>
            true if item is found in the <see cref="T:JetBrains.Util.WeakCollection`1"></see>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:JetBrains.Util.WeakCollection`1"></see>.</param>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.First">
            <summary>
            Returns the first live element from collection
            </summary>
            <returns>The first live element from collection</returns>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.First(System.Func{`0,System.Boolean})">
            <summary>
            Returns the first live element from collection that satisfies a specified condition
            </summary>
            <returns>The first live element from collection that satisfies a specified condition</returns>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.Last">
            <summary>
            Returns the last live element from collection
            </summary>
            <returns>The last live element from collection</returns>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.Last(System.Func{`0,System.Boolean})">
            <summary>
            Returns the last live element from collection that satisfies a specified condition
            </summary>
            <returns>The last live element from collection that satisfies a specified condition</returns>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.Sweep">
            <summary>
            Removes garbage from the list
            </summary>
        </member>
        <member name="T:JetBrains.Util.EnumPattern">
            <summary>
            Base class for all enum patterns
            </summary>
        </member>
        <member name="T:JetBrains.Util.BidirectionalMap`2">
            <summary>
            Mapping from one family of objects into another and vice versa.
            </summary>
        </member>
        <member name="P:JetBrains.Util.BidirectionalMap`2.Count">
            <summary>
            Get the number of mappings.
            As we implement the identity mapping, the number of items on both sides is always in sync.
            </summary>
        </member>
        <member name="M:JetBrains.Util.BidirectionalMap`2.Add(`0,`1)">
            <summary>
            Adds a new mapping to the map. Both ends must be unique in their maps.
            </summary>
        </member>
        <member name="M:JetBrains.Util.BidirectionalMap`2.SetMapping(`0,`1,System.Boolean)">
            <summary>
            Adds a new mapping to the map. You should use <see cref="M:JetBrains.Util.BidirectionalMap`2.Add(`0,`1)"/> whenever possible, as it throws on dpulicate keys.
            </summary>
            <param name="left">Left key.</param>
            <param name="right">Right key.</param>
            <param name="bIgnoreConflicts">Whether to ignore duplicate keys in left and right collections silently. Not recommended. The conflicting mappings will be dropped.</param>
        </member>
        <member name="T:JetBrains.Util.Diff.DiffFragment">
            <summary>
            Single frame after diffing two entities
            </summary>
        </member>
        <member name="T:JetBrains.Util.Diff.DiffFragmentType">
            <summary>
            Type of the single diff frame
            </summary>
        </member>
        <member name="T:JetBrains.Util.Rects">
            <summary>
            A helper class for carrying out advanced operations over rectangles.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Rects.MaxSize">
            <summary>
            Gets the size whose both components are <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.AbsMaximum(System.Drawing.Size)">
            <summary>
            Returns the maximum of the size dimensions absolute values.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignWithin(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Makes sure one rectangle is wholy located within the other, preferring to keep its size if possible and executing minimal moves.
            </summary>
            <param name="source">The rectangle to align.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignWithinUsingMinSize(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Try to make sure one rectangle is located within the other, preferring to keep its size if possible and executing minimal moves.
            If source rectangle is bigger than the bounds, ensure its left top corner is within the bounds.
            </summary>
            <param name="source">The rectangle to align.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
            <param name="minSize">The rectangle minimal size.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenter(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Centers one rectangle within another.
            </summary>
            <param name="source">The rectangle to align. The returned value will have the same size.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenter(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Centers one rectangle within another.
            </summary>
            <param name="source">The rectangle to align. The returned value will have the same size.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenter(System.Drawing.Size,System.Drawing.Rectangle)">
            <summary>
            Centers one rectangle within another.
            </summary>
            <param name="source">The size of the rectangle to align. The returned value will have the same size.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenter(System.Windows.Size,System.Windows.Rect)">
            <summary>
            Centers one rectangle within another.
            </summary>
            <param name="source">The size of the rectangle to align. The returned value will have the same size.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenterAndCrop(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Centers one rectangle within another and crops down as needed.
            </summary>
            <param name="source">The rectangle to align. The returned value may be cropped down by the <paramref name="bounds"/>.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenterAndCrop(System.Drawing.Size,System.Drawing.Rectangle)">
            <summary>
            Centers one rectangle within another and crops down as needed.
            </summary>
            <param name="source">The size of the rectangle to align. The returned value may be cropped down by the <paramref name="bounds"/>.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenterAndDownscale(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Centers one rectangle within another. If the <paramref name="source"/> does not fit into <paramref name="bounds"/>, it's downscaled proportionally.
            </summary>
            <param name="source">The rectangle to align. The returned value may be downscaled.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenterAndDownscale(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Centers one rectangle within another. If the <paramref name="source"/> does not fit into <paramref name="bounds"/>, it's downscaled proportionally.
            </summary>
            <param name="source">The rectangle to align. The returned value may be downscaled.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenterAndDownscale(System.Drawing.Size,System.Drawing.Rectangle)">
            <summary>
            Centers one rectangle within another. If the <paramref name="source"/> does not fit into <paramref name="bounds"/>, it's downscaled proportionally.
            </summary>
            <param name="source">The size of the rectangle to align. The returned value may be downscaled.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenterAndDownscale(System.Windows.Size,System.Windows.Rect)">
            <summary>
            Centers one rectangle within another. If the <paramref name="source"/> does not fit into <paramref name="bounds"/>, it's downscaled proportionally.
            </summary>
            <param name="source">The size of the rectangle to align. The returned value may be downscaled.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.Attach(System.Drawing.Rectangle@,System.Windows.Forms.DockStyle,System.Int32)">
            <summary>
            Returns a non-collapsed rectangle attached outside the <paramref name="anchor"/> rectangle.
            </summary>
            <param name="anchor">The attachment anchor. Increased to include the newly-attached rectangle on exit, so that to attach multiple rects in sequence.</param>
            <param name="dockstyle">The docking style, which can be a side-dock only.</param>
            <param name="size">The characteristic size of the side-attached rectangle (only either width or height, whichever is not defined by the attachment process).</param>
            <returns>The rectangle attached at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Attach(System.Drawing.Rectangle@,System.Windows.Forms.DockStyle,System.Drawing.Size)">
            <summary>
            Returns a non-collapsed rectangle attached outside the <paramref name="anchor"/> rectangle.
            </summary>
            <param name="anchor">The attachment anchor. Increased to include the newly-attached rectangle on exit, so that to attach multiple rects in sequence.</param>
            <param name="dockstyle">The docking style, which can be a side-dock only.</param>
            <param name="size">The characteristic size of the side-attached rectangle (only either width or height is used, whichever is not defined by the attachment process).</param>
            <returns>The rectangle attached at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Attach(System.Drawing.Rectangle,System.Windows.Forms.DockStyle,System.Int32)">
            <summary>
            Returns a non-collapsed rectangle attached outside the <paramref name="anchor"/> rectangle.
            </summary>
            <param name="anchor">The attachment anchor.</param>
            <param name="dockstyle">The docking style, which can be a side-dock only.</param>
            <param name="size">The characteristic size of the side-attached rectangle (only either width or height, whichever is not defined by the attachment process).</param>
            <returns>The rectangle attached at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Attach(System.Drawing.Rectangle,System.Windows.Forms.DockStyle,System.Drawing.Size)">
            <summary>
            Returns a non-collapsed rectangle attached outside the <paramref name="anchor"/> rectangle.
            </summary>
            <param name="anchor">The attachment anchor.</param>
            <param name="dockstyle">The docking style, which can be a side-dock only.</param>
            <param name="size">The characteristic size of the side-attached rectangle (only either width or height is used, whichever is not defined by the attachment process).</param>
            <returns>The rectangle attached at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.ClipSmart(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Performs the smart clipping that returns a non-all-zeros rectangle even if there is no intersection.
            Ie, when the <paramref name="source"/> rect lays outside the <paramref name="bounds"/> over some side, the result is a zero-thick projection on that side.
            </summary>
            <param name="source"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Rects.ClipSmart(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Performs the smart clipping that returns a non-all-zeros rectangle even if there is no intersection.
            Ie, when the <paramref name="source"/> rect lays outside the <paramref name="bounds"/> over some side, the result is a zero-thick projection on that side.
            </summary>
            <param name="source"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Collapse(System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)">
            <summary>
            Collapses a rectangle down to a point.
            The inside modes are located on the inner sides of the rectangle, and outside ones are one point outside.
            The bottom-right sides are not included within the rectangle area.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Collapse(System.Windows.Rect,JetBrains.UI.Anchoring2D)">
            <summary>
            Collapses a rectangle down to a point.
            The inside modes are located on the inner sides of the rectangle, and outside ones are one point outside.
            The bottom-right sides are not included within the rectangle area.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Constrain(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Constrains the <paramref name="source"/> size by the <paramref name="limit"/>.
            </summary>
            <param name="source">The source size to be limited. May be non-normalized.</param>
            <param name="limit">The limiting size. Must be normalized.</param>
            <returns>The constrainted <paramref name="source"/>, guaranteed to be normalized.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Constrain(System.Windows.Size,System.Windows.Size)">
            <summary>
            Constrains the <paramref name="source"/> size by the <paramref name="limit"/>.
            </summary>
            <param name="source">The source size to be limited. May be non-normalized.</param>
            <param name="limit">The limiting size. Must be normalized.</param>
            <returns>The constrainted <paramref name="source"/>, guaranteed to be normalized.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Deflate(System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Deflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will shrink.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Deflate(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Deflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will shrink.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Deflate(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Deflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will shrink.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Deflate(System.Drawing.Rectangle,System.Windows.Forms.Padding)">
            <summary>
            Deflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will shrink.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Deflate(System.Windows.Rect,System.Windows.Thickness)">
            <summary>
            Deflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will shrink.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Dock(System.Drawing.Rectangle@,System.Windows.Forms.DockStyle,System.Int32)">
            <summary>
            Returns a non-collapsed rectangle docked within the <paramref name="space"/> rectangle.
            </summary>
            <param name="space">The docking space. Decreased to exclude the newly-docked rectangle on exit, so that to dock multiple rects in sequence.</param>
            <param name="dockstyle">The docking style, which can be either any side or fill.</param>
            <param name="size">The characteristic size of the side-docked rectangle (either width or height, whichever is not defined by the docking process). In the <see cref="F:System.Windows.Forms.DockStyle.Fill"/> case, this parameter is ignored.</param>
            <returns>The rectangle docked at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Dock(System.Windows.Rect@,System.Nullable{System.Windows.Controls.Dock},System.Double)">
            <summary>
            Returns a non-collapsed rectangle docked within the <paramref name="space"/> rectangle.
            </summary>
            <param name="space">The docking space. Decreased to exclude the newly-docked rectangle on exit, so that to dock multiple rects in sequence.</param>
            <param name="dock">The docking style, which can be either any side or fill.</param>
            <param name="size">The characteristic size of the side-docked rectangle (either width or height, whichever is not defined by the docking process). In the <see cref="F:System.Windows.Forms.DockStyle.Fill"/> case, this parameter is ignored.</param>
            <returns>The rectangle docked at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Dock(System.Drawing.Rectangle@,System.Windows.Forms.DockStyle,System.Drawing.Size)">
            <summary>
            Returns a non-collapsed rectangle docked within the <paramref name="space"/> rectangle.
            </summary>
            <param name="space">The docking space. Decreased to exclude the newly-docked rectangle on exit, so that to dock multiple rects in sequence.</param>
            <param name="dockstyle">The docking style, which can be either any side or fill.</param>
            <param name="size">The characteristic size of the side-docked rectangle (only either width or height is used, whichever is not defined by the docking process). In the <see cref="F:System.Windows.Forms.DockStyle.Fill"/> case, this parameter is ignored.</param>
            <returns>The rectangle docked at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Dock(System.Windows.Rect@,System.Nullable{System.Windows.Controls.Dock},System.Windows.Size)">
            <summary>
            Returns a non-collapsed rectangle docked within the <paramref name="space"/> rectangle.
            </summary>
            <param name="space">The docking space. Decreased to exclude the newly-docked rectangle on exit, so that to dock multiple rects in sequence.</param>
            <param name="dock">The docking style, which can be either any side or fill.</param>
            <param name="size">The characteristic size of the side-docked rectangle (only either width or height is used, whichever is not defined by the docking process). In the <see cref="F:System.Windows.Forms.DockStyle.Fill"/> case, this parameter is ignored.</param>
            <returns>The rectangle docked at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Dock(System.Drawing.Rectangle,System.Windows.Forms.DockStyle,System.Int32)">
            <summary>
            Returns a non-collapsed rectangle docked within the <paramref name="space"/> rectangle.
            </summary>
            <param name="space">The docking space.</param>
            <param name="dockstyle">The docking style, which can be either any side or fill.</param>
            <param name="size">The characteristic size of the side-docked rectangle (either width or height, whichever is not defined by the docking process). In the <see cref="F:System.Windows.Forms.DockStyle.Fill"/> case, this parameter is ignored.</param>
            <returns>The rectangle docked at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Dock(System.Windows.Rect,System.Nullable{System.Windows.Controls.Dock},System.Double)">
            <summary>
            Returns a non-collapsed rectangle docked within the <paramref name="space"/> rectangle.
            </summary>
            <param name="space">The docking space.</param>
            <param name="dock">The docking style, which can be either any side or fill.</param>
            <param name="size">The characteristic size of the side-docked rectangle (either width or height, whichever is not defined by the docking process). In the <see cref="F:System.Windows.Forms.DockStyle.Fill"/> case, this parameter is ignored.</param>
            <returns>The rectangle docked at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Dock(System.Drawing.Rectangle,System.Windows.Forms.DockStyle,System.Drawing.Size)">
            <summary>
            Returns a non-collapsed rectangle docked within the <paramref name="space"/> rectangle.
            </summary>
            <param name="space">The docking space.</param>
            <param name="dockstyle">The docking style, which can be either any side or fill.</param>
            <param name="size">The characteristic size of the side-docked rectangle (only either width or height is used, whichever is not defined by the docking process). In the <see cref="F:System.Windows.Forms.DockStyle.Fill"/> case, this parameter is ignored.</param>
            <returns>The rectangle docked at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Dock(System.Windows.Rect,System.Nullable{System.Windows.Controls.Dock},System.Windows.Size)">
            <summary>
            Returns a non-collapsed rectangle docked within the <paramref name="space"/> rectangle.
            </summary>
            <param name="space">The docking space.</param>
            <param name="dock">The docking style, which can be either any side or fill.</param>
            <param name="size">The characteristic size of the side-docked rectangle (only either width or height is used, whichever is not defined by the docking process). In the <see cref="F:System.Windows.Forms.DockStyle.Fill"/> case, this parameter is ignored.</param>
            <returns>The rectangle docked at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.EnsureEmptySize(System.Drawing.Size)">
            <summary>
            Returns <see cref="F:System.Drawing.Size.Empty"/> if the given <paramref name="size"/> is "enhanced-empty", that is, either it's <see cref="P:System.Drawing.Size.IsEmpty"/>, or one of its dimensions is zero. Otherwise, returns the original size.
            Curcumvents the fact that <see cref="P:System.Drawing.Size.IsEmpty"/> requires both dimensions to be simultaneousely zero.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.FromLtrbNonnegative(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a rectangle in a way similar to <see cref="M:System.Drawing.Rectangle.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)"/>, but ensures that no dimension is negative.
            If near is less than far, they're both set to the middle value.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.FromLtrbNonnegative(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a rectangle in a way similar to <see cref="M:System.Drawing.Rectangle.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)"/>, but ensures that no dimension is negative.
            If near is less than far, they're both set to the middle value.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.GetBorder(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Gets a set of non-overlapping rectangles forming a border just inside the given rect, of the thickness specified.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.GetCenter(System.Drawing.Rectangle)">
            <summary>
            Gets a point that is the center of the rectangle.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.GetCenter(System.Windows.Rect)">
            <summary>
            Gets a point that is the center of the rectangle.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.GetCenter(JetBrains.Interop.WinApi.RECT)">
            <summary>
            Gets a point that is the center of the rectangle.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Inflate(System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Inflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will grow.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Inflate(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Inflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will grow.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Inflate(System.Drawing.Rectangle,System.Windows.Forms.Padding)">
            <summary>
            Inflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will grow.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Inflate(System.Windows.Rect,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will grow.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Inflate(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Inflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will grow.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Inflate(System.Windows.Rect,System.Windows.Thickness)">
            <summary>
            Inflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will grow.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsCollapsed(System.Drawing.Size)">
            <summary>
            Gets whether the given size is collapsed, that is, has a zero or negative dimension.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsCollapsed(System.Windows.Size)">
            <summary>
            Gets whether the given size is collapsed, that is, has a zero or negative dimension.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsCollapsed(System.Drawing.Rectangle)">
            <summary>
            Gets whether the given rectangle is collapsed, that is, has a zero or negative dimension.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsCollapsed(System.Windows.Rect)">
            <summary>
            Gets whether the given rectangle is collapsed, that is, has a zero or negative dimension.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsCollapsed(System.Nullable{System.Windows.Rect})">
            <summary>
            Gets whether the given rectangle is collapsed, that is, has a zero or negative dimension.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsConstrained(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Checks whether the <paramref name="source"/> size satisfies the <paramref name="limit"/>, in terms of the <see cref="M:JetBrains.Util.Rects.Constrain(System.Drawing.Size,System.Drawing.Size)"/> function.
            </summary>
            <param name="source">The source size to be limited. May be non-normalized.</param>
            <param name="limit">The limiting size. Must be normalized.</param>
            <returns>Whether executing <see cref="M:JetBrains.Util.Rects.Constrain(System.Drawing.Size,System.Drawing.Size)"/> over <paramref name="source"/> and <paramref name="limit"/> won't change the <paramref name="source"/>.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.IsConstrained(System.Windows.Size,System.Windows.Size)">
            <summary>
            Checks whether the <paramref name="source"/> size satisfies the <paramref name="limit"/>, in terms of the <see cref="M:JetBrains.Util.Rects.Constrain(System.Drawing.Size,System.Drawing.Size)"/> function.
            </summary>
            <param name="source">The source size to be limited. May be non-normalized.</param>
            <param name="limit">The limiting size. Must be normalized.</param>
            <returns>Whether executing <see cref="M:JetBrains.Util.Rects.Constrain(System.Drawing.Size,System.Drawing.Size)"/> over <paramref name="source"/> and <paramref name="limit"/> won't change the <paramref name="source"/>.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.IsEmptyArea(System.Drawing.Size)">
            <summary>
            Checks whether the size represents an empty area.
            Unlike <see cref="P:System.Drawing.Size.IsEmpty"/>, returns <c>True</c> if either of dimensions is empty (OR condition).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsEmptyArea(System.Drawing.Rectangle)">
            <summary>
            Checks whether the rectangle represents an empty area.
            Unlike <see cref="P:System.Drawing.Rectangle.IsEmpty"/>, returns <c>True</c> if either of dimensions is empty (OR condition), and ignores the <see cref="P:System.Drawing.Rectangle.Location"/> completely.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsInfinite(System.Drawing.Size)">
            <summary>
            Gets whether the given rectangle is close to maxvalues.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsNanOrInf(System.Windows.Point)">
            <summary>
            Gets whether any of the coordinates are NAN or INF (<see cref="M:JetBrains.NumberUtil.IsNanOrInf(System.Double)"/>).
            </summary>
            <seealso cref="M:JetBrains.Util.Rects.AssertIsReal(System.Windows.Point,System.String)"/>
        </member>
        <member name="M:JetBrains.Util.Rects.IsNanOrInf(System.Windows.Size)">
            <summary>
            Gets whether any of the coordinates are NAN or INF (<see cref="M:JetBrains.NumberUtil.IsNanOrInf(System.Double)"/>).
            </summary>
            <seealso cref="M:JetBrains.Util.Rects.AssertIsReal(System.Windows.Size,System.String)"/>
        </member>
        <member name="M:JetBrains.Util.Rects.IsNanOrInf(System.Windows.Vector)">
            <summary>
            Gets whether any of the coordinates are NAN or INF (<see cref="M:JetBrains.NumberUtil.IsNanOrInf(System.Double)"/>).
            </summary>
            <seealso cref="M:JetBrains.Util.Rects.AssertIsReal(System.Windows.Size,System.String)"/>
        </member>
        <member name="M:JetBrains.Util.Rects.IsNanOrInf(System.Windows.Rect)">
            <summary>
            Gets whether any of the coordinates are NAN or INF (<see cref="M:JetBrains.NumberUtil.IsNanOrInf(System.Double)"/>).
            </summary>
            <seealso cref="M:JetBrains.Util.Rects.AssertIsReal(System.Windows.Rect,System.String)"/>
        </member>
        <member name="M:JetBrains.Util.Rects.IsNormalized(System.Drawing.Size)">
            <summary>
            Checks whether the size corresponds to a normalized rectangle.
            A normalized rectangle is such whose left coordinate is not greater than right, and top coordinate is not greater than bottom.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsNormalized(System.Windows.Size)">
            <summary>
            Checks whether the size corresponds to a normalized rectangle.
            A normalized rectangle is such whose left coordinate is not greater than right, and top coordinate is not greater than bottom.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsNormalized(System.Drawing.Rectangle)">
            <summary>
            Checks whether the rectangle is normalized.
            A normalized rectangle is such whose left coordinate is not greater than right, and top coordinate is not greater than bottom.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsNormalized(System.Windows.Rect)">
            <summary>
            Checks whether the rectangle is normalized.
            A normalized rectangle is such whose left coordinate is not greater than right, and top coordinate is not greater than bottom.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Max(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Gets the normalized maximum of two sizes, max operation executed independently against both dimensions.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Max(System.Windows.Size,System.Windows.Size)">
            <summary>
            Gets the normalized maximum of two sizes, max operation executed independently against both dimensions.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Min(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Gets the normalized minimum of two sizes, min operation executed independently against both dimensions.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Min(System.Windows.Size,System.Windows.Size)">
            <summary>
            Gets the normalized minimum of two sizes, min operation executed independently against both dimensions.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Normalize(System.Drawing.Rectangle)">
            <summary>
            Normalizes the rectangle so that it has non-negative <see cref="P:System.Drawing.Rectangle.Width"/> and <see cref="P:System.Drawing.Rectangle.Height"/>, and passes the <see cref="M:JetBrains.Util.Rects.IsNormalized(System.Drawing.Rectangle)"/> with <c>True</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Normalize(System.Windows.Rect)">
            <summary>
            Normalizes the rectangle so that it has non-negative <see cref="P:System.Drawing.Rectangle.Width"/> and <see cref="P:System.Drawing.Rectangle.Height"/>, and passes the <see cref="M:JetBrains.Util.Rects.IsNormalized(System.Drawing.Rectangle)"/> with <c>True</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Normalize(System.Drawing.Size)">
            <summary>
            Normalizes the size so that it <see cref="M:JetBrains.Util.Rects.IsNormalized(System.Drawing.Size)"/>. All the negative components are pulled up to become zero.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Offset(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Offsets the rectangle location by the given amount.
            </summary>
            <param name="source">The source rectangle.</param>
            <param name="offset">The offset distance.</param>
            <returns>The resulting rectangle.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Offset(System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Offsets the rectangle location by the given amount.
            </summary>
            <param name="source">The source rectangle.</param>
            <param name="offset">The offset distance.</param>
            <returns>The resulting rectangle.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.SetBottom(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetBottom(System.Windows.Rect,System.Double)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetBottom(System.Drawing.Rectangle@,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetBottom(System.Windows.Rect@,System.Double)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetLeft(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetLeft(System.Windows.Rect,System.Double)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetLeft(System.Drawing.Rectangle@,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetLeft(System.Windows.Rect@,System.Double)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetRight(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetRight(System.Windows.Rect,System.Double)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetRight(System.Drawing.Rectangle@,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetRight(System.Windows.Rect@,System.Double)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetTop(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetTop(System.Windows.Rect,System.Double)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetTop(System.Drawing.Rectangle@,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetTop(System.Windows.Rect@,System.Double)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Size(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Drawing.Size"/> object that is guaranteed to be normalized and, if at least one of its sides is empty, to be <see cref="P:System.Drawing.Size.IsEmpty"/>.
            </summary>
            <param name="width">The desired width.</param>
            <param name="height">The desired height.</param>
            <returns>A normalized size whose sides can only simultaneousely be <c>0</c>.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Size(System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:System.Drawing.Size"/> object that is guaranteed to be normalized and, if at least one of its sides is zero, to be all-zero.
            </summary>
            <param name="width">The desired width.</param>
            <param name="height">The desired height.</param>
            <returns>A normalized size whose sides can only simultaneousely be <c>0</c>.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Size(System.Drawing.Size)">
            <summary>
            Creates a new <see cref="T:System.Drawing.Size"/> object that is guaranteed to be normalized and, if at least one of its sides is empty, to be <see cref="P:System.Drawing.Size.IsEmpty"/>.
            </summary>
            <param name="size">The desired width and height.</param>
            <returns>A normalized size whose sides can only simultaneousely be <c>0</c>.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.StackHorizontally(System.Collections.Generic.IEnumerable{System.Drawing.Size},System.Int32)">
            <summary>
            Stacks a number of sizes horizontally and returns the resulting size.
            If a size in the list is collapsed, it's not included and the gaps for it are not added.
            </summary>
            <param name="sizes">The list of sizes to stack.</param>
            <param name="gap">The gap to insert between the adjacent stack-items.</param>
            <returns>The bounding rect of the result.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.StackHorizontally(System.Int32,System.Drawing.Size[])">
            <summary>
            Stacks a number of sizes horizontally and returns the resulting size.
            If a size in the list is collapsed, it's not included and the gaps for it are not added.
            </summary>
            <param name="sizes">The list of sizes to stack.</param>
            <param name="gap">The gap to insert between the adjacent stack-items.</param>
            <returns>The bounding rect of the result.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.StackVertically(System.Collections.Generic.IEnumerable{System.Drawing.Size},System.Int32)">
            <summary>
            Stacks a number of sizes vertically and returns the resulting size.
            If a size in the list is collapsed, it's not included and the gaps for it are not added.
            </summary>
            <param name="sizes">The list of sizes to stack.</param>
            <param name="gap">The gap to insert between the adjacent stack-items.</param>
            <returns>The bounding rect of the result.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.StackVertically(System.Int32,System.Drawing.Size[])">
            <summary>
            Stacks a number of sizes vertically and returns the resulting size.
            If a size in the list is collapsed, it's not included and the gaps for it are not added.
            </summary>
            <param name="sizes">The list of sizes to stack.</param>
            <param name="gap">The gap to insert between the adjacent stack-items.</param>
            <returns>The bounding rect of the result.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Unite(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Unites the two rectangle and returns a rect that encompasses both.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.UniteHorizontally(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Unites the horizontal coordinates of the rectangles, and takes the y-coordinates solely from <paramref name="source"/>.
            </summary>
            <param name="source">The first rectangle, features the y-coordinates of the retval.</param>
            <param name="other">The second rectangle.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.UniteHorizontally(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Unites the horizontal coordinates of the rectangles, and takes the y-coordinates solely from <paramref name="source"/>.
            </summary>
            <param name="source">The first rectangle, features the y-coordinates of the retval.</param>
            <param name="other">The second rectangle.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.UniteVertically(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Unites the vertical coordinates of the rectangles, and takes the x-coordinates solely from <paramref name="source"/>.
            </summary>
            <param name="source">The first rectangle, features the x-coordinates of the retval.</param>
            <param name="other">The second rectangle.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.UniteVertically(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Unites the vertical coordinates of the rectangles, and takes the x-coordinates solely from <paramref name="source"/>.
            </summary>
            <param name="source">The first rectangle, features the x-coordinates of the retval.</param>
            <param name="other">The second rectangle.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AssertIsReal(System.Windows.Point,System.String)">
            <summary>
            Asserts that point coordinates are real numbers. Fluent.
            Throws on <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.PositiveInfinity"/>, <see cref="F:System.Double.NegativeInfinity"/>.
            </summary>
            <param name="pt">Point to test.</param>
            <param name="failmessage">Optional. Message to include in the failure exception.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AssertIsReal(System.Windows.Rect,System.String)">
            <summary>
            Asserts that rectangle coordinates are real numbers. Fluent.
            Throws on <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.PositiveInfinity"/>, <see cref="F:System.Double.NegativeInfinity"/>.
            </summary>
            <param name="rect">Point to test.</param>
            <param name="failmessage">Optional. Message to include in the failure exception.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AssertIsReal(System.Windows.Size,System.String)">
            <summary>
            Asserts that size dimensions are real numbers. Fluent.
            Throws on <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.PositiveInfinity"/>, <see cref="F:System.Double.NegativeInfinity"/>.
            </summary>
            <param name="size">Point to test.</param>
            <param name="failmessage">Optional. Message to include in the failure exception.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.Collapse_Linear(System.Int32,System.Int32,JetBrains.UI.Anchoring)">
            <summary>
            A helper function for the <see cref="M:JetBrains.Util.Rects.Collapse(System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)"/> func, handles one dimension.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Collapse_Linear(System.Double,System.Double,JetBrains.UI.Anchoring)">
            <summary>
            A helper function for the <see cref="M:JetBrains.Util.Rects.Collapse(System.Windows.Rect,JetBrains.UI.Anchoring2D)"/> func, handles one dimension.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.StackImpl(System.Collections.Generic.IEnumerable{System.Drawing.Size},System.Int32,System.Boolean)">
            <summary>
            Implements the size-stacking.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Rects.RectsComparer">
            <summary>
            A comparer for the rectangles.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.RectsComparer.Compare(System.Collections.Generic.IEnumerable{System.Drawing.Rectangle},System.Collections.Generic.IEnumerable{System.Drawing.Rectangle})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            Value Condition Less than zerox is less than beta.Zerox equals beta.Greater than zerox is greater than beta.
            </returns>
            
            <param name="beta">The second object to compare.</param>
            <param name="alpha">The first object to compare.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.RectsComparer.Compare(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            Value Condition Less than zerox is less than beta.Zerox equals beta.Greater than zerox is greater than beta.
            </returns>
            
            <param name="beta">The second object to compare.</param>
            <param name="alpha">The first object to compare.</param>
        </member>
        <member name="T:JetBrains.Util.EnsureWritableResult">
            <summary>
            Represents the result of an attempt to make files writable
            </summary>
        </member>
        <member name="F:JetBrains.Util.EnsureWritableResult.SUCCESS">
            <summary>
            All files were successfully made writable
            </summary>
        </member>
        <member name="F:JetBrains.Util.EnsureWritableResult.FAILURE">
            <summary>
            The attempt failed for some files
            </summary>
        </member>
        <member name="F:JetBrains.Util.EnsureWritableResult.CHANGES_DETECTED">
            <summary>
            Some files were modified as a result of the attempt to make them writable
            </summary>
        </member>
        <member name="F:JetBrains.Util.EnsureWritableResult.CANCELLED">
            <summary>
            Cancelled by user
            </summary>
        </member>
        <member name="T:JetBrains.Util.Events.EventDispatcher">
            <summary>
            Helper class for dispatching pending events
            </summary>
        </member>
        <member name="F:JetBrains.Util.Events.EventDispatcher.myDispatchingListeners">
            <summary>
            The stack of listeners being dispatched
            </summary>
        </member>
        <member name="F:JetBrains.Util.Events.EventDispatcher.myListeners">
            <summary>
            List of listeners ordered by the time listener was added
            </summary>
        </member>
        <member name="F:JetBrains.Util.Events.EventDispatcher.myListenersMap">
            <summary>
            Maps listeners to "notified" flags
            </summary>
        </member>
        <member name="F:JetBrains.Util.Events.EventDispatcher.myLastArgs">
            <summary>
            The last call args
            </summary>
        </member>
        <member name="F:JetBrains.Util.Events.EventDispatcher.myListenersArray">
            <summary>
            Array of listeners
            </summary>
        </member>
        <member name="T:JetBrains.Util.IndexComparer`1">
            <summary>
            Compares elements by their positions in an ArrayList
            </summary>
        </member>
        <member name="T:JetBrains.Util.NamedAutoResetEvent">
            <summary>
            Event that can be used for cross-process synchronization
            </summary>
        </member>
        <member name="T:JetBrains.Util.RegistryUtil">
            <summary>
            This is a convenient wrapper around Registry API. It recognizes registry paths of the XPath syntax
            </summary>
        </member>
        <member name="M:JetBrains.Util.RegistryUtil.GetMimeType(System.String)">
            <summary>
            Gets the MIME type of the file by looking up Registry for its extension.
            </summary>
        </member>
        <member name="T:JetBrains.Util.TextStreamReader">
            <summary>Uses one character to represent new line.</summary>
        </member>
        <member name="T:JetBrains.Util.TextStringReader">
            <summary>Uses one character to represent new line.</summary>
        </member>
        <member name="T:JetBrains.Util.Uuid">
            <summary>
            Implementation of RFC 4122 - A Universally Unique Identifier (UUID) URN Namespace.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Uuid.NewUuid(System.Guid,System.String)">
            <summary>
            Creates a version 5 name-based UUID.
            </summary>
            <param name="namespaceGuid">The namespace UUID.</param>
            <param name="value">The value.</param>
            <returns>The UUID for the given namespace and value.</returns>
        </member>
        <member name="M:JetBrains.Util.Version2.ToVersion4WithMinusOnes">
            <summary>
            <see cref="P:System.Version.Major" /> and <see cref="P:System.Version.Minor" /> are taken from this version, and <see cref="P:System.Version.Build" /> and <see cref="P:System.Version.Revision" /> are set to <c>-1</c>. The resulting version object has only two components defined, and renders as <c>x.y</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Version2.ToVersion4WithZeros">
            <summary>
            <see cref="P:System.Version.Major" /> and <see cref="P:System.Version.Minor" /> are taken from this version, and <see cref="P:System.Version.Build" /> and <see cref="P:System.Version.Revision" /> are set to <c>0</c>. The resulting version object has all four components defined, and renders as <c>x.y.0.0</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.VersionExtensions.ToStringWithNoZerosForBuildAndRevision(System.Version)">
            <summary>
            Prints version to string omitting trailing .0 and .0.0
            </summary>
            <param name="version">Version to print</param>
            <returns>Version string without trailing .0 and .0.0</returns>
        </member>
        <member name="M:JetBrains.Util.VersionExtensions.ToVersionWithNoZeroesForBuildAndRevision(System.Version)">
            <summary>
            Returns version with trailing zeroes replaced with -1
            </summary>
            <param name="version">Version to update</param>
            <returns>Version with no trailing zeroes</returns>
        </member>
        <member name="M:JetBrains.Util.VersionExtensions.ToVersionWithZeroesForBuildAndRevision(System.Version)">
            <summary>
            Returns version with trailing -1 replaced with 0
            </summary>
            <param name="version">Version to update</param>
            <returns>Version with no trailing -1</returns>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.AssertAtElement(System.Xml.XmlReader,System.String)">
            <summary>
            Asserts that the reader is currently at the element with the specific name. Advances before throwing to avoid endless child loops.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.AssertAtElement(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Asserts that the reader is currently at the element with the specific name. Advances before throwing to avoid endless child loops.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.KeepDepth(System.Xml.XmlReader,System.Action)">
            <summary>
            <para>Makes sure the reader is at the same node depth after executing the <paramref name="action">nested code</paramref> as before running it. Throws if the nested code pops out of the orignal level.</para>
            <para>Note: this is a lightweight alternative to <see cref="M:System.Xml.XmlReader.ReadSubtree"/>. Use the latter to get maximum stability.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.KeepParentDepth(System.Xml.XmlReader,System.Action)">
            <summary>
            <para>After executing the <paramref name="action">nested code</paramref>, makes sure the depth level is that of the parent of the orignial element (one depth level up). Throws if the nested code pops out of the limiting level.</para>
            <para>Note: this is a lightweight alternative to <see cref="M:System.Xml.XmlReader.ReadSubtree"/>. Use the latter to get maximum stability.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.ReadElement(System.Xml.XmlReader,System.Action{System.Xml.XmlReader})">
            <summary>
            Creates a new reader that scopes the current element only. <paramref name="funcElem"/> cannot proceed past the current element on its reader, as the reader will report end-of-stream. After this function exits, the outer <paramref name="reader"/> is positioned on the next node after the element it was called on.
            The reader of the <paramref name="funcElem"/> is initially positioned on the same element.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.ReadElementChildren(System.Xml.XmlReader,System.Action{System.Xml.XmlReader})">
            <summary>
            <para>Enters the current element, scans through all of its children, and calls <see cref="!:funcChild"/> for each of the first-level child elements.</para>
            <para>Must be called on an element (use <see cref="M:JetBrains.Util.XmlReaderEx.ReadToElementStart(System.Xml.XmlReader)"/> if needed).</para>
            <para><paramref name="funcChild"/> must do at least one read operation on the <see cref="!:reader"/>, otherwise the reader could enter an endless loop. It is not necessary to read all of the child content, or return to the original depth level.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.ReadSiblingElements(System.Xml.XmlReader,System.Action{System.Xml.XmlReader})">
            <summary>
            <para>On the current depth level, scans through all of the elements, and calls <see cref="!:funcElem"/> for each of the same-level elements.</para>
            <para><paramref name="funcElem"/> must do at least one read operation on the <see cref="!:reader"/>, otherwise the reader could enter an endless loop. It is not necessary to read all of the element content, or return to the original depth level.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.ReadToElementStart(System.Xml.XmlReader)">
            <summary>
            Reads up to the opening tag of an element on the same level as the current reader position. Returns whether such an element could be found.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.ReadToElementStart(System.Xml.XmlReader,System.Int32)">
            <summary>
            Reads up to the opening tag of an element on the specified depth level. Returns whether such an element could be found.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.KeepReaderDepthCore(System.Xml.XmlReader,System.Action,System.Int32)">
            <summary>
            Impl for <see cref="M:JetBrains.Util.XmlReaderEx.KeepDepth(System.Xml.XmlReader,System.Action)"/> and <see cref="M:JetBrains.Util.XmlReaderEx.KeepParentDepth(System.Xml.XmlReader,System.Action)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.ReadXml(System.IO.Stream,System.Action{System.Xml.XmlReader})">
            <summary>
            Creates a reader over the stream. Does not close the stream by default.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.ReadXml(System.IO.Stream,System.Xml.XmlReaderSettings,System.Action{System.Xml.XmlReader})">
            <summary>
            Creates a reader over the stream. Does not close the stream by default.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.AddLineColumnData(System.Xml.IXmlLineInfo,System.Exception)">
            <summary>
            Adds the current line-column of the XML parser position (if this information is available on the parser).
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.AddLineColumnData(System.Xml.XmlReader,System.Exception)">
            <summary>
            Adds the current line-column of the XML parser position (if this information is available on the parser).
            </summary>
        </member>
        <member name="T:JetBrains.Util.StringEncryption">
            <summary>
            StringEncryption is a wrapper of System.Security.Cryptography.SymmetricAlgorithm classes
            and simplifies the interface. It supports customized SymmetricAlgorithm as well.
            </summary>
        </member>
        <member name="T:JetBrains.Util.StringEncryption.StringEncryptionMethod">
            <remarks>
            Supported .Net intrinsic SymmetricAlgorithm classes.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.StringEncryption.#ctor(JetBrains.Util.StringEncryption.StringEncryptionMethod)">
            <remarks>
            Constructor for using an intrinsic .Net SymmetricAlgorithm class.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.StringEncryption.#ctor(System.Security.Cryptography.SymmetricAlgorithm)">
            <remarks>
            Constructor for using a customized SymmetricAlgorithm class.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.StringEncryption.GetLegalKey(System.String)">
            <remarks>
            Depending on the legal key size limitations of a specific CryptoService provider
            and length of the private key provided, padding the secret key with space character
            to meet the legal size of the algorithm.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.WaveInfoEx.MajorVersionFixed">
            <seealso cref="M:JetBrains.Util.WaveInfoEx.GetDefaultAssemblyVersion(JetBrains.Util.WaveInfo)" />
        </member>
        <member name="M:JetBrains.Util.WaveInfoEx.GetDefaultAssemblyVersion(JetBrains.Util.WaveInfo)">
            <summary>
            The default assembly version for such assemblies that have not been assigned a manual version.
            Currently, fixed to <c>777, 0</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.WaveInfoEx.GetDefaultSubplatformVersion(JetBrains.Util.WaveInfo)">
            <summary>
            The default subplatform package version for such subplatforms that have not been assigned a manual version.
            Currently, <c>wavenumber, 0</c> — when the new wavenumbers are 182+.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.DataFlowEx">
            <summary>
            Extension method helpers for the data flow classes.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DataFlowEx.DefineWinFormsLifetime(System.Windows.Forms.Control)">
            <summary>
            Defines a lifetime that terminates when the control or form is disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEventsEx.OrderByLive``1(JetBrains.DataFlow.IReadonlyCollectionEvents{``0},JetBrains.DataFlow.Lifetime,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns an ordered representation of the collection, the order defined by the <paramref name="comparer"/>.
            </summary>
            <typeparam name="TItem">Item type.</typeparam>
            <param name="thіs">Collection of items without any order implied.</param>
            <param name="lifetime">Time to work.</param>
            <param name="comparer">Comparer setting up the order.</param>
        </member>
        <member name="T:JetBrains.DataFlow.DependencyPropertyChangeSink`1">
            <summary>
            Allows to know when a dependency property value changes.
            This is required for a two-way bridge between the Data Flow Properties and Dependency Properties.
            We cannot easily get events for changes in dependency objects, but if we implement our own dependency object, we can bind it to the object of interest and get events when it changes.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.DependencyPropertyChangeSink`1.Property">
            <summary>
            Gets the Data Flow Property that mirrors the outer dependency property.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.DependencyPropertyChangeSink`1.Value">
            <summary>
            An infrastructure property that exposes the bridging dependency property.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyChangeSink`1.CheckDependencyPropertyType(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Boolean)">
            <summary>
            Ensures that the property is of type <typeparamref name="TValue"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyChangeSink`1.CreatePropertyId(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Creates a new Data Flow Property ID, based on the dependency property identity.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.DependencyPropertyWrapper">
            <summary>
            Wraps a <see cref="T:System.Windows.DependencyProperty"/> into an <see cref="T:JetBrains.DataFlow.IProperty`1"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyWrapper.Create``1(JetBrains.DataFlow.Lifetime,System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Boolean)">
            <summary>
            Creates an <see cref="T:JetBrains.DataFlow.IProperty`1"/> that is synchronized to an Avalon property.
            </summary>
            <typeparam name="TValue">Type of the property value. Must coincide to the dependency property type.</typeparam>
            <param name="lifetime"></param>
            <param name="dependencyobject">The owning instance for the dependency property.</param>
            <param name="dependencyproperty">The property identifier.</param>
            <param name="bSinkEvents">Whether to sink the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> events from the owning object about the updates of the requested property.</param>
            <returns>The wrapping property.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyWrapper.Create``1(JetBrains.DataFlow.Lifetime,System.Windows.UIElement,System.Windows.DependencyProperty,System.Windows.RoutedEvent)">
            <summary>
            Creates an <see cref="T:JetBrains.DataFlow.IProperty`1"/> that is synchronized to an Avalon property.
            </summary>
            <typeparam name="TValue">Type of the property value. Must coincide to the dependency property type.</typeparam>
            <param name="lifetime"></param>
            <param name="owner">The owning instance for the dependency property.</param>
            <param name="dependencyproperty">The property identifier.</param>
            <param name="event">If not <c>Null</c>, the specified event will be sinked from the <paramref name="owner"/> object.</param>
            <returns>The wrapping property.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyWrapper.FlowInto``1(JetBrains.DataFlow.IProperty{``0},System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Flows DataFlow property values into a dependency property.
            </summary>
            <param name="propSource">The source DataFlow property.</param>
            <param name="doTarget">The dependency object that owns the property container.</param>
            <param name="dpropTarget">The target property identifier for the property container.</param>
            <returns>Undo token for the binding.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyWrapper.FlowInto``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Flows DataFlow property values into a dependency property.
            </summary>
            <param name="propSource">The source DataFlow property.</param>
            <param name="lifetime">Lifetime for the flow.</param>
            <param name="doTarget">The dependency object that owns the property container.</param>
            <param name="dpropTarget">The target property identifier for the property container.</param>
            <returns>Undo token for the binding.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyWrapper.FlowInto``2(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Func{``0,``1})">
            <summary>
            Flows DataFlow property values into a dependency property.
            </summary>
            <param name="propSource">The source DataFlow property.</param>
            <param name="lifetime">Lifetime for the flow.</param>
            <param name="doTarget">The dependency object that owns the property container.</param>
            <param name="dpropTarget">The target property identifier for the property container.</param>
            <param name="FConvert">Applies conversion.</param>
            <returns>Undo token for the binding.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyWrapper.BindDataFlowToDependency``1(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{``0},System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Binds two properties in the forward direction.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DependencyPropertyWrapper.BindDependencyToDataFlow_RoutedEvent``1(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{``0},System.Windows.UIElement,System.Windows.DependencyProperty,System.Windows.RoutedEvent)">
            <summary>
            Binds two properties in the backward direction.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.ListEvents`1">
            <summary>
            A list that fires events when items are added or removed.
            </summary>
            <typeparam name="TValue">List values type.</typeparam>
            <remarks><see cref="T:System.Collections.IList"/> (yes, nongeneric) was added to support WPF scenarios eg XAML [de]serialization. <see cref="T:System.Windows.Markup.IAddChild"/> is also here for WPF support.</remarks>
        </member>
        <member name="F:JetBrains.DataFlow.ListEvents`1.myStorage">
            <summary>
            Sync thru <see cref="F:JetBrains.DataFlow.CollectionEvents`1.myLock"/>.
            </summary>
            <remarks>
            The storage must be passed to the base class in ctor, for the collection operations to work on the same data.
            </remarks>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.PropertyId{`0},System.Collections.Generic.IList{`0},System.Boolean,JetBrains.Util.ILogger)">
            <summary>
            <para>The universal constructor.</para>
            <para>Constructs the list over some list-like backing storage.</para>
            <para>Specifies whether items in the list must be unique (note: this option is performance-costly).</para>
            </summary>
            <param name="lifetime">
            <para>Defines the lifetime for the collection.</para>
            <para>When lifetime terminates, all of the handlers of the collection events are forcibly detached, which helps with preventing memory leaks.</para>
            </param>
            <param name="id">
            <para>An unique identifier for the list, to tell it apart in data flow chains.</para>
            <para>If callstack annotation is on, will appear on callstacks when collection is modified. Thus, only compile-time-defined values should be used, to avoid spawning too many dynamic methods at runtime.</para>
            </param>
            <param name="storage">The underlying collection, all the operations will be relayed to it.</param>
            <param name="bUniqueItems">If <c>True</c>, adding an item that is already present in the list is not allowed (unless <see cref="P:JetBrains.DataFlow.CollectionEvents`1.SuppressItemErrors"/>, an exception is thrown). If <c>False</c>, the duplicate item is just added to the list.</param>
            <param name="logger">Logging facility optional override.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.#ctor(JetBrains.DataFlow.PropertyId{`0},System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            <para>Constructs the list over some list-like backing storage.</para>
            <para>Specifies whether items in the list must be unique (note: this option is performance-costly).</para>
            </summary>
            <param name="id">
            <para>An unique identifier for the list, to tell it apart in data flow chains.</para>
            <para>If callstack annotation is on, will appear on callstacks when collection is modified. Thus, only compile-time-defined values should be used, to avoid spawning too many dynamic methods at runtime.</para>
            </param>
            <param name="storage">The underlying collection, all the operations will be relayed to it.</param>
            <param name="bUniqueItems">If <c>True</c>, adding an item that is already present in the list is not allowed (unless <see cref="P:JetBrains.DataFlow.CollectionEvents`1.SuppressItemErrors"/>, an exception is thrown). If <c>False</c>, the duplicate item is just added to the list.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.#ctor(System.String,System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            <para>Constructs the list over some list-like backing storage.</para>
            <para>Specifies whether items in the list must be unique (note: this option is performance-costly).</para>
            </summary>
            <param name="id">
            <para>An unique identifier for the list, to tell it apart in data flow chains.</para>
            <para>If callstack annotation is on, will appear on callstacks when collection is modified. Thus, only compile-time-defined values should be used, to avoid spawning too many dynamic methods at runtime.</para>
            </param>
            <param name="storage">The underlying collection, all the operations will be relayed to it.</param>
            <param name="bUniqueItems">If <c>True</c>, adding an item that is already present in the list is not allowed (unless <see cref="P:JetBrains.DataFlow.CollectionEvents`1.SuppressItemErrors"/>, an exception is thrown). If <c>False</c>, the duplicate item is just added to the list.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.#ctor(JetBrains.DataFlow.Lifetime,System.String,System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            <para>Constructs the list over some list-like backing storage.</para>
            <para>Specifies whether items in the list must be unique (note: this option is performance-costly).</para>
            </summary>
            <param name="lifetime">
            <para>Defines the lifetime for the collection.</para>
            <para>When lifetime terminates, all of the handlers of the collection events are forcibly detached, which helps with preventing memory leaks.</para>
            </param>
            <param name="id">
            <para>An unique identifier for the list, to tell it apart in data flow chains.</para>
            <para>If callstack annotation is on, will appear on callstacks when collection is modified. Thus, only compile-time-defined values should be used, to avoid spawning too many dynamic methods at runtime.</para>
            </param>
            <param name="storage">The underlying collection, all the operations will be relayed to it.</param>
            <param name="bUniqueItems">If <c>True</c>, adding an item that is already present in the list is not allowed (unless <see cref="P:JetBrains.DataFlow.CollectionEvents`1.SuppressItemErrors"/>, an exception is thrown). If <c>False</c>, the duplicate item is just added to the list.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.#ctor(System.String)">
            <summary>
            Creates a new list that does not allow duplicate items, with a simple list storage inside.
            </summary>
            <param name="id">
            <para>An unique identifier for the list, to tell it apart in data flow chains.</para>
            <para>If callstack annotation is on, will appear on callstacks when collection is modified. Thus, only compile-time-defined values should be used, to avoid spawning too many dynamic methods at runtime.</para>
            </param>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.#ctor(JetBrains.DataFlow.Lifetime,System.String)">
            <summary>
            Creates a new list that does not allow duplicate items, with a simple list storage inside.
            </summary>
            <param name="lifetime">
            <para>Defines the lifetime for the collection.</para>
            <para>When lifetime terminates, all of the handlers of the collection events are forcibly detached, which helps with preventing memory leaks.</para>
            </param>
            <param name="id">
            <para>An unique identifier for the list, to tell it apart in data flow chains.</para>
            <para>If callstack annotation is on, will appear on callstacks when collection is modified. Thus, only compile-time-defined values should be used, to avoid spawning too many dynamic methods at runtime.</para>
            </param>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new list with a simple list storage inside.
            </summary>
            <param name="id">
            <para>An unique identifier for the list, to tell it apart in data flow chains.</para>
            <para>If callstack annotation is on, will appear on callstacks when collection is modified. Thus, only compile-time-defined values should be used, to avoid spawning too many dynamic methods at runtime.</para>
            </param>
            <param name="bUniqueItems">If <c>True</c>, adding an item that is already present in the list is not allowed (unless <see cref="P:JetBrains.DataFlow.CollectionEvents`1.SuppressItemErrors"/>, an exception is thrown). If <c>False</c>, the duplicate item is just added to the list.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.#ctor(JetBrains.DataFlow.PropertyId{`0},System.Boolean)">
            <summary>
            Creates a new list with a simple list storage inside.
            </summary>
            <param name="id">
            <para>An unique identifier for the list, to tell it apart in data flow chains.</para>
            <para>If callstack annotation is on, will appear on callstacks when collection is modified. Thus, only compile-time-defined values should be used, to avoid spawning too many dynamic methods at runtime.</para>
            </param>
            <param name="bUniqueItems">If <c>True</c>, adding an item that is already present in the list is not allowed (unless <see cref="P:JetBrains.DataFlow.CollectionEvents`1.SuppressItemErrors"/>, an exception is thrown). If <c>False</c>, the duplicate item is just added to the list.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.#ctor(JetBrains.DataFlow.Lifetime,System.String,System.Boolean)">
            <summary>
            Creates a new list with a simple list storage inside.
            </summary>
            <param name="lifetime">
            <para>Defines the lifetime for the collection.</para>
            <para>When lifetime terminates, all of the handlers of the collection events are forcibly detached, which helps with preventing memory leaks.</para>
            </param>
            <param name="id">
            <para>An unique identifier for the list, to tell it apart in data flow chains.</para>
            <para>If callstack annotation is on, will appear on callstacks when collection is modified. Thus, only compile-time-defined values should be used, to avoid spawning too many dynamic methods at runtime.</para>
            </param>
            <param name="bUniqueItems">If <c>True</c>, adding an item that is already present in the list is not allowed (unless <see cref="P:JetBrains.DataFlow.CollectionEvents`1.SuppressItemErrors"/>, an exception is thrown). If <c>False</c>, the duplicate item is just added to the list.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.FireAddRemove(JetBrains.DataFlow.AddRemove,`0,System.Int32,System.Object)">
            <summary>
            Fires the <see cref="P:JetBrains.DataFlow.ListEvents`1.AddRemove"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.FireBeforeAddRemove(JetBrains.DataFlow.AddRemove,`0,System.Int32,System.Object)">
            <summary>
            Fires the <see cref="P:JetBrains.DataFlow.ListEvents`1.BeforeAddRemove"/> event.
            Returns whether the operation has been cancelled.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.InternalAdd(`0,System.Int32,System.Object)">
            <summary>
            One of the core methods that implement the actual List functionality.
            </summary>
            <param name="value"></param>
            <param name="nIndexOrEnd">Either a real index (which is not thread-safe unless it's <c>0</c>), or <c>-1</c> which means “add to end” and is a special case for the thread-safe <see cref="M:System.Collections.IList.Add(System.Object)"/> method.</param>
            <param name="cookie"></param>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.InternalRemove(System.Int32,System.Object)">
            <summary>
            One of the core methods that implement the actual List functionality.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.OnAcknowledgeSinkAddRemove_Add(System.Action{JetBrains.DataFlow.AddRemoveIndexEventArgs{`0}})">
            <summary>
            Ackhowledges the handler.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.OnAcknowledgeSinkAddRemove_Remove(System.Action{JetBrains.DataFlow.AddRemoveIndexEventArgs{`0}})">
            <summary>
            Ackhowledges the handler.
            Cannot be merged with <see cref="M:JetBrains.DataFlow.ListEvents`1.OnAcknowledgeSinkAddRemove_Add(System.Action{JetBrains.DataFlow.AddRemoveIndexEventArgs{`0}})"/> because the iteration should go in the reverse order.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.OnAcknowledgeSinkBeforeAddRemove(System.Action{JetBrains.DataFlow.BeforeAddRemoveIndexEventArgs{`0}})">
            <summary>
            Called when someone attempts to sink the <see cref="P:JetBrains.DataFlow.ListEvents`1.BeforeAddRemove"/> signal. Acknowledges the handler.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.InternalAdd(`0,System.Object)">
            <summary>
            One of the core methods that implement the actual functionality.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.InternalRemove(`0,System.Object)">
            <summary>
            One of the core methods that implement the actual functionality.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.ListEvents`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            
            <returns>
            The element at the specified index.
            </returns>
            
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.Modify(JetBrains.DataFlow.AddRemove,`0,System.Int32,System.Object)">
            <summary>
            A universal method for modifications on the collection. Useful for data flow between the collections, when <see cref="!:ICollectionEvents&lt;TValue&gt;.AddRemove"/> signal handler is pumping into another collection.
            </summary>
            <param name="action">Whether to add or remove the item.</param>
            <param name="item">The item to add or remove.</param>
            <param name="index">The index at which the modification should occur.</param>
            <param name="cookie">The optional modification cookie.</param>
            <returns>Success code.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.Modify(JetBrains.DataFlow.AddRemove,System.Func{`0},System.Int32,System.Object)">
            <summary>
            A universal method for modifications on the collection. Useful for data flow between the collections, when <see cref="P:JetBrains.DataFlow.ListEvents`1.AddRemove"/> signal handler is pumping into another collection.
            </summary>
            <param name="action">Whether to add or remove the item.</param>
            <param name="funcGetItemIfAdding">A function that is called only when doing the <see cref="F:JetBrains.DataFlow.AddRemove.Add"/> operation and produces the new item to be added to the list. This allows to create a new item when pumping from one collection to another with creating the wrappers simultaneousely.</param>
            <param name="index">The index at which the modification should occur.</param>
            <param name="cookie">The optional modification cookie.</param>
            <returns>Success code.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="P:JetBrains.DataFlow.ListEvents`1.AddRemove">
            <summary>
            Fires when an item is added or removed to your view on the collection.
            Throwing an exception does not prevent the item from being added or other handlers from being called.
            The event supports acknowledgement, which means that when you sink the event, all of the items currently in collection come into your view on the collection, so the add is fired for each. Similarly, remove is fired when you unsink and all of the elements go away from your view on the collection.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.ListEvents`1.BeforeAddRemove">
            <summary>
            Fires before an item is added or removed.
            To prevent the add/remove operation, set <see cref="P:JetBrains.DataFlow.BeforeAddRemoveEventArgs`1.Cancel"/> to <c>True</c> (decline the operation silently) or throw an exception (the exception is let out to the caller).
            After the first handler to cancel the operation, the remaining handlers may not be called.
            No <see cref="!:ICollectionEvents&lt;TValue&gt;.AddRemove"/> are guaranteed to be executed if the operation is cancelled.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.Interop.PropertyBinding">
            <summary>
            A non-generic static class that helps creating specific property bindings.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Interop.PropertyBinding.CreateBidirectional``1(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{``0},System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Boolean)">
            <summary>
            Creates a two-way property binding.
            Initially, <paramref name="targetproperty"/> will be assighned the value of <paramref name="source"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Interop.PropertyBinding.CreateBidirectional``2(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{``0},System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
            Creates a two-way property binding.
            Initially, <paramref name="targetproperty"/> will be assighned the value of <paramref name="source"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Interop.PropertyBinding.CreateOneWayToSource``2(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{``0},System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Func{``1,``0})">
            <summary>
            Creates a one-way property binding to source (IProperty)
            Initially, <paramref name="targetproperty"/> will be assighned the value of <paramref name="source"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Interop.PropertyBinding.CreateOneWayToSource``1(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{``0},System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Creates a one-way property binding to source (IProperty)
            Initially, <paramref name="targetproperty"/> will be assighned the value of <paramref name="source"/>.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.RegistryValueProperty">
            <summary>
            Creates <see cref="T:JetBrains.DataFlow.IProperty`1"/> that passively reflect the Registry values. Note that currently they do not track Registry changes.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.RegistryValueProperty.CreatePassive``1(JetBrains.DataFlow.Lifetime,Microsoft.Win32.RegistryKey,System.String,System.String,``0)">
            <summary>
            Creates a property that's passively mirrored into Registry (does not listen to Registry changes).
            Note that the Registry key is not kept open between the read/write sessions.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="keyRoot">The root key, eg <see cref="F:Microsoft.Win32.Registry.ClassesRoot"/>.</param>
            <param name="sKeyPath">The relative path from the root key to the key that contains the data we're binding to.</param>
            <param name="sDataName">Name of the data. Null for the default value of the key.</param>
            <param name="defvalue">Default value for the data when reading it from Registry initially, in case it's missing.</param>
        </member>
        <member name="T:JetBrains.DataFlow.PropertyChangedEventArgs`2">
            <summary>
            When something changes, presents the details about the change.
            </summary>
            <typeparam name="TIdentity">The identity of the item that changes.</typeparam>
            <typeparam name="TValue">The old and new values for the item.</typeparam>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyChangedEventArgs`2.Identity">
            <summary>
            Gets the name of the entity that has changed, eg property name.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyChangedEventArgs`2.New">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyChangedEventArgs`2.Old">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.platforms.FrameworkIdentifier.NetCore">
            <summary>
            .net core for windows 8 and 8.1
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.Emitters.SvgFile.Attribute.href">
            <summary>
            This is actually an attribute in the <see cref="F:JetBrains.Application.Icons.Emitters.SvgFile.Namespace.Xlink" /> namespace, <see cref="F:JetBrains.Application.Icons.Emitters.SvgFile.AttributeXlink.href" />, but we must be listing it together with other attributes as well.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.Emitters.SvgFile.Attribute.clip_rule">
            <summary>
            Adobe Illustrator tends to set this (illegaly) on shapes sometimes, together with a pretty legal <see cref="F:JetBrains.Application.Icons.Emitters.SvgFile.Attribute.fill_rule" />. We'll just let it be, but ignore the value.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.Emitters.SvgFile.AttributeXlink">
            <summary>
            SVG attributes in the <see cref="F:JetBrains.Application.Icons.Emitters.SvgFile.Namespace.Xlink" /> namespace.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.Emitters.SvgFile.Value.FillRule.nonzero">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.Emitters.SvgFile.Value.GradientUnits.objectBoundingBox">
            <summary>
            Default.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.Emitters.SvgGrammar.SvgPathCommandsApplyImplicitConversions(Sprache.IResult{System.Collections.Generic.ICollection{JetBrains.Application.Icons.Emitters.SvgGrammar.PD.S}})">
            <summary>
            SVG Path commands have certain implicit conventions which change the command to another one based on its context.
            1) A set of MoveTo commands at the beginning of a figure becomes a set of (one MoveTo command plus LineTo commands).
            2) A leading MoveTo-Relative in the path is changed to Absolute, but its following MoveTo-autochanged-into-LineTo remain Relative (that's why it's allowed to write it relative).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.Emitters.SvgGrammar.PD">
            <summary>
            Path Data attributed tree items.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.Emitters.SvgGrammar.PD.SA.WriteTiSegment_AvalonEngineConversion(JetBrains.Application.Icons.Emitters.SvgGrammar.PD.TiSegmentWriter)">
            <summary>
            This method uses the Avalon engine to convert arc segments into bézier segments, which it does when it has to apply transforms to the points. This uses the undefined behavior and is not very cross-platform.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Images.GeometryHelpers.ArcPathToCenterCoordinates(JetBrains.Application.UI.Icons.Images.GeometryHelpers.ArcInPathCoordinates,System.Boolean)">
            <summary>
            Converts the arc representation from a path arc into the ellipse-centric arc.
            Based on the SVG 1.1 (Second Edition) standard — Appendix F: Implementation Requirements — F.6 Elliptical arc implementation notes — F.6.5 Conversion from endpoint to center parameterization, https://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter .
            Does NOT handle the out-of-range cases correctly, as customary for SVG processing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Images.GeometryHelpers.ArcToBézierCurves(JetBrains.Application.UI.Icons.Images.GeometryHelpers.ArcInCenterCoordinates)">
            <summary>
            Approximates an arc with a number of curves, small enough for the approximation to be decent. See <see cref="M:JetBrains.Application.UI.Icons.Images.GeometryHelpers.SmallArcToBézierCurve(JetBrains.Application.UI.Icons.Images.GeometryHelpers.ArcInCenterCoordinates)" /> for details.
            The returned curves are contiguous, i.e. the next start point is the prev end point, and also smooth.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Images.GeometryHelpers.SmallArcToBézierCurve(JetBrains.Application.UI.Icons.Images.GeometryHelpers.ArcInCenterCoordinates)">
            <summary>
            Converts an arc to a Bézier curve, only if it's small enough to be suitably represented by a curve (here this means a quarter circle at most).
            The curve is chosen to match the coordinates in the starting and ending points of the arc, their first derivative, and their second derivative.
            Based on the https://www.spaceroots.org/documents/ellipse/elliptical-arc.pdf article.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Images.TiImage">
            <summary>
              <para>Base class for the platform-independent Themed Icon Image.</para>
              <para>Represents a narrow subset of a XAML DrawimgImage or a raster bitmap which can be rendered on any platform.</para>
            </summary>
            <seealso cref="!:TiImageConverter" />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Images.TiImage.GetLogicalSize">
            <summary>
              <para>Gets the device-independent size of the vector image in logical pixels (assuming 96 DPI, like in Avalon).</para>
              <para>The coordinate space of the image must be aligned at the <c>(0,0)</c> point.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Images.TiImage.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Images.TiImageSerializerSvg">
            <summary>
            Helper for <see cref="!:TiImageConverter" /> to handle exporting to the Scalable Vector Graphics format.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Images.TiImageSerializerSvg.ViaStringReader.ReadRgb(JetBrains.Application.UI.Icons.Images.TiImageSerializerSvg.ViaStringReader.Context,System.Windows.Media.Color@)">
            <summary>
            Reads #RRGGBB in uppercase hex, always two digits per color. Alpha expected to be stored separately.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Images.TiImageSerializerSvg.ViaStringReader.Context.#ctor(System.UInt16*,JetBrains.Util.OnError)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Images.TiImageSerializerSvg.ViaStringReader.StringRange.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Images.TiPath">
            <summary>
            A filled path figure.
            Based on a path geometry, which is a list of segments.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Images.TiPath.CalculateBounds">
            <inheritdoc cref="M:JetBrains.Application.UI.Icons.Images.TiSegment.CalculateBounds(System.Collections.Generic.IList{JetBrains.Application.UI.Icons.Images.TiSegment})" />
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Images.TiRadialGradientBrush">
            <summary>
              <para>Represents a radial gradient brush, in element-relative coordinates, where (0,0) is the left-top point of the bounding box, and (1,1) is the bottom right.</para>
              <para>A radial gradient has a starting point (0% gradient stop) from which it goes to the ending ellipse (100% gradient stop). It is not sufficient to specify the ellipse because it might also be skewed and rotated, which can't be expressed with just the ellipse axes.</para>
              <para>So we would assume the initial ellipse as a circle at (0,0) with radius 1, onto which a transform is applied to achieve the resulting ellipse. The starting point is expressed in the coordinate space in which the ellipse is a unit circle, i.e. the ellipse transform also applies to the starting point.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Images.TiRadialGradientBrush.Start">
            <summary>
            The starting point of the gradient, before the transform is applied.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Images.TiRadialGradientBrush.Transform">
            <summary>
            The transform which would make the (0,0),1 circle the desired end-ellipse in the element-bounding-box-relative coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Icons.Images.TiRasterImage.DeviceHeight">
            <summary>
            The number of pixel lines in the bitmap.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Icons.Images.TiRasterImage.DeviceWidth">
            <summary>
            The number of pixels in each line.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Icons.Images.TiRasterImage.Dpi">
            <summary>
            The resolution, which defines the logical size of the bitmap.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Icons.Images.TiRasterImage.Pixels">
            <summary>
              <para>Bitmap pixels, 32bpp with alpha, alpha not premultiplied.</para>
              <para>Pixel layout: lines top-down, pixels left-right inside each line, stride equal to line byte length.</para>
              <para>Pixel format: 0xAARRGGBB, no alpha premultiplication (“unassociated alpha” format).</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Images.TiSegment">
            <summary>
            A segment in the path.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Images.TiSegment.Target">
            <summary>
            Target point.
            For BeginFigure, the starting point of the figure.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Images.TiSegment.Ctrl1">
            <summary>
            For Bézier, first control point.
            For BeginFigure, X tells whether the fill rule is nonzero rather than even-odd, and Y tells whether the figure is closed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Images.TiSegment.Ctrl2">
            <summary>
            For Bézier, second control point X.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Images.TiSegment.CalculateBounds(System.Collections.Generic.IList{JetBrains.Application.UI.Icons.Images.TiSegment})">
            <summary>
            Calculates the bounding box for the path, incl protruding parts of the curves.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Images.TiSegment.Transform(JetBrains.Application.UI.Icons.Images.TiSegment,System.Windows.Media.Transform)">
            <summary>
            Applies a transform to the segments of a path.
            The representation of the path (points, lines, and Bézier curves in absolute coordinates) ensures that merely applying the matrix to the points transforms the segments correctly.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Images.TiSegmentKind.BeginFigure">
            <summary>
              <para>Means we're beginning a new figure, moving to the startpoint (<see cref="F:JetBrains.Application.UI.Icons.Images.TiSegment.Target" />), and defining whether the figure will have a closed path.</para>
              <para><see cref="F:JetBrains.Application.UI.Icons.Images.TiSegment.Ctrl1" />.<see cref="P:System.Windows.Point.X" /> is a conditon on the fill rule for this path, <c>0</c> means <see cref="F:System.Windows.Media.FillRule.EvenOdd" /> (default) and anything outside epsilon means <see cref="F:System.Windows.Media.FillRule.Nonzero" />.</para>
              <para><see cref="F:JetBrains.Application.UI.Icons.Images.TiSegment.Ctrl1" />.<see cref="P:System.Windows.Point.Y" /> is a condition on whether the path is closed.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Images.TiSegmentKind.LineTo">
            <summary>
            A line from the current point and to the <see cref="F:JetBrains.Application.UI.Icons.Images.TiSegment.Target" />, in absolute coordinates.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Images.TiSegmentKind.BézierTo">
            <summary>
            A cubic Bézier curve from the current point and to the <see cref="F:JetBrains.Application.UI.Icons.Images.TiSegment.Target" />, with <see cref="F:JetBrains.Application.UI.Icons.Images.TiSegment.Ctrl1" /> and <see cref="F:JetBrains.Application.UI.Icons.Images.TiSegment.Ctrl2" /> as parameters (at curve start and curve target, respectively).
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Images.TiVectorImage">
            <summary>
            A small subset of the XAML vector drawing capabilities.
            Represents some features of either <see cref="T:System.Windows.Media.GeometryDrawing" /> or <see cref="T:System.Windows.Shapes.Path" />, those of them relevant for iconing and supported cross-platform.
            All the types and coordinates and measures map directly into the <see cref="T:System.Windows.Media.GeometryDrawing" /> entities.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Icons.Images.TiVectorImage.ClipMask">
            <summary>
            Gets the optional clip mask geometry for the whole vector image.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Images.TiVectorImage.LogicalSize">
            <summary>
              <para>Gets the device-independent size of the vector image in logical pixels (assuming 96 DPI, like in Avalon).</para>
              <para>The coordinate space of the image must be aligned at the <c>(0,0)</c> point.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Icons.Images.TiVectorImage.Paths">
            <summary>
            Filled path figures of this vector image.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.CrossFramework.SizeAndLength.AvalonLengthToWinFormsLength_Ceiling(System.Double,System.Double)">
            <summary>
            Turns a double length into an int, coercing NaN and Inf values.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.CrossFramework.SizeAndLength.AvalonLengthToWinFormsLength_Floor(System.Double,System.Double)">
            <summary>
            Turns a double length into an int, coercing NaN and Inf values.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.CrossFramework.SizeAndLength.AvalonLengthToWinFormsLength_Round(System.Double,System.Double)">
            <summary>
            Turns a double length into an int, coercing NaN and Inf values.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.CrossFramework.SizeAndLength.WinFormsLengthToAvalonLength(System.Int32,System.Double)">
            <summary>
            Turns an int length into an Avalon double length, converting max-int to corresponding infinities.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.CrossFramework.SizeAndLength.WinFormsLengthToAvalonLength(System.Single,System.Double)">
            <summary>
            Turns a float length into a double, Inf values are automatically OK.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.CombinedProgressIndicator">
            <summary>
              Progress indicator that combined multiple indicators
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.LiveCombinedProgressIndicator">
            <summary>
              Progress indicator that combined multiple indicators and support live add/remove indicator
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.FontCache">
            <summary>
            Cache for fonts.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.FontCache.GetHFont(System.Drawing.Font)">
            <summary>
            Gets a cached GDI handle to a font.
            The returned value should not be disposed of.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichString">
            <summary>
            Represents a formatted string that is a part of <see cref="P:JetBrains.UI.RichText.RichString.RichText"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.WaveLength">
            <summary>
            Wave length for weavy underlining.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.FontCache">
            <summary>
            Caches the fonts per-font-face and per-text-style.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.AugmentGdiPlusContext">
            <summary>
            Allows to fix the text-rendering-hint, but ruins ClearType … So, just a queer mode, after all.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.myOffset">
            <summary>
            Starting offset of the corresponding string part.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.myLength">
            <summary>
            Length of the corresponding string part.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.myRichText">
            <summary>
            The text which the part is belonging to.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichString.Text">
            <summary>
            Gets the text of this part.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichString.Style">
            <summary>
            Gets or sets the string style
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichString.Offset">
            <summary>
            Gets or sets the starting offset.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichString.Length">
            <summary>
            Gets or sets the length.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichString.RichText">
            <summary>
            Gets the parent text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.#ctor(System.Int32,System.Int32,JetBrains.UI.RichText.TextStyle,JetBrains.UI.RichText.RichText)">
            <summary>
            Creates a new <see cref="T:JetBrains.UI.RichText.RichString"/> instance.
            </summary>
            <param name="offset">String part offset.</param>    
            <param name="length">String part length.</param>
            <param name="style">The style.</param>
            <param name="richtext">The parent richtext block.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="richtext"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The range specified by <paramref name="offset"/> and <paramref name="length"/> does not fall within the parent <paramref name="richtext"/> string.</exception>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.GetSize(System.Drawing.Graphics,JetBrains.UI.RenderParams)">
            <summary>
            Gets size of the string in the given graphics
            </summary>
            <param name="g">The device context to calculate size in.</param>
            <param name="renderParams">Defines the rendering aspects.</param>
            <returns>Size of the string when drawn in a given graphics.</returns>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.GetIndexFromPoint(System.Drawing.Graphics,JetBrains.UI.RenderParams,System.Int32)">
            <summary>
            Gets the local index of the character at the given point, or <c>-1</c> if none hit.
            </summary>
            <param name="g">The device context for measuring the chars.</param>
            <param name="renderParams">Defines the rendering aspects.</param>
            <param name="x">X-coordinate of the point relative to the substring start.</param>
            <returns>Local zero-based index of the character at the given point, or <c>-1</c> if no character is hit.</returns>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.Measure(System.Drawing.Graphics,System.String,System.Drawing.SizeF,JetBrains.UI.RenderParams,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Measures the string rendering size under the given conditions.
            Does not augment the Graphics context for better fitting of the text, so the results most probably won't agree to the <see cref="M:JetBrains.UI.RichText.RichString.GetSize(System.Drawing.Graphics,JetBrains.UI.RenderParams)"/>'s ones.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,JetBrains.UI.RenderParams)">
            <summary>
            Draws the formatted string on a given graphics.
            </summary>
            <param name="g">The GDI+ device context to draw the string in.</param>
            <param name="rectClip">Clipping rectangle to paint the text within.</param>
            <param name="renderParams">Defines the rendering aspects.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.GetParameterizedFormat_Gdi(JetBrains.UI.RenderParams)">
            <summary>
            Produces a <see cref="T:System.Windows.Forms.TextFormatFlags"/> flag combination filled in a way standard for JetRichText rendering.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.GetParameterizedFormat_GdiPlus(JetBrains.UI.RenderParams)">
            <summary>
            Produces a <see cref="T:System.Drawing.StringFormat"/> structure filled in a way standard for JetRichText rendering.
            You must not alter the instance returned.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.GetParametrizedFont(JetBrains.UI.RenderParams,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Returns a parametrized font from the cache. 
            The returned value should not be disposed of.
            </summary>
            <param name="renderParams">Defines the rendering aspects.</param>
            <param name="localStyle">The local style to be overridden by the styles from <paramref name="renderParams"/>.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.OverrideTextStyle(JetBrains.UI.RenderParams,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Overrides the local text style with those properties of the <paramref name="renderParams"/>' text style that are set to override.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.OverrideFontStyle(JetBrains.UI.RenderParams,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Overrides the local font style with settings from the rendering aspect.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.AssertValid">
            <summary>
            Checks whether the rich text substring settings are valid against the parent rich text object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.Dump(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.UnderlineStraight(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color)">
            <summary>
            Underlines text with text style color using straight line.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.UnderlineWeavy(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color)">
            <summary>
            Underlines text with text style color using weavy line.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.StrikeOut(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color)">
            <summary>
            Strikes out text with text style color using weavy line.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.RichText.RichString.AugmentGraphics">
            <summary>
            Augments the <see cref="T:System.Drawing.Graphics"/> device context, as required for the GDI+ rendering of the text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.AugmentGraphics.#ctor(System.Drawing.Graphics,JetBrains.UI.RenderParams)">
            <summary>
            Inits the instance and does the augmenting.
            </summary>
            <param name="graphics">The graphics to augment in ctor and de-augment in <see cref="M:JetBrains.UI.RichText.RichString.AugmentGraphics.Dispose"/>.</param>
            <param name="renderParams">Defines the rendering aspects.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.AugmentGraphics.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.AugmentGraphics.Augment">
            <summary>
            Does the thing.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichString.FormatFlags">
            <summary>
            Formatting flags that deifne the text rendering style.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.FormatFlags.None">
            <summary>
            No flags set.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.FormatFlags.EndEllipsis">
            <summary>
            Render the ellipsis character when the string gets truncated.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.FormatFlags.ShowMnemonics">
            <summary>
            Render the mnemonic by underlining the next character after the “&amp;” char.
            If not set, the ampersands are rendered “as is”.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.FormatFlags.Mask">
            <summary>
            All the flags.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichText">
            <summary>
            Represents a formatted text block (i.e., actually, sequence of <see cref="T:JetBrains.UI.RichText.RichString"/> instances).
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.OptionTrace">
            <summary>
            Verbose trace.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.ourPaintCounter">
            <summary>
            Verbose trace counter.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.myParts">
            <summary>
            Formatting for the text parts. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.mySize">
            <summary>
            The cached size value.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.mySizeIsValid">
            <summary>
            Whether the cached size value can be trusted.
            Must be used in conjunction with <see cref="F:JetBrains.UI.RichText.RichText.mySizeParametersHash"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.mySizeParametersHash">
            <summary>
            A hash for the <see cref="T:JetBrains.UI.RenderParams"/> for which the <see cref="F:JetBrains.UI.RichText.RichText.mySize"/> is valid.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.myStringBuilder">
            <summary>
            Plain text of the rich text. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.#ctor(System.String,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Creates a new rich text string.
            </summary>
            <param name="text">Text content.</param>
            <param name="style">The style to apply to the plain text.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.#ctor(System.String)">
            <summary>
            Creates a new rich text string.
            Does not apply any <see cref="T:JetBrains.UI.RichText.TextStyle"/> formatting to the plain text, uses the <see cref="P:JetBrains.UI.RichText.TextStyle.Default"/> value.
            </summary>
            <param name="text">Text content.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.#ctor">
            <summary>
            Creates a new empty non-styled rich text string.
            Same as <see cref="P:JetBrains.UI.RichText.RichText.Empty"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.#ctor(System.String,JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.UI.RichText.RichString})">
            <summary>
            The internal cloning ctor.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichText.Empty">
            <summary>
            Gets an empty rich text string.
            Same as <see cref="M:JetBrains.UI.RichText.RichText.#ctor"/>
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichText.BackgroundColor">
            <summary>
            Returns common background color. If colors are different in different parts returns <see cref="F:System.Drawing.Color.Empty"/>
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichText.ForegroundColor">
            <summary>
            Returns common foreground color. If colors are different in different parts returns <see cref="F:System.Drawing.Color.Empty"/>
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichText.IsEmpty">
            <summary>
            Gets whether the string contained in this rich text is empty.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichText.Length">
            <summary>
            Gets total length of the text in characters.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichText.Text">
            <summary>
            Gets or sets the underlying text as an unformatted string.
            In the latter case the current RichText formatting is inherited.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.IsNullOrEmpty(JetBrains.UI.RichText.RichText)">
            <summary>
            Checks whether the given rich text instance is null or represents an empty string.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Append(System.String,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Appends a part with a custom style to the text.
            </summary>
            <param name="s">The part to add.</param>
            <param name="style">The style of the part to add.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Append(System.Char)">
            <summary>
            Appends a string to the text.
            Uses the style of the trailing character.
            </summary>
            <param name="c">The character to add.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Append(System.Char,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Appends a string to the text.
            Uses the style of the trailing character.
            </summary>
            <param name="c">The character to add.</param>
            <param name="textStyle">Style of the char</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Append(System.String)">
            <summary>
            Appends a string to the text.
            Uses the style of the trailing character.
            </summary>
            <param name="s">The part to add.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Append(JetBrains.UI.RichText.RichText)">
            <summary>
            Appends some rich text to the current one.
            </summary>
            <param name="richText">The rich text to append.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Remove(System.Int32,System.Int32)">
            <summary>
            Removes range of character from the rich text and returns self   
            </summary>
            <param name="start">Start offset of the range to remove</param>
            <param name="length">Length of the range to remove</param>
            <returns>Changed self</returns>    
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Remove(JetBrains.Util.TextRange)">
            <summary>
            Removes range of character from the rich text and returns self   
            </summary>
            <param name="textRange">Range of characters to remove</param>
            <returns>Changed self</returns>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.AssertValid">
            <summary>
            Performs consistency checks over the rich text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Clear">
            <summary>
            Clears the rich text string.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,JetBrains.UI.RenderParams)">
            <summary>
            Draws the formatted string on a given graphics.
            </summary>
            <param name="g">The GDI+ device context to draw the string into.</param>
            <param name="bounds">The rectangle where the string is drawn.</param>
            <param name="renderParams">Defines the rendering aspects.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is <c>Null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="renderParams"/> is <c>Null</c>.</exception>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.DumpToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.DumpToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.GetFormattedParts">
            <summary>
            Gets a readonly collection of the <see cref="T:JetBrains.UI.RichText.RichText"/> formatting elements.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.GetIndexFromPoint(System.Drawing.Graphics,JetBrains.UI.RenderParams,System.Int32)">
            <summary>
            Gets the index of a character with the given local x-coordinate, or <c>-1</c> if none.
            </summary>
            <param name="g">The GDI+ device context to draw the string into.</param>
            <param name="renderParams">Defines the rendering aspects.</param>
            <param name="x">The richtext-local x-coordinate to lookup the character by.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.GetIndexFromPoint(System.Drawing.Graphics,JetBrains.UI.RenderParams,System.Drawing.Point)">
            <summary>
            Gets the index of a character with the given local x-coordinate, or <c>-1</c> if none.
            The y-coordinate is checked for hitting the richtext-global bounding rect only.
            </summary>
            <param name="g">The GDI+ device context to draw the string into.</param>
            <param name="renderParams">Defines the rendering aspects.</param>
            <param name="point">The richtext-local coordinates to lookup the character by.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.GetSize(System.Drawing.Graphics,JetBrains.UI.RenderParams)">
            <summary>
            Calculates the rich text bounding rectangle against the given device context.
            Caches the previously-calculated value.
            </summary>
            <param name="g">The GDI+ device context to draw the string into.</param>
            <param name="renderParams">Defines the rendering aspects.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is <c>Null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="renderParams"/> is <c>Null</c>.</exception>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.GetSizeF(System.Drawing.Graphics,JetBrains.UI.RenderParams)">
            <summary>
            Calculates the rich text bounding rectangle against the given device context.
            Caches the previously-calculated value.
            </summary>
            <param name="g">The GDI+ device context to draw the string into.</param>
            <param name="renderParams">Defines the rendering aspects.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is <c>Null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="renderParams"/> is <c>Null</c>.</exception>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Prepend(System.String,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Prepends a part with a custom style to the text.
            </summary>
            <param name="s">The part to add.</param>
            <param name="style">The style of the part to add.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Prepend(System.String)">
            <summary>
            Prepends a string to the text.
            Uses the style of the leading character.
            </summary>
            <param name="s">The part to add.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Prepend(JetBrains.UI.RichText.RichText)">
            <summary>
            Appends one rich text to another
            </summary>
            <param name="richText">The rich text to append</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetBackColor(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Sets the new background color for the given range.
            Don't set background color to <see cref="P:System.Drawing.Color.Transparent"/> because it would prevent painters from providing the neutral color.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetBackColor(System.Drawing.Color)">
            <summary>
            Sets the new background color for the whole text.
            Don't set background color to <see cref="P:System.Drawing.Color.Transparent"/> because it would prevent painters from providing the neutral color.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetColors(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Sets new colors for the whole text.
            Don't set background color to <see cref="P:System.Drawing.Color.Transparent"/> because it would prevent painters from providing the neutral color.
            </summary>
            <param name="foreColor">Foreground color to set.</param>
            <param name="backColor">Background color to set.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetColors(System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Sets the new foreground and background colors for the given range.
            Don't set background color to <see cref="P:System.Drawing.Color.Transparent"/> because it would prevent painters from providing the neutral color.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetForeColor(System.Drawing.Color)">
            <summary>
            Sets the new foreground color for the whole text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetForeColor(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Sets the new foreground color for the given range.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetStyle(JetBrains.UI.RichText.TextStyle,System.Int32,System.Int32)">
            <summary>
            Sets new style to a specified part of the text
            </summary>
            <param name="style">The style to set</param>
            <param name="startOffset">Start offset of the block</param>
            <param name="length">Block length</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>startOffset</i> is invalid in current string</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>length</i> is invalid starting with specified <i>startOffset</i></exception>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetStyle(System.Drawing.FontStyle,System.Int32,System.Int32)">
            <summary>
            Sets new font style to a specified part of the text
            </summary>
            <param name="style">The font style to set</param>
            <param name="startOffset">Start offset of the block</param>
            <param name="length">Block length</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>startOffset</i> is invalid in current string</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>length</i> is invalid starting with specified <i>startOffset</i></exception>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetStyle(JetBrains.UI.RichText.TextStyle)">
            <summary>
            Applies a new <see cref="T:JetBrains.UI.RichText.TextStyle"/> (font style and colors) to the whole rich text string.
            </summary>
            <param name="style">The style to apply.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetStyle(JetBrains.UI.RichText.TextStyle.EffectStyle,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Sets new effect to a specified part of the text
            </summary>
            <param name="effect">The effect style to set</param>
            <param name="effectColor">The effect color to set</param>
            <param name="startOffset">Start offset of the block</param>
            <param name="length">Block length</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>startOffset</i> is invalid in current string</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>length</i> is invalid starting with specified <i>startOffset</i></exception>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetStyle(JetBrains.UI.RichText.TextStyle.EffectStyle,System.Drawing.Color)">
            <summary>
            Sets new effect to a specified part of the text
            </summary>
            <param name="effect">The effect style to set</param>
            <param name="effectColor">The effect color to set</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Split(System.Int32)">
            <summary>
            Splits rich text before the specified offset so that the first part's length is equal to the <paramref name="offset"/>.
            </summary>
            <param name="offset">The offset to split the text at.</param>
            <returns>An array conssiting of the two resulting parts. The array length is always equal to <c>2</c>, even if either part is empty.</returns>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SubRichText(System.Int32,System.Int32)">
            <summary>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.</summary>
            <param name="start">The zero-based starting character position of a substring in this instance. </param>
            <param name="length">The number of characters in the substring. </param>
            <returns>A RichText that is equivalent to the substring of length <paramref name="length" /> that begins at <paramref name="start" /> in this instance, or <see cref="P:JetBrains.UI.RichText.RichText.Empty" />
            if <paramref name="start" /> is equal to the length of this instance and <paramref name="length" /> is zero.</returns>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SubRichText(System.Int32)">
            <summary>Retrieves a substring from this instance. The substring starts at a specified character position and lasts to its end.</summary>
            <param name="start">The zero-based starting character position of a substring in this instance. </param>
            <returns>A RichText that is equivalent to the substring that begins at <paramref name="start" /> in this instance, or <see cref="P:JetBrains.UI.RichText.RichText.Empty" />
            if <paramref name="start" /> is equal to the length of this instance</returns>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Trim(System.Char[])">
            <summary>
            Trims the leading and trailing characters from the rich text string.
            Warning: a constant function, would not modify the instance!
            </summary>
            <param name="trimChars">An array of Unicode characters to remove or <c>Null</c>. </param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Trim(System.Func{System.Char,System.Boolean})">
            <summary>
            Trims the leading and trailing characters from the rich text string.
            Warning: a constant function, would not modify the instance!
            </summary>
            <param name="isTrimChar">Checks whether Unicode character needs to be removed. If null then <see cref="M:char.IsWhiteSpace(char)"/> is used</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.TrimEnd(System.Char[])">
            <summary>
            Trims the trailing characters from the rich text string.
            Warning: a constant function, would not modify the instance!
            </summary>
            <param name="trimChars">An array of Unicode characters to remove or <c>Null</c>. </param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.TrimEnd(System.Func{System.Char,System.Boolean})">
            <summary>
            Trims the trailing characters from the rich text string.
            Warning: a constant function, would not modify the instance!
            </summary>
            <param name="isTrimChar">Checks whether Unicode character needs to be removed. If null then <see cref="M:char.IsWhiteSpace(char)"/> is used</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.TrimStart(System.Char[])">
            <summary>
            Trims the leading characters from the rich text string.
            Warning: a constant function, would not modify the instance!
            </summary>
            <param name="trimChars">An array of Unicode characters to remove or <c>Null</c>. </param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.TrimStart(System.Func{System.Char,System.Boolean})">
            <summary>
            Trims the leading characters from the rich text string.
            Warning: a constant function, would not modify the instance!
            </summary>
            <param name="isTrimChar">Checks whether Unicode character needs to be removed. If null then <see cref="M:char.IsWhiteSpace(char)"/> is used</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.BreakString(JetBrains.UI.RichText.RichString,System.Int32,System.Boolean)">
            <summary>
            Breaks a part into two parts at the given local offset, which is relative to the part.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Replace(System.Char,System.Char)">
            <summary>
            Replaces char a with b without formatting loose
            </summary>
            <param name="a">Char</param>
            <param name="b">Char</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.GetPartsFromRangeAndSplit(System.Int32,System.Int32)">
            <summary>
            Gets the lsit of parts that fall within the given range.
            The rich strings on the range boundaries are splitted, if needed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.ToString(System.Boolean,System.Func{JetBrains.UI.RichText.RichString,System.String})">
            <summary>
            Gets plain string representation of rich text, plus string part marks.
            </summary>
            <param name="addPartMarks">Whether to add part marks</param>
            <param name="partDecoration">Optional extra decoration after a part mark</param>
            <returns>String representation</returns>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.ToString">
            <summary>
            Gets plain string representation of rich text, plus string part marks.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichText.TextRangeDataRecord">
            <summary>
            Describes user data attached to a range within the text.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.TextRenderingMethod">
            <summary>
            Defines the possible rendering methods to be used when rendering text strings.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextRenderingMethod.GdiPlus">
            <summary>
            Use GDI+ rendering via the <see cref="T:System.Drawing.Graphics"/> class (.NET default).
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextRenderingMethod.Gdi">
            <summary>
            Use GDI rendering via the HDC device contexts and <see cref="!:User32Dll.DrawText"/> function calls.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichTextParameters">
            <summary>
            Contains parameters for a whole rich text block
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextParameters.#ctor">
            <summary>
            Creates new rich text parameters
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextParameters.#ctor(System.Drawing.Font)">
            <summary>
            Creates new rich text parameters
            </summary>
            <param name="font">Font to use</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextParameters.#ctor(System.Drawing.Font,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Creates new rich text parameters
            </summary>
            <param name="font">Font to use</param>
            <param name="style">Default text style</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextParameters.#ctor(System.Drawing.Font,JetBrains.UI.RichText.TextStyle,System.Boolean)">
            <summary>
            Creates new rich text parameters
            </summary>
            <param name="font">Font to use</param>
            <param name="style">Default text style</param>
            <param name="drawEllipsis">Default draw ellipsis flag</param>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextParameters.DrawEllipsis">
            <summary>
            If to draw ellipsis if the text doesn't fit the given rectangle
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextParameters.Font">
            <summary>
            Gets or sets used font
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextParameters.Style">
            <summary>
            Gets or sets default text style
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextParameters.Dump(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichTextBlock">
            <summary>
            Represents a block (possibly multiline) of rich text.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichTextBlock.myLines">
            <summary>
            Lines of rich text block
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichTextBlock.myParameters">
            <summary>
            Rich text block parameters
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlock.Lines">
            <summary>
            Gets the rich text lines of the block.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlock.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlock.RichText">
            <summary>
            Gets or sets the rich text block as a whole rich text fragment.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlock.Text">
            <summary>
            Gets or sets the plaintext representation of the rich text block.
            The setter creates a number of unformatted rich text lines.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlock.DumpToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlock.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.RichText.RichTextBlockParameters">
            <summary>
            Structure for setting parameters for rich text blocks
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockParameters.DumpToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockParameters.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="F:JetBrains.UI.RichText.RichTextBlockPresenter.myDesiredSize">
            <summary>
            See <see cref="P:JetBrains.UI.RichText.RichTextBlockPresenter.DesiredSize"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichTextBlockPresenter.mySize">
            <summary>
            The current externally assigned size.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlockPresenter.Content">
            <summary>
            Gets the multiline rich text content of the presenter.
            To set the content, use the parameterized <see cref="M:JetBrains.UI.RichText.RichTextBlockPresenter.SetContent(System.Drawing.Graphics,JetBrains.UI.RichText.RichTextBlock)"/> setter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlockPresenter.DesiredSize">
            <summary>
            Gets the desired size as if there were no external limits.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlockPresenter.RenderParams">
            <summary>
            Gets or sets the rendering aspect of the presenter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlockPresenter.Size">
            <summary>
            Gets the explicit forced size of the presenter.
            To set the size, use the parameterized <see cref="M:JetBrains.UI.RichText.RichTextBlockPresenter.SetSize(System.Drawing.Graphics,System.Drawing.Size)"/> setter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockPresenter.GetConstrainedSize(System.Drawing.Graphics,System.Drawing.Size)">
            <summary>
            Measures the content desired size against the given constraints.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockPresenter.SetContent(System.Drawing.Graphics,JetBrains.UI.RichText.RichTextBlock)">
            <summary>
            The parametersized setter for the <see cref="P:JetBrains.UI.RichText.RichTextBlockPresenter.Content"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockPresenter.SetSize(System.Drawing.Graphics,System.Drawing.Size)">
            <summary>
            The parametersized setter for the <see cref="P:JetBrains.UI.RichText.RichTextBlockPresenter.Size"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockPresenter.PerformLayout(System.Drawing.Graphics)">
            <summary>
            Reformats to accommodate for the current size.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlockPresenter.ReflowedContent">
            <summary>
            Gets the rich text block that is the result of reflowing the original <see cref="P:JetBrains.UI.RichText.RichTextBlockPresenter.Content"/> so that it fit the width of the given <see cref="P:JetBrains.UI.RichText.RichTextBlockPresenter.Size"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichTextBlockFormatter">
            <summary>
            Reflows a rich text block 
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockFormatter.Format(JetBrains.UI.RichText.RichTextBlock,System.Int32,System.Drawing.Graphics,JetBrains.UI.RenderParams)">
            <summary>
            Reflows the set of <see cref="T:JetBrains.UI.RichText.RichText"/> strings so that they fit the width specified.
            The existing line breaks are kept, new ones are added as needed.
            </summary>
            <param name="block">The source lines of text.</param>
            <param name="width">The maximum width.</param>
            <param name="g">The device context for measuring the text against.</param>
            <param name="renderParams">The rendering aspect.</param>
            <returns>The formatted rich text with new line breaks.</returns>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockFormatter.Format(JetBrains.UI.RichText.RichText,System.Int32,System.Drawing.Graphics,JetBrains.UI.RenderParams)">
            <summary>
            Reflows the single line of <see cref="T:JetBrains.UI.RichText.RichText"/> so that it fits the width specified.
            The line breaks are added as needed.
            </summary>
            <param name="text">The source line of text.</param>
            <param name="width">The maximum width.</param>
            <param name="g">The device context for measuring the text against.</param>
            <param name="renderParams">The rendering aspect.</param>
            <returns>The formatted rich text with new line breaks.</returns>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextEx.IsNullOrEmpty(JetBrains.UI.RichText.RichText)">
            <summary>
            Gets whether the rich text object is empty (<c>Null</c> or has no text).
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.TextStyle">
            <summary>
            Represents style of text block
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.TextStyle.EffectStyle">
            <summary>
            Enumerates different text drawing effects
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.EffectStyle.None">
            <summary>
            No effects.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.EffectStyle.StraightUnderline">
            <summary>
            Underline with a straight line.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.EffectStyle.WeavyUnderline">
            <summary>
            Underline with a gay line.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.EffectStyle.StrikeOut">
            <summary>
            Strike out with a straight line.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.myFontStyle">
            <summary>
            Font style
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.myForegroundColor">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.myBackgroundColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.myEffect">
            <summary>
            Effect to use
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.myEffectColor">
            <summary>
            Effect color
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.#ctor(System.Drawing.FontStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Defines a text style.
            </summary>
            <remarks>
            This contructor defines style with no effects.
            </remarks>
            <param name="fontStyle">The font style to use</param>
            <param name="foregroundColor">Foreground color</param>
            <param name="backgroundColor">Background clor</param>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.#ctor(System.Drawing.FontStyle,System.Drawing.Color)">
            <summary>
            Defines a text style.
            </summary>
            <remarks>
            This contructor defines style with no effects.
            </remarks>
            <param name="fontStyle">The font style to use</param>
            <param name="foregroundColor">Foreground color</param>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.#ctor(System.Drawing.FontStyle,System.Drawing.Color,System.Drawing.Color,JetBrains.UI.RichText.TextStyle.EffectStyle,System.Drawing.Color)">
            <summary>
            Defines a text style.
            </summary>
            <param name="fontStyle">The font style to use</param>
            <param name="foregroundColor">Foreground color</param>
            <param name="backgroundColor">Background clor</param>
            <param name="effect">Effect to use</param>
            <param name="effectColor">Effect color to use</param>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Defines a text style.
            </summary>
            <remarks>
            This contructor defines style with no effects and regular style of the text.
            </remarks>
            <param name="foregroundColor">Foreground color</param>
            <param name="backgroundColor">Background clor</param>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.FromBackColor(System.Drawing.Color)">
            <summary>
            Creates a style that has only background color specified.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.FromForeColor(System.Drawing.Color)">
            <summary>
            Creates a style that has only foreground color specified.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.FontStyle">
            <summary>
            Gets or sets font style
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.ForegroundColor">
            <summary>
            Gets or sets the foreground color.
            <see cref="F:System.Drawing.Color.Empty"/> means “Don't care, renderer should specify, if not, use <see cref="P:JetBrains.UI.RichText.TextStyle.DefaultForegroundColor"/>”.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.BackgroundColor">
            <summary>
            Gets or sets the background color.
            <see cref="F:System.Drawing.Color.Empty"/> means “Don't care, renderer should specify, if not, use <see cref="P:JetBrains.UI.RichText.TextStyle.DefaultBackgroundColor"/>”.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.Effect">
            <summary>
            Gets or sets used effect
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.EffectColor">
            <summary>
            Gets or sets the effect color.
            <see cref="F:System.Drawing.Color.Empty"/> means the <see cref="P:JetBrains.UI.RichText.TextStyle.DefaultEffectColor"/> will be used.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.ourDefaultStyle">
            <summary>
            The default text style.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.Default">
            <summary>
            Gets the default text style.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.ourHiddenStyle">
            <summary>
            The hidden text style.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.Hidden">
            <summary>
            Gets the hidden text style.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.DefaultForegroundColor">
            <summary>
            See <see cref="P:JetBrains.UI.RichText.TextStyle.ForegroundColor"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.DefaultBackgroundColor">
            <summary>
            See <see cref="P:JetBrains.UI.RichText.TextStyle.BackgroundColor"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.DefaultEffectColor">
            <summary>
            See <see cref="P:JetBrains.UI.RichText.TextStyle.EffectColor"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.Dump(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.Anchoring">
            <summary>
            Linear anchoring constants.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring.NearWithout">
            <summary>
            Left or top, anchored outside the area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring.NearWithin">
            <summary>
            Left or top, anchored inside the area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring.MiddleWithin">
            <summary>
            Center or middle, anchored inside the area. Preferrably, in the center.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring.FarWithin">
            <summary>
            Right or bottom, anchored inside the area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring.FarWithout">
            <summary>
            Right or bottom, anchored outside the area.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Anchoring2D">
            <summary>
            Describes the anchoring in two dimensions.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring2D.myAnchorAside">
            <summary>Backup for <see cref="P:JetBrains.UI.Anchoring2D.AnchorAside"/>.</summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring2D.myAnchorBottomOrTop">
            <summary>Backup for <see cref="P:JetBrains.UI.Anchoring2D.AnchorBottomOrTop"/>.</summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring2D.myAnchorLeftOrRightOnly">
            <summary>Backup for <see cref="P:JetBrains.UI.Anchoring2D.AnchorLeftOrRightOnly"/>.</summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring2D.myAnchorTop">
            <summary>Backup for <see cref="P:JetBrains.UI.Anchoring2D.AnchorTop"/>.</summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring2D.myAnchorTopOrBottom">
            <summary>Backup for <see cref="P:JetBrains.UI.Anchoring2D.AnchorTopOrBottom"/>.</summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring2D.Value">
            <summary>The raw value combining both vertical and horizontal anchoring.</summary>
        </member>
        <member name="M:JetBrains.UI.Anchoring2D.#ctor(System.Int32)">
            <summary>
            Initializes from a raw value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Anchoring2D.#ctor(JetBrains.UI.Anchoring,JetBrains.UI.Anchoring)">
            <summary>
            Initializes the instance.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.AnchorAside">
            <summary>
            Gets the list of anchoring to place the entity aside the anchor, preferrably, left, right, then bottom and top.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.AnchorBottomOrTop">
            <summary>
            Gets the list of side-anchoring dispositions in descending order of preferrability.
            The preferred side is bottom, then top, then right and left.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.AnchorLeftOrRightOnly">
            <summary>
            Gets the list of side-anchoring dispositions in descending order of preferrability.
            The preferred side is right, then left. That's all.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.AnchorTop">
            <summary>
            Gets the list of side-anchoring dispositions in descending order of preferrability.
            The preferred side is top, sides top to bottom, then bottom.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.AnchorTopOrBottom">
            <summary>
            Gets the list of side-anchoring dispositions in descending order of preferrability.
            The preferred side is top, then bottom, then left and right.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.Horizontal">
            <summary>
            Gets or sets the hotizontal component of the anchoring.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.IsInside">
            <summary>
            Gets whether the anchoring is inside the rect against both dimensions.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.Vertical">
            <summary>
            Gets or sets the hotizontal component of the anchoring.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Anchoring2D.IsFar(JetBrains.UI.Anchoring)">
            <summary>
            Checks whether the given <paramref name="anchoring"/> is one of the Far— anchorings,
            namely, <see cref="F:JetBrains.UI.Anchoring.FarWithin"/> or <see cref="F:JetBrains.UI.Anchoring.FarWithout"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Anchoring2D.IsNear(JetBrains.UI.Anchoring)">
            <summary>
            Checks whether the given <paramref name="anchoring"/> is one of the Near— anchorings,
            namely, <see cref="F:JetBrains.UI.Anchoring.NearWithin"/> or <see cref="F:JetBrains.UI.Anchoring.NearWithout"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Anchoring2D.ToArray">
            <summary>
            Creates an array consisting of just one item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Anchoring2D.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.ExpectedBackgroundColorHintMode">
            <summary>
            Mode how to treat ExpectedBackgroundColorHint property
            </summary>
        </member>
        <member name="F:JetBrains.UI.ExpectedBackgroundColorHintMode.Semblance">
            <summary>
            (Legacy mode) Render will tune foreground slightly to preserve original color as far as possible. 
            Use it when you need to preserve your foreground color primarily but you need to be able to read it. 
            Other words hint for the engine to just makes sure the foreground color is visible over the background color
            </summary>
        </member>
        <member name="F:JetBrains.UI.ExpectedBackgroundColorHintMode.Contrast">
            <summary>
            Render will try to obey maximum contrast. 
            Use it when you need good text experience (perception) no matter where it will render
            </summary>
        </member>
        <member name="T:JetBrains.UI.CrossFramework.JetElementHost">
            <summary> 
            A Windows Forms control for hosting Avalon elements.
            As compared to the standard one, does not support WinForms transparency and backcolor inheritance, and thus does not waste memory on background color buffers.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.JetElementHost.Child">
            <summary> 
             The user-defined Avalon element in this host.
            </summary> 
        </member>
        <member name="P:JetBrains.UI.CrossFramework.JetElementHost.TopLevelElement">
            <summary>
            The top-level Avalon element over the HWND.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CrossFramework.JetElementHost.IsSelectable">
            <summary>
            Exposes Windows.Forms.Control Selectable style.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.JetElementHost.HwndSourceHook(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary> 
            Hook for the HwndSource.WndProc. 
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.JetElementHost.InputManager_PostProcessInput(System.Object,System.Windows.Input.ProcessInputEventArgs)">
            <summary>
                Catch WM_CHAR messages which weren't handled by Avalon 
                (including mnemonics which were typed without the "Alt" key) 
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.JetElementHost.IsInputChar(System.Char)">
            <summary>
                Ensures that all WM_CHAR key messages are forwarded to the hosted element.
            </summary>
            <internal> 
                Grab all WM_CHAR messages as text input to ensure they're sent to
                Avalon.  If Avalon doesn't handle the message, we will call 
                ProcessDialogChar later on. 
            </internal>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.JetElementHost.OnGotFocus(System.EventArgs)">
            <summary> 
            Raises the GotFocus event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.JetElementHost.OnLeave(System.EventArgs)">
            <summary>
            Raises the Leave event. 
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.JetElementHost.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Processes a command key, ensuring that the hosted element has an opportunity to handle the command before normal Windows Forms processing. 
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.JetElementHost.ProcessMnemonic(System.Char)">
            <summary> 
            Processes a mnemonic character, ensuring that the hosted element has an opportunity to handle the mnemonic before normal Windows Forms processing.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.JetElementHost.Select(System.Boolean,System.Boolean)">
            <summary> 
                Activates the hosted element.
            </summary> 
        </member>
        <member name="M:JetBrains.UI.CrossFramework.JetElementHost.WndProc(System.Windows.Forms.Message@)">
            <summary> 
            Processes Windows messages. 
            </summary>
            <param name="m"></param> 
        </member>
        <member name="P:JetBrains.UI.CrossFramework.JetElementHost.DefaultSize">
            <summary> 
            Gets the default size of the control.
            </summary> 
        </member>
        <member name="T:JetBrains.UI.CrossFramework.JetElementHost.RootDecorator">
            <summary>
            The root element in this host.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.JetElementHost.RootDecorator.LastMeasureSize">
            <summary>
            Set when the control is requested to Measure by the Avalon infrastructure.
            Allows to know when the control wants to resize.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.Assert(JetBrains.Interop.WinApi.HResults)">
            <summary>
            Checks the given <c>HRESULT</c>, and throws an exception if it's a failure one (<see cref="M:JetBrains.Interop.WinApi.HResultHelpers.FAILED(System.Int32)"/>).
            The comment is used in case of the failure only.
            </summary>
            <remarks>Note: located here because we do not have ExtensionAttribute in Interop.WinAPI. In there, use <see cref="M:JetBrains.Interop.WinApi.HResultHelpers.Assert(System.Int32,System.Int32[])"/>.</remarks>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.Assert(JetBrains.Interop.WinApi.HResults,System.String)">
            <summary>
            Checks the given <c>HRESULT</c>, and throws an exception if it's a failure one (<see cref="M:JetBrains.Interop.WinApi.HResultHelpers.FAILED(System.Int32)"/>).
            The comment is used in case of the failure only.
            </summary>
            <remarks>Note: located here because we do not have ExtensionAttribute in Interop.WinAPI. In there, use <see cref="M:JetBrains.Interop.WinApi.HResultHelpers.Assert(System.Int32,System.Int32[])"/>.</remarks>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.AssertSucceeded(System.Int32,System.String)">
            <summary>
            Checks the given <c>HRESULT</c>, and throws an exception if it's a failure one (<see cref="M:JetBrains.Interop.WinApi.HResultHelpers.FAILED(System.Int32)"/>).
            The comment is used in case of the failure only.
            </summary>
            <remarks>Note: located here because we do not have ExtensionAttribute in Interop.WinAPI. In there, use <see cref="M:JetBrains.Interop.WinApi.HResultHelpers.Assert(System.Int32,System.Int32[])"/>.</remarks>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.AssertSucceeded(System.UInt32,System.String)">
            <summary>
            Checks the given <c>HRESULT</c>, and throws an exception if it's a failure one (<see cref="M:JetBrains.Interop.WinApi.HResultHelpers.FAILED(System.Int32)"/>).
            The comment is used in case of the failure only.
            </summary>
            <remarks>Note: located here because we do not have ExtensionAttribute in Interop.WinAPI. In there, use <see cref="M:JetBrains.Interop.WinApi.HResultHelpers.Assert(System.Int32,System.Int32[])"/>.</remarks>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.AssertSucceeded(System.Int32)">
            <summary>
            Checks the given <c>HRESULT</c>, and throws an exception if it's a failure one (<see cref="M:JetBrains.Interop.WinApi.HResultHelpers.FAILED(System.Int32)"/>).
            The comment is used in case of the failure only.
            </summary>
            <remarks>Note: located here because we do not have ExtensionAttribute in Interop.WinAPI. In there, use <see cref="M:JetBrains.Interop.WinApi.HResultHelpers.Assert(System.Int32,System.Int32[])"/>.</remarks>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.Failed(JetBrains.Interop.WinApi.HResults)">
            <summary>
            The <c>FAILED</c> WinAPI Macro.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.Succeeded(JetBrains.Interop.WinApi.HResults)">
            <summary>
            The <c>SUCCEEDED</c> WinAPI Macro.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.hr(System.Int32)">
            <summary>
            Applies the <see cref="M:JetBrains.UI.Interop.HResultsEx.AssertSucceeded(System.Int32,System.String)"/>.
            </summary>
            <param name="hresult"></param>
        </member>
        <member name="T:JetBrains.UI.Interop.Helpers">
            <summary>
            Contains several interop helper functions
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.BitBlt(System.Void*,System.Drawing.Bitmap,System.Drawing.Point,System.Void*,System.Byte,System.Drawing.Rectangle[])">
            <summary>
            Blits a bitmap onto a GDI device context.
            </summary>
            <param name="hdcDestination">The target HDC.</param>
            <param name="bitmapSource">The bitmap to blit (the complete bitmap blits to the target).</param>
            <param name="ptDestinationLocation">Blit location coordinates on the target DC.</param>
            <param name="hdcIntermediate">A device context to be used as blitting source, pass a compatible HDC if you have one, or <c>Null</c> if it should be on-time-created.</param>
            <param name="nOpacity">Opacity vaue for blitting, 0x00 is completely transparent, 0xFF is opaque.</param>
            <param name="rectsSource">A collection of the rectangles to blit on the source bitmap. The relative location of these rectangles on the target DC corresponds to their source location. <c>Null</c> to blit the whole bitmap.</param>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.CanGlassify(System.IntPtr)">
            <summary>
            Performs all the checks of the <see cref="!:JetBrains.UI.Avalon.Helpers.Glassify(IntPtr,bool)"/> function, but does not actually apply the effect.
            Allows to tell with a high probability whether the <see cref="!:JetBrains.UI.Avalon.Helpers.Glassify(IntPtr,bool)"/> function will succeed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.CreateBitmap(System.Int32[0:,0:])">
            <summary>
            Sets all the pixels in the bitmap to the given values.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.FlattenAlpha(System.Drawing.Image,System.Byte)">
            <summary>
            Flattens the alpha of the given bitmap using a threshold so that it becomes either 0x00 or 0xFF.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.GetWindowExStyle(System.IntPtr)">
            <summary>
            Gets the extended style of the specified window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.GetWindowStyle(System.IntPtr)">
            <summary>
            Gets the style of the specified window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.PaintWindowToBitmap(System.Windows.Forms.IWin32Window)">
            <summary>
            Paints an arbitrary window to a bitmap.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.RenderBuffered(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle,System.Action{System.Drawing.Graphics},System.Boolean)">
            <summary>
            Renders to the given device context using an intermediate GDI backbuffer, which works around the ErrorStripeDisease™.
            Under terminal services, no backbuffer is used, just <paramref name="paint"/> is invoked.
            </summary>
            <param name="gc">The graphics device context container (must be disposed of by the caller, not before this method is called).</param>
            <param name="bounds">Size and location of the painting area in the device context coordinates. When painting, you should use the same coordinates as those in which the bounds are specified, don't use bounds-local coords.</param>
            <param name="paint">The function that would handle the rendering.</param>
            <param name="bSupportAlphaChannel">Whether the blitting of the back-buffer to the screen should support per-pixel alpha, or not. Note that when you turn this on, you must erase the whole area, and GDI text rendering will most likely fail to function properly.</param>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.RenderBuffered(System.Drawing.Graphics,System.Drawing.Rectangle,System.Action{System.Drawing.Graphics},System.Boolean)">
            <summary>
            Renders to the given device context using an intermediate GDI backbuffer, which works around the ErrorStripeDisease™.
            Under terminal services, no backbuffer is used, just <paramref name="FPaint"/> is invoked.
            </summary>
            <param name="g">The graphics device context.</param>
            <param name="bounds">Size and location of the painting area in the device context coordinates. When painting, you should use the same coordinates as those in which the bounds are specified, don't use bounds-local coords.</param>
            <param name="FPaint">The function that would handle the rendering.</param>
            <param name="bSupportAlphaChannel">Whether the blitting of the back-buffer to the screen should support per-pixel alpha, or not. Note that when you turn this on, you must erase the whole area, and GDI text rendering will most likely fail to function properly.</param>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.ShowLayered(System.IntPtr,System.Drawing.Rectangle,System.Action{System.Drawing.Graphics})">
            <summary>
            Updates a layered window by displaying the given alpha-channel-aware bitmap at the specified location.
            The bitmap then persists until the window is killed or hidden, or another bitmap is displayed.
            </summary>
            <param name="hwnd">Handle to the window being updated.</param>
            <param name="area">The window area, in screen coordinates.</param>
            <param name="funcRender">The callback to perform the rendering.</param>
        </member>
        <member name="T:JetBrains.UI.IGraphicsContainer">
            <summary>
            An interface for a class that contains a device context.
            </summary>
        </member>
        <member name="P:JetBrains.UI.IGraphicsContainer.Graphics">
            <summary>
            Gets the device context.
            </summary>
        </member>
        <member name="T:JetBrains.UI.GraphicsContainer">
            <summary>
            The auto-container for a <see cref="T:System.Drawing.Graphics"/> device context that has several choices for where to create the graphics from.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromControl(System.Windows.Forms.Control)">
            <summary>
            If the control already exists with its handle, uses its DC, otherwise, a screen DC.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromGetDc(System.Void*)">
            <summary>
            Creates a generic device context from a window handle (<see cref="M:JetBrains.Interop.WinApi.User32Dll.GetDC(System.Void*)"/>).
            </summary>
            <param name="hwnd">The handle of the window to paint into.</param>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromGraphics(System.Drawing.Graphics)">
            <summary>
            Creates a generic device context from Graphics
            </summary>
            <param name="g">The DC to use if non-<c>Null</c>. May be <c>Null</c>.</param>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromGraphicsOrControl(System.Drawing.Graphics,System.Windows.Forms.Control)">
            <summary>
            If <paramref name="g"/> is non-<c>Null</c>, just uses it.
            Otherwise, works like <see cref="M:JetBrains.UI.GraphicsContainer.FromControl(System.Windows.Forms.Control)"/> over <paramref name="control"/>.
            </summary>
            <param name="g">The DC to use if non-<c>Null</c>. May be <c>Null</c>.</param>
            <param name="control">The control to use for fallback, must not be <c>Null</c>.</param>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromNothing">
            <summary>
            Creates a hollow container that ensures noone ever uses its <see cref="T:System.Drawing.Graphics"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromPainting(System.Windows.Forms.Control)">
            <summary>
            Creates a special painting device context from a control.
            Must be used within <see cref="F:JetBrains.Interop.WinApi.WindowsMessages.WM_PAINT"/> only.
            </summary>
            <param name="control">The control to paint into. Must exist.</param>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromPainting(System.IntPtr)">
            <summary>
            Creates a special painting device context from a window handle.
            Must be used within <see cref="F:JetBrains.Interop.WinApi.WindowsMessages.WM_PAINT"/> only.
            </summary>
            <param name="hwnd">The handle of the window to paint into.</param>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromScreen">
            <summary>
            Creates a screen device context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.SetHighQuality(System.Drawing.Graphics)">
            <summary>
            Sets up the <see cref="T:System.Drawing.Graphics">graphics context</see> for high-quality rendering regardless of the screen settings.
            </summary>
        </member>
        <member name="T:JetBrains.UI.EmptyGraphicsContainer">
            <summary>
            A stub for non Windows Os.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ScreenGraphics">
            <summary>
            A must-dispose class for creating a GDI+ graphics object associated with the screen device context.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ScreenGraphics.#ctor">
            <summary>
            Initializes the object by attaching to the screen's device context.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ScreenGraphics.#ctor(System.Windows.Forms.Control)">
            <summary>
            Attempts to create a graphics upon the control. If the control handle is not yet available, or the control has already been disposed, uses the screen device context.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ScreenGraphics.op_Implicit(JetBrains.UI.ScreenGraphics)~System.Drawing.Graphics">
            <summary>
            Same as <see cref="P:JetBrains.UI.ScreenGraphics.Graphics"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ScreenGraphics.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.ScreenGraphics.Graphics">
            <summary>
            Gets the <see cref="P:JetBrains.UI.ScreenGraphics.Graphics"/> object. Don't dispose, dispose the whole <see cref="T:JetBrains.UI.ScreenGraphics"/> instance instead.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PaintGraphicsContainer">
            <summary>
            A must-dispose class for creating a GDI+ graphics object for painting a window in response to WM_PAINT.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PaintGraphicsContainer.#ctor(System.Void*)">
            <summary>
            Creates a painting graphics object against some window.
            </summary>
            <param name="hwnd">Handle to the window we're currently painting.</param>
        </member>
        <member name="M:JetBrains.UI.PaintGraphicsContainer.op_Implicit(JetBrains.UI.PaintGraphicsContainer)~System.Drawing.Graphics">
            <summary>
            Same as <see cref="P:JetBrains.UI.PaintGraphicsContainer.Graphics"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PaintGraphicsContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.PaintGraphicsContainer.Graphics">
            <summary>
            Gets the <see cref="P:JetBrains.UI.PaintGraphicsContainer.Graphics" /> object. Don't dispose, dispose the whole <see cref="T:JetBrains.UI.PaintGraphicsContainer" /> instance instead.
            </summary>
        </member>
        <member name="F:JetBrains.UI.ControlGraphicsContainer.myControl">
            <summary>
            The control to create the DC from. <c>Null</c> after dispose.
            </summary>
        </member>
        <member name="F:JetBrains.UI.ControlGraphicsContainer.myGraphics">
            <summary>
            The DC lazily-created from the control, or <c>Null</c> if not created yet.
            Should be disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ControlGraphicsContainer.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates an instance over the control.
            The graphics is not created until retrieved from the property for the first time.
            </summary>
            <param name="control">A non-<c>Null</c> control that must exist with its handle.</param>
        </member>
        <member name="M:JetBrains.UI.ControlGraphicsContainer.IsGoodControl(System.Windows.Forms.Control)">
            <summary>
            Checks whether it will work on the given control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ControlGraphicsContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.ControlGraphicsContainer.Graphics">
            <summary>
            Gets the device context.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SimpleGraphicsContainer">
            <summary>
            Just holds the given DC, won't dispose of it.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SimpleGraphicsContainer.#ctor(System.Drawing.Graphics)">
            <summary>
            Attaches to the given DC.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SimpleGraphicsContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.SimpleGraphicsContainer.Graphics">
            <summary>
            Gets the device context.
            </summary>
        </member>
        <member name="T:JetBrains.UI.GetDcGraphicsContainer">
            <summary>
            Performs <see cref="M:JetBrains.Interop.WinApi.User32Dll.GetDC(System.Void*)"/> on the given <c>HWND</c> and releases it at the end.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GetDcGraphicsContainer.myGraphics">
            <summary>
            Lazy-init data.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GetDcGraphicsContainer.myHdc">
            <summary>
            <c>HDC</c>, after one is lazy-created and before it is disposed of.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GetDcGraphicsContainer.myHwnd">
            <summary>
            <c>HWND</c>, after the ctor and until the <c>HDC</c> is disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GetDcGraphicsContainer.#ctor(System.Void*)">
            <summary>
            Creates a new container.
            The <c>HDC</c> is not created immediately; instead, it's constructed on the first <see cref="P:JetBrains.UI.GetDcGraphicsContainer.Graphics"/> use.
            </summary>
            <param name="hwnd">Handle to the window to which the device context should be created.</param>
        </member>
        <member name="M:JetBrains.UI.GetDcGraphicsContainer.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.GetDcGraphicsContainer.Graphics">
            <summary>
            Gets the device context.
            </summary>
        </member>
        <member name="T:JetBrains.UI.HollowGraphicsContainer">
            <summary>
            An intentionally hollow graphics container that can be passed as a normal one, but will throw if someone actually tries to extract <see cref="P:JetBrains.UI.IGraphicsContainer.Graphics"/> out of it.
            Can be used if you expect the callee to not use the parameter, but must pass it against the API.
            </summary>
        </member>
        <member name="M:JetBrains.UI.HollowGraphicsContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.HollowGraphicsContainer.Graphics">
            <summary>
            Gets the device context.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RenderParams">
            <summary>
            Specifies rendering context for the <see cref="N:JetBrains.UI.RichText"/> and presentable item rederers.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RenderParams.myDefaultFont">
            <summary>
            <see cref="P:JetBrains.UI.RenderParams.DefaultFont"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RenderParams.myReadonly">
            <summary>
            <see cref="P:JetBrains.UI.RenderParams.Readonly"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RenderParams.myEmpty">
            <summary>
            <see cref="P:JetBrains.UI.RenderParams.Empty"/>, lazy-init.
            Let the defaults apply to all the static fields before we create an instance, so lazy-init on first use
            </summary>
        </member>
        <member name="F:JetBrains.UI.RenderParams.myDefaultTextRenderingMethod">
            <summary>
            <see cref="P:JetBrains.UI.RenderParams.DefaultTextRenderingMethod"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RenderParams.#ctor">
            <summary>
            Creates an empty instance initialized with the default values.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.Font">
            <summary>
            Gets or sets the font in which the text will be rendered.
            By default, specifies the <see cref="P:JetBrains.UI.RenderParams.DefaultFont"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.FontStyle">
            <summary>
            Gets or sets the font style for rendering the text.
            Overrides the local value unless <see cref="F:System.Drawing.FontStyle.Regular"/> is specified, in which case all the strings are rendered with their local font styles.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.NeutralForegroundColor">
            <summary>
            Gets or sets the  neutral foreground color setting. Does not override local colors, applies only to those strings whose color is set to <see cref="F:System.Drawing.Color.Empty"/>.
            May be <see cref="F:System.Drawing.Color.Empty"/>, in which case the renderer will choose the default color, most likely, <see cref="P:System.Drawing.SystemColors.ControlText"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.NeutralBackgroundColor">
            <summary>
            Gets or sets the neutral background color setting. Does not override local colors, applies only to those strings whose color is set to <see cref="F:System.Drawing.Color.Empty"/>.
            May be <see cref="F:System.Drawing.Color.Empty"/>, in which case the renderer will choose the default color, most likely, <see cref="P:System.Drawing.Color.Transparent"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.ExpectedBackgroundColorHint">
            <summary>
            <para>Gets or sets the hint for the expected background color under the transparently rendered rich text string.</para>
            <para>Unlike <see cref="P:JetBrains.UI.RenderParams.NeutralBackgroundColor"/> and <see cref="P:JetBrains.UI.RenderParams.OverrideBackgroundColor"/>, this color does not paint on screen as the opaque background under rich text. This is a hint for the engine which makes sure the foreground color is visible over the background color. When <see cref="P:JetBrains.UI.RenderParams.NeutralBackgroundColor"/> and <see cref="P:JetBrains.UI.RenderParams.OverrideBackgroundColor"/> are explicitly defined, they allow to adjust the foreground color as needed to be distinct. They don't apply when text has to be rendered over a transparent background (e.g. over a gradient or some image). If you know the approximate color of the background (e.g. gradient mid-color) and want the foreground color to be forced readable, but cannot set the text background to a flat value — assign the approximage color as the expected background color hint.</para>
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.ExpectedBackgroundColorHintMode">
            <summary>
            Gets or sets how to treat the hint for the expected background color
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.Trimming">
            <summary>
            Gets or sets the string trimming to be used when rendering the string.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.Mnemonics">
            <summary>
            Gets or sets the mnemonic treatment (ampersand characters) to be used when rendering the string.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.Padding">
            <summary>
            Some queer stuff which misteriously appeared in this class in the years of its existence.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.OverrideForegroundColor">
            <summary>
            Gets or sets the color that overrides the local foreground color of all the strings, unless set to <see cref="F:System.Drawing.Color.Empty"/>.
            Takes precedence over <see cref="P:JetBrains.UI.RenderParams.NeutralForegroundColor"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.OverrideBackgroundColor">
            <summary>
            Gets or sets the color that overrides the local background color of all the strings, unless set to <see cref="F:System.Drawing.Color.Empty"/>.
            Takes precedence over <see cref="P:JetBrains.UI.RenderParams.NeutralBackgroundColor"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.Effect">
            <summary>
            Gets or sets the effect style that overrides the local settings of the strings, unless set to <see cref="F:JetBrains.UI.RichText.TextStyle.EffectStyle.None"/>, in which case the local on the strings settings are used.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.EffectColor">
            <summary>
            Gets or sets the effect color that overrides the local setting on the strings, unless set to <see cref="F:System.Drawing.Color.Empty"/>.
            Works independently of <see cref="P:JetBrains.UI.RenderParams.Effect"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.TextRenderingMethod">
            <summary>
            Gets or sets a flag that defines the rendering engine to be used by text renderers.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.Empty">
            <summary>
            Gets the empty rendering parameters that do not override anything and supply the default UI font.
            This instance is read-only and cannot be modified.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.DefaultFont">
            <summary>
            Gets the default UI font, a single instance shared by default between all the instances of <see cref="T:JetBrains.UI.RenderParams"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.DefaultTextRenderingMethod">
            <summary>
            Gets the default text rendering method.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.Readonly">
            <summary>
            Gets whether the instance is readonly and its fields cannot be changed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RenderParams.DumpToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps the object state in the XAML format.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RenderParams.ResetColors">
            <summary>
            Sets all the colors to be <see cref="F:System.Drawing.Color.Empty"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RenderParams.SetReadonly">
            <summary>
            Seals the instance by setting it into the read-only mode, see <see cref="P:JetBrains.UI.RenderParams.Readonly"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RenderParams.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Text.AnyOrderIdentiferMatcherFactory">
            <summary>
            intentionally named in wrong order :)
            </summary>
        </member>
        <member name="T:JetBrains.Text.IdentifierMatcher">
            <summary>
            Matches text by pattern using so called CamelHump. Not immutable, has internal state.
            !!! MUST BE used in singlethreaded fashion, because every processing method changes internal state.
            </summary>
        </member>
        <member name="P:JetBrains.Text.IdentifierMatcher.SharedMatchingIndices">
            <summary>
            Caution!!! Use it onsly for stream processing to reduce memory traffic or with defensive copying.
            This is shared stated and it will be changed after next <see cref="M:JetBrains.Text.IdentifierMatcher.Matches(System.String)"/> invocation.
            </summary>
        </member>
        <member name="P:JetBrains.Text.ISuffixShrinkMatcher.HasSuffixShrinkProperty">
            <summary>
            declare property of matcher, that if wv is matched, where w and v are words, then w is also matched
            Used for caching purposes
            </summary>
        </member>
        <member name="T:JetBrains.ActivityCollector.ActivityCollector">
            <summary>
            Logs disposable activities to a temporary file (%TEMP%\ReSharper_ActivityCollector-[time-and-random-stuff].txt)
            Activity is <see cref="T:System.IDisposable"/> with name. Basic usage pattern:
            <code>
            var activity = ActivityCollector.GetEndpoint().StartActivity(new Key("activity name"))
            [do some stuff]
            activity.Dispose()
            </code>
            After dispose call thread id, activity name, start time and end time will be written to log.
            
            
            </summary>
        </member>
        <member name="T:JetBrains.DataStructures.CyclicBuffer">
            <summary>
            A cyclic buffer, like a queue for bytes, but optimized for byte block operations. For reading and writing, use the provided <see cref="T:System.IO.Stream"/> interface.
            </summary>
        </member>
        <member name="F:JetBrains.DataStructures.CyclicBuffer._end">
            <summary>
            End of used data range in <see cref="F:JetBrains.DataStructures.CyclicBuffer._storage"/>, non-inclusive (points after the last used byte, might be equal to storage length). Might be below <see cref="F:JetBrains.DataStructures.CyclicBuffer._start"/>, in which case the data loops around the buffer end.
            </summary>
        </member>
        <member name="F:JetBrains.DataStructures.CyclicBuffer._start">
            <summary>
            Starts of used data range in <see cref="F:JetBrains.DataStructures.CyclicBuffer._storage"/>.
            </summary>
        </member>
        <member name="F:JetBrains.DataStructures.CyclicBuffer._storage">
            <summary>
            The cyclic storage.
            </summary>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.Capacity">
            <summary>
            Gets or sets the capacity of the buffer storage, which is the maximum <see cref="P:JetBrains.DataStructures.CyclicBuffer.Count"/> it can hold without growing, which growing could be prohibited by setting the <see cref="P:JetBrains.DataStructures.CyclicBuffer.Input"/> <see cref="P:JetBrains.DataStructures.CyclicBuffer.InputStream.Behavior"/>.
            </summary>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.Input">
            <summary>
            Gets the stream for writing to the buffer.
            </summary>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.Output">
            <summary>
            Gets the stream for reading from the buffer.
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.ReadCore(System.Byte[],System.Int32,System.Int32,JetBrains.DataStructures.CyclicBuffer.OutputStream.BehaviorFlags,System.Boolean)">
            <summary>
            Implements reading from the stream (and also peeking at the data without spending the stored bytes).
            </summary>
            <param name="arTarget">Target for reading (as in <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>).</param>
            <param name="nTargetOffset">Target for reading (as in <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>).</param>
            <param name="nTargetCount">Target for reading (as in <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>).</param>
            <param name="behavior">Behavior when running out of buffer.</param>
            <param name="bAdvanceReadPosition">Spend the read bytes and decrease the number of bytes available in the storage. If <c>False</c>, just peeks at the stored data without modifying the storage.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.WriteCore(System.Byte[],System.Int32,System.Int32,JetBrains.DataStructures.CyclicBuffer.InputStream.BehaviorFlags)">
            <summary>
            Implements writing to the stream.
            </summary>
            <param name="arSource">Source for writing (as in <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/>).</param>
            <param name="nSourceOffset">Source for writing (as in <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/>).</param>
            <param name="nSourceCount">Source for writing (as in <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/>).</param>
            <param name="behavior">Behavior when running out of buffer.</param>
            <returns>The number of bytes actually written.</returns>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.Add(System.Byte)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.Contains(System.Byte)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <c>T</c> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.Remove(System.Byte)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:JetBrains.DataStructures.CyclicBuffer.InputStream">
            <summary>
            <see cref="T:System.IO.Stream"/> for the <see cref="P:JetBrains.DataStructures.CyclicBuffer.Input"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.InputStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter. </param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.InputStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.InputStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.InputStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.InputStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.InputStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.InputStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="F:JetBrains.DataStructures.CyclicBuffer.InputStream.BehaviorFlags.WhenFullGrow">
            <summary>
            When there is no more room for writing, grows the storage.
            </summary>
        </member>
        <member name="F:JetBrains.DataStructures.CyclicBuffer.InputStream.BehaviorFlags.WhenFullThrow">
            <summary>
            When there is no more room for writing, throws an exception.
            </summary>
        </member>
        <member name="T:JetBrains.DataStructures.CyclicBuffer.OutputStream">
            <summary>
            <see cref="T:System.IO.Stream"/> for the <see cref="P:JetBrains.DataStructures.CyclicBuffer.Output"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.OutputStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter. </param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.OutputStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.OutputStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.OutputStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.OutputStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.OutputStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.OutputStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="F:JetBrains.DataStructures.CyclicBuffer.OutputStream.BehaviorFlags.WhenEmptyReadLess">
            <summary>
            When there are no more bytes to read, returns the reduced read-bytes count.
            </summary>
        </member>
        <member name="F:JetBrains.DataStructures.CyclicBuffer.OutputStream.BehaviorFlags.WhenEmptyThrow">
            <summary>
            When there are no more bytes to read, throws an exception.
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.ImmutableArray`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Sightly optimized version where the count of the data is known before hand
            </summary>
            <param name="data"></param>
            <param name="count"></param>
        </member>
        <member name="T:JetBrains.DataStructures.StreamPipe">
            <summary>
            Pipes a stream-for-writing into a stream-for-reading.
            Allows to pipe an output from some <see cref="T:System.IO.StreamWriter"/> into a <see cref="T:System.IO.StreamReader"/> directly, without storing the full stream contents in memory.
            The pipe executes two functions, one for writing and one for reading. The execution terminates when both routines exit. After the writing routine exits, the reading has nothing more to read (<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> always returns zero), and should exit too.
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipe.Run(System.Action{System.IO.Stream},System.Action{System.IO.Stream},JetBrains.Application.Threading.Tasks.ITaskHost)">
            <summary>
            Runs the writing and reading, synchronously, thru the pipe.
            </summary>
            <param name="funcWriter">This function is given the stream it should write to. Try to use reasonably sized blocks, if possible.</param>
            <param name="funcReader">This function is given the stream it should read from.</param>
            <param name="tasker">Threading support.</param>
        </member>
        <member name="T:JetBrains.DataStructures.StreamPipe.Streamer">
            <summary>
            <see cref="T:System.IO.Stream"/> plus some events.
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipe.Streamer.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipe.Streamer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipe.Streamer.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter. </param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipe.Streamer.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipe.Streamer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.StreamPipe.Streamer.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.StreamPipe.Streamer.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.StreamPipe.Streamer.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.StreamPipe.Streamer.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.StreamPipe.Streamer.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="T:JetBrains.DataStructures.StreamPipe.StreamPipeRun">
            <summary>
            The object for the <see cref="T:JetBrains.DataStructures.StreamPipe"/> run.
            </summary>
        </member>
        <member name="F:JetBrains.DataStructures.StreamPipe.StreamPipeRun.MinDemandDefault">
            <summary>
            Default value for <see cref="P:JetBrains.DataStructures.StreamPipe.StreamPipeRun.MinDemand"/>.
            </summary>
        </member>
        <member name="F:JetBrains.DataStructures.StreamPipe.StreamPipeRun.Buffer">
            <summary>
            The buffer that caches writer's output until there's enough data for the reader to read the next block (more specifically, until <see cref="P:JetBrains.DataStructures.StreamPipe.StreamPipeRun.MinDemand"/> is met).
            </summary>
        </member>
        <member name="P:JetBrains.DataStructures.StreamPipe.StreamPipeRun.MinDemand">
            <summary>
            <para>When the reader exhaust the buffer, it claims the demand on minimum buffer size required to proceed (usually, the number of bytes requested in the read command), and yields to the writer to fulfill the demand.</para>
            <para>The <see cref="P:JetBrains.DataStructures.StreamPipe.StreamPipeRun.MinDemand"/> value limits the minimum reasonable demand so that to prevent the reader and the writer from yielding to each other too often, for example, if they are reading and writing byte-by-byte.</para>
            <para>Set to <c>0</c> to suppress min-demand and operate on actual demands.</para>
            </summary>
        </member>
        <member name="P:JetBrains.DataStructures.StreamPipe.StreamPipeRun.Demand">
            <summary>
            When the reader needs more bytes that avail, it publishes the demand and yields to the writer.
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipe.StreamPipeRun.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.DataStructures.StreamPipeXml">
            <summary>
            Pipes an <see cref="T:System.Xml.XmlWriter"/> into an <see cref="T:System.Xml.XmlReader"/>.
            Allows to pipe an output from some <see cref="T:System.Xml.XmlWriter"/> into a <see cref="T:System.Xml.XmlReader"/> directly, without storing the full stream contents in memory.
            The pipe executes two functions, one for writing and one for reading. The execution terminates when both routines exit. After the writing routine exits, the reading has nothing more to read (<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> always returns zero), and should exit too.
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipeXml.Run(System.Action{System.Xml.XmlWriter},System.Action{System.Xml.XmlReader},JetBrains.Application.Threading.Tasks.ITaskHost)">
            <summary>
            Runs the writing and reading, synchronously, thru the pipe.
            </summary>
            <param name="FInput">This function is given the stream it should write to. Try to use reasonably sized blocks, if possible.</param>
            <param name="FOutput">This function is given the stream it should read from.</param>
            <param name="tasker">Threading helper.</param>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipeXml.Run(System.Action{System.Xml.XmlWriter},System.Action{System.Xml.XmlReader,System.Xml.XmlWriter},System.Action{System.Xml.XmlReader},JetBrains.Application.Threading.Tasks.ITaskHost)">
            <summary>
            Runs the writing and reading, synchronously, thru the pipe.
            </summary>
            <param name="FInput">This function is given the stream it should write to. Try to use reasonably sized blocks, if possible.</param>
            <param name="FTransform">This function sits in the middle of the pipe.</param>
            <param name="FOutput">This function is given the stream it should read from.</param>
            <param name="tasker">Threading helper.</param>
        </member>
        <member name="M:JetBrains.Extension.IWin32WindowEx.IsValidWindow(System.Windows.Forms.IWin32Window)">
            <summary>
            Checks that the window has a non-Null handle and that it represents a valid Win32 window.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.IWin32WindowEx.PushDisable(System.Windows.Forms.IWin32Window)">
            <summary>
            Disables the given window temporarily.
            </summary>
        </member>
        <member name="T:JetBrains.Interop.Modules.ControlPaint">
            <summary>
            Encapsulates the utility classes for painting the controls.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.Configuration.SetupConfigurationClass">
            <summary>
            Class that implements <see cref="T:Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.Configuration.SetupConfiguration">
            <summary>
            The implementation of <see cref="T:Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration2" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.Configuration.ISetupPackageReference">
            <summary>A reference to a package.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupPackageReference.GetId">
            <summary>Gets the general package identifier.</summary>
            <returns>The general package identifier.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupPackageReference.GetVersion">
            <summary>Gets the version of the package.</summary>
            <returns>The version of the package.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupPackageReference.GetChip">
            <summary>Gets the target process architecture of the package.</summary>
            <returns>The target process architecture of the package.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupPackageReference.GetLanguage">
            <summary>Gets the language and optional region identifier.</summary>
            <returns>The language and optional region identifier.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupPackageReference.GetBranch">
            <summary>Gets the build branch of the package.</summary>
            <returns>The build branch of the package.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupPackageReference.GetType">
            <summary>Gets the type of the package.</summary>
            <returns>The type of the package.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupPackageReference.GetUniqueId">
            <summary>
            Gets the unique identifier consisting of all defined tokens.
            </summary>
            <returns>The unique identifier consisting of all defined tokens.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupPackageReference.GetIsExtension">
            <summary>
            Gets a value indicating whether the package refers to an external extension.
            </summary>
            <returns>A value indicating whether the package refers to an external extension.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2">
            <summary>Information about an instance of a product.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetInstanceId">
            <summary>
            Gets the instance identifier (should match the name of the parent instance directory).
            </summary>
            <returns>The instance identifier.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetInstallDate">
            <summary>
            Gets the local date and time when the installation was originally installed.
            </summary>
            <returns>The local date and time when the installation was originally installed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetInstallationName">
            <summary>
            Gets the unique name of the installation, often indicating the branch and other information used for telemetry.
            </summary>
            <returns>The unique name of the installation, often indicating the branch and other information used for telemetry.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetInstallationPath">
            <summary>
            Gets the path to the installation root of the product.
            </summary>
            <returns>The path to the installation root of the product.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetInstallationVersion">
            <summary>
            Gets the version of the product installed in this instance.
            </summary>
            <returns>The version of the product installed in this instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetDisplayName(System.Int32)">
            <summary>
            Gets the display name (title) of the product installed in this instance.
            </summary>
            <param name="lcid">The LCID for the display name.</param>
            <returns>The display name (title) of the product installed in this instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetDescription(System.Int32)">
            <summary>
            Gets the description of the product installed in this instance.
            </summary>
            <param name="lcid">The LCID for the description.</param>
            <returns>The description of the product installed in this instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.ResolvePath(System.String)">
            <summary>
            Resolves the optional relative path to the root path of the instance.
            </summary>
            <param name="pwszRelativePath">A relative path within the instance to resolve, or NULL to get the root path.</param>
            <returns>The full path to the optional relative path within the instance. If the relative path is NULL, the root path will always terminate in a backslash.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetState">
            <summary>Gets the state of the instance.</summary>
            <returns>The state of the instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetPackages">
            <summary>
            Gets an array of package references registered to the instance.
            </summary>
            <returns>An array of package references registered to the instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetProduct">
            <summary>
            Gets a package reference to the product registered to the instance
            </summary>
            <returns>A package reference to the product registered to the instance. This may be null if <see cref="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetState" /> does not return <see cref="F:Microsoft.VisualStudio.Setup.Configuration.InstanceState.Complete" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetProductPath">
            <summary>
            Gets the relative path to the product application, if available.
            </summary>
            <returns>The relative path to the product application, if available.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetErrors">
            <summary>Gets the error state of the instance, if available.</summary>
            <returns>The error state of the instance, if available.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.IsLaunchable">
            <summary>
            Gets a value indicating whether the instance can be launched.
            </summary>
            <returns>Whether the instance can be launched.</returns>
            <remarks>
            An instance could have had errors during install but still be launched. Some features may not work correctly, but others will.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.IsComplete">
            <summary>
            Gets a value indicating whether the instance is complete.
            </summary>
            <returns>Whether the instance is complete.</returns>
            <remarks>
            An instance is complete if it had no errors during install, resume, or repair.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetProperties">
            <summary>Gets product-specific properties.</summary>
            <returns>An <see cref="T:Microsoft.VisualStudio.Setup.Configuration.ISetupPropertyStore" /> of product-specific properties, or null if no properties are defined.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2.GetEnginePath">
            <summary>
            Gets the directory path to the setup engine that installed the instance.
            </summary>
            <returns>The directory path to the setup engine that installed the instance.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance">
            <summary>Information about an instance of a product.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance.GetInstanceId">
            <summary>
            Gets the instance identifier (should match the name of the parent instance directory).
            </summary>
            <returns>The instance identifier.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance.GetInstallDate">
            <summary>
            Gets the local date and time when the installation was originally installed.
            </summary>
            <returns>The local date and time when the installation was originally installed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance.GetInstallationName">
            <summary>
            Gets the unique name of the installation, often indicating the branch and other information used for telemetry.
            </summary>
            <returns>The unique name of the installation, often indicating the branch and other information used for telemetry.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance.GetInstallationPath">
            <summary>
            Gets the path to the installation root of the product.
            </summary>
            <returns>The path to the installation root of the product.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance.GetInstallationVersion">
            <summary>
            Gets the version of the product installed in this instance.
            </summary>
            <returns>The version of the product installed in this instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance.GetDisplayName(System.Int32)">
            <summary>
            Gets the display name (title) of the product installed in this instance.
            </summary>
            <param name="lcid">The LCID for the display name.</param>
            <returns>The display name (title) of the product installed in this instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance.GetDescription(System.Int32)">
            <summary>
            Gets the description of the product installed in this instance.
            </summary>
            <param name="lcid">The LCID for the description.</param>
            <returns>The description of the product installed in this instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance.ResolvePath(System.String)">
            <summary>
            Resolves the optional relative path to the root path of the instance.
            </summary>
            <param name="pwszRelativePath">A relative path within the instance to resolve, or NULL to get the root path.</param>
            <returns>The full path to the optional relative path within the instance. If the relative path is NULL, the root path will always terminate in a backslash.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.Configuration.ISetupHelper">
            <summary>Helper functions.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupHelper.ParseVersion(System.String)">
            <summary>
            Parses a dotted quad version string into a 64-bit unsigned integer.
            </summary>
            <param name="version">The dotted quad version string to parse, e.g. 1.2.3.4.</param>
            <returns>A 64-bit unsigned integer representing the version. You can compare this to other versions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupHelper.ParseVersionRange(System.String,System.UInt64@,System.UInt64@)">
            <summary>
            Parses a dotted quad version string into a 64-bit unsigned integer.
            </summary>
            <param name="versionRange">The string containing 1 or 2 dotted quad version strings to parse, e.g. [1.0,) that means 1.0.0.0 or newer.</param>
            <param name="minVersion">A 64-bit unsigned integer representing the minimum version, which may be 0. You can compare this to other versions.</param>
            <param name="maxVersion">A 64-bit unsigned integer representing the maximum version, which may be MAXULONGLONG. You can compare this to other versions.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration2">
            <summary>
            Gets information about product instances set up on the machine.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration2.EnumInstances">
            <summary>Enumerates all completed product instances installed.</summary>
            <returns>An enumeration of installed product instances.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration2.GetInstanceForCurrentProcess">
            <summary>Gets the instance for the current process path.</summary>
            <returns>The instance for the current process path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration2.GetInstanceForPath(System.String)">
            <summary>Gets the instance for the given path.</summary>
            <param name="path">Path used to determine instance</param>
            <returns>The instance for the given path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration2.EnumAllInstances">
            <summary>Enumerates all product instances.</summary>
            <returns>An enumeration of all product instances.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration">
            <summary>
            Gets information about product instances set up on the machine.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration.EnumInstances">
            <summary>Enumerates all product instances installed.</summary>
            <returns>An enumeration of installed product instances.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration.GetInstanceForCurrentProcess">
            <summary>Gets the instance for the current process path.</summary>
            <returns>The instance for the current process path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration.GetInstanceForPath(System.String)">
            <summary>Gets the instance for the given path.</summary>
            <param name="path">Path used to determine instance</param>
            <returns>The instance for the given path.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.Configuration.InstanceState">
            <summary>
            The state of an <see cref="T:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance2" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Setup.Configuration.InstanceState.None">
            <summary>
            The instance state has not been determined.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Setup.Configuration.InstanceState.Local">
            <summary>
            The instance installation path exists.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Setup.Configuration.InstanceState.Registered">
            <summary>
            A product is registered to the instance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Setup.Configuration.InstanceState.NoRebootRequired">
            <summary>
            No reboot is required for the instance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Setup.Configuration.InstanceState.NoErrors">
            <summary>
            No errors were reported for the instance.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Setup.Configuration.InstanceState.Complete">
            <summary>
            The instance represents a complete install.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.Configuration.IEnumSetupInstances">
            <summary>
            A enumerator of installed <see cref="T:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance" /> objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.IEnumSetupInstances.Next(System.Int32,Microsoft.VisualStudio.Setup.Configuration.ISetupInstance[],System.Int32@)">
            <summary>
            Retrieves the next set of product instances in the enumeration sequence.
            </summary>
            <param name="celt">The number of product instances to retrieve.</param>
            <param name="rgelt">A pointer to an array of <see cref="T:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance" />.</param>
            <param name="pceltFetched">A pointer to the number of product instances retrieved. If celt is 1 this parameter may be NULL.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.IEnumSetupInstances.Skip(System.Int32)">
            <summary>
            Skips the next set of product instances in the enumeration sequence.
            </summary>
            <param name="celt">The number of product instances to skip.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.IEnumSetupInstances.Reset">
            <summary>Resets the enumeration sequence to the beginning.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.IEnumSetupInstances.Clone">
            <summary>
            Creates a new enumeration object in the same state as the current enumeration object: the new object points to the same place in the enumeration sequence.
            </summary>
            <returns>A pointer to a pointer to a new <see cref="T:Microsoft.VisualStudio.Setup.Configuration.IEnumSetupInstances" /> interface. If the method fails, this parameter is undefined.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.Configuration.ISetupPropertyStore">
            <summary>Provides named properties.</summary>
            <remarks>
            You can get this from an <see cref="T:Microsoft.VisualStudio.Setup.Configuration.ISetupInstance" />, <see cref="T:Microsoft.VisualStudio.Setup.Configuration.ISetupPackageReference" />, or derivative.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupPropertyStore.GetNames">
            <summary>
            Gets an array of property names in this property store.
            </summary>
            <returns>An array of property names in this property store.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupPropertyStore.GetValue(System.String)">
            <summary>
            Gets the value of a named property in this property store.
            </summary>
            <param name="pwszName">The name of the property to get.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.Configuration.ISetupErrorState">
            <summary>Information about the error state of the instance.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupErrorState.GetFailedPackages">
            <summary>Gets an array of failed package references.</summary>
            <returns>An array of failed package references.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupErrorState.GetSkippedPackages">
            <summary>Gets an array of skipped package references.</summary>
            <returns>An array of skipped package references.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.Configuration.ISetupFailedPackageReference">
            <summary>A reference to a failed package.</summary>
            <remarks>
            You can enumerate all properties of basic types by casting to an <see cref="T:Microsoft.VisualStudio.Setup.Configuration.ISetupPropertyStore" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupFailedPackageReference.GetId">
            <summary>Gets the general package identifier.</summary>
            <returns>The general package identifier.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupFailedPackageReference.GetVersion">
            <summary>Gets the version of the package.</summary>
            <returns>The version of the package.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupFailedPackageReference.GetChip">
            <summary>Gets the target process architecture of the package.</summary>
            <returns>The target process architecture of the package.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupFailedPackageReference.GetLanguage">
            <summary>Gets the language and optional region identifier.</summary>
            <returns>The language and optional region identifier.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupFailedPackageReference.GetBranch">
            <summary>Gets the build branch of the package.</summary>
            <returns>The build branch of the package.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupFailedPackageReference.GetType">
            <summary>Gets the type of the package.</summary>
            <returns>The type of the package.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupFailedPackageReference.GetUniqueId">
            <summary>
            Gets the unique identifier consisting of all defined tokens.
            </summary>
            <returns>The unique identifier consisting of all defined tokens.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupFailedPackageReference.GetIsExtension">
            <summary>
            Gets a value indicating whether the package refers to an external extension.
            </summary>
            <returns>A value indicating whether the package refers to an external extension.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.Configuration.ISetupInstanceCatalog">
            <summary>Information about a catalog used to install an instance.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstanceCatalog.GetCatalogInfo">
            <summary>Gets catalog information properties.</summary>
            <returns>An <see cref="T:Microsoft.VisualStudio.Setup.Configuration.ISetupPropertyStore"/> containing catalog information properties.</returns>
            <exception cref="T:System.Runtime.InteropServices.COMException">The property is not defined or invalid.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.Configuration.ISetupInstanceCatalog.IsPrerelease">
            <summary>Gets a value indicating whether the catalog is a prerelease.</summary>
            <returns>A value indicating whether the catalog is a prerelease.</returns>
            <exception cref="T:System.Runtime.InteropServices.COMException">The property is not defined or invalid.</exception>
        </member>
        <member name="T:System.GAC.ASM_DISPLAY_FLAGS">
            <summary>
            <see cref="M:System.GAC.IAssemblyName.GetDisplayName(System.Text.StringBuilder,System.UInt32@,System.GAC.ASM_DISPLAY_FLAGS)"/>
            </summary>
        </member>
        <member name="T:System.GAC.ASM_NAME">
            <summary>
            The ASM_NAME enumeration property ID describes the valid names of the name-value pairs in an assembly name. 
            See the .NET Framework SDK for a description of these properties. 
            </summary>
        </member>
        <member name="T:System.GAC.IASSEMBLYCACHE_UNINSTALL_DISPOSITION">
            <summary>
            <see cref="M:System.GAC.IAssemblyCache.UninstallAssembly(System.UInt32,System.String,System.GAC.FUSION_INSTALL_REFERENCE[],System.UInt32@)"/>
            </summary>
        </member>
        <member name="T:System.GAC.QUERYASMINFO_FLAG">
            <summary>
            <see cref="M:System.GAC.IAssemblyCache.QueryAssemblyInfo(System.UInt32,System.String,System.GAC.ASSEMBLY_INFO@)"/>
            </summary>
        </member>
        <member name="T:System.GAC.IASSEMBLYCACHE_INSTALL_FLAG">
            <summary>
            <see cref="M:System.GAC.IAssemblyCache.InstallAssembly(System.UInt32,System.String,System.GAC.FUSION_INSTALL_REFERENCE[])"/>
            </summary>
        </member>
        <member name="T:System.GAC.CREATE_ASM_NAME_OBJ_FLAGS">
            <summary>
            The CREATE_ASM_NAME_OBJ_FLAGS enumeration contains the following values: 
             CANOF_PARSE_DISPLAY_NAME - If this flag is specified, the szAssemblyName parameter is a full assembly name and is parsed to 
               the individual properties. If the flag is not specified, szAssemblyName is the "Name" portion of the assembly name.
             CANOF_SET_DEFAULT_VALUES - If this flag is specified, certain properties, such as processor architecture, are set to 
               their default values.
             <see cref="M:System.GAC.AssemblyCache.CreateAssemblyNameObject(System.GAC.IAssemblyName@,System.String,System.UInt32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="T:System.GAC.ASM_CACHE_FLAGS">
            <summary>
            The ASM_CACHE_FLAGS enumeration contains the following values: 
            ASM_CACHE_ZAP - Enumerates the cache of precompiled assemblies by using Ngen.exe.
            ASM_CACHE_GAC - Enumerates the GAC.
            ASM_CACHE_DOWNLOAD - Enumerates the assemblies that have been downloaded on-demand or that have been shadow-copied.
            </summary>
        </member>
        <member name="T:System.GAC.FUSION_INSTALL_REFERENCE">
            <summary>
            The FUSION_INSTALL_REFERENCE structure represents a reference that is made when an application has installed an 
            assembly in the GAC. 
            The fields of the structure are defined as follows: 
               cbSize - The size of the structure in bytes.
               dwFlags - Reserved, must be zero.
               guidScheme - The entity that adds the reference.
               szIdentifier - A unique string that identifies the application that installed the assembly.
               szNonCannonicalData - A string that is only understood by the entity that adds the reference. 
                   The GAC only stores this string.
            Possible values for the guidScheme field can be one of the following: 
               FUSION_REFCOUNT_MSI_GUID - The assembly is referenced by an application that has been installed by using 
                   Windows Installer. The szIdentifier field is set to MSI, and szNonCannonicalData is set to Windows Installer. 
                   This scheme must only be used by Windows Installer itself.
               FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID - The assembly is referenced by an application that appears in Add/Remove 
                   Programs. The szIdentifier field is the token that is used to register the application with Add/Remove programs.
               FUSION_REFCOUNT_FILEPATH_GUID - The assembly is referenced by an application that is represented by a file in 
                   the file system. The szIdentifier field is the path to this file.
               FUSION_REFCOUNT_OPAQUE_STRING_GUID - The assembly is referenced by an application that is only represented 
                   by an opaque string. The szIdentifier is this opaque string. The GAC does not perform existence checking 
                   for opaque references when you remove this.
            </summary>
        </member>
        <member name="T:System.GAC.ASSEMBLY_INFO">
            <summary>
            The ASSEMBLY_INFO structure represents information about an assembly in the assembly cache. 
            The fields of the structure are defined as follows: 
               cbAssemblyInfo - Size of the structure in bytes. Permits additions to the structure in future version of the .NET Framework.
               dwAssemblyFlags - Indicates one or more of the ASSEMBLYINFO_FLAG_* bits.
               uliAssemblySizeInKB - The size of the files that make up the assembly in kilobytes (KB).
               pszCurrentAssemblyPathBuf - A pointer to a string buffer that holds the current path of the directory that contains the 
                   files that make up the assembly. The path must end with a zero.
               cchBuf - Size of the buffer that the pszCurrentAssemblyPathBug field points to.
             dwAssemblyFlags can have one of the following values: 
               ASSEMBLYINFO_FLAG__INSTALLED - Indicates that the assembly is actually installed. Always set in current version of the 
                   .NET Framework.
               ASSEMBLYINFO_FLAG__PAYLOADRESIDENT - Never set in the current version of the .NET Framework.
            </summary>
        </member>
        <member name="M:System.GAC.AssemblyCache.CreateAssemblyCache(System.GAC.IAssemblyCache@,System.UInt32)">
            <summary>
            The key entry point for reading the assembly cache.
            </summary>
            <param name="ppAsmCache">Pointer to return IAssemblyCache</param>
            <param name="dwReserved">must be 0</param>
        </member>
        <member name="M:System.GAC.AssemblyCache.CreateAssemblyNameObject(System.GAC.IAssemblyName@,System.String,System.UInt32,System.IntPtr)">
            <summary>
            An instance of IAssemblyName is obtained by calling the CreateAssemblyNameObject API.
            </summary>
            <param name="ppAssemblyNameObj">Pointer to a memory location that receives the IAssemblyName pointer that is created.</param>
            <param name="szAssemblyName">A string representation of the assembly name or of a full assembly reference that is 
            determined by dwFlags. The string representation can be null.</param>
            <param name="dwFlags">Zero or more of the bits that are defined in the CREATE_ASM_NAME_OBJ_FLAGS enumeration.</param>
            <param name="pvReserved"> Must be null.</param>
        </member>
        <member name="M:System.GAC.AssemblyCache.CreateAssemblyEnum(System.GAC.IAssemblyEnum@,System.IntPtr,System.GAC.IAssemblyName,System.GAC.ASM_CACHE_FLAGS,System.IntPtr)">
            <summary>
            To obtain an instance of the CreateAssemblyEnum API, call the CreateAssemblyNameObject API.
            </summary>
            <param name="pEnum">Pointer to a memory location that contains the IAssemblyEnum pointer.</param>
            <param name="pUnkReserved">Must be null.</param>
            <param name="pName">An assembly name that is used to filter the enumeration. Can be null to enumerate all assemblies in the GAC.</param>
            <param name="dwFlags">Exactly one bit from the ASM_CACHE_FLAGS enumeration.</param>
            <param name="pvReserved">Must be NULL.</param>
        </member>
        <member name="M:System.GAC.AssemblyCache.CreateInstallReferenceEnum(System.GAC.IInstallReferenceEnum@,System.GAC.IAssemblyName,System.UInt32,System.IntPtr)">
            <summary>
            To obtain an instance of the CreateInstallReferenceEnum API, call the CreateInstallReferenceEnum API.
            </summary>
            <param name="ppRefEnum">A pointer to a memory location that receives the IInstallReferenceEnum pointer.</param>
            <param name="pName">The assembly name for which the references are enumerated.</param>
            <param name="dwFlags"> Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
        </member>
        <member name="M:System.GAC.AssemblyCache.GetCachePath(System.GAC.ASM_CACHE_FLAGS,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            The GetCachePath API returns the storage location of the GAC. 
            </summary>
            <param name="dwCacheFlags">Exactly one of the bits defined in the ASM_CACHE_FLAGS enumeration.</param>
            <param name="pwzCachePath">Pointer to a buffer that is to receive the path of the GAC as a Unicode string.</param>
            <param name="pcchPath">Length of the pwszCachePath buffer, in Unicode characters.</param>
        </member>
        <member name="P:System.GAC.AssemblyCache.FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            The assembly is referenced by an application that has been installed by using Windows Installer. 
            The szIdentifier field is set to MSI, and szNonCannonicalData is set to Windows Installer. 
            This scheme must only be used by Windows Installer itself.
            </summary>
        </member>
        <member name="P:System.GAC.AssemblyCache.FUSION_REFCOUNT_FILEPATH_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            
            </summary>
        </member>
        <member name="P:System.GAC.AssemblyCache.FUSION_REFCOUNT_OPAQUE_STRING_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            
            </summary>
        </member>
        <member name="P:System.GAC.AssemblyCache.FUSION_REFCOUNT_MSI_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            
            </summary>
        </member>
        <member name="M:System.GAC.AssemblyCache.CreateAssemblyCache">
            <summary>
            Use this method as a start for the GAC API
            </summary>
            <returns>IAssemblyCache COM interface</returns>
        </member>
        <member name="M:System.GAC.AssemblyCache.GetNextAssembly(System.GAC.IAssemblyEnum,System.GAC.IAssemblyName@)">
            <summary>
            Get the next assembly name in the current enumerator or fail
            </summary>
            <param name="enumerator"></param>
            <param name="name"></param>
            <returns>0 if the enumeration is not at its end</returns>
        </member>
        <member name="T:System.GAC.IAssemblyCache">
            <summary>
            The IAssemblyCache interface is the top-level interface that provides access to the GAC.
            </summary>
        </member>
        <member name="M:System.GAC.IAssemblyCache.UninstallAssembly(System.UInt32,System.String,System.GAC.FUSION_INSTALL_REFERENCE[],System.UInt32@)">
            <summary>
            The IAssemblyCache::UninstallAssembly method removes a reference to an assembly from the GAC. 
            If other applications hold no other references to the assembly, the files that make up the assembly are removed from the GAC. 
            </summary>
            <param name="dwFlags">No flags defined. Must be zero.</param>
            <param name="pszAssemblyName">The name of the assembly. A zero-ended Unicode string.</param>
            <param name="pRefData">A pointer to a FUSION_INSTALL_REFERENCE structure. Although this is not recommended, 
               this parameter can be null. The assembly is installed without an application reference, or all existing application 
               references are gone.</param>
            <param name="pulDisposition">Pointer to an integer that indicates the action that is performed by the function.</param>
            <returns>The return values are defined as follows: 
               S_OK - The assembly has been uninstalled.
               S_FALSE - The operation succeeded, but the assembly was not removed from the GAC. 
               The reason is described in pulDisposition.</returns>
             <remarks>
             NOTE: If pulDisposition is not null, pulDisposition contains one of the following values:
               IASSEMBLYCACHE_UNINSTALL_DISPOSITION_UNINSTALLED - The assembly files have been removed from the GAC.
               IASSEMBLYCACHE_UNINSTALL_DISPOSITION_STILL_IN_USE - An application is using the assembly. 
                 This value is returned on Microsoft Windows 95 and Microsoft Windows 98.
               IASSEMBLYCACHE_UNINSTALL_DISPOSITION_ALREADY_UNINSTALLED - The assembly does not exist in the GAC.
               IASSEMBLYCACHE_UNINSTALL_DISPOSITION_DELETE_PENDING - Not used.
               IASSEMBLYCACHE_UNINSTALL_DISPOSITION_HAS_INSTALL_REFERENCES - The assembly has not been removed from the GAC because 
                 another application reference exists.
               IASSEMBLYCACHE_UNINSTALL_DISPOSITION_REFERENCE_NOT_FOUND - The reference that is specified in pRefData is not found 
                 in the GAC.
             </remarks>
        </member>
        <member name="M:System.GAC.IAssemblyCache.QueryAssemblyInfo(System.UInt32,System.String,System.GAC.ASSEMBLY_INFO@)">
            <summary>
            The IAssemblyCache::QueryAssemblyInfo method retrieves information about an assembly from the GAC. 
            </summary>
            <param name="dwFlags">One of QUERYASMINFO_FLAG_VALIDATE or QUERYASMINFO_FLAG_GETSIZE: 
               *_VALIDATE - Performs validation of the files in the GAC against the assembly manifest, including hash verification 
                 and strong name signature verification.
               *_GETSIZE - Returns the size of all files in the assembly (disk footprint). If this is not specified, the 
                 ASSEMBLY_INFO::uliAssemblySizeInKB field is not modified.</param>
            <param name="pszAssemblyName"></param>
            <param name="pAsmInfo"></param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyCache.CreateAssemblyCacheItem(System.UInt32,System.IntPtr,System.GAC.IAssemblyCacheItem@,System.String)">
            <summary>
            Undocumented
            </summary>
            <param name="dwFlags"></param>
            <param name="pvReserved"></param>
            <param name="ppAsmItem"></param>
            <param name="pszAssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyCache.CreateAssemblyScavenger(System.Object@)">
            <summary>
            Undocumented
            </summary>
            <param name="ppAsmScavenger"></param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyCache.InstallAssembly(System.UInt32,System.String,System.GAC.FUSION_INSTALL_REFERENCE[])">
            <summary>
            The IAssemblyCache::InstallAssembly method adds a new assembly to the GAC. The assembly must be persisted in the file 
            system and is copied to the GAC.
            </summary>
            <param name="dwFlags">At most, one of the bits of the IASSEMBLYCACHE_INSTALL_FLAG_* values can be specified: 
               *_REFRESH - If the assembly is already installed in the GAC and the file version numbers of the assembly being 
               installed are the same or later, the files are replaced.
               *_FORCE_REFRESH - The files of an existing assembly are overwritten regardless of their version number.</param>
            <param name="pszManifestFilePath"> A string pointing to the dynamic-linked library (DLL) that contains the assembly manifest. 
             Other assembly files must reside in the same directory as the DLL that contains the assembly manifest.</param>
            <param name="pRefData">A pointer to a FUSION_INSTALL_REFERENCE that indicates the application on whose behalf the 
            assembly is being installed. Although this is not recommended, this parameter can be null, but this leaves the assembly 
            without any application reference.</param>
            <returns></returns>
        </member>
        <member name="T:System.GAC.IAssemblyName">
            <summary>
            The IAssemblyName interface represents an assembly name. An assembly name includes a predetermined set of name-value pairs. 
            The assembly name is described in detail in the .NET Framework SDK.
            </summary>
        </member>
        <member name="M:System.GAC.IAssemblyName.SetProperty(System.GAC.ASM_NAME,System.IntPtr,System.UInt32)">
            <summary>
            The IAssemblyName::SetProperty method adds a name-value pair to the assembly name, or, if a name-value pair 
            with the same name already exists, modifies or deletes the value of a name-value pair.
            </summary>
            <param name="propertyId">The ID that represents the name part of the name-value pair that is to be 
            added or to be modified. Valid property IDs are defined in the ASM_NAME enumeration.</param>
            <param name="pvProperty">A pointer to a buffer that contains the value of the property.</param>
            <param name="cbProperty">The length of the pvProperty buffer in bytes. If cbProperty is zero, the name-value pair 
            is removed from the assembly name.</param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyName.GetProperty(System.GAC.ASM_NAME,System.IntPtr,System.UInt32@)">
            <summary>
            The IAssemblyName::GetProperty method retrieves the value of a name-value pair in the assembly name that specifies the name.
            </summary>
            <param name="propertyId">The ID that represents the name of the name-value pair whose value is to be retrieved.
            Specified property IDs are defined in the ASM_NAME enumeration.</param>
            <param name="pvProperty">A pointer to a buffer that is to contain the value of the property.</param>
            <param name="pcbProperty">The length of the pvProperty buffer, in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyName.Finalize">
            <summary>
            The IAssemblyName::Finalize method freezes an assembly name. Additional calls to IAssemblyName::SetProperty are 
            unsuccessful after this method has been called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyName.GetDisplayName(System.Text.StringBuilder,System.UInt32@,System.GAC.ASM_DISPLAY_FLAGS)">
            <summary>
            The IAssemblyName::GetDisplayName method returns a string representation of the assembly name.
            </summary>
            <param name="szDisplayName">A pointer to a buffer that is to contain the display name. The display name is returned in Unicode.</param>
            <param name="pccDisplayName">The size of the buffer in characters (on input). The length of the returned display name (on return).</param>
            <param name="dwDisplayFlags">One or more of the bits defined in the ASM_DISPLAY_FLAGS enumeration: 
               *_VERSION - Includes the version number as part of the display name.
               *_CULTURE - Includes the culture.
               *_PUBLIC_KEY_TOKEN - Includes the public key token.
               *_PUBLIC_KEY - Includes the public key.
               *_CUSTOM - Includes the custom part of the assembly name.
               *_PROCESSORARCHITECTURE - Includes the processor architecture.
               *_LANGUAGEID - Includes the language ID.</param>
            <returns></returns>
            <remarks>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondefaultmarshalingforstrings.asp</remarks>
        </member>
        <member name="M:System.GAC.IAssemblyName.BindToObject(System.Guid@,System.Object,System.Object,System.String,System.Int64,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Undocumented
            </summary>
            <param name="refIID"></param>
            <param name="pUnkSink"></param>
            <param name="pUnkContext"></param>
            <param name="szCodeBase"></param>
            <param name="llFlags"></param>
            <param name="pvReserved"></param>
            <param name="cbReserved"></param>
            <param name="ppv"></param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyName.GetName(System.UInt32@,System.Text.StringBuilder)">
            <summary>
            The IAssemblyName::GetName method returns the name part of the assembly name.
            </summary>
            <param name="lpcwBuffer">Size of the pwszName buffer (on input). Length of the name (on return).</param>
            <param name="pwzName">Pointer to the buffer that is to contain the name part of the assembly name.</param>
            <returns></returns>
            <remarks>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondefaultmarshalingforstrings.asp</remarks>
        </member>
        <member name="M:System.GAC.IAssemblyName.GetVersion(System.UInt32@,System.UInt32@)">
            <summary>
            The IAssemblyName::GetVersion method returns the version part of the assembly name.
            </summary>
            <param name="pdwVersionHi">Pointer to a DWORD that contains the upper 32 bits of the version number.</param>
            <param name="pdwVersionLow">Pointer to a DWORD that contain the lower 32 bits of the version number.</param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyName.IsEqual(System.GAC.IAssemblyName,System.GAC.ASM_CMP_FLAGS)">
            <summary>
            The IAssemblyName::IsEqual method compares the assembly name to another assembly names.
            </summary>
            <param name="pName">The assembly name to compare to.</param>
            <param name="dwCmpFlags">Indicates which part of the assembly name to use in the comparison. 
            Values are one or more of the bits defined in the ASM_CMP_FLAGS enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyName.Clone(System.GAC.IAssemblyName@)">
            <summary>
            The IAssemblyName::Clone method creates a copy of an assembly name. 
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="T:System.GAC.IAssemblyEnum">
            <summary>
            The IAssemblyEnum interface enumerates the assemblies in the GAC.
            </summary>
        </member>
        <member name="M:System.GAC.IAssemblyEnum.GetNextAssembly(System.IntPtr,System.GAC.IAssemblyName@,System.UInt32)">
            <summary>
            The IAssemblyEnum::GetNextAssembly method enumerates the assemblies in the GAC. 
            </summary>
            <param name="pvReserved">Must be null.</param>
            <param name="ppName">Pointer to a memory location that is to receive the interface pointer to the assembly 
            name of the next assembly that is enumerated.</param>
            <param name="dwFlags">Must be zero.</param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyEnum.Reset">
            <summary>
            Undocumented. Best guess: reset the enumeration to the first assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyEnum.Clone(System.GAC.IAssemblyEnum@)">
            <summary>
            Undocumented. Create a copy of the assembly enum that is independently enumerable.
            </summary>
            <param name="ppEnum"></param>
            <returns></returns>
        </member>
        <member name="T:System.GAC.IInstallReferenceItem">
            <summary>
            The IInstallReferenceItem interface represents a reference that has been set on an assembly in the GAC. 
            Instances of IInstallReferenceIteam are returned by the IInstallReferenceEnum interface.
            </summary>
        </member>
        <member name="M:System.GAC.IInstallReferenceItem.GetReference(System.GAC.FUSION_INSTALL_REFERENCE[]@,System.UInt32,System.IntPtr)">
            <summary>
            The IInstallReferenceItem::GetReference method returns a FUSION_INSTALL_REFERENCE structure. 
            </summary>
            <param name="ppRefData">A pointer to a FUSION_INSTALL_REFERENCE structure. The memory is allocated by the GetReference 
            method and is freed when IInstallReferenceItem is released. Callers must not hold a reference to this buffer after the 
            IInstallReferenceItem object is released.</param>
            <param name="dwFlags">Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
            <returns></returns>
        </member>
        <member name="T:System.GAC.IInstallReferenceEnum">
            <summary>
            The IInstallReferenceEnum interface enumerates all references that are set on an assembly in the GAC.
            NOTE: References that belong to the assembly are locked for changes while those references are being enumerated. 
            </summary>
        </member>
        <member name="M:System.GAC.IInstallReferenceEnum.GetNextInstallReferenceItem(System.GAC.IInstallReferenceItem@,System.UInt32,System.IntPtr)">
            <summary>
            IInstallReferenceEnum::GetNextInstallReferenceItem returns the next reference information for an assembly. 
            </summary>
            <param name="ppRefItem">Pointer to a memory location that receives the IInstallReferenceItem pointer.</param>
            <param name="dwFlags">Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
            <returns></returns>
        </member>
        <member name="T:System.GAC.IAssemblyCacheItem">
            <summary>
            Undocumented. Probably only for internal use.
            <see cref="M:System.GAC.IAssemblyCache.CreateAssemblyCacheItem(System.UInt32,System.IntPtr,System.GAC.IAssemblyCacheItem@,System.String)"/>
            </summary>
        </member>
        <member name="M:System.GAC.IAssemblyCacheItem.CreateStream(System.UInt32,System.String,System.UInt32,System.UInt32,System.Runtime.InteropServices.ComTypes.IStream@,System.Int64@)">
            <summary>
            Undocumented.
            </summary>
            <param name="dwFlags"></param>
            <param name="pszStreamName"></param>
            <param name="dwFormat"></param>
            <param name="dwFormatFlags"></param>
            <param name="ppIStream"></param>
            <param name="puliMaxSize"></param>
        </member>
        <member name="M:System.GAC.IAssemblyCacheItem.Commit(System.UInt32,System.Int64@)">
            <summary>
            Undocumented.
            </summary>
            <param name="dwFlags"></param>
            <param name="pulDisposition"></param>
        </member>
        <member name="M:System.GAC.IAssemblyCacheItem.AbortItem">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:MimeTypes.MimeTypeMap">
            <remarks>https://github.com/samuelneff/MimeTypeMap</remarks>>
        </member>
    </members>
</doc>
